<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pg_clean/pg_clean.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/execRemote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxcnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datatype/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxcnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/poolmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/memnodes.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/nodemgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/twophase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>

<comment type="block">/*hash_create hash_search*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWOPHASE_RECORD_DIR</name></cpp:macro> <cpp:value>"pg_2pc"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type>  <name>transaction_threshold</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXIMUM_CLEAR_FILE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXIMUM_OUTPUT_FILE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIDPREFIX</name></cpp:macro> <cpp:value>"_$XC$"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CLEAN_TIME_INTERVAL</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAST_CLEAN_TIME_INTERVAL</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* should not clean twophase trans prepared in 3s */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAST_CHECK_TIME_INTERVAL</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* should not check twophase trans prepared in 1s */</comment>

<decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>clean_time_interval</name> <init>= <expr><name>DEFAULT_CLEAN_TIME_INTERVAL</name> <operator>*</operator> <name>USECS_PER_SEC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_GID</name></cpp:macro>               <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN_CHECK_TIMES_DEFAULT</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN_CHECK_INTERVAL_DEFAULT</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN_NODE_CHECK_TIMES</name></cpp:macro>       <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN_NODE_CHECK_INTERVAL</name></cpp:macro>    <cpp:value>500000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DBNAME</name></cpp:macro>	<cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_START_XID</name></cpp:macro> <cpp:value>"startxid:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_COMMIT_TIMESTAMP</name></cpp:macro> <cpp:value>"global_commit_timestamp:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_START_NODE</name></cpp:macro> <cpp:value>"startnode:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NODE</name></cpp:macro> <cpp:value>"nodes:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_XID</name></cpp:macro> <cpp:value>"\nxid:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_READONLY</name></cpp:macro> <cpp:value>"readonly"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIDSIZE</name></cpp:macro> <cpp:value>(200 + 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TWOPC_TXN</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_BUFF_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CMD_LENGTH</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIDFOUND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIDNOTFOUND</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XIDEXECFAIL</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEFOUND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEUNKOWN</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILENOTFOUND</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do{\
	x = NULL;\
	x##_count = 0;\
	x##_size = 0;\
}while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPALLOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do{\
    if (x##_size &lt; x##_count+1)\
    {\
        int temp_size = (x##_size &gt; 0) ? x##_size : 1;\
        if (NULL == x)\
        {\
			x = palloc0(2*temp_size*sizeof(*x));\
		}\
        else\
        {\
        	x = repalloc(x, 2*temp_size*sizeof(*x));\
        }\
    	x##_size = 2*temp_size;\
    }\
}while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALLOC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do{\
    RPALLOC(x);\
    x[x##_count] = y;\
    x##_count++;\
}while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do{\
    if (x##_size &gt; 0)\
    {\
        pfree(x);\
    }\
    x = NULL;\
    x##_count = 0;\
    x##_size = 0;\
}while(0);</cpp:value></cpp:define>
	
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENUM_TOCHAR_CASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>case x: return(#x);</cpp:value></cpp:define>

<comment type="block">/*data structures*/</comment>
<typedef>typedef <type><enum>enum <name>TXN_STATUS</name>
<block>{
	<decl><name>TXN_STATUS_INITIAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	<comment type="block">/* Initial */</comment>
	<decl><name>TXN_STATUS_PREPARED</name></decl>,
	<decl><name>TXN_STATUS_COMMITTED</name></decl>,
	<decl><name>TXN_STATUS_ABORTED</name></decl>,
	<decl><name>TXN_STATUS_INPROGRESS</name></decl>,
	<decl><name>TXN_STATUS_FAILED</name></decl>,		<comment type="block">/* Error detected while interacting with the node */</comment>
	<decl><name>TXN_STATUS_UNKNOWN</name></decl>	<comment type="block">/* Unknown: Frozen, running, or not started */</comment>
}</block></enum></type> <name>TXN_STATUS</name>;</typedef>


<typedef>typedef <type><enum>enum 
<block>{
	<decl><name>UNDO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>ABORT</name></decl>,
	<decl><name>COMMIT</name></decl>
}</block></enum></type> <name>OPERATION</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>TWOPHASE_FILE_EXISTS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>TWOPHASE_FILE_NOT_EXISTS</name></decl>,
    <decl><name>TWOPHASE_FILE_OLD</name></decl>, 
    <decl><name>TWOPHASE_FILE_ERROR</name></decl>
}</block></enum></type><name>TWOPHASE_FILE_STATUS</name>;</typedef>
	
<typedef>typedef <type><struct>struct <name>txn_info</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>			<name><name>gid</name><index>[<expr><name>MAX_GID</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name>			<modifier>*</modifier></type><name>xid</name></decl>;</decl_stmt>				<comment type="block">/* xid used in prepare */</comment>
	<decl_stmt><decl><type><name>TimestampTz</name>		<modifier>*</modifier></type><name>prepare_timestamp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>participants</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>				<name>origcoord</name></decl>;</decl_stmt>			<comment type="block">/* Original coordinator who initiated the txn */</comment>
    <decl_stmt><decl><type><name>bool</name></type>            <name>after_first_phase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>          <name>startxid</name></decl>;</decl_stmt>           <comment type="block">/* xid in Original coordinator */</comment>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isorigcoord_part</name></decl>;</decl_stmt>	<comment type="block">/* Is original coordinator a
										   participant? */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>num_dnparts</name></decl>;</decl_stmt>		<comment type="block">/* Number of participant datanodes */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>num_coordparts</name></decl>;</decl_stmt>		<comment type="block">/* Number of participant coordinators */</comment>
	<decl_stmt><decl><type><name>int</name>				<modifier>*</modifier></type><name>dnparts</name></decl>;</decl_stmt>			<comment type="block">/* Whether a node was participant in the txn */</comment>
	<decl_stmt><decl><type><name>int</name>				<modifier>*</modifier></type><name>coordparts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TXN_STATUS</name>		<modifier>*</modifier></type><name>txn_stat</name></decl>;</decl_stmt>			<comment type="block">/* Array for each nodes */</comment>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>				<comment type="block">/* Notice message for this txn. */</comment>
	<decl_stmt><decl><type><name>GlobalTimestamp</name></type>  <name>global_commit_timestamp</name></decl>;</decl_stmt>	<comment type="block">/* get global_commit_timestamp from node once it is committed*/</comment>

	<decl_stmt><decl><type><name>TXN_STATUS</name></type>		<name>global_txn_stat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OPERATION</name></type>		<name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>op_issuccess</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>is_readonly</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>belong_abnormal_node</name></decl>;</decl_stmt>
}</block></struct></type><name>txn_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>database_info</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>database_info</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>all_txn_info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
	txn_info *head_txn_info;
	txn_info *last_txn_info;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>database_info</name>;</typedef>

<typedef>typedef <type><struct>struct 
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier><modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>txn_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
}</block></struct></type> <name>print_txn_info</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gid_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gid_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>database</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>database_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>database_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>global_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>global_status_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>global_status_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
}</block></struct></type> <name>print_status</name>;</typedef>

<typedef>typedef <type><struct>struct 
<block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>	<comment type="block">/*slot[i][j] stores value of row i, colum j*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>slot_count</name></decl>;</decl_stmt>	<comment type="block">/*number of rows*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>slot_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>attnum</name></decl>;</decl_stmt>
}</block></struct></type><name>TupleTableSlots</name>;</typedef>

<comment type="block">/*global variable*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name>	        <modifier>*</modifier></type><name>cn_node_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name>	        <modifier>*</modifier></type><name>dn_node_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name>         <modifier>*</modifier></type><name>cn_health_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name>         <modifier>*</modifier></type><name>dn_health_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	        <name>cn_nodes_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	        <name>dn_nodes_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	        <name>pgxc_clean_node_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type>	        <name>my_nodeoid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> 
<name>database_info</name>       <modifier>*</modifier></type><name>head_database_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> 
<name>database_info</name>       <modifier>*</modifier></type><name>last_database_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		        <name>execute</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>                 <name>total_twopc_txn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimestampTz</name></type>         <name>current_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GlobalTimestamp</name></type>     <name>abnormal_time</name> <init>= <expr><name>InvalidGlobalTimestamp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>                <modifier>*</modifier></type><name>abnormal_nodename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Oid</name></type>                 <name>abnormal_nodeoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>                <name>clear_2pc_belong_node</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*function list*/</comment>
	<comment type="block">/*plugin entry function*/</comment>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_node_health</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> 
	 <name>execute_query_on_single_node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type> <name>tuples</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>DestroyTxnHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResetGlobalVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Oid</name></type>  
	 <name>getMyNodeoid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> 
	 <name>getDatabaseList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>TTSgetvalue</name><parameter_list>(<parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tup_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DropTupleTableSlots</name><parameter_list>(<parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type>
<name>Slots</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> 
	 <name>getTxnInfoOnNodesAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getTxnInfoOnNode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>add_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>owner</name></decl></parameter>, 
					  <parameter><decl><type><name>TimestampTz</name></type> <name>prepared_time</name></decl></parameter>, <parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TWOPHASE_FILE_STATUS</name></type> <name>GetTransactionPartNodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type>
	 <name>find_txn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>txn_info</name><modifier>*</modifier></type>	
	 <name>make_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>owner</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>database_info</name><modifier>*</modifier></type>	
	 <name>find_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>database_info</name><modifier>*</modifier></type>
	 <name>add_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>	 <name>find_node_index</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Oid</name></type>  <name>find_node_oid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getTxnInfoOnOtherNodesAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getTxnInfoOnOtherNodesForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>getTxnInfoOnOtherNodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Get2PCXidByGid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type> <name>transactionid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>Get2PCFile</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type> <name>transactionid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get2PCInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>getTxnStatus</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>recover2PCForDatabaseAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>recover2PCForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type> <name>db_info</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>    
static bool 
	 setMaintenanceMode(bool status);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>bool</name></type> <name>send_query_clean_transaction</name><parameter_list>(<parameter><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>finish_cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>check_2pc_belong_node</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>check_node_participate</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>check_2pc_start_from_node</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>recover2PC</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TXN_STATUS</name></type> 
	 <name>check_txn_global_status</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>clean_2PC_iscommit</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_commit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_check</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>clean_2PC_files</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Init_print_txn_info</name><parameter_list>(<parameter><decl><type><name>print_txn_info</name> <modifier>*</modifier></type><name>print_txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Init_print_stats_all</name><parameter_list>(<parameter><decl><type><name>print_status</name> <modifier>*</modifier></type><name>pstatus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Init_print_stats</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>print_status</name> <modifier>*</modifier></type> <name>pstatus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
	 <name>txn_status_to_string</name><parameter_list>(<parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
	 <name>txn_op_to_string</name><parameter_list>(<parameter><decl><type><name>OPERATION</name></type> <name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> 
     <name>CheckFirstPhase</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> 
     <name>get_transaction_handles</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgxc_handles</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> 
     <name>get_node_handles</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pgxc_handles</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>Datum</name></type>	<name>pg_clean_execute</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_clean_execute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>	<name>pg_clean_execute</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_CONTROL_ATTR_NUM</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>FuncCallContext</name> 	<modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>			<name>tuple</name></decl>;</decl_stmt>		
	<decl_stmt><decl><type><name>print_txn_info</name>		<modifier>*</modifier></type><name>print_txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> 			<modifier>*</modifier></type><name>temp_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_gid</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_status</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_op</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_op_issuccess</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can only called on coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"global_transaction_status"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"operation"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"operation_status"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>print_txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>print_txn</name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	
		
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mycontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>,
												  <argument><expr><literal type="string">"clean_check"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
        <comment type="block">/*clear Global*/</comment>
        <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>execute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>clean_time_interval</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>LEAST_CLEAN_TIME_INTERVAL</name> <operator>&gt;</operator> <name>clean_time_interval</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"least clean time interval is %ds"</literal></expr></argument>,
                <argument><expr><name>LEAST_CLEAN_TIME_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>clean_time_interval</name> <operator>=</operator> <name>LEAST_CLEAN_TIME_INTERVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>clean_time_interval</name> <operator>*=</operator> <name>USECS_PER_SEC</name></expr>;</expr_stmt>
        
		<comment type="block">/*get node list*/</comment>
		<expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*add my database info*/</comment>
		<expr_stmt><expr><call><name>add_database_info</name><argument_list>(<argument><expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get all info of 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get txn info on other nodes all*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnOtherNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*recover all 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>recover2PCForDatabaseAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Init_print_txn_info</name><argument_list>(<argument><expr><name>print_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>print_txn</name><operator>-&gt;</operator><name>mycontext</name></name> <operator>=</operator> <name>mycontext</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name>print_txn</name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>print_txn</name><operator>-&gt;</operator><name>txn_count</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>temp_txn</name> <operator>=</operator> <name><name>print_txn</name><operator>-&gt;</operator><name>txn</name><index>[<expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_gid</name></expr></argument>, <argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_status</name></expr></argument>, <argument><expr><call><name>txn_status_to_string</name><argument_list>(<argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op</name></expr></argument>, <argument><expr><call><name>txn_op_to_string</name><argument_list>(<argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>temp_txn</name><operator>-&gt;</operator><name>op_issuccess</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		
		<comment type="line">//MemoryContextDelete(print_txn-&gt;mycontext);</comment>
		<expr_stmt><expr><call><name>DestroyTxnHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * clear 2pc after oss detect abnormal node and restart it , 
 * only clear 2pc belong the abnormal node and before the abnormal time
 */</comment>
<function_decl><type><name>Datum</name></type>	<name>pg_clean_execute_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_clean_execute_on_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>	<name>pg_clean_execute_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_CONTROL_ATTR_NUM</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>FuncCallContext</name> 	<modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>			<name>tuple</name></decl>;</decl_stmt>		
	<decl_stmt><decl><type><name>print_txn_info</name>		<modifier>*</modifier></type><name>print_txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> 			<modifier>*</modifier></type><name>temp_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_gid</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_status</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_op</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>txn_op_issuccess</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can only called on coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"global_transaction_status"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"operation"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"operation_status"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>print_txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>print_txn</name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	
		
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mycontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>,
												  <argument><expr><literal type="string">"clean_check"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
        <comment type="block">/*clear Global*/</comment>
        <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>execute</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>clear_2pc_belong_node</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>abnormal_nodename</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>abnormal_nodeoid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>abnormal_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>abnormal_nodeoid</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean_execute_on_node, cannot clear 2pc of invalid nodename '%s'"</literal></expr></argument>, <argument><expr><name>abnormal_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>abnormal_time</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>current_time</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>abnormal_time</name> <operator>&gt;=</operator> <name>current_time</name> <operator>-</operator> <name>LEAST_CLEAN_TIME_INTERVAL</name> <operator>*</operator> <name>USECS_PER_SEC</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean_execute_on_node, least clean time interval is %ds, "</literal>
                <literal type="string">"abnormal time: "</literal> <name>INT64_FORMAT</name> <literal type="string">", current_time: "</literal> <name>INT64_FORMAT</name></expr></argument>,
                <argument><expr><name>LEAST_CLEAN_TIME_INTERVAL</name></expr></argument>, <argument><expr><name>abnormal_time</name></expr></argument>, <argument><expr><name>current_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
		<comment type="block">/*get node list*/</comment>
		<expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*add my database info*/</comment>
		<expr_stmt><expr><call><name>add_database_info</name><argument_list>(<argument><expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get all info of 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get txn info on other nodes all*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnOtherNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*recover all 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>recover2PCForDatabaseAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Init_print_txn_info</name><argument_list>(<argument><expr><name>print_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>print_txn</name><operator>-&gt;</operator><name>mycontext</name></name> <operator>=</operator> <name>mycontext</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name>print_txn</name> <operator>=</operator> <operator>(</operator><name>print_txn_info</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>print_txn</name><operator>-&gt;</operator><name>txn_count</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>temp_txn</name> <operator>=</operator> <name><name>print_txn</name><operator>-&gt;</operator><name>txn</name><index>[<expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_gid</name></expr></argument>, <argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_status</name></expr></argument>, <argument><expr><call><name>txn_status_to_string</name><argument_list>(<argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op</name></expr></argument>, <argument><expr><call><name>txn_op_to_string</name><argument_list>(<argument><expr><name><name>temp_txn</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>temp_txn</name><operator>-&gt;</operator><name>op_issuccess</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>txn_op_issuccess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>DestroyTxnHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>abnormal_nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function_decl><type><name>Datum</name></type>	<name>pg_clean_check_txn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_clean_check_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>	<name>pg_clean_check_txn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCESS_CONTROL_ATTR_NUM</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_CONTROL_ATTR_NUM</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>FuncCallContext</name> 	<modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>			<name>tuple</name></decl>;</decl_stmt>		
	<decl_stmt><decl><type><name>print_status</name>		<modifier>*</modifier></type><name>pstatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name>execute</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can only called on coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>ACCESS_CONTROL_ATTR_NUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gid"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"global_transaction_status"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"transaction_status_on_allnodes"</literal></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>print_status</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>print_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pstatus</name> <operator>=</operator> <operator>(</operator><name>print_status</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name></name> <operator>=</operator> <name><name>pstatus</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>mycontext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mycontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>,
												  <argument><expr><literal type="string">"clean_check"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*clear Global*/</comment>
        <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>clean_time_interval</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>LEAST_CHECK_TIME_INTERVAL</name> <operator>&gt;</operator> <name>clean_time_interval</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"least check time interval is %ds"</literal></expr></argument>,
				<argument><expr><name>LEAST_CHECK_TIME_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>clean_time_interval</name> <operator>=</operator> <name>LEAST_CHECK_TIME_INTERVAL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>clean_time_interval</name> <operator>*=</operator> <name>USECS_PER_SEC</name></expr>;</expr_stmt>

		<comment type="block">/*get node list*/</comment>
		<expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cn_node_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dn_node_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean:fail to get cn_node_list and dn_node_list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get all database info*/</comment>
		<expr_stmt><expr><call><name>getDatabaseList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get all info of 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*get txn info on other nodes all*/</comment>
		<expr_stmt><expr><call><name>getTxnInfoOnOtherNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*recover all 2PC transactions*/</comment>
		<expr_stmt><expr><call><name>Init_print_stats_all</name><argument_list>(<argument><expr><name>pstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>mycontext</name></name> <operator>=</operator> <name>mycontext</name></expr>;</expr_stmt>
	
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name>pstatus</name> <operator>=</operator> <operator>(</operator><name>print_status</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		MemoryContextDelete(pstatus-&gt;mycontext);
		DropDatabaseInfo();
		*/</comment>
		<expr_stmt><expr><call><name>DestroyTxnHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyTxnHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>dbinfo</name> <init>= <expr><name>head_database_info</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>dbinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>dbinfo</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dbinfo</name> <operator>=</operator> <name><name>dbinfo</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetGlobalVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>cn_node_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dn_node_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cn_nodes_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>dn_nodes_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>execute</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>total_twopc_txn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>head_database_info</name> <operator>=</operator> <name>last_database_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>current_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>abnormal_time</name> <operator>=</operator> <name>InvalidGlobalTimestamp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>abnormal_nodename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>abnormal_nodeoid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>clear_2pc_belong_node</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Oid</name></type> <name>getMyNodeoid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
 * execute_query_on_single_node -- execute query on certain node and get results
 * input: 	node oid, execute query, number of attribute in results, results
 * return:	(Datum) 0
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>execute_query_on_single_node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>)</parameter_list>  <comment type="line">//delete numnodes, delete nodelist, insert node</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>issuccess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*check health of node*/</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>ishealthy</name> <init>= <expr><call><name>check_node_health</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
	<decl_stmt><decl><type><name>EState</name>				<modifier>*</modifier></type><name>estate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>		<name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteQuery</name>			<modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteQueryState</name>	<modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name>		<modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name>			   		<modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ntype</name> <init>= <expr><name>PGXC_NODE_NONE</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Make up RemoteQuery plan node
	 */</comment>
	<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>RemoteQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>combine_type</name></name> <operator>=</operator> <name>COMBINE_TYPE_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_nodes</name></name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name>EXEC_ON_NONE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_nodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_nodes</name><operator>-&gt;</operator><name>nodeList</name></name></expr></argument>,
		<argument><expr><call><name>PGXCNodeGetNodeId</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>PGXC_NODE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unknown node Oid: %u"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ntype</name> <operator>==</operator> <name>PGXC_NODE_COORDINATOR</name></expr>)</condition> 
	<block>{<block_content>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name>EXEC_ON_COORDS</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name>EXEC_ON_DATANODES</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>sql_statement</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>query</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>force_autocommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * We only need the target entry to determine result data type.
	 * So create dummy even if real expression is a function.
	 */</comment>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;=</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name></expr></argument>,
										  <argument><expr><call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>dummy</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="block">/* prepare to execute */</comment>
	<expr_stmt><expr><name>estate</name> <operator>=</operator> <call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name></name> <operator>=</operator> <call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>ExecInitRemoteQuery</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*execute query on node when node is healthy*/</comment>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	
	<if_stmt><if>if <condition>(<expr><name>ishealthy</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i_tuple</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i_attnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>issuccess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecRemoteQuery</name><argument_list>(<argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name>RPALLOC</name><argument_list>(<argument><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i_tuple</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>attnum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
			<for>for <control>(<init><expr><name>i_attnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_attnum</name> <operator>&lt;</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>i_attnum</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<comment type="block">/*if (result-&gt;tts_values[i_attnum] != (Datum)0)*/</comment>
				<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i_attnum</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i_tuple</name></expr>]</index><index>[<expr><name>i_attnum</name></expr>]</index></name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>DatumGetTextP</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i_attnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i_tuple</name></expr>]</index><index>[<expr><name>i_attnum</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name><name>tuples</name><operator>-&gt;</operator><name>slot_count</name></name><operator>++</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecRemoteQuery</name><argument_list>(<argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i_tuple</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ExecEndRemoteQuery</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><ternary><condition><expr><name>issuccess</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_node_health</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ishealthy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>PoolPingNodeRecheck</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PgxcNodeGetHealthMap</name><argument_list>(<argument><expr><name>cn_node_list</name></expr></argument>, <argument><expr><name>dn_node_list</name></expr></argument>, 
						<argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, 
						<argument><expr><name>cn_health_map</name></expr></argument>, <argument><expr><name>dn_health_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cn_node_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>node_oid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ishealthy</name> <operator>=</operator> <name><name>cn_health_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>dn_node_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>node_oid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ishealthy</name> <operator>=</operator> <name><name>dn_health_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>ishealthy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getDatabaseList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_db</name> <init>= <expr><literal type="string">"select datname::text from pg_database;"</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/*add datname into tail of head_database_info*/</comment>
	<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>, <argument><expr><name>query_db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_db</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result_db</name><operator>.</operator><name>slot_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>add_database_info</name><argument_list>(<argument><expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: failed get database list on node %s"</literal></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * TTSgetvalue -- get attribute from TupleTableSlots
 * input: 	result, index of tuple, index of field
 * return:	attribute result
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>TTSgetvalue</name><parameter_list>(<parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tup_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>tup_num</name></expr>]</index><index>[<expr><name>field_num</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DropTupleTableSlots</name><parameter_list>(<parameter><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type>
<name>Slots</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>Slots</name><operator>-&gt;</operator><name>slot_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>Slots</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>Slots</name><operator>-&gt;</operator><name>attnum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>Slots</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>Slots</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>Slots</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RFREE</name><argument_list>(<argument><expr><name><name>Slots</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Slots</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getTxnInfoOnNodesAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>current_time</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*upload 2PC transaction from CN*/</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>total_twopc_txn</name> <operator>&gt;=</operator> <name>MAX_TWOPC_TXN</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>getTxnInfoOnNode</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*upload 2PC transaction from DN*/</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>total_twopc_txn</name> <operator>&gt;=</operator> <name>MAX_TWOPC_TXN</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>getTxnInfoOnNode</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTxnInfoOnNode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>execute_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>query_execute</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_txn_status</name> <init>= <expr><literal type="string">"select transaction::text, gid::text, owner::text, database::text, timestamptz_out(prepared)::text "</literal>
										  <literal type="string">"from pg_prepared_xacts;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_txn_status_execute</name> <init>= <expr><literal type="string">"select transaction::text, gid::text, owner::text, database::text, timestamptz_out(prepared)::text "</literal>
										  		  <literal type="string">"from pg_prepared_xacts where database = '%s';"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>query_execute</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>query_txn_status_execute</name></expr></argument>, <argument><expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>execute</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>execute_res</name> <operator>=</operator> <call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>query_execute</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>execute_res</name> <operator>=</operator> <call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>query_txn_status</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>execute_res</name> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result_txn</name><operator>.</operator><name>slot_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>	<name>xid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>	<name>gid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>	<name>owner</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>	<name>datname</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TimestampTz</name></type>	<name>prepared_time</name></decl>;</decl_stmt>
			
			<comment type="block">/*read results from each tuple*/</comment>
			<expr_stmt><expr><name>xid</name>		<operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>gid</name>		<operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>owner</name>	<operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>datname</name>	<operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>prepared_time</name> <operator>=</operator> <call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>timestamptz_in</name></expr></argument>,
												<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>gid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"node(%d) gid is null, xid: %d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>owner</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"node(%d) owner is null, xid: %d, gid: %s"</literal></expr></argument>,
					<argument><expr><name>node</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>datname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"node(%d) db name is null, xid: %d, gid: %s, owner: %s"</literal></expr></argument>,
					<argument><expr><name>node</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*add txn to database*/</comment>
			<expr_stmt><expr><call><name>add_txn_info</name><argument_list>(<argument><expr><name>datname</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>prepared_time</name></expr></argument>, <argument><expr><name>TXN_STATUS_PREPARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>total_twopc_txn</name> <operator>&gt;=</operator> <name>MAX_TWOPC_TXN</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: failed get database list on node %s"</literal></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, 
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>TimestampTz</name></type> <name>prepared_time</name></decl></parameter>, <parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>nodeidx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>txn</name> <operator>=</operator> <call><name>find_txn</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>make_txn_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>total_twopc_txn</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*no more memory*/</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"there is no more memory for palloc a 2PC transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <name>prepared_time</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nodeidx</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>nodeidx</name><operator>-</operator><name>cn_nodes_num</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>TWOPHASE_FILE_STATUS</name></type> <name>GetTransactionPartNodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*get all the participates and initiate to each transactions*/</comment>
	<decl_stmt><decl><type><name>TWOPHASE_FILE_STATUS</name></type> <name>res</name> <init>= <expr><name>TWOPHASE_FILE_NOT_EXISTS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>partnodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>startxid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_startxid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_timestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>	 <name>temp_nodeoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>temp_nodetype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>temp_nodeidx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>stmt</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"select pgxc_get_2pc_file('%s')::text"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
	<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>slot_count</name></name> <operator>&amp;&amp;</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
            TTSgetvalue(&amp;result, 0, 0) &amp;&amp; 
            TTSgetvalue(&amp;result, 0, 1) &amp;&amp; 
            TTSgetvalue(&amp;result, 0, 2))
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
            <expr_stmt><expr><name>file_content</name> <operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file_content</name></expr></argument>, <argument><expr><name>GET_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>=</operator> <name>TXN_STATUS_COMMITTED</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <return>return <expr><name>TWOPHASE_FILE_EXISTS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file_content</name></expr></argument>, <argument><expr><name>GET_START_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>str_startxid</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file_content</name></expr></argument>, <argument><expr><name>GET_START_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>partnodes</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file_content</name></expr></argument>, <argument><expr><name>GET_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>file_content</name></expr></argument>, <argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* get the last global_commit_timestamp */</comment>
            <while>while <condition>(<expr><name>temp</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>str_timestamp</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>temp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            
            <if_stmt><if>if <condition>(<expr><name>startnode</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>startnode</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_START_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>startnode</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>startnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>str_startxid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>str_startxid</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_START_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>str_startxid</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>str_startxid</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>startxid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str_startxid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>startxid</name></name> <operator>=</operator> <name>startxid</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>partnodes</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>partnodes</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>partnodes</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>partnodes</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>participants</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>partnodes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>participants</name></name></expr></argument>, <argument><expr><name>partnodes</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>partnodes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>str_startxid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>TWOPHASE_FILE_OLD</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>res</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>partnodes</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>TWOPHASE_FILE_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>res</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>str_timestamp</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>str_timestamp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>str_timestamp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>str_timestamp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>str_timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"get 2pc txn:%s partnodes in nodename: %s (nodeoid:%u) result: partnodes:%s, startnode:%s, startnodeoid:%u, startxid:%u"</literal></expr></argument>, 
                <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>partnodes</name></expr></argument>, <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></argument>, <argument><expr><name>startxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* in explicit transaction startnode participate the transaction */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>partnodes</name></expr></argument>, <argument><expr><name>startnode</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>isorigcoord_part</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>isorigcoord_part</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TWOPHASE_FILE_EXISTS</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>partnodes</name></expr></argument>,<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>temp</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*check node type*/</comment>
				<expr_stmt><expr><name>temp_nodeoid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>temp_nodeoid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>TWOPHASE_FILE_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>temp_nodetype</name> <operator>=</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>temp_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>temp_nodeidx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>temp_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<switch>switch <condition>(<expr><name>temp_nodetype</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'C'</literal></expr>:</case>
						<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>temp_nodeidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'D'</literal></expr>:</case>
						<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>temp_nodeidx</name><operator>-</operator><name>cn_nodes_num</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><literal type="string">"nodetype of %s is not 'C' or 'D'"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: failed get database list on node %s"</literal></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TWOPHASE_FILE_ERROR</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>txn_info</name> <modifier>*</modifier></type><name>find_txn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>cur_db</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_db</name></expr>;</condition> <incr><expr><name>cur_db</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	  for (cur_txn = cur_db-&gt;head_txn_info; cur_txn; cur_txn = cur_txn-&gt;next)
	  {
		  if (0 == strcmp(cur_txn-&gt;gid, gid))
			  return cur_txn;
	  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>hash_search</name><argument_list>(<argument><expr><name><name>cur_db</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>gid</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>txn</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>txn_info</name><modifier>*</modifier></type> <name>make_txn_info</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn_insert_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>dbinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dbinfo</name> <operator>=</operator> <call><name>add_database_info</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">//txn-&gt;next = NULL;</comment>
	
	<comment type="line">//txn-&gt;gid = (char *)palloc0(strlen(gid)+1);</comment>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>=</operator> <operator>(</operator><name>TXN_STATUS</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>=</operator> <operator>(</operator><name>TimestampTz</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimestampTz</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>==</operator> <name>NULL</name>
		<operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>coordparts</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>dnparts</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>txn_insert_pos</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>hash_search</name><argument_list>(<argument><expr><name><name>dbinfo</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr></argument>, 
                   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txn_insert_pos</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>        
	if (dbinfo-&gt;head_txn_info == NULL)
	{
		dbinfo-&gt;head_txn_info = dbinfo-&gt;last_txn_info = txn;
	}
	else
	{
		dbinfo-&gt;last_txn_info-&gt;next = txn;
		dbinfo-&gt;last_txn_info = txn;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>txn_insert_pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>database_info</name> <modifier>*</modifier></type><name>find_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database_info</name> <init>= <expr><name>head_database_info</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition><expr><name>cur_database_info</name></expr>;</condition> <incr><expr><name>cur_database_info</name> <operator>=</operator> <name><name>cur_database_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>cur_database_info</name><operator>-&gt;</operator><name>database_name</name></name> <operator>&amp;&amp;</operator>
		   <name>database_name</name> <operator>&amp;&amp;</operator> 
		   <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur_database_info</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>, <argument><expr><name>database_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>cur_database_info</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>database_info</name> <modifier>*</modifier></type><name>add_database_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASHCTL</name></type> <name>txn_ctl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tabname</name><index>[<expr><name>STRING_BUFF_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>find_database_info</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* Already in the list */</comment>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>database_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>database_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>, <argument><expr><name>database_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>    
	rv-&gt;head_txn_info = NULL;
	rv-&gt;last_txn_info = NULL;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>, <argument><expr><name>STRING_BUFF_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s txn info"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>MAX_GID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>all_txn_info</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, 
                                   <argument><expr><operator>&amp;</operator><name>txn_ctl</name></expr></argument>, <argument><expr><name>HASH_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>head_database_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head_database_info</name> <operator>=</operator> <name>last_database_info</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>last_database_info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_database_info</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
		<return>return <expr><name>rv</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_node_index</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>node_oid</name> <operator>==</operator> <name><name>cn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>node_oid</name> <operator>==</operator> <name><name>dn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>i</name><operator>+</operator><name>cn_nodes_num</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type> <name>find_node_oid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>node_idx</name> <operator>&lt;</operator> <name>cn_nodes_num</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cn_node_list</name><index>[<expr><name>node_idx</name></expr>]</index></name></expr> </then><else>:
									   <expr><name><name>dn_node_list</name><index>[<expr><name>node_idx</name><operator>-</operator><name>cn_nodes_num</name></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTxnInfoOnOtherNodesAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>cur_database</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_database</name></expr>;</condition> <incr><expr><name>cur_database</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>getTxnInfoOnOtherNodesForDatabase</name><argument_list>(<argument><expr><name>cur_database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTxnInfoOnOtherNodesForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type><name>database</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name><name>database</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>cur_txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>getTxnInfoOnOtherNodes</name><argument_list>(<argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	for (cur_txn = database-&gt;head_txn_info; cur_txn; cur_txn = cur_txn-&gt;next)
	{
		getTxnInfoOnOtherNodes(cur_txn);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getTxnInfoOnOtherNodes</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>node_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TWOPHASE_FILE_STATUS</name></type> <name>status</name> <init>= <expr><name>TWOPHASE_FILE_NOT_EXISTS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>node_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>transactionid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>gid</name><index>[<expr><name>MAX_GID</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetTransactionPartNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetTransactionPartNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>cn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>TWOPHASE_FILE_EXISTS</name> <operator>==</operator> <name>status</name> <operator>||</operator> 
                    <name>TWOPHASE_FILE_OLD</name> <operator>==</operator> <name>status</name> <operator>||</operator> 
                    <name>TWOPHASE_FILE_ERROR</name> <operator>==</operator> <name>status</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <name><name>cn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetTransactionPartNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>dn_node_list</name><index>[<expr><name>ii</name> <operator>-</operator> <name>cn_nodes_num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>TWOPHASE_FILE_EXISTS</name> <operator>==</operator> <name>status</name> <operator>||</operator> 
                    <name>TWOPHASE_FILE_OLD</name> <operator>==</operator> <name>status</name> <operator>||</operator> 
                    <name>TWOPHASE_FILE_ERROR</name> <operator>==</operator> <name>status</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <name><name>dn_node_list</name><index>[<expr><name>ii</name> <operator>-</operator> <name>cn_nodes_num</name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        
        <comment type="block">/* since there may be explicit readonly  twophase transactions */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>TWOPHASE_FILE_EXISTS</name> <operator>==</operator> <name>status</name> <operator>&amp;&amp;</operator> 
            <name>InvalidGlobalTimestamp</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>&amp;&amp;</operator> 
            <name>node_oid</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetTransactionPartNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>TWOPHASE_FILE_EXISTS</name> <operator>!=</operator> <name>status</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * if 2pc file not exists in all nodes, the trans did not pass the prepared phase, 
         * 
         */</comment>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>TWOPHASE_FILE_NOT_EXISTS</name> <operator>==</operator> <name>status</name><operator>)</operator></expr> ?</condition><then> 
                                <expr><name>TXN_STATUS_ABORTED</name></expr> </then><else>: <expr><name>TXN_STATUS_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>


    <comment type="block">/* judge the range of global status */</comment>
    <expr_stmt><expr><call><name>CheckFirstPhase</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*check node ii is 'C' or 'D'*/</comment>
            <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <call><name>find_node_oid</name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>node_oid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>node_type</name> <operator>=</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name> <operator>-</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<comment type="block">/*check coordparts or dnparts*/</comment>
			<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Get2PCXidByGid</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transactionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>XIDFOUND</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>transactionid</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>getTxnStatus</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>XIDNOTFOUND</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_COMMITTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*get xid by gid on node_oid*/</comment>
<function><type><name>int</name></type> <name>Get2PCXidByGid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>transactionid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>XIDFOUND</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>xid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"select pgxc_get_2pc_xid('%s')::text;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>stmt</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*if exist get xid by gid on node_oid*/</comment>
	<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>slot_count</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>transactionid</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>xid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XIDNOTFOUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XIDNOTFOUND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XIDNOTFOUND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>XIDEXECFAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Get2PCFile</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node_oid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type> <name>transactionid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FILEFOUND</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"select pgxc_get_2pc_file('%s')::text;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>stmt</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*if exist get xid by gid on node_oid*/</comment>
	<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>slot_count</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FILENOTFOUND</name></expr>;</expr_stmt>
			</block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FILEFOUND</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FILENOTFOUND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FILEUNKOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>getTxnStatus</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>				<name>node_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>stmt</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>			<modifier>*</modifier></type><name>att1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"SELECT pgxc_is_committed('%d'::xid)::text"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>node_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>node_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node_oid</name> <operator>=</operator> <call><name>find_node_oid</name><argument_list>(<argument><expr><name>node_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>att1</name> <operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>att1</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>att1</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_COMMITTED</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_ABORTED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_INITIAL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>=</operator> <name>TXN_STATUS_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>get2PCInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>filestate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>get_2pc_info_from_cache</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>info</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"try to get 2pc info from disk, tid: %s"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>TWOPHASE_RECORD_DIR</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
    	<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filestate</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    	<block>{<block_content>
    		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
    			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
    			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not get status of file \"%s\""</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>filestate</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>size</name></expr>)</condition> 
        <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    	<block>{<block_content>   
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
    			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
    			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\" for read"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt> 

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FileRead</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>WAIT_EVENT_BUFFILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition>
    	<block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
    			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
    			<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read file \"%s\""</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_file</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>t_result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_result</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_nodes</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_nodes</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>GET_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>nodename</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodename</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t_result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_result</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_startnode</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_startnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_startnode</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>GET_START_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>nodename</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodename</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_START_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t_result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_result</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_startxid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_startxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_startxid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startxid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>startxid</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>GET_START_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>startxid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>startxid</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_START_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>startxid</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>startxid</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t_result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>startxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_result</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_commit_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_commit_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_commit_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>commit_timestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>commit_timestamp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>commit_timestamp</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>commit_timestamp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_COMMIT_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>commit_timestamp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>commit_timestamp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t_result</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>commit_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_result</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>Datum</name></type> <name>pgxc_get_2pc_xid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_2pc_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_2pc_xid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_xid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get2PCInfo</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>result</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>str_xid</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>GET_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>str_xid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>str_xid</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GET_XID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>str_xid</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>str_xid</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str_xid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_remove_2pc_records</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_remove_2pc_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_remove_2pc_records</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tid</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>remove_2pc_records</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_clear_2pc_records</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_clear_2pc_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_clear_2pc_records</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlots</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>clear_result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><literal type="string">"select pgxc_get_record_list()::text"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CLEAR_STMT</name> <init>= <expr><literal type="string">"select pgxc_remove_2pc_records('%s')::text"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>clear_query</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>twopcfiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can only called on coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>mycontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
											  <argument><expr><literal type="string">"clean_check"</literal></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if((dir = opendir(TWOPHASE_RECORD_DIR)))
	{		
		while((ptr = readdir(dir)) != NULL)
	    {
	    	if (count &gt; 999)
				break;
	        if(strcmp(ptr-&gt;d_name,".") == 0 || strcmp(ptr-&gt;d_name,"..") == 0)
	        {
	            continue;
	        }       
			snprintf(path[count], MAX_GID, "/%s", ptr-&gt;d_name);
			<comment type="line">//snprintf(path[count], MAX_GID, "/%s", ptr-&gt;d_name);</comment>
			count++;
		}

		closedir(dir);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*get node list*/</comment>
	<expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
					<argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>TupleTableSlots</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>pgxc_clean_node_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TupleTableSlots</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*collect the 2pc file in nodes*/</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name><operator>+</operator><name>cn_nodes_num</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
	<comment type="block">/*get all database info*/</comment>
	<expr_stmt><expr><call><name>getDatabaseList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/*get all info of 2PC transactions*/</comment>
	<expr_stmt><expr><call><name>getTxnInfoOnNodesAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if((dir = opendir(TWOPHASE_RECORD_DIR)))
	{		
		while (i &lt; count)
		{
			if (!find_txn(path[i]))
			{
				unlink(path[i]);
				WriteClean2pcXlogRec(path[i]);
			}
			i++;
		}

		closedir(dir);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/*delete all rest 2pc file in each nodes*/</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slot_count</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>twopcfiles</name> <operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>twopcfiles</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>ptr</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>MAXIMUM_CLEAR_FILE</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_txn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>clear_query</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>CLEAR_STMT</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>clear_query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clear_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>result</name><index>[<expr><name>cn_nodes_num</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>slot_count</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>twopcfiles</name> <operator>=</operator> <call><name>TTSgetvalue</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><name>cn_nodes_num</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>twopcfiles</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>ptr</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>MAXIMUM_CLEAR_FILE</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_txn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>clear_query</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>CLEAR_STMT</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>clear_query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clear_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><name>result</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    
    <expr_stmt><expr><call><name>DestroyTxnHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	
    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_get_record_list</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_get_record_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_get_record_list</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>recordList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>t_recordList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* get from hash table */</comment>
    <expr_stmt><expr><name>recordList</name> <operator>=</operator> <call><name>get_2pc_list_from_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>MAXIMUM_OUTPUT_FILE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>recordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t_recordList</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_recordList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get from disk */</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>TWOPHASE_RECORD_DIR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>recordList</name></expr>)</condition>
        <block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>t_recordList</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_recordList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>,<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>,<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>       
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>MAXIMUM_OUTPUT_FILE</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>recordList</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>recordList</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
    		<expr_stmt><expr><name>recordList</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>,
								   <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>, <argument><expr><literal type="string">"%s,%s"</literal></expr></argument>, <argument><expr><name>recordList</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>recordList</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
    	<expr_stmt><expr><name>t_recordList</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t_recordList</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_commit_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_commit_on_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_commit_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* nodename, gid */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>  <name>nodeoid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><name>MAX_CMD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>connections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					<name>conn_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResponseCombiner</name></type>	<name>combiner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>pgxc_handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/*clear Global*/</comment>
    <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*get node list*/</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cn_node_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dn_node_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean:fail to get cn_node_list and dn_node_list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nodeoid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>nodeoid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid nodename '%s'"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
	<expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>=</operator> <operator>(</operator><name>TXN_STATUS</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>=</operator> <operator>(</operator><name>TimestampTz</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimestampTz</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getTxnInfoOnOtherNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"commit prepared '%s'"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><name>InvalidGlobalTimestamp</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"in pg_clean, fail to get global_commit_timestamp for transaction '%s' on"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>=</operator> <call><name>GetGlobalTimestampGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    
	<expr_stmt><expr><name>connections</name> <operator>=</operator> <operator>(</operator><name>PGXCNodeHandle</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodeHandle</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>get_node_handles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgxc_handles</name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>PGXC_NODE_COORDINATOR</name> <operator>==</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> 
            <expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_query_clean_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: send query '%s' from '%s' to '%s' failed "</literal></expr></argument>, 
            <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>connections</name><index>[<expr><name>conn_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* receive response */</comment>
    <if_stmt><if>if <condition>(<expr><name>conn_count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>InitResponseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>, <argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>COMBINE_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_receive_responses</name><argument_list>(<argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>!</operator><call><name>validate_combiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>combiner</name><operator>.</operator><name>errorMessage</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pgxc_node_report_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to FINISH the transaction on one or more nodes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CloseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*clear Global*/</comment>
    <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clear_handles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>pgxc_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgxc_handles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connections</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>pgxc_abort_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pgxc_abort_on_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type> <name>pgxc_abort_on_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* nodename, gid */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>  <name>nodeoid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><name>MAX_CMD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>connections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					<name>conn_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResponseCombiner</name></type>	<name>combiner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>pgxc_handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/*clear Global*/</comment>
    <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*get node list*/</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cn_node_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_node_list</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>cn_nodes_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dn_nodes_num</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cn_node_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dn_node_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean:fail to get cn_node_list and dn_node_list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pgxc_clean_node_count</name> <operator>=</operator> <name>cn_nodes_num</name> <operator>+</operator> <name>dn_nodes_num</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>my_nodeoid</name> <operator>=</operator> <call><name>getMyNodeoid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dn_health_map</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nodeoid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>nodeoid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid nodename '%s'"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
	<expr_stmt><expr><name>txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name></name> <operator>=</operator> <operator>(</operator><name>TXN_STATUS</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TXN_STATUS</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>=</operator> <operator>(</operator><name>TimestampTz</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimestampTz</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>pgxc_clean_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>cn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>dn_nodes_num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>connections</name> <operator>=</operator> <operator>(</operator><name>PGXCNodeHandle</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodeHandle</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getTxnInfoOnOtherNodes</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"rollback prepared '%s'"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>    
	if (!setMaintenanceMode(true))
	{
		elog(ERROR, "Error: fail to set maintenance mode on in pg_clean");
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    

    <expr_stmt><expr><call><name>get_node_handles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgxc_handles</name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>PGXC_NODE_COORDINATOR</name> <operator>==</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> 
            <expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_query_clean_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: send query '%s' from '%s' to '%s' failed "</literal></expr></argument>, 
            <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>connections</name><index>[<expr><name>conn_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* receive response */</comment>
    <if_stmt><if>if <condition>(<expr><name>conn_count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>InitResponseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>, <argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>COMBINE_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_receive_responses</name><argument_list>(<argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>!</operator><call><name>validate_combiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>combiner</name><operator>.</operator><name>errorMessage</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pgxc_node_report_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to FINISH the transaction on one or more nodes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CloseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*clear Global*/</comment>
    <expr_stmt><expr><call><name>ResetGlobalVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clear_handles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>pgxc_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgxc_handles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connections</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>recover2PCForDatabaseAll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_db</name> <init>= <expr><name>head_database_info</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>cur_db</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>recover2PCForDatabase</name><argument_list>(<argument><expr><name>cur_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_db</name> <operator>=</operator> <name><name>cur_db</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="line">//clean_old_2PC_files();</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>recover2PCForDatabase</name><parameter_list>(<parameter><decl><type><name>database_info</name> <modifier>*</modifier></type> <name>db_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name><name>db_info</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>cur_txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>recover2PC</name><argument_list>(<argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>send_query_clean_transaction</name><parameter_list>(<parameter><decl><type><name>PGXCNodeHandle</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>finish_cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TWO_PHASE_TESTS__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>PG_CLEAN_SEND_CLEAN</name> <operator>&lt;=</operator> <name>twophase_exception_case</name> <operator>&amp;&amp;</operator>
        <name>PG_CLEAN_SEND_QUERY</name> <operator>&gt;=</operator> <name>twophase_exception_case</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>twophase_in</name> <operator>=</operator> <name>IN_PG_CLEAN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTimestampIsValid</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
        <name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>&amp;&amp;</operator>
        <operator>!</operator><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	
    <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_send_clean</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send pg_clean flag for %s PREPARED command"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name> <operator>&amp;&amp;</operator> <call><name>pgxc_node_send_readonly</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send readonly flag for %s PREPARED command"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name> <operator>&amp;&amp;</operator> <call><name>pgxc_node_send_after_prepare</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send after prepare flag for %s PREPARED command"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* 
     * only transaction finished in commit prepared/rollback prepared phase send timestamp 
     * partial prepared transaction has no need to send other information
     */</comment>
	<if_stmt><if>if <condition>(<expr><name>InvalidGlobalTimestamp</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>&amp;&amp;</operator> 
        <call><name>pgxc_node_send_global_timestamp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send global committs for %s PREPARED command"</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name> <operator>&amp;&amp;</operator> <call><name>pgxc_node_send_starter</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
    		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
    				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
    				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send start node for %s PREPARED command"</literal></expr></argument>,
    						<argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>InvalidTransactionId</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>startxid</name></name> <operator>&amp;&amp;</operator> <call><name>pgxc_node_send_startxid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>startxid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send start xid for %s PREPARED command"</literal></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>participants</name></name> <operator>&amp;&amp;</operator> <call><name>pgxc_node_send_partnodes</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>participants</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send participants for %s PREPARED command"</literal></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_send_query</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_cmd</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"in pg_clean failed to send query for %s PREPARED command"</literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><name>TXN_STATUS_COMMITTED</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name></expr> ?</condition><then> <expr><literal type="string">"COMMIT"</literal></expr> </then><else>: <expr><literal type="string">"ROLLBACK"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check_2pc_belong_node</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>node_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>node_type</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>node_index</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>InvalidOid</name> <operator>!=</operator> <name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>abnormal_nodeoid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>node_type</name> <operator>=</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>node_index</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>node_index</name> <operator>-</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>   <name>node_oid</name>  <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>  <name><name>gid</name><index>[<expr><name>MAX_GID</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* get start node from gid */</comment>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get startnode(%s) from gid(%s) failed"</literal></expr></argument>,
                <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get startnode(%s) from gid(%s) failed"</literal></expr></argument>,
                <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>startnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get invalid oid for startnode(%s) from gid(%s)"</literal></expr></argument>,
                <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"get oid(%d) for startnode(%s) from gid(%s)"</literal></expr></argument>,
            <argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>abnormal_nodeoid</name> <operator>==</operator> <name>node_oid</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>check_node_participate</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>node_type</name> <init>= <expr><call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>PGXC_NODE_COORDINATOR</name> <operator>==</operator> <name>node_type</name></expr>)</condition> 
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>PGXC_NODE_DATANODE</name> <operator>==</operator> <name>node_type</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>recover2PC</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>check_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>check_times</name> <init>= <expr><name>CLEAN_CHECK_TIMES_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>check_interval</name> <init>= <expr><name>CLEAN_CHECK_INTERVAL_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>current_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorData</name><modifier>*</modifier></type> <name>edata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TXN_STATUS</name></type> <name>txn_stat</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>txn_stat</name> <operator>=</operator> <call><name>check_txn_global_status</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>=</operator> <name>txn_stat</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>clear_2pc_belong_node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>check_times</name> <operator>=</operator> <name>CLEAN_NODE_CHECK_TIMES</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>check_interval</name> <operator>=</operator> <name>CLEAN_NODE_CHECK_INTERVAL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_EXECABORT</name></cpp:ifdef>
	<expr_stmt><expr><name>txn_stat</name> <operator>=</operator> <name>TXN_STATUS_ABORTED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><name>txn_stat</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TXN_STATUS_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"cannot recover 2PC transaction %s for TXN_STATUS_FAILED"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>UNDO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		
		<case>case <expr><name>TXN_STATUS_UNKNOWN</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"cannot recover 2PC transaction %s for TXN_STATUS_UNKNOWN"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>UNDO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		
		<case>case <expr><name>TXN_STATUS_PREPARED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"2PC recovery of transaction %s not needed for TXN_STATUS_PREPARED"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>UNDO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		
		<case>case <expr><name>TXN_STATUS_COMMITTED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name> <operator>||</operator> <name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>UNDO</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
    			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>COMMIT</name></expr>;</expr_stmt>
    			<comment type="block">/* check whether all nodes can commit prepared */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>check_times</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>current_context</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<block>{<block_content>
    			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>clean_2PC_iscommit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
    			<block>{<block_content>
							<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"check commit 2PC transaction %s failed"</literal></expr></argument>,
								<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<block>{<block_content>
						<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>current_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"check commit 2PC transaction %s error: %s"</literal></expr></argument>,
							<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_ok</name></expr>)</condition>
					<block>{<block_content>
    				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    				<return>return;</return>
    			</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>

    			<comment type="block">/* send commit prepared to all nodes */</comment>
    			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>clean_2PC_iscommit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
    			<block>{<block_content>
    				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"commit 2PC transaction %s failed"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    				<return>return;</return>
    			</block_content>}</block></if></if_stmt>
    			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name>clean_2PC_files</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
			<break>break;</break>
		
		<case>case <expr><name>TXN_STATUS_ABORTED</name></expr>:</case>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>ABORT</name></expr>;</expr_stmt>
			<comment type="block">/* check whether all nodes can rollback prepared */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>check_times</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>current_context</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>clean_2PC_iscommit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
						<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"check rollback 2PC transaction %s failed"</literal></expr></argument>,
							<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block>
				<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<block>{<block_content>
					<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>current_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"check rollback 2PC transaction %s error: %s"</literal></expr></argument>,
						<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_ok</name></expr>)</condition>
				<block>{<block_content>
				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>check_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<comment type="block">/* send rollback prepared to all nodes */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>clean_2PC_iscommit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"rollback 2PC transaction %s failed"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>clean_2PC_files</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		
		<case>case <expr><name>TXN_STATUS_INPROGRESS</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"2PC recovery of transaction %s not needed for TXN_STATUS_INPROGRESS"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>UNDO</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>op_issuccess</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot recover 2PC transaction %s for unkown status"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>TXN_STATUS</name></type> <name>check_txn_global_status</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_PREPARED</name></cpp:macro> 	<cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_COMMITTED</name></cpp:macro> 	<cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_ABORTED</name></cpp:macro>		<cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_UNKNOWN</name></cpp:macro>		<cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_INITIAL</name></cpp:macro>		<cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_INPROGRESS</name></cpp:macro>	<cpp:value>0X0020</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>check_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>node_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>prepared_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>time_gap</name> <init>= <expr><name>clean_time_interval</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>is_readonly</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>TXN_STATUS_COMMITTED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>==</operator> <name>TXN_STATUS_UNKNOWN</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_UNKNOWN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>==</operator> <name>TXN_STATUS_ABORTED</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<comment type="block">/*check dn participates*/</comment>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_INITIAL</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_PREPARED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>prepared_time</name> <operator>=</operator> <ternary><condition><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>&gt;</operator> <name>prepared_time</name></expr> ?</condition><then> 
								<expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name></expr> </then><else>: <expr><name>prepared_time</name></expr></else></ternary></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_INPROGRESS</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_COMMITTED</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/*check cn participates*/</comment>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_PREPARED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>prepared_time</name> <operator>=</operator> <ternary><condition><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&gt;</operator> <name>prepared_time</name></expr> ?</condition><then> 
								<expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>ii</name></expr>]</index></name></expr> </then><else>: <expr><name>prepared_time</name></expr></else></ternary></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_INPROGRESS</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_COMMITTED</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check_flag</name> <operator>|=</operator> <name>TXN_ABORTED</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

    <comment type="block">/*
     * first check the prepare timestamp of both implicit and explicit trans within the time_gap or not
     * if not, check the commit timestamp explicit trans within the time_gap or not 
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>     
    if ((check_flag &amp; TXN_INPROGRESS) ||
        (IsXidImplicit(txn-&gt;gid) &amp;&amp; current_time - prepared_time &lt;= time_gap) ||
        (!IsXidImplicit(txn-&gt;gid) &amp;&amp; 
            ((!txn-&gt;after_first_phase &amp;&amp; current_time - prepared_time &lt;= time_gap) ||
            (txn-&gt;after_first_phase &amp;&amp; 
                (InvalidGlobalTimestamp != commit_time &amp;&amp; 
                current_time - commit_time &lt;= time_gap)))))
    {
		<comment type="block">/* transaction inprogress */</comment>
        return TXN_STATUS_INPROGRESS;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                
    <if_stmt><if>if <condition>(<expr><name>clear_2pc_belong_node</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_2pc_belong_node</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_2pc_start_from_node</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>node_idx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>node_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>abnormal_time</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>node_idx</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"gid: %s, abnormal time: "</literal> <name>INT64_FORMAT</name>
                    <literal type="string">", prepare timestamp[%d]: "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>,
                    <argument><expr><name>abnormal_time</name></expr></argument>, <argument><expr><name>node_idx</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>prepare_timestamp</name><index>[<expr><name>node_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"gid: %s, node_idx: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>node_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>abnormal_time</name> <operator>&lt;</operator> <name>prepared_time</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"gid: %s, abnormal time: "</literal> <name>INT64_FORMAT</name>
                <literal type="string">", prepared time: "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>,
                <argument><expr><name>abnormal_time</name></expr></argument>, <argument><expr><name>prepared_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>check_flag</name> <operator>&amp;</operator> <name>TXN_INPROGRESS</name> <operator>||</operator><name>current_time</name> <operator>-</operator> <name>prepared_time</name> <operator>&lt;=</operator> <name>time_gap</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* transaction inprogress */</comment>
            <return>return <expr><name>TXN_STATUS_INPROGRESS</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>


    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TXN_PREPARED</name> <operator>==</operator> <name>check_flag</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>TXN_STATUS_PREPARED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>check_flag</name> <operator>&amp;</operator> <name>TXN_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TXN_STATUS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
    
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_COMMITTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_ABORTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Mix of committed and aborted. This should not happen. */</comment>
		<return>return <expr><name>TXN_STATUS_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
    
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>check_flag</name> <operator>&amp;</operator> <name>TXN_PREPARED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Should be at least one "prepared statement" in nodes */</comment>
		<return>return <expr><name>TXN_STATUS_FAILED</name></expr>;</return></block_content></block></if></if_stmt>
		
	<if_stmt><if>if <condition>(<expr><name>check_flag</name> <operator>&amp;</operator> <name>TXN_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Some 2PC transactions are committed.  Need to commit others. */</comment>
		<return>return <expr><name>TXN_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* All the transactions remain prepared.   No need to recover. */</comment>
	<return>return <expr><name>TXN_STATUS_ABORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>clean_2PC_iscommit</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_commit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"%s prepared '%s';"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM_CHECK</name> <init>= <expr><literal type="string">"%s prepared '%s' for check only;"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><name>MAX_CMD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>node_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>node_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>connections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					<name>conn_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResponseCombiner</name></type>	<name>combiner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>pgxc_handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_commit</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_check</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><name>STMT_FORM_CHECK</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
	<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_check</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><name>STMT_FORM_CHECK</name></expr></argument>, <argument><expr><literal type="string">"rollback"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><literal type="string">"rollback"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_commit</name> <operator>&amp;&amp;</operator> <name>InvalidGlobalTimestamp</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name></expr>)</condition>	
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"twophase transaction '%s' has InvalidGlobalCommitTimestamp"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>connections</name> <operator>=</operator> <operator>(</operator><name>PGXCNodeHandle</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodeHandle</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>txn</name><operator>-&gt;</operator><name>num_dnparts</name></name> <operator>+</operator> <name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>connections</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for connections"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>get_transaction_handles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgxc_handles</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TWO_PHASE_TESTS__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>PG_CLEAN_SEND_CLEAN</name> <operator>&lt;=</operator> <name>twophase_exception_case</name> <operator>&amp;&amp;</operator> 
        <name>PG_CLEAN_ELOG_ERROR</name> <operator>&gt;=</operator> <name>twophase_exception_case</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>exception_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>dn_conn_count</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
        <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>nodeoid</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name>node_idx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TXN_STATUS_PREPARED</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[ <expr><name>node_idx</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
		<comment type="block">/*send global timestamp to dn_node_list[ii]*/</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_query_clean_transaction</name><argument_list>(<argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: send query '%s' from '%s' to '%s' failed "</literal></expr></argument>, 
				<argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>connections</name><index>[<expr><name>conn_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TWO_PHASE_TESTS__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>PG_CLEAN_SEND_CLEAN</name> <operator>&lt;=</operator> <name>twophase_exception_case</name> <operator>&amp;&amp;</operator> 
                <name>PG_CLEAN_ELOG_ERROR</name> <operator>&gt;=</operator> <name>twophase_exception_case</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>exception_count</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>exception_count</name> <operator>&amp;&amp;</operator> 
                    <name>PG_CLEAN_ELOG_ERROR</name> <operator>==</operator> <name>twophase_exception_case</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"PG_CLEAN_ELOG_ERROR complish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
        <expr_stmt><expr><name>node_oid</name> <operator>=</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>nodeoid</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name>node_idx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>node_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TXN_STATUS_PREPARED</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[ <expr><name>node_idx</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
		<comment type="block">/*send global timestamp to dn_node_list[ii]*/</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_query_clean_transaction</name><argument_list>(<argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: send query '%s' from '%s' to '%s' failed "</literal></expr></argument>, 
				<argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>connections</name><index>[<expr><name>conn_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TWO_PHASE_TESTS__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>PG_CLEAN_SEND_CLEAN</name> <operator>&lt;=</operator> <name>twophase_exception_case</name> <operator>&amp;&amp;</operator> 
                <name>PG_CLEAN_ELOG_ERROR</name> <operator>&gt;=</operator> <name>twophase_exception_case</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>exception_count</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>exception_count</name> <operator>&amp;&amp;</operator> 
                    <name>PG_CLEAN_ELOG_ERROR</name> <operator>==</operator> <name>twophase_exception_case</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"PG_CLEAN_ELOG_ERROR complish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>

	</block_content>}</block></for>

    <comment type="block">/* receive response */</comment>
    <if_stmt><if>if <condition>(<expr><name>conn_count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>InitResponseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>, <argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>COMBINE_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_receive_responses</name><argument_list>(<argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>!</operator><call><name>validate_combiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>combiner</name><operator>.</operator><name>errorMessage</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pgxc_node_report_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to FINISH the transaction on one or more nodes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CloseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_distri_print</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>conn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>DN_CONNECTION_STATE_IDLE</name> <operator>!=</operator> <name><name>connections</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"IN pg_clean node:%s invalid stauts:%d"</literal></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>conn_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>clear_handles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>pgxc_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgxc_handles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*last commit or rollback on origcoord if it participate this txn, since after commit the 2pc file is deleted on origcoord*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name> <operator>!=</operator> <name>InvalidOid</name></expr>)</condition>
    <block>{<block_content>
    	<expr_stmt><expr><name>node_idx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    	<block>{<block_content>
			<comment type="block">/*send global timestamp to dn_node_list[ii]*/</comment>
            
			<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>node_idx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name></expr>)</condition>
			<block>{<block_content>
                <expr_stmt><expr><call><name>get_node_handles</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgxc_handles</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>send_query_clean_transaction</name><argument_list>(<argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: send query '%s' from %s to %s failed "</literal></expr></argument>, 
                        <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>my_nodeoid</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>false</name></expr>;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>connections</name><index>[<expr><name>conn_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pgxc_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
    	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
	
    <comment type="block">/* receive response */</comment>
    <if_stmt><if>if <condition>(<expr><name>conn_count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>InitResponseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>, <argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>COMBINE_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pgxc_node_receive_responses</name><argument_list>(<argument><expr><name>conn_count</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>!</operator><call><name>validate_combiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>combiner</name><operator>.</operator><name>errorMessage</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pgxc_node_report_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to FINISH the transaction on one or more nodes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CloseCombiner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>combiner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
	<comment type="block">/*free hash record from gtm*/</comment>
	<expr_stmt><expr><call><name>FinishGIDGTM</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
	<expr_stmt><expr><call><name>clear_handles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>pgxc_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgxc_handles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connections</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>clean_2PC_files</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlots</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>issuccess</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>STMT_FORM</name> <init>= <expr><literal type="string">"select pgxc_remove_2pc_records('%s')::text"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>query</name><index>[<expr><name>MAX_CMD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>MAX_CMD_LENGTH</name></expr></argument>, <argument><expr><name>STMT_FORM</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: delete 2PC file failed of transaction %s on node %s"</literal></expr></argument>,
						  <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>dnparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>issuccess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: failed clean 2pc file of transaction %s on node %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>issuccess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>issuccess</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>execute_query_on_single_node</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TTSgetvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Error:delete 2PC file failed of transaction %s on node %s"</literal></expr></argument>,
						  <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>issuccess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pg_clean: failed clean 2pc file of transaction %s on node %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>issuccess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>DropTupleTableSlots</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>issuccess</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_print_txn_info</name><parameter_list>(<parameter><decl><type><name>print_txn_info</name> <modifier>*</modifier></type> <name>print_txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database</name> <init>= <expr><name>head_database_info</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>print_txn</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>print_txn</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>cur_database</name></expr>;</condition> <incr><expr><name>cur_database</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
        <expr_stmt><expr><name>txn</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>cur_txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>clear_2pc_belong_node</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur_txn</name><operator>-&gt;</operator><name>belong_abnormal_node</name></name></expr>)</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cur_txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>!=</operator> <name>TXN_STATUS_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PALLOC</name><argument_list>(<argument><expr><name><name>print_txn</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		cur_txn = cur_database-&gt;head_txn_info;
		for (; cur_txn; cur_txn = cur_txn-&gt;next)
		{
			if (cur_txn-&gt;global_txn_stat != TXN_STATUS_INPROGRESS)
				PALLOC(print_txn-&gt;txn, cur_txn);
		}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_print_stats_all</name><parameter_list>(<parameter><decl><type><name>print_status</name> <modifier>*</modifier></type><name>pstatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>database_info</name> <modifier>*</modifier></type><name>cur_database</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>cur_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>cur_database</name> <operator>=</operator> <name>head_database_info</name></expr>;</init> <condition><expr><name>cur_database</name></expr>;</condition> <incr><expr><name>cur_database</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
        <expr_stmt><expr><name>txn</name> <operator>=</operator> <name><name>cur_database</name><operator>-&gt;</operator><name>all_txn_info</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>cur_txn</name> <operator>=</operator> <operator>(</operator><name>txn_info</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><name><name>cur_txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>=</operator> <call><name>check_txn_global_status</name><argument_list>(<argument><expr><name>cur_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cur_txn</name><operator>-&gt;</operator><name>global_txn_stat</name></name> <operator>!=</operator> <name>TXN_STATUS_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>Init_print_stats</name><argument_list>(<argument><expr><name>cur_txn</name></expr></argument>, <argument><expr><name><name>cur_database</name><operator>-&gt;</operator><name>database_name</name></name></expr></argument>, <argument><expr><name>pstatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		for (cur_txn = cur_database-&gt;head_txn_info; cur_txn; cur_txn = cur_txn-&gt;next)
		{
			cur_txn-&gt;global_txn_stat = check_txn_global_status(cur_txn);
			if (cur_txn-&gt;global_txn_stat != TXN_STATUS_INPROGRESS)
				Init_print_stats(cur_txn, cur_database-&gt;database_name, pstatus);
		}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_print_stats</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><name>print_status</name> <modifier>*</modifier></type> <name>pstatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type>	<name>query</name></decl>;</decl_stmt>	
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RPALLOC</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RPALLOC</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RPALLOC</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RPALLOC</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>txn_status_to_string</name><argument_list>(<argument><expr><call><name>check_txn_global_status</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><literal type="string">"%-12s:%-15s"</literal></expr></argument>, <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><call><name>find_node_oid</name><argument_list>(<argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
						<argument><expr><call><name>txn_status_to_string</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ii</name> <operator>&lt;</operator> <name>pgxc_clean_node_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>query</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status</name><index>[<expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>query</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>query</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>gid_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>database_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>global_status_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>status_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstatus</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txn_status_to_string</name><parameter_list>(<parameter><decl><type><name>TXN_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_INITIAL</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_UNKNOWN</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_PREPARED</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_COMMITTED</argument>)</argument_list></macro>       
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_ABORTED</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_INPROGRESS</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>TXN_STATUS_FAILED</argument>)</argument_list></macro>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txn_op_to_string</name><parameter_list>(<parameter><decl><type><name>OPERATION</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition>
	<block>{<block_content>
		<macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>UNDO</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>ABORT</argument>)</argument_list></macro>
	    <macro><name>ENUM_TOCHAR_CASE</name><argument_list>(<argument>COMMIT</argument>)</argument_list></macro>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> 
<name>CheckFirstPhase</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="line">//    int ret;</comment>
    <decl_stmt><decl><type><name>Oid</name></type> <name>orignode</name> <init>= <expr><name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>startxid</name> <init>= <expr><name><name>txn</name><operator>-&gt;</operator><name>startxid</name></name></expr></init></decl>;</decl_stmt>
<comment type="line">//    uint32 transactionid;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nodeidx</name></decl>;</decl_stmt>

    <comment type="block">/*
     * if the twophase trans does not success in prepare phase, the orignode == InvalidOid.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>orignode</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>find_node_index</name><argument_list>(<argument><expr><name>orignode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>nodeidx</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <name>startxid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* start node participate */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>isorigcoord_part</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>nodeidx</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>coordparts</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>num_coordparts</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_INITIAL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*select * from pgxc_is_committed...*/</comment>
            <expr_stmt><expr><call><name>getTxnStatus</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>nodeidx</name></expr>]</index></name> <operator>==</operator> <name>TXN_STATUS_PREPARED</name> <operator>&amp;&amp;</operator> <name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>!=</operator> <name>InvalidGlobalTimestamp</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="block">/* start node node participate */</comment>
    <else>else
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>        
        ret = Get2PCFile(orignode, txn-&gt;gid, &amp;transactionid);
        if (ret == FILENOTFOUND)
            txn-&gt;after_first_phase = false;
        else if (ret == FILEUNKOWN)
            txn-&gt;global_txn_stat = TXN_STATUS_UNKNOWN;
        else if (ret == FILEFOUND &amp;&amp; txn-&gt;global_commit_timestamp != InvalidGlobalTimestamp)
            txn-&gt;after_first_phase = true;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>global_commit_timestamp</name></name> <operator>!=</operator> <name>InvalidGlobalTimestamp</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>after_first_phase</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_transaction_handles</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgxc_handles</name></decl></parameter>, <parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>dn_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cn_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>nodeIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>nodetype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    
    <while>while <condition>(<expr><name>dn_index</name> <operator>&lt;</operator> <name>dn_nodes_num</name></expr>)</condition>
    <block>{<block_content>

        <comment type="block">/* Get node type and index */</comment>
        <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>PGXC_NODE_NONE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TXN_STATUS_PREPARED</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>dn_index</name> <operator>+</operator> <name>cn_nodes_num</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>dn_index</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nodeIndex</name> <operator>=</operator> <call><name>PGXCNodeGetNodeIdFromName</name><argument_list>(<argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>dn_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <name>PGXC_NODE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PGXC Node %s: object not defined"</literal></expr></argument>,
                            <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>dn_node_list</name><index>[<expr><name>dn_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Check if node is requested is the self-node or not */</comment>
        <if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <name>PGXC_NODE_DATANODE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>dn_index</name><operator>++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while>while <condition>(<expr><name>cn_index</name> <operator>&lt;</operator> <name>cn_nodes_num</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Get node type and index */</comment>
        <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>PGXC_NODE_NONE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TXN_STATUS_PREPARED</name> <operator>!=</operator> <name><name>txn</name><operator>-&gt;</operator><name>txn_stat</name><index>[<expr><name>cn_index</name></expr>]</index></name> <operator>||</operator> <name><name>cn_node_list</name><index>[<expr><name>cn_index</name></expr>]</index></name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cn_index</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nodeIndex</name> <operator>=</operator> <call><name>PGXCNodeGetNodeIdFromName</name><argument_list>(<argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>cn_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <name>PGXC_NODE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PGXC Node %s: object not defined"</literal></expr></argument>,
                            <argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>cn_node_list</name><index>[<expr><name>cn_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Check if node is requested is the self-node or not */</comment>
        <if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <name>PGXC_NODE_COORDINATOR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>coordlist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>cn_index</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>pgxc_handles</name> <operator>=</operator> <call><name>get_handles</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>get_node_handles</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgxc_handles</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>nodetype</name> <init>= <expr><name>PGXC_NODE_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nodeIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nodeIndex</name> <operator>=</operator> <call><name>PGXCNodeGetNodeIdFromName</name><argument_list>(<argument><expr><call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <name>PGXC_NODE_COORDINATOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>coordlist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pgxc_handles</name> <operator>=</operator> <call><name>get_handles</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>check_2pc_start_from_node</name><parameter_list>(<parameter><decl><type><name>txn_info</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name>node_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>InvalidOid</name> <operator>!=</operator> <name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>abnormal_nodeoid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node_type</name> <operator>=</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name>abnormal_nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>origcoord</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>node_oid</name>  <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>gid</name><index>[<expr><name>MAX_GID</name></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsXidImplicit</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* get start node from gid */</comment>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get startnode(%s) from gid(%s) failed"</literal></expr></argument>,
				<argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>startnode</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get startnode(%s) from gid(%s) failed"</literal></expr></argument>,
				<argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>node_oid</name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name>startnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>startnode</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"get invalid oid for startnode(%s) from gid(%s)"</literal></expr></argument>,
				<argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"get oid(%d) for startnode(%s) from gid(%s)"</literal></expr></argument>,
			<argument><expr><name>node_oid</name></expr></argument>, <argument><expr><name>startnode</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>abnormal_nodeoid</name> <operator>==</operator> <name>node_oid</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
