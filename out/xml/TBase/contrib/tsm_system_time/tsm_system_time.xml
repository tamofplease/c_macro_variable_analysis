<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/tsm_system_time/tsm_system_time.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsm_system_time.c
 *      support routines for SYSTEM_TIME tablesample method
 *
 * The desire here is to produce a random sample with as many rows as possible
 * in no more than the specified amount of time.  We use a block-sampling
 * approach.  To ensure that the whole relation will be visited if necessary,
 * we start at a randomly chosen block and then advance with a stride that
 * is randomly chosen but is relatively prime to the relation's nblocks.
 *
 * Because of the time dependence, this method is necessarily unrepeatable.
 * However, we do what we can to reduce surprising behavior by selecting
 * the sampling pattern just once per query, much as in tsm_system_rows.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      contrib/tsm_system_time/tsm_system_time.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>                <comment type="block">/* for _isnan */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tsmapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/sampling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/spccache.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>tsm_system_time_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* Private state */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>uint32</name></type>        <name>seed</name></decl>;</decl_stmt>            <comment type="block">/* random seed */</comment>
    <decl_stmt><decl><type><name>double</name></type>        <name>millis</name></decl>;</decl_stmt>            <comment type="block">/* time limit for sampling */</comment>
    <decl_stmt><decl><type><name>instr_time</name></type>    <name>start_time</name></decl>;</decl_stmt>        <comment type="block">/* scan start time */</comment>
    <decl_stmt><decl><type><name>OffsetNumber</name></type> <name>lt</name></decl>;</decl_stmt>            <comment type="block">/* last tuple returned from current block */</comment>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>doneblocks</name></decl>;</decl_stmt>        <comment type="block">/* number of already-scanned blocks */</comment>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>lb</name></decl>;</decl_stmt>                <comment type="block">/* last block visited */</comment>
    <comment type="block">/* these three values are not changed during a rescan: */</comment>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>nblocks</name></decl>;</decl_stmt>        <comment type="block">/* number of blocks in relation */</comment>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>firstblock</name></decl>;</decl_stmt>        <comment type="block">/* first block to sample from */</comment>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>step</name></decl>;</decl_stmt>            <comment type="block">/* step size, or 0 if not set yet */</comment>
}</block></struct></type> <name>SystemTimeSamplerData</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>system_time_samplescangetsamplesize</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                    <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
                                    <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paramexprs</name></decl></parameter>,
                                    <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>,
                                    <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>system_time_initsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                           <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>system_time_beginsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                            <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>nparams</name></decl></parameter>,
                            <parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BlockNumber</name></type> <name>system_time_nextsampleblock</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OffsetNumber</name></type> <name>system_time_nextsampletuple</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                            <parameter><decl><type><name>BlockNumber</name></type> <name>blockno</name></decl></parameter>,
                            <parameter><decl><type><name>OffsetNumber</name></type> <name>maxoffset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>random_relative_prime</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>SamplerRandomState</name></type> <name>randstate</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Create a TsmRoutine descriptor for the SYSTEM_TIME method.
 */</comment>
<function><type><name>Datum</name></type>
<name>tsm_system_time_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TsmRoutine</name> <modifier>*</modifier></type><name>tsm</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TsmRoutine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>parameterTypes</name></name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* See notes at head of file */</comment>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>repeatable_across_queries</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>repeatable_across_scans</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>SampleScanGetSampleSize</name></name> <operator>=</operator> <name>system_time_samplescangetsamplesize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>InitSampleScan</name></name> <operator>=</operator> <name>system_time_initsamplescan</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>BeginSampleScan</name></name> <operator>=</operator> <name>system_time_beginsamplescan</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>NextSampleBlock</name></name> <operator>=</operator> <name>system_time_nextsampleblock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>NextSampleTuple</name></name> <operator>=</operator> <name>system_time_nextsampletuple</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>EndSampleScan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>tsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sample size estimation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>system_time_samplescangetsamplesize</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                    <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
                                    <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paramexprs</name></decl></parameter>,
                                    <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>,
                                    <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Node</name>       <modifier>*</modifier></type><name>limitnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>millis</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>spc_random_page_cost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>npages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>ntuples</name></decl>;</decl_stmt>

    <comment type="block">/* Try to extract an estimate for the limit time spec */</comment>
    <expr_stmt><expr><name>limitnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>paramexprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>limitnode</name> <operator>=</operator> <call><name>estimate_expression_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>limitnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>limitnode</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>limitnode</name><operator>)</operator><operator>-&gt;</operator><name>constisnull</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>millis</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>limitnode</name><operator>)</operator><operator>-&gt;</operator><name>constvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>millis</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Default millis if the value is bogus */</comment>
            <expr_stmt><expr><name>millis</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Default millis if we didn't obtain a non-null Const */</comment>
        <expr_stmt><expr><name>millis</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Get the planner's idea of cost per page read */</comment>
    <expr_stmt><expr><call><name>get_tablespace_page_costs</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>spc_random_page_cost</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Estimate the number of pages we can read by assuming that the cost
     * figure is expressed in milliseconds.  This is completely, unmistakably
     * bogus, but we have to do something to produce an estimate and there's
     * no better answer.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>spc_random_page_cost</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>npages</name> <operator>=</operator> <name>millis</name> <operator>/</operator> <name>spc_random_page_cost</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>npages</name> <operator>=</operator> <name>millis</name></expr>;</expr_stmt></block_content></block></else></if_stmt>        <comment type="block">/* even more bogus, but whatcha gonna do? */</comment>

    <comment type="block">/* Clamp to sane value */</comment>
    <expr_stmt><expr><name>npages</name> <operator>=</operator> <call><name>clamp_row_est</name><argument_list>(<argument><expr><call><name>Min</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>baserel</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name>npages</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>baserel</name><operator>-&gt;</operator><name>tuples</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>baserel</name><operator>-&gt;</operator><name>pages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Estimate number of tuples returned based on tuple density */</comment>
        <decl_stmt><decl><type><name>double</name></type>        <name>density</name> <init>= <expr><name><name>baserel</name><operator>-&gt;</operator><name>tuples</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>baserel</name><operator>-&gt;</operator><name>pages</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ntuples</name> <operator>=</operator> <name>npages</name> <operator>*</operator> <name>density</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* For lack of data, assume one tuple per page */</comment>
        <expr_stmt><expr><name>ntuples</name> <operator>=</operator> <name>npages</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Clamp to the estimated relation size */</comment>
    <expr_stmt><expr><name>ntuples</name> <operator>=</operator> <call><name>clamp_row_est</name><argument_list>(<argument><expr><call><name>Min</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>tuples</name></name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>pages</name> <operator>=</operator> <name>npages</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tuples</name> <operator>=</operator> <name>ntuples</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize during executor setup.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>system_time_initsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SystemTimeSamplerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Note the above leaves tsm_state-&gt;step equal to zero */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Examine parameters and prepare for a sample scan.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>system_time_beginsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                            <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>nparams</name></decl></parameter>,
                            <parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SystemTimeSamplerData</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><operator>(</operator><name>SystemTimeSamplerData</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>millis</name> <init>= <expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>millis</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TABLESAMPLE_ARGUMENT</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sample collection time must not be negative"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>millis</name></name> <operator>=</operator> <name>millis</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name> <operator>=</operator> <name>InvalidOffsetNumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>doneblocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* start_time, lb will be initialized during first NextSampleBlock call */</comment>
    <comment type="block">/* we intentionally do not change nblocks/firstblock/step here */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Select next block to sample.
 *
 * Uses linear probing algorithm for picking next block.
 */</comment>
<function><type><specifier>static</specifier> <name>BlockNumber</name></type>
<name>system_time_nextsampleblock</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SystemTimeSamplerData</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><operator>(</operator><name>SystemTimeSamplerData</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentScanDesc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instr_time</name></type>    <name>cur_time</name></decl>;</decl_stmt>

    <comment type="block">/* First call within scan? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>doneblocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* First scan within query? */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Initialize now that we have scan descriptor */</comment>
            <decl_stmt><decl><type><name>SamplerRandomState</name></type> <name>randstate</name></decl>;</decl_stmt>

            <comment type="block">/* If relation is empty, there's nothing to scan */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>rs_nblocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>InvalidBlockNumber</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/* We only need an RNG during this setup step */</comment>
            <expr_stmt><expr><call><name>sampler_random_init_state</name><argument_list>(<argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>, <argument><expr><name>randstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Compute nblocks/firstblock/step only once per query */</comment>
            <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>nblocks</name></name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>rs_nblocks</name></name></expr>;</expr_stmt>

            <comment type="block">/* Choose random starting block within the relation */</comment>
            <comment type="block">/* (Actually this is the predecessor of the first block visited) */</comment>
            <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>firstblock</name></name> <operator>=</operator> <call><name>sampler_random_fract</name><argument_list>(<argument><expr><name>randstate</name></expr></argument>)</argument_list></call> <operator>*</operator>
                <name><name>sampler</name><operator>-&gt;</operator><name>nblocks</name></name></expr>;</expr_stmt>

            <comment type="block">/* Find relative prime as step size for linear probing */</comment>
            <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>random_relative_prime</name><argument_list>(<argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>nblocks</name></name></expr></argument>, <argument><expr><name>randstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Reinitialize lb and start_time */</comment>
        <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>sampler</name><operator>-&gt;</operator><name>firstblock</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we've read all blocks in relation, we're done */</comment>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sampler</name><operator>-&gt;</operator><name>doneblocks</name></name> <operator>&gt;</operator> <name><name>sampler</name><operator>-&gt;</operator><name>nblocks</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>InvalidBlockNumber</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* If we've used up all the allotted time, we're done */</comment>
    <expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>, <argument><expr><name><name>sampler</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>cur_time</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>sampler</name><operator>-&gt;</operator><name>millis</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>InvalidBlockNumber</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * It's probably impossible for scan-&gt;rs_nblocks to decrease between scans
     * within a query; but just in case, loop until we select a block number
     * less than scan-&gt;rs_nblocks.  We don't care if scan-&gt;rs_nblocks has
     * increased since the first scan.
     */</comment>
    <do>do
    <block>{<block_content>
        <comment type="block">/* Advance lb, using uint64 arithmetic to forestall overflow */</comment>
        <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>sampler</name><operator>-&gt;</operator><name>lb</name></name> <operator>+</operator> <name><name>sampler</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>%</operator> <name><name>sampler</name><operator>-&gt;</operator><name>nblocks</name></name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>sampler</name><operator>-&gt;</operator><name>lb</name></name> <operator>&gt;=</operator> <name><name>scan</name><operator>-&gt;</operator><name>rs_nblocks</name></name></expr>)</condition>;</do>

    <return>return <expr><name><name>sampler</name><operator>-&gt;</operator><name>lb</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Select next sampled tuple in current block.
 *
 * In block sampling, we just want to sample all the tuples in each selected
 * block.
 *
 * When we reach end of the block, return InvalidOffsetNumber which tells
 * SampleScan to go to next block.
 */</comment>
<function><type><specifier>static</specifier> <name>OffsetNumber</name></type>
<name>system_time_nextsampletuple</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                            <parameter><decl><type><name>BlockNumber</name></type> <name>blockno</name></decl></parameter>,
                            <parameter><decl><type><name>OffsetNumber</name></type> <name>maxoffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SystemTimeSamplerData</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><operator>(</operator><name>SystemTimeSamplerData</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OffsetNumber</name></type> <name>tupoffset</name> <init>= <expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Advance to next possible offset on page */</comment>
    <if_stmt><if>if <condition>(<expr><name>tupoffset</name> <operator>==</operator> <name>InvalidOffsetNumber</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Done? */</comment>
    <if_stmt><if>if <condition>(<expr><name>tupoffset</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name> <operator>=</operator> <name>InvalidOffsetNumber</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name> <operator>=</operator> <name>tupoffset</name></expr>;</expr_stmt>

    <return>return <expr><name>tupoffset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute greatest common divisor of two uint32's.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>gcd</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>c</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>%</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Pick a random value less than and relatively prime to n, if possible
 * (else return 1).
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>random_relative_prime</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>SamplerRandomState</name></type> <name>randstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>r</name></decl>;</decl_stmt>

    <comment type="block">/* Safety check to avoid infinite loop or zero result for small n. */</comment>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * This should only take 2 or 3 iterations as the probability of 2 numbers
     * being relatively prime is ~61%; but just in case, we'll include a
     * CHECK_FOR_INTERRUPTS in the loop.
     */</comment>
    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><call><name>sampler_random_fract</name><argument_list>(<argument><expr><name>randstate</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>;</do>

    <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
