<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/do_command.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * do_command.c
 *
 *    Main command module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * This file provides a frontend module to pgxc_ctl operation.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coord_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datanode_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monitor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pgxc_ctl_conf_prototype</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pgxc_ctl_conf_prototype_minimal</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pgxc_ctl_conf_prototype_empty</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forceInit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exit(myWEXITSTATUS(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetToken</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(line = get_word(line, &amp;token))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TestToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcasecmp(token, word) == 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcmp(token, word) == 0))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>kill_something</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_deploy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>deploy_xc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostlist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_config_something</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_config_something_multi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>show_config_hostList</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_config_host</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_basicConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>show_config_servers</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_clean_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_start_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>start_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_stop_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stop_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>show_Resource</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datanodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>databasename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_show_help</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <name>ConfigType</name>
<block>{
    <decl><name>CONFIG_EMPTY</name></decl>,
    <decl><name>CONFIG_MINIMAL</name></decl>,
    <decl><name>CONFIG_COMPLETE</name></decl>
}</block></enum></type> <name>ConfigType</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_echo_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"do_echo_command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_prepareConfFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Path</name></decl></parameter>, <parameter><decl><type><name>ConfigType</name></type> <name>config_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>my_pgxc_conf_prototype</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Path</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <name>Path</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Configuration file path was not specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>conf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not open the configuration file \"%s\", %s.\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>config_type</name> <operator>==</operator> <name>CONFIG_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>my_pgxc_conf_prototype</name> <operator>=</operator> <name>pgxc_ctl_conf_prototype_empty</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>config_type</name> <operator>==</operator> <name>CONFIG_MINIMAL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>my_pgxc_conf_prototype</name> <operator>=</operator> <name>pgxc_ctl_conf_prototype_minimal</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>my_pgxc_conf_prototype</name> <operator>=</operator> <name>pgxc_ctl_conf_prototype</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>my_pgxc_conf_prototype</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>my_pgxc_conf_prototype</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Deploy pgxc binaries
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_deploy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify option for deploy command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Deploying Postgres-XL components to all the target servers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>deploy_xc</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Deploying Postgres-XL components.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Please note that the following code does not check if the specified nost
         * appears in the configuration file.
         * We should deploy xc binary to the target not in the current configuraiton
         * to add gtm slave, gtm_proxy, coordinator/datanode master/slave online.
         */</comment>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>deploy_xc</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deploy_xc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tarFile</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* Build tarball --&gt; need to do foreground */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Prepare tarball to deploy ... \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tarFile</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%d.tgz"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"tar czCf %s %s/%s bin include lib share"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Backgroud jobs */</comment>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Build install dir */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hostlist</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdScp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdTarExtract</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Deploying to the server %s.\n"</literal></expr></argument>, <argument><expr><name><name>hostlist</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build target directory */</comment>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name><name>hostlist</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf %s/bin %s/include %s/lib %s/share; mkdir -p %s"</literal></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* SCP tarball */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdScp</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdScp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"scp %s/%s %s@%s:%s"</literal></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tarFile</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hostlist</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Extract Tarball and remove it */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdTarExtract</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name><name>hostlist</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdTarExtract</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"tar xzCf %s %s/%s; rm %s/%s"</literal></expr></argument>,
                  <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>, 
                  <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tarFile</name></expr></argument>,
                  <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -f %s/%s"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Deployment done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_set</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: No variable name was given\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>varname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>confirm_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_value</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>print_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Failover command ... failover gtm
 *                        failover coordinator nodename
 *                        failover datanode nodename
 *                        failover nodename
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_failover_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify failover command option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>failover_gtm</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no gtm slave is configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify failover coordinator command option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <do>do
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: slave for the coordinator %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><name>nodeList</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>failover_coordinator</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify failover datanode command option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <do>do
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: slave for the datanode %s is not configured,\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><name>nodeList</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>failover_datanode</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid failover command option %s.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reconnect command ... reconnect gtm_proxy [all | nodename ... ]
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_reconnect_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specifiy option to reconnect command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>reconnect_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
            <do>do
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not gtm_proxy.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><name>nodeList</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>reconnect_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid option %s for reconnect command.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

                

<comment type="block">/*
 * Kill command ... kill nodename, kill all,
 *                    kill gtm [master|slave|all],
 *                    kill gtm_proxy [nodename|all] ...
 *                    kill coordinator [nodename ... |master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 *                    kill datanode [nodename ... |master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_kill_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specifiy option to kill command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kill_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: input value \"%s\" is invalid.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify additonal option to kill gtm_proxies\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>kill_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kill_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>kill_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>kill_something</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>init_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>init_gtm_master</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>init_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>init_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>configure_nodes_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Init command ... init all
 *                    init gtm [master|slave|all],
 *                    init gtm_proxy [all| nodename ...]
 *                    init coordinator [all | master [all | nodename ... ]| slave [all | nodename ... ]| nodename ... ]
 *                    init datanode [all | master [all | nodename ...] | slave [all | nodename ... ] | nodename ... ]
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_init_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify option to init command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"force"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>forceInit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify option to init command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>init_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>init_gtm_master</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>init_gtm_master</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>init_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master, slave or all for init gtm command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>init_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>init_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>init_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>init_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{<block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>init_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>init_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>init_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>init_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>init_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else 
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>init_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>init_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid option for init command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start command ... start nodename, start all,
 *                     start gtm [master|slave|all],
 *                     start gtm_proxy [nodename|all] ...
 *                     start coordinator [nodename ... |master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 *                     start datanode [nodename ... |master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>start_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>start_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>start_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>start_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>start_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>start_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>start_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>start_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_start_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify option to start command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>start_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>start_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>start_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>start_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master, slave or all for start gtm command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>start_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>start_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>start_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>start_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>start_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>start_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>start_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>start_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>start_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else 
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>start_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>start_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid option for start command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Stop command ... stop [-m smart | fast | immediate] all
 *                     stop gtm [master | slave | all],
 *                     stop gtm_proxy [ nodename | all] ...
 *                     stop [-m smart | fast | immediate ] coordinator [nodename ... | master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 *                     stop [-m smart | fast | immediate ] datanode [nodename ... | master [all | nodenames ... ] | slave [all | nodenames ... ] |all]
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetAndSet</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{if(!GetToken()){elog(ERROR, msg); return;} var=Strdup(token);}while(0)</cpp:value></cpp:define>
<comment type="block">/*
 * Add command
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_add_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pooler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>walDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>archDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extraConf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extraPgHbaConf</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specify options for add command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM master must be added before adding any other component.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * add gtm master name host port dir
         */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specify option for add gtm command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
         <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
         <block>{<block_content>
             <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of gtm master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host name for gtm master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for gtm master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working director for gtm master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>add_gtmMaster</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if>
         <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of gtm slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host name for gtm slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for gtm slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working director for gtm slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add_gtmSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
         <else>else
         <block>{<block_content>
             <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: you can specify only master/slave to add gtm command. %s is invalid.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <return>return;</return>
         </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Add gtm_proxy name host port dir
         */</comment>
        <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of gtm_proxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host name for gtm_proxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for gtm_proxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working director for gtm_proxy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_gtmProxy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Add coordinator master name host port pooler dir
         * Add coordinator slave name host dir
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master or slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the coordinator master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host for the coordinator masetr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for the coordinator master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the pooler port number for the coordinator master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working directory for the coordinator master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>extraConf</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify file to read extra configuration. Specify 'none' if nothing extra to be added.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>extraPgHbaConf</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify file to read extra pg_hba configuration. Specify 'none' if nothing extra to be added.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add_coordinatorMaster</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                    <argument><expr><name>extraConf</name></expr></argument>, <argument><expr><name>extraPgHbaConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>extraConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>extraPgHbaConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host for the coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for the coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the pooler port number for the coordinator slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working director for coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>archDir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify WAL archive directory for coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add_coordinatorSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master or slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the datanode master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host for the datanode masetr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for the datanode master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the pooler port number for the datanode master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working director for the datanode master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>walDir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the WAL directory for the datanode master WAL. Specify 'none' for default\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>extraConf</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify file to read extra configuration. Specify 'none' if nothig extra to be added.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>extraPgHbaConf</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify file to read extra pg_hba configuration. Specify 'none' if nothig extra to be added.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add_datanodeMaster</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                    <argument><expr><name>walDir</name></expr></argument>, <argument><expr><name>extraConf</name></expr></argument>, <argument><expr><name>extraPgHbaConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>walDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>extraConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>extraPgHbaConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the host for the datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the port number for the datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the pooler port number for the datanode slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the working directory for datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>walDir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the WAL directory for datanode slave WAL. Specify 'none' for default.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>archDir</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify WAL archive directory for datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>add_datanodeSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                    <argument><expr><name>walDir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>walDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_remove_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>clean_opt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify gtm, gtm_master, coordinator or datanode after add command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specify option to remove gtm command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_gtmMaster</name><argument_list>(<argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_gtmSlave</name><argument_list>(<argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else 
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: you can specify only master/slave to remove gtm command. %s is invalid.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify gtm proxy name to remove.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>remove_gtmProxy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>    )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master or slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the coordinator master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_coordinatorMaster</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the coordinator slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_coordinatorSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master or slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the datanode master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_datanodeMaster</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetAndSet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify the name of the datanode slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clean_opt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>remove_datanodeSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid argument %s to add command.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>
        
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>m_Option</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>handle_m_option</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>m_option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>line</name><operator>)</operator></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>m_Option</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>m_Option</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"smart"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>m_Option</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"smart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: specify smart, fast or immediate for -m option value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
        


<function><type><specifier>static</specifier> <name>void</name></type> <name>do_stop_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify option to stop command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>handle_m_option</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>handle_m_option</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>stop_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_Option</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"-m option is not available with gtm. Ignoring.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>stop_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify master, slave or all for stop gtm command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_Option</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"-m option is not available with gtm_prxy. Ignoring.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>stop_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>stop_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if>
        <else>else 
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>m_Option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid option for stop command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test staff
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>logLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>printLevel</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>logLevel</name> <operator>=</operator> <call><name>setLogMsgLevel</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>printLevel</name> <operator>=</operator> <call><name>setPrintMsgLevel</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"ssh"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"INFO: Testing ssh %s \"%s\"\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"ssh-stdin"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Testing ssh %s \"%s\" &lt; %s\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Testing local, \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"local-stdin"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Testing local-stdin, \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setLogMsgLevel</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setPrintMsgLevel</name><argument_list>(<argument><expr><name>printLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ==================================================================
 *
 * Staff specified by "node name", not node type
 *
 * ==================================================================
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>kill_something</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>nodeList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>nodeList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><call><name>getNodeType</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>NodeType_UNDEF</name></expr>:</case>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not find name \"%s\" in any node type.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_GTM</name></expr>:</case>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Issue kill gtm command to kill gtm master/slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_GTM_PROXY</name></expr>:</case>
            <expr_stmt><expr><name><name>nodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nodeName</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>kill_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_COORDINATOR</name></expr>:</case>
            <expr_stmt><expr><name><name>nodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nodeName</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_DATANODE</name></expr>:</case>
            <expr_stmt><expr><name><name>nodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nodeName</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>kill_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: internal error.  Should not come here!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_config_something_multi</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_config_something</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_config_something</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint</name></type> <name>idx</name></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><call><name>getNodeType</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>NodeType_UNDEF</name></expr>:</case>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not find name \"%s\" in any node type.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_GTM</name></expr>:</case>
            <expr_stmt><expr><call><name>show_config_gtmMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_gtmSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_GTM_PROXY</name></expr>:</case>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>show_config_gtmProxy</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_COORDINATOR</name></expr>:</case>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>show_config_coordMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_coordSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_DATANODE</name></expr>:</case>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>show_config_datanodeMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_datanodeSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        <case>case <expr><name>NodeType_SERVER</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>hostList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>hostList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nodeName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hostList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>show_config_servers</name><argument_list>(<argument><expr><name>hostList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: internal error.  Should not come here!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>



<comment type="block">/* ========================================================================================
 *
 * Configuration staff
 *
 * ========================================================================================
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_config_servers</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hostList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><name><name>hostList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_host</name><argument_list>(<argument><expr><name><name>hostList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * show {config|configuration} [all | name .... | gtm [master|slave|all] | gtm_proxy [all | name ...] |
 *                                coordinator [all | master | slave | name ... ] |
 *                                host name .... ]
 * With no option, will print common configuartion parameters and exit.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_basicConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"========= Postgres-XL configuration Common Info ========================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"=== Overall ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Postgres-XL owner: %s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Postgres-XL user: %s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Postgres-XL install directory: %s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcInstallDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl home: %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl configuration file: %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl tmpDir: %s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl localTempDir: %s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl log file: %s\n"</literal></expr></argument>, <argument><expr><name>logFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl configBackup: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"y"</literal></expr> </then><else>: <expr><literal type="string">"n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl configBackupHost: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl configBackupFile: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupFile</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"========= Postgres-XL configuration End Common Info ===================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>show_configuration</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: No configuration option is specified. Retruning.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"basic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_basicConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>show_basicConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>show_config_servers</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"basic"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>show_basicConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>hostList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name><name>hostList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_servers</name><argument_list>(<argument><expr><name>hostList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>hostList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>show_config_gtmMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_gtmSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_gtmMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_gtmSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"NOTICE: gtm slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid option %s for 'show config gtm' command.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm proxies are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_gtmProxies</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else 
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do<block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>show_config_gtmProxies</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_coordMasterSlaveMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_coordMasterMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>show_config_coordMasterMulti</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_coordMasterMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>show_config_coordMasterMulti</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Invalid option %s for 'show config coordinator' command.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_datanodeMasterSlaveMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_datanodeMasterMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>show_config_datanodeMasterMulti</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_datanodeMasterMulti</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>show_config_datanodeMasterMulti</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Invalid option %s for 'show config datanode' command.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
        while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>show_config_something_multi</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clean_array</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_simple_node_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
                            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extraConfig</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>specificExtraConfig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, 
         <argument><expr><literal type="string">"    Nodename: '%s', port: %s, dir: '%s'"</literal>
         <literal type="string">"    ExtraConfig: '%s', Specific Extra Config: '%s'\n"</literal></expr></argument>,
         <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>extraConfig</name></expr></argument>, <argument><expr><name>specificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>show_config_host</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"====== Server: %s =======\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM Master */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_config_gtmMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_config_gtmSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Proxy */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_gtmProxy</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_coordMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Coordinator Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_coordSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_datanodeMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Datanode Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_datanodeSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_config_hostList</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hostList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_config_host</name><argument_list>(<argument><expr><name><name>hostList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<comment type="block">/*
 * Clean command
 *
 * clean {all | 
 *        gtm [ all | master | slave ] |
 *          gtm_proxy [ all | nodename ... ]
 *          coordinator [[all | master | slave ] [nodename ... ]] |
 *        datanode [ [all | master | slave] [nodename ... ]}
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_clean_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify options for clean command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping all components before cleaning\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stop_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning all the directories and sockets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clean_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clean_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clean_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>clean_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clean_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>clean_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clean_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning GTM slave/master \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>clean_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>clean_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: invalid clean command option %s.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified gtm_proxy.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><name>token</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>stop_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_gtm_proxy_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>

            <expr_stmt><expr><call><name>stop_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning coordinator master and slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>clean_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>clean_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning coordinator master and slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>clean_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>,<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>clean_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified coordinator master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_coordinator_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified coordinator slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified coordinator.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning all the datanodes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning all the datanodes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>clean_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified datanodes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>clean_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning all the datanode masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stop_datanode_master_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_master_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified datanode masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specified datanode slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave_all</name><argument_list>(<argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_slave_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clean_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clean_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning specifieid nodes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <switch>switch<condition>(<expr><call><name>getNodeType</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>NodeType_UNDEF</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not found, skipping\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                <case>case <expr><name>NodeType_GTM</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning GTM master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cmdList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopGtmMaster</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanGtmMaster</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning GTM slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopGtmSlave</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanGtmSlave</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                <case>case <expr><name>NodeType_GTM_PROXY</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning GTM proxy %s.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cmdList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopGtmProxy</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanGtmProxy</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                <case>case <expr><name>NodeType_COORDINATOR</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning coordinator master %s\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cmdList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopCoordinatorMaster</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanCoordinatorMaster</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning coordinator slave %s\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopCoordinatorSlave</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanCoordinatorSlave</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                <case>case <expr><name>NodeType_DATANODE</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning datanode master %s\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cmdList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopDatanodeMaster</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanDatanodeMaster</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping and cleaning datanode slave %s\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopDatanodeSlave</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanDatanodeSlave</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                <case>case <expr><name>NodeType_SERVER</name></expr>:</case>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: clearing host is not supported yet. Skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: internal error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
            </block_content>}</block></switch> 
        </block_content>}</block> while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name>cmdList</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"rc=%d Done.\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_configure_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>configure_nodes_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>is_datanode</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>is_datanode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>is_datanode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: must specify either coordinator or datanode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>

        <while>while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        
        <if_stmt><if>if <condition>(<expr><name>is_datanode</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>configure_datanodes</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>configure_nodes</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
    
<function><type><specifier>static</specifier> <name>int</name></type> <name>selectCoordinator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>sz</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>show_Resource</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datanodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>databasename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cdIdx</name> <init>= <expr><call><name>selectCoordinator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dnIdx</name> <init>= <expr><call><name>datanodeIdx</name><argument_list>(<argument><expr><name>datanodeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>queryFname</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"NOTICE: showing tables in the datanode '%s', database %s, user %s\n"</literal></expr></argument>,
         <argument><expr><name>datanodeName</name></expr></argument>, 
         <argument><expr><ternary><condition><expr><name>databasename</name></expr> ?</condition><then> <expr><name>databasename</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>,
         <argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name>username</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dnIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode.\n"</literal></expr></argument>, <argument><expr><name>datanodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>GENERAL</name></expr></argument>, <argument><expr><name>queryFname</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>queryFname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not create temporary file %s, %s\n"</literal></expr></argument>, <argument><expr><name>queryFname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"SELECT pg_class.relname relation,\n"</literal>
            <literal type="string">"           CASE\n"</literal>
            <literal type="string">"             WHEN pclocatortype = 'H' THEN 'Hash'\n"</literal>
            <literal type="string">"             WHEN pclocatortype = 'M' THEN 'Modulo'\n"</literal>
            <literal type="string">"             WHEN pclocatortype = 'N' THEN 'Round Robin'\n"</literal>
            <literal type="string">"             WHEN pclocatortype = 'R' THEN 'Replicate'\n"</literal>
            <literal type="string">"             ELSE 'Unknown'\n"</literal>
            <literal type="string">"           END AS distribution,\n"</literal>
            <literal type="string">"            pg_attribute.attname attname,\n"</literal>
            <literal type="string">"            pgxc_node.node_name nodename\n"</literal>
            <literal type="string">"        FROM pg_class, pgxc_class, pg_attribute, pgxc_node\n"</literal>
            <literal type="string">"        WHERE pg_class.oid = pgxc_class.pcrelid\n"</literal>
            <literal type="string">"              and pg_class.oid = pg_attribute.attrelid\n"</literal>
            <literal type="string">"              and pgxc_class.pcattnum = pg_attribute.attnum\n"</literal>
            <literal type="string">"              and pgxc_node.node_name = '%s'\n"</literal>
            <literal type="string">"              and pgxc_node.oid = ANY (pgxc_class.nodeoids)\n"</literal>
            <literal type="string">"    UNION\n"</literal>
            <literal type="string">"    SELECT pg_class.relname relation,\n"</literal>
            <literal type="string">"          CASE\n"</literal>
            <literal type="string">"            WHEN pclocatortype = 'H' THEN 'Hash'\n"</literal>
            <literal type="string">"            WHEN pclocatortype = 'M' THEN 'Modulo'\n"</literal>
            <literal type="string">"            WHEN pclocatortype = 'N' THEN 'Round Robin'\n"</literal>
            <literal type="string">"            WHEN pclocatortype = 'R' THEN 'Replicate'\n"</literal>
            <literal type="string">"            ELSE 'Unknown'\n"</literal>
            <literal type="string">"          END AS distribution,\n"</literal>
            <literal type="string">"           '- none -' attname,\n"</literal>
            <literal type="string">"           pgxc_node.node_name nodename\n"</literal>
            <literal type="string">"       FROM pg_class, pgxc_class, pg_attribute, pgxc_node\n"</literal>
            <literal type="string">"       WHERE pg_class.oid = pgxc_class.pcrelid\n"</literal>
            <literal type="string">"             and pg_class.oid = pg_attribute.attrelid\n"</literal>
            <literal type="string">"             and pgxc_class.pcattnum = 0\n"</literal>
            <literal type="string">"             and pgxc_node.node_name = '%s'\n"</literal>
            <literal type="string">"             and pgxc_node.oid = ANY (pgxc_class.nodeoids)\n"</literal>
            <literal type="string">"             ;\n"</literal></expr></argument>,
            <argument><expr><name>datanodeName</name></expr></argument>, <argument><expr><name>datanodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>databasename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s --quiet -f %s"</literal></expr></argument>,
                       <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>,
                       <argument><expr><name>queryFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>username</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s --quiet -f %s -d %s"</literal></expr></argument>,
                       <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>,
                       <argument><expr><name>queryFname</name></expr></argument>, <argument><expr><name>databasename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s --quiet -f %s -d %s -U %s"</literal></expr></argument>,
                       <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>cdIdx</name></expr>]</index></expr></argument>,
                       <argument><expr><name>queryFname</name></expr></argument>, <argument><expr><name>databasename</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>, <argument><expr><name>queryFname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * =======================================================================================
 *
 * Loop of main command processor
 *
 * ======================================================================================
 */</comment>
<function><type><name>void</name></type> <name>do_command</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>inf</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>istty</name> <init>= <expr><operator>(</operator><operator>(</operator><name>inf</name> <operator>==</operator> <name>stdin</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>interactive</name> <init>= <expr><operator>(</operator><operator>(</operator><name>inf</name> <operator>==</operator> <name>stdin</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>outf</name> <operator>==</operator> <name>stdout</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wkline</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>histfile</name><index>[<expr><name>MAXPATH</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HISTFILE</name></cpp:macro>    <cpp:value>".pgxc_ctl_history"</cpp:value></cpp:define>
    
    <expr_stmt><expr><name><name>histfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pgxc_ctl_home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>histfile</name></expr></argument>, <argument><expr><name>MAXPATH</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>HISTFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>read_history</name><argument_list>(<argument><expr><name>histfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Set the long jump path so that we can come out straight here in case of
     * an error. There is not much to reinitialize except may be freeing up the
     * wkline buffer and resetting the long jump buffer pointer. But if
     * anything else needs to reset, that should happen in the following block
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>dcJmpBufMainLoop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>whereToJumpMainLoop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>wkline</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>wkline</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>istty</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>wkline</name> <operator>=</operator> <call><name>readline</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_xc_prompt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>wkline</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>wkline</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>wkline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add_history</name><argument_list>(<argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wkline</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_xc_prompt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>trimNl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeLogOnly</name><argument_list>(<argument><expr><literal type="string">"PGXC %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>whereToJumpMainLoop</name> <operator>=</operator> <operator>&amp;</operator><name>dcJmpBufMainLoop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>do_singleLine</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>whereToJumpMainLoop</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>    <comment type="block">/* "q" command was found */</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>histfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>write_history</name><argument_list>(<argument><expr><name>histfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>



<comment type="block">/*
 * ---------------------------------------------------------------------------
 *
 * Single line command processor
 *
 * -----------------------------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>do_singleLine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>wkline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Parsecommand
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"exit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Exit command */</comment>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"echo"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_echo_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"deploy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_deploy</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ConfigType</name></type>    <name>config_type</name> <init>= <expr><name>CONFIG_COMPLETE</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"empty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>config_type</name> <operator>=</operator> <name>CONFIG_EMPTY</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"minimal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>config_type</name> <operator>=</operator> <name>CONFIG_MINIMAL</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"complete"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>config_type</name> <operator>=</operator> <name>CONFIG_COMPLETE</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>token</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>config_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>config_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>do_prepareConfFile</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>, <argument><expr><name>config_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_kill_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_init_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_start_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_stop_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_monitor_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_failover_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"reconnect"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_reconnect_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_add_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_remove_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <comment type="block">/*
     * Show commnand ... show [variable | var] varname ...
     *                     show [variable | var] all
     *                     show config[uration] ....
     */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"show"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify what to show\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"variable"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Variable */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify variable name to print\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>print_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content> <while>while <condition>(<expr><name>line</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>print_var</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"configuration"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"configure"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Configuration */</comment>
                <expr_stmt><expr><call><name>show_configuration</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify datanode for show resource command.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datanodeName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: please specify datanode name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name>datanodeName</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>show_Resource</name><argument_list>(<argument><expr><name>datanodeName</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>datanodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot show %s now, sorry.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <comment type="block">/*
     * Log command    log variable varname ...
     *                log variable all
     *                log msg artitrary_message_to_the_end_of_the_line
     */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify what to log\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"variable"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify variable name to log\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>print_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content> <while>while <condition>(<expr><name>line</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>print_var</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while></block_content></block></else></if_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>writeLogOnly</name><argument_list>(<argument><expr><literal type="string">"USERLOG: \"%s\"\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot log %s in this version.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"deploy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_deploy</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"configure"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_configure_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"Psql"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdLine</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>cmdLine</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify coordinator name after '-'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified node %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s"</literal></expr></argument>,
                               <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                               <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>selectCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Selected %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s"</literal></expr></argument>,
                           <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                           <argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"Createdb"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdLine</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>cmdLine</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify coordinator name after '-'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified node %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"createdb -p %d -h %s %s"</literal></expr></argument>,
                               <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                               <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>selectCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Selected %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"createdb -p %d -h %s %s"</literal></expr></argument>,
                           <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                           <argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"Createuser"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdLine</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>cmdLine</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Please specify coordinator name after '-'.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified node %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"createuser -p %d -h %s %s"</literal></expr></argument>,
                               <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                               <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>selectCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Selected %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"createuser -p %d -h %s %s"</literal></expr></argument>,
                           <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                           <argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_test</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_set</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <comment type="block">/*
     * Clean command
     *
     * clean [all | 
     *        gtm [ all | master | slave ] |
     *          gtm_proxy [ all | nodename ... ]
     *          coordinator [[all | master | slave ] [nodename ... ]] |
     *        datanode [ [all | master | slave] [nodename ... ]
     */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_clean_command</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"cd"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * CD command
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>Chdir</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>Chdir</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"ssh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_show_help</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>wkline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>show_all_help</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"You are using pgxc_ctl, the configuration utility for PGXL\n"</literal>
           <literal type="string">"Type:\n"</literal>
           <literal type="string">"    help &lt;command&gt;\n"</literal>
           <literal type="string">"    where &lt;command&gt; is either add, Createdb, Createuser, clean,\n"</literal>
           <literal type="string">"        configure, deploy, failover, init, kill, log, monitor,\n"</literal>
           <literal type="string">"        prepare, q, reconnect, remove, set, show, start, \n"</literal>
           <literal type="string">"        stop or unregister\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_show_help</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>token</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>show_all_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"add gtm slave slave_name host port dir\n"</literal>
                <literal type="string">"add gtm_proxy name host port dir\n"</literal>
                <literal type="string">"add coordinator master name host port pooler dir extra_conf extra_pghba\n"</literal>
                <literal type="string">"add coordinator slave name host port pooler dir archDir\n"</literal>
                <literal type="string">"add datanode master name host port pooler dir xlogdir restore_datanode_name extra_conf extra_pghba\n"</literal>
                <literal type="string">"add datanode slave name host port pooler dir xlogdir archDir\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Add the specified node to your postgres-xl cluster:\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"Createdb"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"Createdb [ - coordinator ] createdb_option ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Invokes createdb utility to create a new database using specified coordinator\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"Createuser"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"Createuser[ - coordinator ] createuser_option ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Invokes createuser utility to create a new user using specified coordinator\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"clean all\n"</literal>
                <literal type="string">"clean gtm [all | master | slave]\n"</literal>
                <literal type="string">"clean gtm_proxy [all | nodename ... ]\n"</literal>
                <literal type="string">"clean coordinator [[all | master | slave ] [nodename ... ]]\n"</literal>
                <literal type="string">"clean datanode [[all | master | slave ] [nodename ... ]]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Stop specified node in immediate mode and clean all resources including data directory\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"configure"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"configure all\n"</literal>
                <literal type="string">"configure datanode nodename ...\n"</literal>
                <literal type="string">"configure coordinator nodename ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Configure specified node with the node information and reload pooler information\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"deploy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"deploy [ all | host ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Deploys postgres-xl binaries and other installation material to specified hosts\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"failover"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"failover [ gtm | coordinator nodename | datanode nodename | nodename ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Failover specified node to its master\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"init [force] all\n"</literal>
                <literal type="string">"init [force] nodename ...\n"</literal>
                <literal type="string">"init [force] gtm [ master | slave | all ]\n"</literal>
                <literal type="string">"init [force] gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"init [force] coordinator nodename ...\n"</literal>
                <literal type="string">"init [force] coordinator [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"init [force] datanode nodename ...\n"</literal>
                <literal type="string">"init [force] datanode [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Initializes specified nodes.\n"</literal>
                <literal type="string">"    [force] option removes existing data directories even if they are not empty\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"kill"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"kill all\n"</literal>
                <literal type="string">"kill nodename ...\n"</literal>
                <literal type="string">"kill gtm [ master | slave | all ]\n"</literal>
                <literal type="string">"kill gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"kill coordinator nodename ...\n"</literal>
                <literal type="string">"kill coordinator [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"kill datanode nodename ...\n"</literal>
                <literal type="string">"kill datanode [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Kills specified node:\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"log [ variable | var ] varname\n"</literal>
                <literal type="string">"log [ message | msg ] message_body\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Prints the specified contents to the log file\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"monitor all\n"</literal>
                <literal type="string">"monitor nodename ...\n"</literal>
                <literal type="string">"monitor gtm [ master | slave | all ]\n"</literal>
                <literal type="string">"monitor gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"monitor coordinator nodename ...\n"</literal>
                <literal type="string">"monitor coordinator [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"monitor datanode nodename ...\n"</literal>
                <literal type="string">"monitor datanode [ master | slave ] [ all | nodename ...  ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Monitors if specified nodes are running\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"prepare [ path ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Write pgxc_ctl configuration file template to the specified file\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"Psql"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"Psql [ - coordinator ] psql_option ... \n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Invokes psql targetted to specified coordinator\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"q | quit | exit\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Exits pgxc_ctl\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"reconnect"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"reconnect gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Reconnects specified gtm_proxy to new gtm\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"remove gtm slave\n"</literal>
                <literal type="string">"remove gtm_proxy nodename [ clean ]\n"</literal>
                <literal type="string">"remove coordinator [ master| slave ] nodename [ clean ]\n"</literal>
                <literal type="string">"remove datanode [ master| slave ] nodename [ clean ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Removes the specified node from the cluster\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"set varname value ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Set variable value\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"show"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"show [ configuration | configure | config ] [ all | basic ]\n"</literal>
                <literal type="string">"show [ configuration | configure | config ] host hostname ... \n"</literal>
                <literal type="string">"show [ configuration | configure | config ] gtm [ all | master | slave ]\n"</literal>
                <literal type="string">"show [ configuration | configure | config ] gtm_proxy [ all | gtm_proxy_name ... ]\n"</literal>
                <literal type="string">"show [ configuration | configure | config ] [ coordinator | datanode ] [ all | master | slave ] nodename ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Shows postgres-xl configuration\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"show resource datanode datanodename [ databasename [ username ] ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Shows table names specified datanode is involved\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"show [ variable | var ] [ all | varname ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Displays configuration or variable name and its value\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"start all\n"</literal>
                <literal type="string">"start nodename ...\n"</literal>
                <literal type="string">"start gtm [ master | slave | all ]\n"</literal>
                <literal type="string">"start gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"start coordinator nodename ...\n"</literal>
                <literal type="string">"start coordinator [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"start datanode nodename ...\n"</literal>
                <literal type="string">"start datanode [ master | slave ] [ all | nodename ... ]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Starts specified node\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"stop [ -m smart | fast | immediate ] all\n"</literal>
                <literal type="string">"stop gtm [ master | slave | all ]\n"</literal>
                <literal type="string">"stop gtm_proxy [ all | nodename ... ]\n"</literal>
                <literal type="string">"stop [ -m smart | fast | immediate ] coordinator nodename ... \n"</literal>
                <literal type="string">"stop [ -m smart | fast | immediate ] coordinator [ master | slave ] [ all | nodename ... ] \n"</literal>
                <literal type="string">"stop [ -m smart | fast | immediate ] datanode nodename ... \n"</literal>
                <literal type="string">"stop [ -m smart | fast | immediate ] datanode [ master | slave ] [ all | nodename ... ] \n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Stops specified node\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"unregister"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"unregister unregister_option ...\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Unregisteres specified node from the gtm\n"</literal>
                <literal type="string">"For more details, please see the pgxc_ctl documentation\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"Unrecognized command: such commands are sent to shell for execution\n"</literal>
                <literal type="string">"\n"</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_any_available_coord</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>except</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <name>except</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>ii</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * this could be the first coordinator that is being added.
     * This call would happen *after* expanding the array to
     * accomodate the new coordinator. Hence we check for size
     * being more than 1
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to find any running coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
 
<function><type><name>int</name></type>
<name>get_any_available_datanode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>except</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <name>except</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>ii</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * this could be the first datanode that is being added.
     * This call would happen *after* expanding the array to
     * accomodate the new datanode. Hence we check for size
     * being more than 1
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to find any running datanode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
