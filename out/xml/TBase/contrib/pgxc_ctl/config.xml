<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/config.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * config.c
 *
 *    Configuration module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * This module handles pgxc_ctl configuration.  This file includes
 * parser of incoming variable inforation which is installed to
 * pgxc_ctl variable system.
 *
 * This module also checks if there's any conficts in the resources
 * among different nodes.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>verifyResource</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>Quote</name> <block>{ <decl><name>UNQUOTED</name></decl>, <decl><name>SINGLEQUOTED</name></decl>, <decl><name>DOUBLEQUOTED</name></decl> }</block>;</enum>

<comment type="block">/*====================================================================
 *
 * Configuration parser
 *
 * The following functions read, parse and constract variables.
 * 
 * As you see pgxc_ctl_bash_script[] in pgxc_ctl_bash.c, each variable
 * will be read in the form of
 * varname value value ....
 *
 * Each variable is basically an array.  Sometimes, only the first
 * element is needed.
 *
 * Please note that pgxc_ctl_bash.c is build by make_signature script
 * using pgxc_ctl_bash_2 and pgxc_cont_conf_part dynamically.
 *
 * You can change detailed behaviors of the script by editing these
 * files.  Be careful! Please maintain the interface to this module.
 *
 *===================================================================
 */</comment>
<comment type="block">/*
 * Get a token from the line
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>get_word</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>Quote</name></name></type> <name>quoted</name> <init>= <expr><name>UNQUOTED</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <for>for<control>(<init>;</init><condition><expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>line</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>quoted</name> <operator>=</operator> <name>DOUBLEQUOTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>quoted</name> <operator>=</operator> <name>SINGLEQUOTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>quoted</name> <operator>==</operator> <name>DOUBLEQUOTED</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>quoted</name> <operator>==</operator> <name>SINGLEQUOTED</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
     <else>else<block type="pseudo"><block_content>
        <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>line</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>line</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>line</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse line and create/update a variable.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>newv</name></decl>;</decl_stmt>

    
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_word</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>varname</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newv</name> <operator>=</operator> <call><name>confirm_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>reset_value</name><argument_list>(<argument><expr><name>newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>get_word</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            
            <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>newv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Parse line and filter only pre-defined variables.
 *
 * This blocks any unknow variables to be build within pgxc_ctl structure.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_line_select</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>selectThis</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>newv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_word</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>varname</name> <operator>||</operator> <name><name>varname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>selectThis</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varname</name></expr></argument>, <argument><expr><name><name>selectThis</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newv</name> <operator>=</operator> <call><name>confirm_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            <while>while<condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>get_word</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>newv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Configuration file I/F
 */</comment>
<function><type><name>void</name></type> <name>read_vars</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>parse_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Configuration file I/F
 */</comment>
<function><type><name>void</name></type> <name>read_selected_vars</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>selectThis</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>parse_line_select</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>selectThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Get all the servers --&gt; VAR_allServers
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addServer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>confirm_var</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>name</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Test each node and build target server list
 */</comment>
<function><type><name>void</name></type> <name>makeServerList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Initialize */</comment>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM Master */</comment>
    <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM_Proxy */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Datanode Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addServer</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Should add secondary slaves */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * Take care of "no" slaves and build server list.   At present, we don't support
 * Cascaded or multi slaves.   This will be supported in the future.
 *
 * Please note that log archive backup site is not counted as this server list
 * because such servers are not likely to provide XC node operation.
 *
 * Log archive backup will be implemented in the future.
 */</comment>
<function><type><name>int</name></type> <name>is_none</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove gtm slave.  Used at failover.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emptyGtmSlave</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove gtm proxies.   Used when a node crashes.
 * Because gtm_proxy is expected to be running at any target
 * server, we don't have gtm_proxy slaves.
 * We can just initialize gtm_proy using gtminit, configure and
 * run it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emptyGtmProxies</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Removes coordinator slaves from pgxc_ctl configuration.
 * This is needed when a slave promotes and becomes a new
 * master.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emptyCoordSlaves</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Removes datanode slave from pgxc_ctl configuration.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emptyDatanodeSlaves</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Scans initial configuration and set up "not configured" things.
 *
 * If, for example, gtm proxy is not configured,
 * we set gtmProxy variable to "n".
 *
 * When gtmProxy varieble is already set to "n", remove gtm_proxy
 * configuration information.
 *
 * Similar handling will be done for gtm slave, coordinator slaves
 * and datanode slaves.
 */</comment>
<function><type><name>void</name></type> <name>handle_no_slaves</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>is_empty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* GTM Slave */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>emptyGtmSlave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>confirm_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>emptyGtmSlave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* GTM Proxy */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>emptyGtmProxies</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>is_empty</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>emptyGtmProxies</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Coordinator Slaves */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>emptyCoordSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>is_empty</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>emptyCoordSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: coordSlaveServers variable not found where coordSlave is set to \"y\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>emptyCoordSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Datanode Slaves */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>emptyDatanodeSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>is_empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>is_empty</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>emptyDatanodeSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: datanodeSlaveServers variable not found where datanodeSlave is set to \"y\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>emptyDatanodeSlaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check if there's no overlap in the resource --&gt; Port, host and directory.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reportMissingVar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>anyConfigErrors</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkIfVarIsConfigured</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* var could be just defined without valid contents */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reportMissingVar</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkIfConfigured</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkIfVarIsConfigured</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkConfiguredAndSize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sz0</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkIfVarIsConfigured</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>confirm_var</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>sz0</name> <operator>=</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>arraySizeName</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz0</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Number of elements in %s definitions are different %s and %s.  Check your configuration\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checkSpecificResourceConflict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_gtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>checkNameConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>is_gtm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Note that 1 will be returned when a conflict is found
 */</comment>
<function><type><name>int</name></type> <name>checkNameConflict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_gtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/*
     * GTM Master
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_gtm</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/*
     * GTM Proxy
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/*
     * Coordinator
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/*
     * Datanode
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Note that 1 will be returned when a conflict is found.
 */</comment>
<function><type><name>int</name></type> <name>checkPortConflict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* GTM Master */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
    <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Proxy */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> 
            <operator>(</operator><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Coordinator Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
                <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Datanode Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
                <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <name>port</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checkDirConflict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* "none" conflictd with nothing */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Master */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
    <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM Proxy */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Coordinator Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Datanode Master WAL Dirs */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Datanode Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Slave WAL Dirs */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if there's any conflict among src and dest, checks duplicate in names, servers, ports and directories.
 *
 * The rules are:
 *
 * 1) Each node (gtm, gtm_proxy, coordinator, datanode) must have unique name.
 *
 * 2) A port, in a given host, must be owned (listed to) only by single node.
 *
 * 3) A directory, in a given host, must be owned (used) only by single node.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkResourceConflict</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcNames</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcServers</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcPorts</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcPoolers</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcDirs</name></decl></parameter>,
                                  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destNames</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destServers</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destPorts</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destPoolers</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destDirs</name></decl></parameter>, 
                                  <parameter><decl><type><name>int</name></type> <name>destOnly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checkName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcNames</name> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No source specified */</comment>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>destOnly</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Check conflict among the source first */</comment>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <comment type="block">/* Pooler and the port in the same name */</comment>
            <if_stmt><if>if <condition>(<expr><name>srcPoolers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in between port and pooler within %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>checkName</name> <operator>&amp;&amp;</operator> <name>srcNames</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcServers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcPoolers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcPorts</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>srcDirs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <name>ii</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="block">/* Name conflict */</comment>
                <if_stmt><if>if <condition>(<expr><name>checkName</name> <operator>&amp;&amp;</operator> <name>srcNames</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>checkName</name> <operator>&amp;&amp;</operator> <name>srcNames</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in resource name within %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>srcServers</name> <operator>&amp;&amp;</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>srcServers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>srcServers</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Ports and Poolers */</comment>
                    <if_stmt><if>if <condition>(<expr><name>srcPorts</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>srcPoolers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>srcPorts</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
                       <operator>(</operator><name>srcPorts</name> <operator>&amp;&amp;</operator> <name>srcPoolers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
                       <operator>(</operator><name>srcPoolers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in port and pooler numbers within  %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* Directories */</comment>
                    <if_stmt><if>if <condition>(<expr><name>srcDirs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>srcDirs</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in directories within  %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check between src and destination */</comment>
    <if_stmt><if>if <condition>(<expr><name>destNames</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>destNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="block">/* Resource names */</comment>
                <if_stmt><if>if <condition>(<expr><name>checkName</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in names between  %s and %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>destNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>destServers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>destServers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>destServers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>srcServers</name> <operator>&amp;&amp;</operator> <name>destServers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Ports and poolers */</comment>
                    <if_stmt><if>if <condition>(<expr><name>destPorts</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>destPorts</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>destPorts</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>destPoolers</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>destPoolers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>destPoolers</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcPorts</name> <operator>&amp;&amp;</operator> <name>destPorts</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>destPoolers</name> <operator>&amp;&amp;</operator> <name>srcPorts</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>destPoolers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>  <operator>||</operator>
                        <operator>(</operator><name>srcPoolers</name> <operator>&amp;&amp;</operator> <name>destPorts</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>srcPoolers</name> <operator>&amp;&amp;</operator> <name>destPoolers</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcPoolers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in port/pooler in %s and %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>destNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* Dir Names */</comment>
                    <if_stmt><if>if <condition>(<expr><name>srcDirs</name> <operator>&amp;&amp;</operator> <name>destDirs</name> <operator>&amp;&amp;</operator>
                            <call><name>doesExist</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                            <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                            <call><name>doesExist</name><argument_list>(<argument><expr><name>destDirs</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                            <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                            <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>srcDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>destDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Conflict in directory names in %s and %s variable.\n"</literal></expr></argument>, <argument><expr><name>srcNames</name></expr></argument>, <argument><expr><name>destNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * Check if each node resource is configured properly
 * Again, finding an error will not make the program stop.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>verifyResource</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>GtmVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_gtmName</name></expr>, 
                       <expr><name>VAR_gtmMasterServer</name></expr>, 
                       <expr><name>VAR_gtmMasterPort</name></expr>, 
                       <expr><name>VAR_gtmMasterDir</name></expr>, 
                       <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>mainClusterVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_pgxcMainClusterName</name></expr>,
                            <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>multiCoordClusterVars</name><index>[]</index></name> <init>=<expr><block>{<expr><name>VAR_coordNames</name></expr>,
                                    <expr><name>VAR_coordMasterCluster</name></expr>,
                                    <expr><name>VAR_coordSlaveCluster</name></expr>,
                                 <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>multiDatanodeClusterVars</name><index>[]</index></name> <init>=<expr><block>{<expr><name>VAR_datanodeNames</name></expr>,
                                     <expr><name>VAR_datanodeMasterCluster</name></expr>,
                                         <expr><name>VAR_datanodeSlaveCluster</name></expr>,
                                 <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>GtmSlaveVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_gtmSlaveName</name></expr>,
                            <expr><name>VAR_gtmSlaveServer</name></expr>, 
                            <expr><name>VAR_gtmSlavePort</name></expr>, 
                            <expr><name>VAR_gtmSlaveDir</name></expr>, 
                            <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>gtmProxyVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_gtmProxyNames</name></expr>, 
                            <expr><name>VAR_gtmProxyServers</name></expr>, 
                            <expr><name>VAR_gtmProxyPorts</name></expr>, 
                            <expr><name>VAR_gtmProxyDirs</name></expr>, 
                            <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>coordMasterVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_coordNames</name></expr>, 
                               <expr><name>VAR_coordPorts</name></expr>, 
                               <expr><name>VAR_poolerPorts</name></expr>, 
                               <expr><name>VAR_coordMasterServers</name></expr>,
                               <expr><name>VAR_coordMasterDirs</name></expr>, 
                               <expr><name>VAR_coordMaxWALSenders</name></expr>, 
                               
                               <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>coordSlaveVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_coordNames</name></expr>, 
                              <expr><name>VAR_coordSlaveServers</name></expr>, 
                              <expr><name>VAR_coordSlavePorts</name></expr>, 
                              <expr><name>VAR_coordSlavePoolerPorts</name></expr>, 
                              <expr><name>VAR_coordSlaveDirs</name></expr>, 
                              <expr><name>VAR_coordArchLogDirs</name></expr>, 
                             
                              <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/*
     * Please note that at present, pgxc_ctl supports only synchronous replication
     * between {coordinator|datanode} master and server.
     *
     * Start/stop operation of the master and failover operation is affected by this
     * settings.  Will be improved soon.
     */</comment>
    char *coordSlaveSVars[] = {VAR_coordSlaveSync, NULL};    <comment type="block">/* For extension */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>datanodeMasterVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_datanodeNames</name></expr>, 
                                  <expr><name>VAR_datanodePorts</name></expr>, 
                                  <expr><name>VAR_datanodePoolerPorts</name></expr>, 
                                  <expr><name>VAR_datanodeMasterServers</name></expr>,
                                  <expr><name>VAR_datanodeMasterDirs</name></expr>, 
                                  <expr><name>VAR_datanodeMaxWALSenders</name></expr>,
                                  
                                  <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>datanodeSlaveVars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>VAR_datanodeNames</name></expr>,
                                 <expr><name>VAR_datanodeSlaveServers</name></expr>,
                                 <expr><name>VAR_datanodeSlavePorts</name></expr>,
                                 <expr><name>VAR_datanodeSlavePoolerPorts</name></expr>, 
                                 <expr><name>VAR_datanodeSlaveDirs</name></expr>,
                                 <expr><name>VAR_datanodeArchLogDirs</name></expr>,
                                 
                                 <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    char *datanodeSlaveSVars[] = {VAR_datanodeSlaveSync, NULL};    <comment type="block">/* For extension, see above */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <comment type="block">/*
     * -------------- Fundamental check -------------------
     */</comment>
    <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkIfConfigured</name><argument_list>(<argument><expr><name>mainClusterVars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>multiCoordClusterVars</name></expr></argument>, <argument><expr><literal type="string">"multi coord cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>multiDatanodeClusterVars</name></expr></argument>, <argument><expr><literal type="string">"multi datanode cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* GTM */</comment>
    <expr_stmt><expr><call><name>checkIfConfigured</name><argument_list>(<argument><expr><name>GtmVars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkIfConfigured</name><argument_list>(<argument><expr><name>GtmSlaveVars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM proxy */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>gtmProxyVars</name></expr></argument>, <argument><expr><literal type="string">"GTM Proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <expr_stmt><expr><call><name>checkIfConfigured</name><argument_list>(<argument><expr><name>coordMasterVars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>coordMasterVars</name></expr></argument>, <argument><expr><literal type="string">"coordinator master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Coordinator Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        checkIfConfigured(coordSlaveSVars);    <comment type="block">/* For extension, see above */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>coordSlaveVars</name></expr></argument>, <argument><expr><literal type="string">"coordinator slave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>datanodeMasterVars</name></expr></argument>, <argument><expr><literal type="string">"datanode master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Datanode Slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        checkIfConfigured(datanodeSlaveSVars);    <comment type="block">/* For extension, see above */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>checkConfiguredAndSize</name><argument_list>(<argument><expr><name>datanodeSlaveVars</name></expr></argument>, <argument><expr><literal type="string">"datanode slave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>anyConfigErrors</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Found fundamental configuration error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * --------------- Resource Conflict Check ---------------------
     */</comment>
    <comment type="block">/* 
     * GTM Master and others ----------------
     */</comment>
    <expr_stmt><expr><name>anyConfigErrors</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <comment type="block">/* GTM and GTM slave */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                              <argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM and GTM Proxy, if any */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                              <argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM and coordinator masters */</comment>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                          <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                          <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM and coordinator slaves, if any */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                              <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* GTM and datanode masters */</comment>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                          <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                          <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                          <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* GTM and datanode slaves, if any */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * GTM slave and others ------------
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* GTM slave and GTM master, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                                  <argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>,
                                  <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>, 
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* GTM slave and GTM Proxy, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                                  <argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>, 
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* GTM slave and coordinator masters */</comment>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                              <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* GTM slave and coordinator slaves, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                                  <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>,
                                  <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* GTM slave and datanode masters */</comment>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* GTM slave and datanode slave, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * GTM proxy and others ---------
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* GTM proxy and coordinator masters */</comment>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                              <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                              <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* GTM proxy and coordinator slaves, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                                  <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* GTM proxy and datanode masters */</comment>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* GTM proxy and datanode slave, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * Coordinator Masters and others
     */</comment>
    <comment type="block">/* Coordinator master and coordinator slaves, if any */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                              <argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>,
                              <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator masters and datanode masters */</comment>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                          <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                          <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                          <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>,
                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Coordinator masters and datanode slave, if any */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * Coordinator slaves and others
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Coordinator slave and datanode masters */</comment>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                              <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>,
                              <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Coordinator slave and datanode slave, if any */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * Datanode masters and others ---
     */</comment>
    <comment type="block">/* Datanode master self */</comment>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>,
            <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Datanode master and datanode slave, if any */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResourceConflict</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>,
                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>anyConfigErrors</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Found conflicts among resources.  Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the minimum components are configured --- gtm master, coordinator master and datanode master.
 */</comment>
<function><type><name>void</name></type> <name>check_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * See if mandatory configuration is defined.  Will continue if error is detected
     * to check all the errors at a time.
     */</comment>
    <comment type="block">/* GTM Master */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM master configuration is missing. gtmName, gtmMasterServer, gtmMasterPort or gtmMasterDir\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Coordinator Master */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator master configuration is missing. coordNames, coodPorts, poolerPorts, coordMasterPorts or coordMasterDirs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Datanode Master */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode master configuration is missing. datanodeNames, datanodePorts, datanodePoolerPorts, datanodeMasterPorts or datanodeMasterDirs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>verifyResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>makeServerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Backup configuration files to a remote site as specified.
 */</comment>
<function><type><name>int</name></type> <name>backup_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> 
        <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <return>return<expr><operator>(</operator><call><name>doImmediate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"scp %s %s@%s:%s/%s"</literal></expr></argument>,
                       <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>,
                       <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>NodeType</name></type> <name>getNodeType</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* Check GTM */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NodeType_GTM</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* GTM_Proxy */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NodeType_GTM_PROXY</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Coordinator */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NodeType_COORDINATOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Datanode */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NodeType_DATANODE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <comment type="block">/* Nodename */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_allServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NodeType_SERVER</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>NodeType_UNDEF</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PGXC_CTL_MAX_WAL_SENDERS</name></cpp:macro>    <cpp:value>5</cpp:value></cpp:define>

<comment type="block">/*
 * Determine default value for max_wal_senders. We pick up the value specified
 * for some other existing coordinator or datanode or return the
 * DEFAULT_PGXC_CTL_MAX_WAL_SENDERS value if none is spcified
 */</comment>
<function><type><name>int</name></type> <name>getDefaultWalSender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>isCoord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>names</name> <init>= <expr><ternary><condition><expr><name>isCoord</name></expr> ?</condition><then> <expr><name>VAR_coordNames</name></expr> </then><else>: <expr><name>VAR_datanodeNames</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>walSender</name> <init>= <expr><ternary><condition><expr><name>isCoord</name></expr> ?</condition><then> <expr><name>VAR_coordMaxWALSenders</name></expr> </then><else>: <expr><name>VAR_datanodeMaxWALSenders</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>walSender</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nsenders</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>walSender</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>nsenders</name></expr> ?</condition><then> <expr><name>nsenders</name></expr> </then><else>: <expr><name>DEFAULT_PGXC_CTL_MAX_WAL_SENDERS</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* If none found, return the default value.. */</comment>
    <return>return <expr><name>DEFAULT_PGXC_CTL_MAX_WAL_SENDERS</name></expr>;</return>
</block_content>}</block></function>
</unit>
