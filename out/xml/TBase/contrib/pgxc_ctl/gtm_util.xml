<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/gtm_util.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_util.c
 *
 *    GTM utility module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * This module was imported from Koichi's personal development.
 *
 * Provides unregistration of the nodes from gtm.  This operation might be
 * needed after some node crashes and its registration information remains
 * in GTM.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<comment type="block">/*
#include "gtm/gtm_c.h"
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<comment type="block">/* This is an ugly hack to avoid conflict between gtm_c.h and pgxc_ctl.h */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>true</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>false</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_util.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>command_t</name>
<block>{
    <decl><name>CMD_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>CMD_UNREGISTER</name></decl>
}</block></enum></type> <name>command_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>    <modifier>*</modifier></type><name>nodename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_PGXCNodeType</name></type> <name>nodetype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Invalid */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetToken</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(line = get_word(line, &amp;token))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcmp(token, word) == 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TestToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcasecmp(token, word) == 0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inputError</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>unregisterFromGtm</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <for>for<control>(<init>;</init><condition><expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator><call><name>inputError</name><argument_list>(<argument><expr><literal type="string">"No -n option value was found."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>myname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"-Z"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator><call><name>inputError</name><argument_list>(<argument><expr><literal type="string">"No -Z option value was found."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>GTM_NODE_GTM</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy_postmaster"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>GTM_NODE_GTM_PROXY_POSTMASTER</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>GTM_NODE_COORDINATOR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>testToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nodetype</name> <operator>=</operator> <name>GTM_NODE_DATANODE</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Invalid -Z option value, %s\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>nodetype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no node type was specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>myname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>myname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>DefaultName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: No command specified.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unregister: no node name was found to unregister.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>process_unregister_command</name><argument_list>(<argument><expr><name>nodetype</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>connectGTM</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>connect_str</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Use 60s as connection timeout */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>connect_str</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d postmaster=0 connect_timeout=60"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>myname</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>DefaultName</name></expr> </then><else>: <expr><name>myname</name></expr></else></ternary></expr></argument>, <argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>process_unregister_command</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>connectGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to connect to GTM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>node_unregister</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unregister %s from GTM.\n"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Failed to unregister %s from GTM.\n"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
