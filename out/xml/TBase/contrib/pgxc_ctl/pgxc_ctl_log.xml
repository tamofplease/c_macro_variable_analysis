<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/pgxc_ctl_log.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pgxc_ctl_log.c
 *
 *    Logging module of Postgres-XC configuration and operation tool.
 *
 *
 * Portions Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * To allow mutiple pgxc_ctl to run in parallel and write a log to the same file,
 * this module uses fctl to lock log I/O.  You can lock/unlock in stack.   Anyway
 * actual lock will be captured/released at the bottom level of this stack.
 * If you'd like to have a block of the logs to be in a single block, not interrupted
 * bo other pgxc_ctl log, you should be careful to acquire the lock and release it
 * reasonablly.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>logFileName</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pgxcCtlGetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lockStack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lockStackLimit</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>logMsgLevel</name> <init>= <expr><name>INFO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>printMsgLevel</name> <init>= <expr><name>WARNING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>    <name>printLocation</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>logLocation</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Path is NULL if name is effective.
 * Path is valid if name is NULL
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_msgLogLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"panic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>PANIC</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>ERROR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>NOTICE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>DEBUG2</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>DEBUG3</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_printLogLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>ERROR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"panic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>PANIC</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>ERROR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>NOTICE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>DEBUG2</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"debug3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>DEBUG3</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initLog</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>logFile</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>logFileName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFileName</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%d_pgxc_ctl.log"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>logFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>logFileName</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open log file %s, %s\n"</literal></expr></argument>, <argument><expr><name>logFileName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Setup log/print message level */</comment>
    <expr_stmt><expr><call><name>set_msgLogLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_printLogLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>printLocation</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_printLocation</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>logLocation</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_logLocation</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>lockStack</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>closeLog</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logFile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>elog_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lineno</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_location</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lineno</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>elogMsgRaw0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>logFile</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;=</operator> <name>logMsgLevel</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>logLocation</name> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><literal type="string">"%s(%d):%s %s:%s(%d) %s"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pgxcCtlGetTime</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><literal type="string">"%s(%d):%s %s"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pgxcCtlGetTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>printMsgLevel</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>printLocation</name> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>outF</name><operator>)</operator></expr> ?</condition><then> <expr><name>outF</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%s:%s(%d) %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>outF</name><operator>)</operator></expr> ?</condition><then> <expr><name>outF</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>outF</name><operator>)</operator></expr> ?</condition><then> <expr><name>outF</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>clean_location</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>elogMsgRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elogMsgRaw0</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>elogFinish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>&gt;=</operator> <name>logMsgLevel</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>level</name> <operator>&gt;=</operator> <name>printMsgLevel</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elogMsgRaw</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>elogFileRaw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elogMsgRaw0</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open \"%s\" for read, %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>timebuf</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Please note that this routine is not reentrant
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pgxcCtlGetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm_s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tm_s</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*    tm_s = gmtime(&amp;now); */</comment>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%02d%02d%02d%02d%02d_%02d"</literal></expr></argument>, 
             <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>tm_s</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1900</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2000</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>tm_s</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1900</literal> <operator>-</operator> <literal type="number">2000</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_year</name></name></expr></else></ternary></expr></argument>, 
             <argument><expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>timebuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>writeLogRaw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>logFile</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><literal type="string">"%s(%d):%s %s"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pgxcCtlGetTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>logFile</name></expr> ?</condition><then> <expr><name>logFile</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><ternary><condition><expr><name>outF</name></expr> ?</condition><then> <expr><name>outF</name></expr> </then><else>: <expr><name>stderr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>writeLogOnly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>logFile</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><literal type="string">"%s(%d):%s %s"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pgxcCtlGetTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>setLogMsgLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>logMsgLevel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logMsgLevel</name> <operator>=</operator> <name>newLevel</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getLogMsgLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>logMsgLevel</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>setPrintMsgLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>printMsgLevel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>printMsgLevel</name> <operator>=</operator> <name>newLevel</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>getPrintMsgLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>printMsgLevel</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lockLogFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock1</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>logFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lockStack</name> <operator>&gt;</operator> <name>lockStackLimit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Log file lock stack exceeded the limit %d. Something must be wrong.\n"</literal></expr></argument>, <argument><expr><name>lockStackLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lockStack</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
    	<decl_stmt><decl><type><name>int</name></type> <name>file_no</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>F_WRLCK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_no</name><operator>=</operator><call><name>fileno</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>file_no</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>file_no</name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lockStack</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>unlockLogFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock1</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>logFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>lockStack</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lockStack</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Log file stack is below zero.  Something must be wrong.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>lockStack</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
    	<decl_stmt><decl><type><name>int</name></type> <name>file_no</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>F_UNLCK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock1</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_no</name><operator>=</operator><call><name>fileno</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>file_no</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>file_no</name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
