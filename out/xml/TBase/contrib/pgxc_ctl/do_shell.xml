<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/do_shell.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * do_shell.c
 *
 *    Shell control module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * This module provides a basic infrastructure to run various shell script.
 *
 * Basically, for a single operation, when more than one server are involved,
 * they can be run in parallel.  Within each parallel execution, we can have
 * more than one command to be run in series.
 *
 * cmdList_t contains more than one command trains can be done in parallel.
 * cmd_t will be contained in cmdList_t structure which represents a train
 * of shell script.
 *
 * For each command, stdout will be handled automatically in this module.
 * Stdin can be provided by callers.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>xc_status</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>file_sn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nextSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getCleanHostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void waitTypeReturn(void);
static void echoPid(pid_t pid);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>allocActualCmd</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prepareStdout</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * SIGINT handler
 */</comment>
<decl_stmt><decl><type><name>jmp_buf</name> <modifier>*</modifier></type><name>whereToJumpDoShell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>dcJmpBufDoShell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name> <modifier>*</modifier></type><name>whereToJumpMainLoop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmp_buf</name></type> <name>dcJmpBufMainLoop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pqsigfunc</name></type> <name>old_HandlerDoShell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>do_shell_SigHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Signal handler (SIGINT only)
 */</comment>
<function><type><name>void</name></type> <name>do_shell_SigHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>whereToJumpDoShell</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><name>whereToJumpDoShell</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>,<argument><expr><name>do_shell_SigHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Stdout/stderr/stdin will be created at $LocalTmpDir.
 * 
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>createLocalFileName</name><parameter_list>(<parameter><decl><type><name>FileType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* 
     * Filename is $LocalTmpDir/type_pid_serno.
     */</comment>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>STDIN</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/STDIN_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STDOUT</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/STDOUT_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STDERR</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/STDERR_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>GENERAL</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/GENERAL_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <default>default:</default>
            <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Please note that remote stdout is not in pgxc_ctl so far.  It will directly be written
 * to local stdout.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>createRemoteFileName</name><parameter_list>(<parameter><decl><type><name>FileType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* 
     * Filename is $TmpDir/hostname_type_serno.
     */</comment>
    <expr_stmt><expr><call><name>getCleanHostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>STDIN</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s_STDIN_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STDOUT</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s_STDOUT_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>STDERR</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s_STDERR_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>GENERAL</name></expr>:</case>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s_GENERAL_%d_%d"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file_sn</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ==============================================================================================
 *
 * Tools to run a command foreground.
 *
 * ==============================================================================================
 */</comment>
<comment type="block">/*
 * Run any command foreground locally.  No more redirection.
 * Return value same as system();
 * Stdout will be set to outF.  The content will also be written to log if specified.
 * If stdIn is NULL or stdiIn[0] == 0, then stdin will not be used.
 * If host == NULL or host[0] == 0, then the command will be run locally.
 */</comment>

<comment type="block">/* Does not handle stdin/stdout.  If needed, they should be included in the cmd. */</comment>
<function><type><name>int</name></type> <name>doImmediateRaw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>actualCmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>system</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>pgxc_popen_wRaw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>actualCmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>popen</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>pgxc_popen_w</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>actualCmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sshCmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sshCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"ssh %s@%s \" %s \""</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>sshCmd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not open the command \"%s\" to write, %s\n"</literal></expr></argument>, <argument><expr><name>sshCmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>
    
<function><type><name>int</name></type> <name>doImmediate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stdIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd_wk</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>actualCmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteStdout</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>localStdout</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>cmd_wk</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><name>cmd_fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Local case */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"( %s ) &lt; %s &gt; %s 2&gt;&amp;1"</literal></expr></argument>,
                 <argument><expr><name>cmd_wk</name></expr></argument>,
                 <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>stdIn</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>stdIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/dev/null"</literal></expr> </then><else>: <expr><name>stdIn</name></expr></else></ternary></expr></argument>,
                 <argument><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>STDOUT</name></expr></argument>, <argument><expr><name>localStdout</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Actual command: %s\n"</literal></expr></argument>, <argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rc1</name></decl>;</decl_stmt>
        <comment type="block">/* Remote case */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"ssh %s@%s \"( %s ) &gt; %s 2&gt;&amp;1\" &lt; %s &gt; /dev/null 2&gt;&amp;1"</literal></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>cmd_wk</name></expr></argument>, 
                 <argument><expr><call><name>createRemoteFileName</name><argument_list>(<argument><expr><name>STDOUT</name></expr></argument>, <argument><expr><name>remoteStdout</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>stdIn</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>stdIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"/dev/null"</literal></expr> </then><else>: <expr><name>stdIn</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Actual Command: %s\n"</literal></expr></argument>, <argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"scp %s@%s:%s %s &gt; /dev/null 2&gt;&amp;1"</literal></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>remoteStdout</name></expr></argument>,
                 <argument><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>STDOUT</name></expr></argument>, <argument><expr><name>localStdout</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Bring remote stdout: %s\n"</literal></expr></argument>, <argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc1</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: Stdout transfer not successful, file: %s:%s-&gt;%s\n"</literal></expr></argument>,
                 <argument><expr><name>host</name></expr></argument>, <argument><expr><name>remoteStdout</name></expr></argument>, <argument><expr><name>localStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"ssh %s@%s \"rm -f %s &lt; /dev/null &gt; /dev/null\" &lt; /dev/null &gt; /dev/null"</literal></expr></argument>,
                       <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>remoteStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>elogFile</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>localStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>localStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>stdIn</name> <operator>&amp;&amp;</operator> <name><name>stdIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>stdIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return<expr><operator>(</operator><operator>(</operator><name>rc</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * =======================================================================================
 *
 * Command list handlers
 *
 * =======================================================================================
 */</comment>
<function><type><name>cmdList_t</name> <modifier>*</modifier></type><name>initCmdList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><operator>(</operator><name>cmdList_t</name> <operator>*</operator><operator>)</operator><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdList_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>initCmd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><operator>(</operator><name>cmd_t</name> <operator>*</operator><operator>)</operator><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearStdin</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>touchStdout</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"(ssh %s@%s touch %s) &lt; /dev/null &gt; /dev/null 2&gt;&amp;1"</literal></expr></argument>, 
                           <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,
                           <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"(touch %s) &lt; /dev/null &gt; /dev/null"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void setStdout(cmd_t *cmd)
{
    if (cmd-&gt;host != NULL)
    {
        if (cmd-&gt;remoteStdout == NULL)
            <comment type="block">/* Remote cmd */</comment>
            cmd-&gt;remoteStdout = createRemoteFileName(STDOUT, Malloc(MAXPATH+1), MAXPATH);
        else
            freeAndReset(cmd-&gt;remoteStdout);
    }
    if (cmd-&gt;localStdout == NULL)
        cmd-&gt;localStdout = createLocalFileName(STDOUT, Malloc(MAXPATH+1), MAXPATH);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
<function><type><name>int</name></type> <name>doCmd</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>curr</name> <operator>=</operator> <name>cmd</name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdEl</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>allocActualCmd</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* localStdout has to be set by the caller */</comment>
<function><type><name>int</name></type> <name>doCmdEl</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>isInternal</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>cmd</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call>(<modifier>*</modifier><name><name>cmd</name><operator>-&gt;</operator><name>callback</name></name>)<argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>callback_parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no function entry was found in cmd_t.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>callback_parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Build actual command */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>allocActualCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"ssh %s@%s \"( %s ) &gt; %s 2&gt;&amp;1\" &lt; %s &gt; /dev/null 2&gt;&amp;1"</literal></expr></argument>,
                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,
                 <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr> ?</condition><then> <expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr> ?</condition><then> <expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Do it */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Remote command: \"%s\", actual: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>excode</name></name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Handle stdout */</comment>
        <expr_stmt><expr><call><name>clearStdin</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>touchStdout</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"(scp %s@%s:%s %s; ssh %s@%s rm -rf %s) &lt; /dev/null &gt; /dev/null"</literal></expr></argument>,
                       <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>,
                       <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Handle stdin */</comment>
        <return>return <expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>excode</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build actual command */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>allocActualCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"( %s ) &gt; %s 2&gt;&amp;1 &lt; %s"</literal></expr></argument>,
                 <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr> ?</condition><then> <expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr> ?</condition><then> <expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Do it */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Local command: \"%s\", actual: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>excode</name></name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Handle stdout */</comment>
        <expr_stmt><expr><call><name>clearStdin</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>touchStdout</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Handle stdin */</comment>
        <return>return <expr><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>excode</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Here, we should handle exit code.
 *
 * If each command ran and exit normally, maximum (worst) value of the status code
 * will be returned.
 *
 * If SIGINT is detected, then the status will be set with EC_IFSTOPPED flag, as well as
 * EC_STOPSIG to SIGINT.  In this case, EC_IFSTOPPED will be set and EC_SIGNAL will be
 * set to SIGKILL as well.  Exit status will be set to 2.
 */</comment>
<function><type><name>int</name></type> <name>doCmdList</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xc_status</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>dump_cmdList</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>old_HandlerDoShell</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>do_shell_SigHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>whereToJumpDoShell</name> <operator>=</operator> <operator>&amp;</operator><name>dcJmpBufDoShell</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Invoke remote command with SSH
     */</comment>
    <expr_stmt><expr><call><name>prepareStdout</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>dcJmpBufDoShell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Process for \"%s\" failed to start. %s\n"</literal></expr></argument>,
                                    <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>actualCmd</name></expr></argument>,
                                    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>doCmd</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>excode</name> <operator>=</operator> <call><name>doCmd</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>excode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Signal exit here */</comment>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/*
                     * We don't care if the process is alive or not.
                     * Try to kill anyway.  Then handle remote/local
                     * stdin/stdout in the next step.
                     *
                     * If it's bothering to wait for printing, the user can
                     * issue a SIGINT again.
                     */</comment>
                    <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Something to do at non-parallel execution */</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Finish by interrupt\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>whereToJumpMainLoop</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Control reaches to the mainloop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><name>whereToJumpMainLoop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/*
     * Handle remote/local stdin/stdout
     */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>do_shell_SigHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name>dcJmpBufDoShell</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elogFile</name><argument_list>(<argument><expr><name>MANDATORY</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"(rm -f %s) &lt; /dev/null &gt; /dev/null"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Captured SIGINT */</comment>
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_HandlerDoShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="block">/* Need to handle the case with non-parallel execution */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>localStdout</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>, <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>localStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>remoteStdout</name></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* Note that remote stdout will be removed anyway */</comment>
                <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>,
                            <argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>remoteStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>actualCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>localStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>jj</name></expr>]</index></name><operator>-&gt;</operator><name>remoteStdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Finish by interrupt\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>whereToJumpMainLoop</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Control reaches to the mainloop\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><name>whereToJumpMainLoop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return<expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_HandlerDoShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>whereToJumpDoShell</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendCmdEl</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">//cmd_t *curr;</comment>

    <comment type="line">//for(curr = src; src-&gt;next; src = src-&gt;next);</comment>
    <for>for<control>(<init>;</init> <condition><expr><name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_cleanCmdEl</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"ssh %s@%s \"rm -f %s &gt; /dev/null 2&gt;&amp;1\""</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_cleanCmd</name><parameter_list>(<parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>do_cleanCmdEl</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>do_cleanCmd</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
    
<function><type><name>void</name></type> <name>do_cleanCmdList</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name></name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addCmd</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmds</name></decl></parameter>, <parameter><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>actualCmd</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>remoteStdout</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>localStdout</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmds</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>cmds</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><call><name>nextSize</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name></name> <operator>=</operator> <operator>(</operator><name>cmd_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>Realloc</name><argument_list>(<argument><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name><name>cmds</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmds</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name><name>cmds</name><operator>-&gt;</operator><name>used</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanLastCmd</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdList</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ====================================================================================
 *
 * Miscellaneous
 *
 * ====================================================================================
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nextSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>size</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get my hostname to prevent remote file name conflist
 * Take only the first part of the hostname and ignore
 * domain part
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getCleanHostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hostname</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>hostname</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name><name>hostname</name><index>[<expr><name>ii</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>hostname</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wait for typing something only when debug option is specified.
 * Used to synchronize child processes to start to help gdb.
 *
 * May be not useful if input file is not stdin.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void waitTypeReturn(void)
{
    char buf[MAXLINE+1];

        fputs("Type Return: ", outF);
        fgets(buf, MAXLINE, inF);
}

static void echoPid(pid_t pid)
{
        fprintf(outF, "INFO: pid = %d\n", pid);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareStdout</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cmdList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>localStdout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>STDOUT</name></expr></argument>, <argument><expr><operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>localStdout</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>remoteStdout</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>createRemoteFileName</name><argument_list>(<argument><expr><name>STDOUT</name></expr></argument>, <argument><expr><operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>remoteStdout</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>remoteStdout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>makeConfigBackupCmd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"ssh %s@%s mkdir -p %s;scp %s %s@%sp:%s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>doConfigBackup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"ssh %s@%s mkdir -p %s;scp %s %s@%s:%s/%s"</literal></expr></argument>,
                        <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupDir</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupHost</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configBackupFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dump_cmdList</name><parameter_list>(<parameter><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* We don't like this output interrupted by other process log */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
         <argument><expr><literal type="string">"*** cmdList Dump *******************************\n"</literal>
         <literal type="string">"allocated = %d, used = %d\n"</literal></expr></argument>, <argument><expr><name><name>cmdList</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>, <argument><expr><name><name>cmdList</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"=== No command defined. ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
             <argument><expr><literal type="string">"=== CMD: %d ===\n"</literal></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>cmdList</name><operator>-&gt;</operator><name>cmds</name><index>[<expr><name>ii</name></expr>]</index></name></expr><operator>,</operator> <expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
                 <argument><expr><literal type="string">"   --- CMD-EL: %d:"</literal>
                 <literal type="string">"host=\"%s\", command=\"%s\", localStdin=\"%s\", localStdout=\"%s\"\n"</literal></expr></argument>,
                 <argument><expr><name>jj</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>host</name></name></expr> ?</condition><then> <expr><name><name>cur</name><operator>-&gt;</operator><name>host</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>command</name></name></expr> ?</condition><then> <expr><name><name>cur</name><operator>-&gt;</operator><name>command</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdin</name></name></expr> ?</condition><then> <expr><name><name>cur</name><operator>-&gt;</operator><name>localStdin</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdout</name></name></expr> ?</condition><then> <expr><name><name>cur</name><operator>-&gt;</operator><name>localStdout</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>localStdin</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elogFile</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"   ----------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
