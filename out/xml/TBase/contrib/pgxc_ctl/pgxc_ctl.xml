<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/pgxc_ctl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pgxc_ctl.c
 *
 *    Main module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 *  PXC_CTL  Postgres-XC configurator and operation tool
 *
 *
 * Command line options
 *
 * -c --configuration file : configuration file.  Rerative path
 *                            start at $HOME/.pgxc_ctl or homedir if
 *                            specified by --home option
 * --home homedir : home directory of pgxc_ctl.  Default is
 *                    $HOME/.pgxc_ctl.  You can override this
 *                    with PGXC_CTL_HOME environment or option.
 *                    Command argument has the highest priority.
 *
 * -v | --verbose: verbose mode.  You can set your default in
 *                    pgxc_ctl_rc file at home.
 *
 * --silent: Opposite to --verbose.
 *
 * -V | --version: prints out the version
 *
 * -l | --logdir dir: Log directory.   Default is $home/pgxc_log
 *
 * -L | --logfile file: log file.  Default is the timestamp.
 *                    Relative path starts with --logdir.
 *
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bash_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signature.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Common global variable
 */</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>pgxc_ctl_home</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pgxc_ctl_bash_path</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pgxc_ctl_config_path</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>progname</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>myName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>defaultDatabase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>inF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outF</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>build_pgxc_ctl_home</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>trim_trailing_slash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>startLog</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logFileNam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trim_trailing_slash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
    
    <while>while <condition>(<expr><operator>*</operator><name>curr</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while>while <condition>(<expr><name>last</name> <operator>!=</operator> <name>path</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return;</return></block_content></block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
    

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_pgxc_ctl_home</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env_pgxc_ctl_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>PGXC_CTL_HOME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env_home</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>HOME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>        <comment type="block">/* We assume this is always available */</comment>

    <if_stmt><if>if <condition>(<expr><name>home</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Absolute path */</comment>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>set_bash</name>;</goto>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Relative path */</comment>
            <expr_stmt><expr><call><name>trim_trailing_slash</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>env_home</name></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>set_bash</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>env_pgxc_ctl_home</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>PGXC_CTL_HOME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>env_home</name></expr></argument>, <argument><expr><name>pgxc_ctl_home_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>set_bash</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>env_pgxc_ctl_home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <comment type="block">/* Absoute path */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>env_pgxc_ctl_home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>set_bash</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>trim_trailing_slash</name><argument_list>(<argument><expr><name>env_pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>env_pgxc_ctl_home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>env_pgxc_ctl_home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>env_pgxc_ctl_home</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Null environment */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>env_home</name></expr></argument>, <argument><expr><name>pgxc_ctl_home_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>set_bash</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>env_home</name></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>set_bash</name>;</goto>

<label><name>set_bash</name>:</label>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>PGXC_CTL_BASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Create home dir if necessary and change current directory to it.
     */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>    <name><name>cmd</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator><literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>Chdir</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s is not directory.  Check your configurfation\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, <argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator><literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>Chdir</name><argument_list>(<argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Creating %s directory failed. Check your configuration\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Creating directory %s failed. %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>build_configuration_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Default */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>DEFAULT_CONF_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rr</name> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* No configuration specified and the default does not apply --&gt; simply ignore */</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Default configuration file \"%s\" was not found while no configuration file was specified\n"</literal></expr></argument>, 
                <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pgxc_ctl_config_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <comment type="block">/* Read prototype config file if no default config file found */</comment>
            <expr_stmt><expr><call><name>install_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index>  <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Absolute path */</comment>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Relative path from $pgxc_ctl_home */</comment>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rr</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rr</name> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rr</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: File \"%s\" not found or not a regular file. %s\n"</literal></expr></argument>, 
                     <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: File \"%s\" not found or not a regular file"</literal></expr></argument>, 
                     <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <comment type="block">/* Read prototype config file if no config file found */</comment>
        <expr_stmt><expr><call><name>install_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* 
         * Since we found a valid config file, don't read the prototype config
         * file as it may conflict with the user conf file
         */</comment>
        <expr_stmt><expr><call><name>install_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pgxc_ctl_config_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s --home %s --configuration %s"</literal></expr></argument>, 
                 <argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s --home %s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Reading configuration using %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>conf</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot execute %s, %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>read_vars</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uninstall_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Finished reading configuration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_pgxc_ctl_bash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>install_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else
        if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: caould not install bash script %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pgxcCtlMkdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>startLog</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logFileNam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>logFilePath</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>path</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>trim_trailing_slash</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pgxcCtlMkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>logFileNam</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>logFileNam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: both --logdir and --logfile are specified and logfile was abosolute path.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>logFileNam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>logFileNam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>initLog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>logFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>initLog</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>initLog</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>logFileNam</name> <operator>&amp;&amp;</operator> <name><name>logFileNam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* This is used as log file path */</comment>
            <expr_stmt><expr><call><name>initLog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>logFileNam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/pgxc_log"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pgxcCtlMkdir</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initLog</name><argument_list>(<argument><expr><name>logFilePath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setDefaultIfNeeded</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sval</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_my_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ini_env</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>selectVarList</name><index>[]</index></name> <init>= <expr><block>{
        <expr><name>VAR_pgxc_ctl_home</name></expr>,
        <expr><name>VAR_xc_prompt</name></expr>,
        <expr><name>VAR_verbose</name></expr>,
        <expr><name>VAR_logDir</name></expr>,
        <expr><name>VAR_logFile</name></expr>,
        <expr><name>VAR_tmpDir</name></expr>,
        <expr><name>VAR_localTmpDir</name></expr>,
        <expr><name>VAR_configFile</name></expr>,
        <expr><name>VAR_echoAll</name></expr>,
        <expr><name>VAR_debug</name></expr>,
        <expr><name>VAR_printMessage</name></expr>,
        <expr><name>VAR_logMessage</name></expr>,
        <expr><name>VAR_defaultDatabase</name></expr>,
        <expr><name>VAR_pgxcCtlName</name></expr>,
        <expr><name>VAR_printLocation</name></expr>,
        <expr><name>VAR_logLocation</name></expr>,
        <expr><name>NULL</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ini_env</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/etc/pgxc_ctl"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ini_env</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>read_selected_vars</name><argument_list>(<argument><expr><name>ini_env</name></expr></argument>, <argument><expr><name>selectVarList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ini_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>home</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/.pgxc_ctl"</literal></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ini_env</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>read_selected_vars</name><argument_list>(<argument><expr><name>ini_env</name></expr></argument>, <argument><expr><name>selectVarList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>ini_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Setup defaults
     */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/pgxc_ctl"</literal></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_pgxc_ctl_home</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_xc_prompt</name></expr></argument>, <argument><expr><literal type="string">"PGXC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/pgxc_ctl/pgxc_log"</literal></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_logDir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_logFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_tmpDir</name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_localTmpDir</name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>, <argument><expr><literal type="string">"pgxc_ctl.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_echoAll</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_debug</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_printMessage</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_logMessage</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_pgxcCtlName</name></expr></argument>, <argument><expr><name>DefaultName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>myName</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcCtlName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>, <argument><expr><name>DefaultDatabase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>defaultDatabase</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_printLocation</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultIfNeeded</name><argument_list>(<argument><expr><name>VAR_logLocation</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>configuration</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>version_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>help_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"configuration"</literal></expr>,    <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'c'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"silent"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"logdir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"logfile"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"home"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"infile"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"outfile"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>is_bash_exist</name> <init>= <expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"command -v bash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>( <expr><name>is_bash_exist</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot find bash. Please ensure that bash is "</literal>
                <literal type="string">"installed and available in the PATH\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init_var_hash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>option_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"m:i:o:c:vVl:L:h"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <switch>switch<condition>(<expr><name>c</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>home</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>home</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'o'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>outfile</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'v'</literal></expr>:</case>
                <break>break;</break>
            <case>case <expr><literal type="char">'V'</literal></expr>:</case>
                <expr_stmt><expr><name>version_opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'l'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>logdir</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>logdir</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'L'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>logfile</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>configuration</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>configuration</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'h'</literal></expr>:</case>
                <expr_stmt><expr><name>help_opt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'m'</literal></expr>:</case>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid optin value, received code 0%o\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>version_opt</name> <operator>||</operator> <name>help_opt</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>version_opt</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>help_opt</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setup_my_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Read $HOME/.pgxc_ctl */</comment>
    <expr_stmt><expr><call><name>build_pgxc_ctl_home</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_configFile</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>logdir</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_logDir</name></expr></argument>, <argument><expr><name>logdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>logfile</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>reset_var_val</name><argument_list>(<argument><expr><name>VAR_logFile</name></expr></argument>, <argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>startLog</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_logFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>prepare_pgxc_ctl_bash</name><argument_list>(<argument><expr><name>pgxc_ctl_bash_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>build_configuration_path</name><argument_list>(<argument><expr><name>configuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Setop output
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>outfile</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Output file: %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>outF</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>outF</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open output file %s, %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>outF</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* 
     * Startup Message
     */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"   ******** PGXC_CTL START ***************\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Current directory: %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Setup input
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Input file: %s\n"</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inF</name> <operator>=</operator>  <call><name>fopen</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>inF</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open input file %s, %s\n"</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>inF</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/*
     * If we have remaing arguments, they will be treated as a command to do.  Do this
     * first, then handle the input from input file specified by -i option.
     * If it is not found, then exit.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    print_vars();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>orgBuf</name><index>[<expr><name>MAXLINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>wkBuf</name><index>[<expr><name>MAXLINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>orgBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>orgBuf</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>orgBuf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>wkBuf</name></expr></argument>, <argument><expr><name>orgBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>do_singleLine</name><argument_list>(<argument><expr><name>orgBuf</name></expr></argument>, <argument><expr><name>wkBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>do_command</name><argument_list>(<argument><expr><name>inF</name></expr></argument>, <argument><expr><name>outF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>do_command</name><argument_list>(<argument><expr><name>inF</name></expr></argument>, <argument><expr><name>outF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pgxc_ctl %s\n"</literal></expr></argument>, <argument><expr><name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(
    <argument><expr><literal type="string">"pgxc_ctl [option ...] [command]\n"</literal>
    <literal type="string">"option:\n"</literal>
    <literal type="string">"   -c or --configuration conf_file: Specify configruration file.\n"</literal>
    <literal type="string">"   -v or --verbose: Specify verbose output.\n"</literal>
    <literal type="string">"   -V or --version: Print version and exit.\n"</literal>
    <literal type="string">"   -l or --logdir log_directory: specifies what directory to write logs.\n"</literal>
    <literal type="string">"   -L or --logfile log_file: Specifies log file.\n"</literal>
    <literal type="string">"   --home home_direcotry: Specifies pgxc_ctl work director.\n"</literal>
    <literal type="string">"   -i or --infile input_file: Specifies inptut file.\n"</literal>
    <literal type="string">"   -o or --outfile output_file: Specifies output file.\n"</literal>
    <literal type="string">"   -h or --help: Prints this message and exits.\n"</literal>
    <literal type="string">"For more deatils, refer to pgxc_ctl reference manual included in\n"</literal>
    <literal type="string">"postgres-xc reference manual.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
