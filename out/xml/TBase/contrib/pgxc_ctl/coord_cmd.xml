<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/coord_cmd.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * coord_cmd.c
 *
 *    Coordinator command module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coord_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_util.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>failover_oneCoordinator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coordIdx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureDataNode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureDataNode_multicluster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 *======================================================================
 *
 * Coordinator staff
 *
 *=====================================================================
 */</comment>
<comment type="block">/*
 * Initialize coordinator masters -----------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>init_coordinator_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initialize all the coordinator masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>init_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initCoordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdInitdb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdWalArchDir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdWalArch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgHba</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>, <decl><type ref="prev"/><name>kk</name></decl>;</decl_stmt>
    <comment type="line">// int gtmPxyIdx;</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>confFiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>localStdin</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">//char *gtmHost, *gtmPort;</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Reset coordinator master directory and run initdb */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>jj</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Node %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: target coordinator master %s is running now.   Skip initilialization.\n"</literal></expr></argument>,
             <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                <literal type="string">"Skip Coordinator initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdInitdb</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, 
             <argument><expr><literal type="string">"%s"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"PGXC_CTL_SILENT=1 initdb --nodename %s --nodetype coordinator -D %s "</literal>
             <literal type="string">"--master_gtm_nodename %s --master_gtm_ip %s --master_gtm_port %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
             <argument><expr><name>nodeName</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update postgresql.conf */</comment>

    <comment type="block">/* coordSpecificExtraConfig */</comment>
    <comment type="line">//gtmPxyIdx = getEffectiveGtmProxyIdxFromServerName(aval(VAR_coordMasterServers)[jj]);</comment>
    <comment type="line">//gtmHost = (gtmPxyIdx &gt;= 0) ? aval(VAR_gtmProxyServers)[gtmPxyIdx] : sval(VAR_gtmMasterServer);</comment>
    <comment type="line">//gtmPort = (gtmPxyIdx &gt;= 0) ? aval(VAR_gtmProxyPorts)[gtmPxyIdx] : sval(VAR_gtmMasterPort);</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><operator>(</operator><name><name>cmdPgConf</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>confFiles</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* From configuration variables */</comment>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#===========================================\n"</literal>
            <literal type="string">"# Added at initialization. %s\n"</literal>
            <literal type="string">"port = %d\n"</literal>
            <literal type="string">"pooler_port = %s\n"</literal>
            <literal type="string">"# End of Additon\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
                <argument><expr><literal type="string">"pgxc_main_cluster_name = %s\n"</literal>
                <literal type="string">"pgxc_cluster_name = %s\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcMainClusterName</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Log Shipping */</comment>

    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Build WAL archive target directory */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdWalArchDir</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdWalArchDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf %s;mkdir -p %s; chmod 0700 %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, 
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Build master's postgresql.conf */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdWalArch</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
                <argument><expr><literal type="string">"#========================================\n"</literal>
                <literal type="string">"# Addition for log shipping, %s\n"</literal>
                <literal type="string">"wal_level = logical \n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"# archive_command = 'rsync %%p %s@%s:%s/%%f'\n"</literal>
                <literal type="string">"max_wal_senders = %s\n"</literal>
                <literal type="string">"# End of Addition\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmdWalArch</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdWalArch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* pg_hba.conf */</comment>

    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgHba</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#=================================================\n"</literal>
            <literal type="string">"# Addition at initialization, %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"host all %s %s trust\n"</literal></expr></argument>,    <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                        <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# End of addition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmdPgHba</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgHba</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Now prepare statements to create/alter nodes.
     */</comment>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Build directory and run initdb
     */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initialize coordinator master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_initCoordinatorMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize coordinator slaves ---------------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>init_coordinator_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initialize all the coordinator slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>init_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initCoordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdBuildDir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdStartMaster</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdBaseBkup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdRecoveryConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgConf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>localStdin</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Slave of the coordinator %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                <literal type="string">"Skip Coordinator slave initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build work directory */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdBuildDir</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"%s"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"chmod 0700 %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* 
     * Check if the master is running --&gt; May not need change if we have watchdog.   This case, we need
     * a master which can handle the request.   So GTM should be running. We can test all of them by
     * single 'select 1' command.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Master is not running. Must start it first */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdStartMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStartMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl start -w -Z coordinator -D %s -o -i"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Obtain base backup of the master
     */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdBaseBkup</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdBaseBkup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
			 <argument><expr><literal type="string">"pg_basebackup -U %s -p %s -h %s -D %s --wal-method=stream"</literal></expr></argument>,
			 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>,<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure recovery.conf file at the slave */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdRecoveryConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to initialize the slave, %s\n"</literal>
            <literal type="string">"standby_mode = on\n"</literal>
            <literal type="string">"primary_conninfo = 'host = %s port = %s "</literal>
            <literal type="string">"user = %s application_name = %s'\n"</literal>
            <literal type="string">"# restore_command = 'cp %s/%%f %%p'\n"</literal>
            <literal type="string">"# archive_cleanup_command = 'pg_archivecleanup %s %%r'\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, 
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmdRecoveryConf</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdRecoveryConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/recovery.conf\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure postgresql.conf at the slave */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#==========================================\n"</literal>
                <literal type="string">"# Added to initialize the slave, %s\n"</literal>
                <literal type="string">"prefer_olap = true\n"</literal>
                <literal type="string">"olap_optimizer = true\n"</literal>
                <literal type="string">"hot_standby = on\n"</literal>
                <literal type="string">"port = %s\n"</literal>
                <literal type="string">"pooler_port = %s\n"</literal>
                <literal type="string">"wal_level = logical \n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"archive_command = ''\n"</literal>
                <literal type="string">"max_wal_senders = 0\n"</literal>
                <literal type="string">"pgxc_main_cluster_name = %s\n"</literal>
                <literal type="string">"pgxc_cluster_name = %s\n"</literal>
                <literal type="string">"# End of Addition\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcMainClusterName</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#==========================================\n"</literal>
                <literal type="string">"# Added to initialize the slave, %s\n"</literal>
                <literal type="string">"hot_standby = on\n"</literal>
                <literal type="string">"port = %s\n"</literal>
                <literal type="string">"pooler_port = %s\n"</literal>
                <literal type="string">"wal_level = logical \n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"archive_command = ''\n"</literal>
                <literal type="string">"max_wal_senders = 0\n"</literal>
                <literal type="string">"# End of Addition\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmdPgConf</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

        
<function><type><name>int</name></type> <name>init_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slaves are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * First step: initialize work directory and run the master if necessary
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize the coordinator slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_initCoordinatorSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Configure nodes in each coordinator -------------------------------------------
 *
 * Issues CREATE NODE/ALTER NODE through psql.
 *
 * Please note that CREATE/ALTER/DROP NODE are handled only locally.  You have to
 * visit all the coordinators.
 */</comment>
<function><type><name>int</name></type> <name>configure_nodes_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>configure_nodes</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>configure_datanodes</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>configure_nodes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_configureNode_multicluster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_configureNode</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>configure_datanodes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_configureDataNode_multicluster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_configureDataNode</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureNode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"psql -p %d -h %s -a %s %s"</literal></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Setup coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>targetIdx</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>targetIdx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>targetIdx</name></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Register outside coordinator */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='coordinator', HOST='%s', PORT=%d);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, 
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* Update myself */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"ALTER NODE %s WITH (HOST='%s', PORT=%d);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Setup datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dnIdx</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIdx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Primary Node */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Primay and preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, PRIMARY, PREFERRED);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* Primary but not prefereed node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, PRIMARY);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Non-primary node */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, PREFERRED);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* non-Preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>    

<function><type><specifier>static</specifier> <name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureDataNode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>connCordIndx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_preferred</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We use one of the coordinators to send queries to datanodes */</comment>
    <expr_stmt><expr><name>connCordIndx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connCordIndx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"psql -p %d -h %s -a %s %s"</literal></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Setup coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>targetIdx</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>targetIdx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Register outside coordinator */</comment>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''coordinator'', HOST=''%s'', PORT=%d)';\n"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Setup datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dnIdx</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIdx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// See if this data node is on the same host as a coordinator</comment>
        <expr_stmt><expr><name>is_preferred</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_preferred</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>dnIdx</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Primary Node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Primay and preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PRIMARY, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* Primary but not prefereed node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PRIMARY)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Primary Node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Primay and preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PRIMARY, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* Primary but not prefereed node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PRIMARY)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>dnIdx</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Non-primary node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* non-Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Non-primary node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* non-Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_pool_reload()';\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureNode_multicluster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"psql -p %d -h %s -a %s %s"</literal></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Setup coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>targetIdx</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>targetIdx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>targetIdx</name></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Register outside coordinator */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='coordinator', HOST='%s', PORT=%d, CLUSTER='%s');\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, 
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* Update myself */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"ALTER NODE %s WITH (HOST='%s', PORT=%d, CLUSTER='%s');\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='coordinator', HOST='%s', PORT=%d, CLUSTER='%s');\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, 
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Setup datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dnIdx</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIdx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Primary Node */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Primay and preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, CLUSTER='%s', PRIMARY, PREFERRED);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* Primary but not prefereed node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, CLUSTER='%s', PRIMARY);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Non-primary node */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/* Preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, CLUSTER='%s', PREFERRED);\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="block">/* non-Preferred node */</comment>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, CLUSTER='%s');\n"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE='datanode', HOST='%s', PORT=%d, CLUSTER='%s');\n"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
        
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>    

<function><type><specifier>static</specifier> <name>cmd_t</name> <modifier>*</modifier></type><name>prepare_configureDataNode_multicluster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>connCordIndx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_preferred</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We use one of the coordinators to send queries to datanodes */</comment>
    <expr_stmt><expr><name>connCordIndx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connCordIndx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"psql -p %d -h %s -a %s %s"</literal></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Setup coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>targetIdx</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>targetIdx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Register outside coordinator */</comment>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''coordinator'', HOST=''%s'', PORT=%d, CLUSTER=''%s'')';\n"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''coordinator'', HOST=''%s'', PORT=%d, CLUSTER=''%s'')';\n"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Setup datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dnIdx</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIdx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// See if this data node is on the same host as a coordinator</comment>
        <expr_stmt><expr><name>is_preferred</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_preferred</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_primaryDatanode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>dnIdx</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Primary Node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Primay and preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'', PRIMARY, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* Primary but not prefereed node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'', PRIMARY)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Primary Node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Primay and preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'', PRIMARY, PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* Primary but not prefereed node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'', PRIMARY)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>dnIdx</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Non-primary node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'',PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* non-Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'')';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Non-primary node */</comment>
                <if_stmt><if>if <condition>(<expr><name>is_preferred</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="block">/* Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'', PREFERRED)';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <comment type="block">/* non-Preferred node */</comment>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'')';\n"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'CREATE NODE %s WITH (TYPE=''datanode'', HOST=''%s'', PORT=%d, CLUSTER=''%s'')';\n"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_pool_reload()';\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Kill coordinator masters -------------------------------------------------------------
 *
 * It is not recommended to kill them in such a manner.   This is just for emergence.
 * You should try to stop component by "stop" command.
 */</comment>

<function><type><name>int</name></type> <name>kill_coordinator_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Killing all the coordinator masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>kill_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type> <name>prepare_killCoordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pmPid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdKill</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: node %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdKill</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmPid</name> <operator>=</operator> <call><name>get_postmaster_pid</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidList</name> <init>= <expr><call><name>getChPidList</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>pmPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d %s; rm -f /tmp/.s.'*'%d'*'"</literal></expr></argument>,
                 <argument><expr><name>pmPid</name></expr></argument>, <argument><expr><name>pidList</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for coordinator master \"%s\" was not found.  Remove socket only.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -f /tmp/.s.'*'%d'*'"</literal></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Killing coordinator master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_killCoordinatorMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill coordinator masters -------------------------------------------------------------
 *
 * It is not recommended to kill them in such a manner.   This is just for emergence.
 * You should try to stop component by "stop" command.
 */</comment>
<function><type><name>int</name></type> <name>kill_coordinator_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Killing all the coordinator slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>kill_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killCoordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pmPid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmPid</name> <operator>=</operator> <call><name>get_postmaster_pid</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidList</name> <init>= <expr><call><name>getChPidList</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>pmPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d %s"</literal></expr></argument>, <argument><expr><name>pmPid</name></expr></argument>, <argument><expr><name>pidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for coordinator slave \"%s\" was not found.  Remove socket only.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -f /tmp/.s.'*'%d'*'"</literal></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slaves are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Killing coordinator slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_killCoordinatorSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanCoordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s;mkdir -p %s;chmod 0700 %s; rm -f /tmp/.s.*%d*; rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup coordinator master resources -- directory and socket.
 */</comment>
<function><type><name>int</name></type> <name>clean_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Clean coordinator master %s resources.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_cleanCoordinatorMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: coordinator master %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_coordinator_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning all the coordinator masters resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>clean_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup coordinator slave resources -- directory and the socket.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanCoordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s;mkdir -p %s;chmod 0700 %s; rm -f /tmp/.s.*%d*; rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Clean coordinator slave %s resources.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_cleanCoordinatorSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: coordinator slave %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_coordinator_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning all the coordinator slave resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>clean_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*------------------------------------------------------------------------
 *
 * Add command
 *
 *-----------------------------------------------------------------------*/</comment>
<function><type><name>int</name></type> <name>add_coordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pooler</name></decl></parameter>,
        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extraConf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extraPgHbaConf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lockf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pooler_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>max_wal_senders_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>connCordIndx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pgdumpall_out</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>confFiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgHbaConfFiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check if all the coordinator masters are running */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_AllCoordRunning</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Some of the coordinator masters are not running. Cannot add one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if there's no conflict with the current configuration */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>checkNameConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Node name %s duplicate.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: port numbrer (%d) or pooler port (%d) at host %s conflicts.\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: directory \"%s\" conflicts at host %s.\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Check if coordinator masgter configuration is consistent
     */</comment>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>size</name> <operator>=</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Found some conflicts in coordinator master configuration."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Now reconfigure
     */</comment>
    <comment type="block">/* Need an API to expand the array to desired size */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"PANIC: Internal error, inconsistent coordinator information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * 000 We need another way to configure specific pg_hba.conf and max_wal_senders.
     */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>max_wal_senders_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>getDefaultWalSender</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>port_s</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>max_wal_senders_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>extraConf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>extraPgHbaConf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Update the configuration file and backup it
     */</comment>
    <comment type="block">/*
     * Take care of extra conf file
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Take care of extra pg_hba conf file
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>pgHbaConfFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>pgHbaConfFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <comment type="block">/*
     * Main part
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to coordinator master addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now add the master */</comment>

    <comment type="block">/* initdb */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"PGXC_CTL_SILENT=1 initdb -D %s --nodename %s --nodetype coordinator "</literal>
                            <literal type="string">"--master_gtm_nodename %s --master_gtm_ip %s --master_gtm_port %s"</literal></expr></argument>, 
                            <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Edit configurations */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#===========================================\n"</literal>
                <literal type="string">"# Added at initialization. %s\n"</literal>
                <literal type="string">"port = %d\n"</literal>
                <literal type="string">"pooler_port = %d\n"</literal>
                <literal type="string">"# End of Additon\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jj</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#===========================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# Added at initialization.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pgHbaConfFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"host all %s %s trust\n"</literal></expr></argument>,    <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# End of addition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* find any available coordinator */</comment>
    <expr_stmt><expr><name>connCordIndx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connCordIndx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * This is the FIRST coordinator being added into
         * the cluster. Just start it and be done with it.
         *
         * Start the new coordinator with --coordinator option
         */</comment>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>start_coordinator_master</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* ALTER our own definition appropriately */</comment>
        <goto>goto <name>selfadd</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Lock ddl */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lockf</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %s %s"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not open psql command, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>pgHbaConfFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>, <argument><expr><literal type="string">"select pgxc_lock_for_backup();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Keep open until the end of the addition. */</comment>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* pg_dumpall */</comment>
    <expr_stmt><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>GENERAL</name></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"pg_dumpall -p %s -h %s -s --include-nodes --dump-nodes --file=%s"</literal></expr></argument>,
                   <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>,
                   <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIndx</name></expr>]</index></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start the new coordinator */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl start -w -Z restoremode -D %s -o -i"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allow the new coordinator to start up by sleeping for a couple of seconds */</comment>
    <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">2000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restore the backup */</comment>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d -d %s -f %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Quit the new coordinator */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl stop -w -Z restoremode -D %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start the new coordinator with --coordinator option */</comment>
    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_coordinator_master</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Issue CREATE NODE on coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the coordinator master %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE = 'coordinator', host='%s', PORT=%d);\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Issue CREATE NODE on datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d %s"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the datanode master %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE = 'coordinator', host='%s', PORT=%d);\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Quit DDL lokkup session */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>selfadd</name>:</label>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the coordinator master %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"ALTER NODE %s WITH (host='%s', PORT=%d);\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_coordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pooler_port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>archDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pooler_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__p__</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check if the name is valid coordinator */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified coordiantor %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the coordinator slave is not configured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Slave for the coordinator %s has already been configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the resource does not conflict */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: working directory is the same as WAL archive directory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* 
     * We don't check the name conflict here because acquiring valid coordiinator index means that
     * there's no name conflict.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: the port %s has already been used in the host %s.\n"</literal></expr></argument>,  <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: directory %s or %s has already been used by other node.\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the coordinator master is running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator master %s is not running.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pooler_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Prepare the resources (directories) */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"mkdir -p %s;chmod 0700 %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s;chmod 0700 %s"</literal></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Reconfigure the master with WAL archive */</comment>
    <comment type="block">/* Update the configuration and backup the configuration file */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open coordinator master's configuration file, %s/postgresql.conf, %s\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#========================================\n"</literal>
            <literal type="string">"# Addition for log shipping, %s\n"</literal>
            <literal type="string">"wal_level = logical \n"</literal>
            <literal type="string">"archive_mode = off \n"</literal>
            <literal type="string">"# archive_command = 'rsync %%p %s@%s:%s/%%f'\n"</literal>
            <literal type="string">"max_wal_senders = %d\n"</literal>
            <literal type="string">"# End of Addition\n"</literal></expr></argument>,
			<argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>,
            <argument><expr><call><name>getDefaultWalSender</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* pg_hba.conf for replication */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open coordinator master's pg_hba.conf file, %s/pg_hba.conf, %s\n"</literal></expr></argument>, 
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================\n"</literal>
            <literal type="string">"# Additional entry by adding the slave, %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>__p__</name><operator>=</operator><call><name>getIpAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"host replication %s %s/32 trust\n"</literal>
            <literal type="string">"# End of addition ===============================\n"</literal></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>__p__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__p__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Reconfigure pgxc_ctl configuration with the new slave */</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Need an API to expand the array to desired size */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"PANIC: Internal error, inconsistent coordinator information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the configuration file and backup it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to coordinator slave addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restart the master */</comment>
    <comment type="block">/*
     * It's not a good idea to use "restart" here because some connection from other coordinators
     * may be alive.   They are posessed by the pooler and we have to reload the pool to release them,
     * which aborts all the transactions.
     *
     * Beacse we need to issue pgxc_pool_reload() at all the coordinators, we need to give up all the
     * transactions in the whole cluster.
     *
     * It is much better to shutdow the target coordinator master fast because it does not affect
     * transactions this coordinator is not involved.
     */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                <argument><expr><literal type="string">"pg_ctl stop -w -Z coordinator -D %s -m fast"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                <argument><expr><literal type="string">"pg_ctl start -w -Z coordinator -D %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* pg_basebackup */</comment>
	<expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_basebackup -U %s -p %s -h %s -D %s --wal-method=stream"</literal></expr></argument>,
				<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>,<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the slave configuration with hot standby and port */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open the new slave's postgresql.conf, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to initialize the slave, %s\n"</literal>
            <literal type="string">"hot_standby = on\n"</literal>
            <literal type="string">"port = %d\n"</literal>
            <literal type="string">"pooler_port = %d\n"</literal>
            <literal type="string">"wal_level = logical \n"</literal>
            <literal type="string">"archive_mode = off\n"</literal>        <comment type="block">/* No archive mode */</comment>
            <literal type="string">"archive_command = ''\n"</literal>    <comment type="block">/* No archive mode */</comment>
            <literal type="string">"max_wal_senders = 0\n"</literal>        <comment type="block">/* Minimum WAL senders */</comment>
            <literal type="string">"# End of Addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the slave recovery.conf */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/recovery.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open the slave's recovery.conf, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to add the slave, %s\n"</literal>
            <literal type="string">"standby_mode = on\n"</literal>
            <literal type="string">"primary_conninfo = 'host = %s port = %s "</literal>
            <literal type="string">"user = %s application_name = %s'\n"</literal>
            <literal type="string">"restore_command = 'cp %s/%%f %%p'\n"</literal>
            <literal type="string">"archive_cleanup_command = 'pg_archivecleanup %s %%r'\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, 
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start the slave */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl start -w -Z coordinator -D %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*------------------------------------------------------------------------
 *
 * Remove command
 *
 *-----------------------------------------------------------------------*/</comment>
<function><type><name>int</name></type> <name>remove_coordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*

    Removing an existing coordinator
    ==========================

    Assume a two coordinator cluster, COORD_1 &amp; COORD_2
    Suppose we want to remove COORD2 for any reason.

    1. Stop the coordinator to be removed.
    In our example we need to stop COORD_2.

    2. Connect to any of the coordinators except the one to be removed.
    In our example assuming COORD_1 is running on port 5432,
    the following command would connect to COORD_1

    psql postgres -p 5432

    3. Drop the coordinator to be removed.
    For example to drop coordinator COORD_2

    DROP NODE COORD_2;

    4. Update the connection information cached in pool.

    SELECT pgxc_pool_reload();

    COORD_2 is now removed from the cluster &amp; COORD_1 would work as if COORD_2 never existed.

    CAUTION : If COORD_2 is still running and clients are connected to it,  any queries issued would create inconsistencies in the cluster.

    Please note that there is no need to block DDLs because either way DDLs will fail after step 1 and before step 4.

     */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>namelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Check if the coordinator is configured */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if all the other coordinators are running */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ii</name> <operator>!=</operator> <name>idx</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator master %s is not running.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Check if there's a slave configured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>remove_coordinatorSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/* Stop the coordinator master if running */</comment>
    if (pingNode(aval(VAR_coordMasterServers)[idx], aval(VAR_coordPorts)[idx]) == 0)
    {
        AddMember(namelist, name);
        stop_coordinator_master(namelist, "fast");
        CleanArray(namelist);
    }
    <comment type="block">/* Cleanup the coordinator master resource if specified */</comment>
    if (clean_opt)
        doImmediate(aval(VAR_coordMasterServers)[idx], NULL, "rm -rf %s", aval(VAR_coordMasterDirs)[idx]);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* Issue "drop node" at all the other coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ii</name> <operator>!=</operator> <name>idx</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s"</literal></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot begin psql for the coordinator master %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"DROP NODE %s;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Issue "drop node" at all the datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>coord_idx</name> <init>= <expr><call><name>get_any_available_coord</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>coord_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s"</literal></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coord_idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coord_idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot begin psql for the coordinator master %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coord_idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'DROP NODE %s';\n"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_pool_reload()';\n"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <comment type="block">/* Stop the coordinator master if running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Cleanup the coordinator master resource if specified */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -rf %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* Update configuration and backup --&gt; should cleanup "none" entries here */</comment>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Write config files
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to coodinator master removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_coordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open %s/postgresql.conf at %s, %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#=======================================\n"</literal>
                <literal type="string">"# Updated to remove the slave %s\n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"synchronous_standby_names = ''\n"</literal>
                <literal type="string">"archive_command = ''\n"</literal>
                <literal type="string">"max_wal_senders = 0\n"</literal>
                <literal type="string">"wal_level = minimal\n"</literal>
                <literal type="string">"# End of the update\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl restart -Z coordinator -D %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>clean_coordinator_slave</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/*
     * Maintain variables
     */</comment>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Maintain configuration file
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to coodinator slave removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>



<comment type="block">/*
 * Start coordinator master ---------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>start_coordinator_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting coordinator master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startCoordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgCtl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a coordinator, skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Check if the coordinator is running
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: target coordinator master %s is already running now.   Skip initialization.\n"</literal></expr></argument>,
             <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdPgCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl start -w -Z coordinator -D %s -o -i"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting coordinator master %s\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startCoordinatorMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start coordinator slaves ----------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>start_coordinator_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting all the coordinator slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startCoordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgCtlStart</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgConfMaster</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdMasterReload</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a coordinator, skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Check if the coordinator is running
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator master %s is not running now. Cannot start the slave.\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdPgCtlStart</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgCtlStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl start -w -Z coordinator -D %s -o -i"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Postgresql.conf at the Master */</comment>

    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdPgCtlStart</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgConfMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgConfMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdPgConfMaster</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdPgCtlStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================================\n"</literal>
            <literal type="string">"# Added to start the slave in sync. mode, %s\n"</literal>
            <literal type="string">"# synchronous_standby_names = '%s'\n"</literal>
            <literal type="string">"# End of the addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <comment type="block">/* Reload postgresql.conf change */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdPgCtlStart</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdMasterReload</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdMasterReload</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl reload -Z coordinator -D %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slaves are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting coordinator slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startCoordinatorSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Stop coordinator masters ---------------------------------------------------
 */</comment>
<comment type="block">/* Does not check if immediate is valid here */</comment>
<function><type><name>int</name></type> <name>stop_coordinator_master_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping all the coordinator masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>stop_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopCoordinatorMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z coordinator -D %s -m %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z coordinator -D %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
             

<comment type="block">/* Does not check if immediate is valid here. */</comment>
<function><type><name>int</name></type> <name>stop_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>immediate</name> <operator>=</operator> <name>FAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping coordinator master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopCoordinatorMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Stop coordinator slaves ----------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>stop_coordinator_slave_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping all the coordinator slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>stop_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopCoordinatorSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdMasterReload</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgCtlStop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>localStdin</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a coordinator.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"coordinator %s does not have a slave. Skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Master is running.  Need to switch log shipping to asynchronous mode. */</comment>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdMasterReload</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdMasterReload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#=======================================\n"</literal>
                <literal type="string">"# Updated to trun off the slave %s\n"</literal>
                <literal type="string">"synchronous_standby_names = ''\n"</literal>
                <literal type="string">"# End of the update\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdMasterReload</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmdMasterReload</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>localStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdMasterReload</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgCtlStop</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdPgCtlStop</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgCtlStop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z coordinator -D %s -m %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgCtlStop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z coordinator -D %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>stop_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slaves are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>immediate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>immediate</name> <operator>=</operator> <literal type="string">"fast"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping the coordinator slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopCoordinatorSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Failover coordinator ---------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>failover_coordinator</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Failover coordinators.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Coordinator slaves are not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">2</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rc_local</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Failover the coordinator %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator. Skipping.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: slave of the coordinator %s is not configured. Skipping\n"</literal></expr></argument>,
                 <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>failover_oneCoordinator</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc_local</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator><name>rc_local</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else
            if <condition>(<expr><name>rc_local</name> <operator>&gt;</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc_local</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>failover_oneCoordinator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coordIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc_local</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>gtmPxyIdx</name></decl>;</decl_stmt>
    <comment type="line">//char *gtmHost;</comment>
    <comment type="line">//char *gtmPort;</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><name>MAXLINE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>cmdlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>dnReconfigured</name></decl>;</decl_stmt>
    
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkRc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do{if(WEXITSTATUS(rc_local) &gt; rc) rc = WEXITSTATUS(rc_local);}while(0)</cpp:value></cpp:define>

    <comment type="block">/*
     * Determine the target gtm
     */</comment>
    <expr_stmt><expr><name>gtmPxyIdx</name><operator>=</operator> <call><name>getEffectiveGtmProxyIdxFromServerName</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//gtmHost = (gtmPxyIdx &lt; 0) ? sval(VAR_gtmMasterServer) :</comment>
        <comment type="line">//aval(VAR_gtmProxyServers)[gtmPxyIdx];</comment>
    <comment type="line">//gtmPort = (gtmPxyIdx &lt; 0) ? sval(VAR_gtmMasterPort) :</comment>
        <comment type="line">//aval(VAR_gtmProxyPorts)[gtmPxyIdx];</comment>
    <if_stmt><if>if <condition>(<expr><name>gtmPxyIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Failover coordinator %s using gtm %s\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>gtmPxyIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Failover coordinator %s using GTM itself\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Promote the slave */</comment>
    <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><literal type="string">"pg_ctl promote -Z coordinator -D %s"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reconfigure new coordinator master with new gtm_proxy or gtm */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator>  <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                           <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not prepare to update postgresql.conf, %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=================================================\n"</literal>
            <literal type="string">"# Added to promote, %s\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restart coord Slave Server */</comment>
    <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><literal type="string">"pg_ctl restart -Z coordinator -D %s -w -o -i; sleep 1"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Update the configuration variable */</comment>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Failed to open configuration file %s, %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=====================================================\n"</literal>
            <literal type="string">"# Updated due to the coordinator failover, %s, %s\n"</literal>
            <literal type="string">"coordMasterServers=( %s )\n"</literal>
            <literal type="string">"coordPorts=( %s )\n"</literal>
            <literal type="string">"poolerPorts=( %s )\n"</literal>
            <literal type="string">"coordMasterDirs=( %s )\n"</literal>
            <literal type="string">"coordSlaveServers=( %s )\n"</literal>
            <literal type="string">"coordSlavePorts=( %s )\n"</literal>
            <literal type="string">"coordSlavePoolerPorts=( %s )\n"</literal>
            <literal type="string">"coordSlaveDirs=( %s )\n"</literal>
            <literal type="string">"# End of the update\n"</literal></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Backup the configuration file */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doConfigBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cmdlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <comment type="block">/*
     * Reconfigure datanodes with the new datanode. We prepare the commands and
     * pass them to the first coordinator we reconfigure later
     */</comment>
    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
            
        <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Datanode %s is not running.  Skip reconfiguration for this datanode.\n"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>cmdlen</name></expr></argument>, <argument><expr><name>MAXLINE</name> <operator>-</operator> <name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (HOST=''%s'', PORT=%s)';\n"</literal>
                <literal type="string">"EXECUTE DIRECT ON (%s) 'select pgxc_pool_reload()';\n"</literal></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>MAXLINE</name> <operator>-</operator> <name>cmdlen</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Datanode command exceeds the maximum allowed length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>cmdlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>dnReconfigured</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Reconfigure coordinators with new coordinator
     */</comment>
    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
            
        <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Coordinator %s is not running.  Skip reconfiguration for this coordinator.\n"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %s -h %s %s %s"</literal></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to start psql for coordinator %s, %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"ALTER NODE %s WITH (HOST='%s', PORT=%s);\n"</literal>
                <literal type="string">"select pgxc_pool_reload();\n"</literal>
                <literal type="string">"%s"</literal>
                <literal type="string">"\\q\n"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>coordIdx</name></expr>]</index></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dnReconfigured</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>cmd</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>

<cpp:undef>#    <cpp:directive>undef</cpp:directive> <name>checkRc</name></cpp:undef>
</block_content>}</block></function>

<comment type="block">/*
 * Show coordinator configuration
 */</comment>
<function><type><name>int</name></type> <name>show_config_coordMasterSlaveMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>show_config_coordMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_coordSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_coordMasterMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_coordMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_coordSlaveMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_coordSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_coordMaster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"Coordinator Master: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Nodename: '%s', port: %s, pooler port: %s\n"</literal></expr></argument>, 
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    MaxWalSenders: %s, Dir: '%s'\n"</literal></expr></argument>, 
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    ExtraConfig: '%s', Specific Extra Config: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"    pg_hba entries ( "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"'%s' "</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s)\n"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Extra pg_hba: '%s', Specific Extra pg_hba: '%s'\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_coordExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_coordSlave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"Coordinator Slave: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>,  <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,<argument><expr><literal type="string">"    Nodename: '%s', port: %s, pooler port: %s\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Dir: '%s', Archive Log Dir: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Checks if all the coordinators are running
 *
 * Returns FALSE if any of them are not running.
 */</comment>
<function><type><name>int</name></type> <name>check_AllCoordRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
</unit>
