<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/monitor.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * monitor.c
 *
 *    Monitoring module of Postgres-XC configuration and operation tool.
 *
 * Portions Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * This module is imported from /contrib/pgxc_monitor, to provide monitoring
 * feature of each pgstgres-xc components.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<comment type="block">/* This is an ugly hack to avoid conflict between gtm_c.h and pgxc_ctl.h */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>true</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>false</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monitor.h"</cpp:file></cpp:include>

<comment type="block">/* Define all the node types */</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>GTM</name></decl>,    <comment type="block">/* GTM or GTM-proxy */</comment>
    <decl><name>NODE</name></decl>    <comment type="block">/* Coordinator or Datanode */</comment>
}</block></enum></type> <name>nodetype_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetToken</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(line = get_word(line, &amp;token))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcmp(token, word) == 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TestToken</name><parameter_list>(<parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((token != NULL) &amp;&amp; (strcasecmp(token, word) == 0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Running: %s %s\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Running: %s\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Not running: %s %s\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Not running: %s\n"</literal></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_gtm_master</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><call><name>printResult</name><argument_list>(<argument><expr><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"gtm master"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"GTM master not running\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><call><name>printResult</name><argument_list>(<argument><expr><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"gtm slave"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"gtm proxy"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
    
    
<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_coordinator_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><literal type="string">"coordinator master"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_coordinator_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Need to check again if the slave is configured */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave %s is not configured\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><literal type="string">"coordinator slave"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_coordinator</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>coordIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a coordinator\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><literal type="string">"coordinator master"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">"coordinator slave"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><literal type="string">"datanode master"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><literal type="string">"datanode slave"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave %s is not configured.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_datanode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><literal type="string">"datanode master"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printResult</name><argument_list>(<argument><expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">"datanode slave"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monitor_something</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>wkNodeList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeType</name></type> <name>type</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>wkNodeList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>getNodeType</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NodeType_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>monitor_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>NodeType_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>wkNodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>monitor_gtm_proxy</name><argument_list>(<argument><expr><name>wkNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>NodeType_COORDINATOR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>wkNodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>monitor_coordinator</name><argument_list>(<argument><expr><name>wkNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>NodeType_DATANODE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>wkNodeList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>monitor_datanode</name><argument_list>(<argument><expr><name>wkNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not found in any node.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

    

<function><type><name>void</name></type> <name>do_monitor_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no monitor command options found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Ping GTM */</comment>
            <expr_stmt><expr><call><name>monitor_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>monitor_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid monitor gtm command option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"gtm_proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>monitor_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>monitor_gtm_proxy</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>monitor_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_coordinator_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>monitor_coordinator_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: coordinator slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else
                if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>monitor_coordinator_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <do>do<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                    while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                    <expr_stmt><expr><call><name>monitor_coordinator_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>monitor_coordinator</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"datanode"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>monitor_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"master"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>monitor_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <do>do<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                <expr_stmt><expr><call><name>monitor_datanode_master</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"slave"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_coordSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else
                if <condition>(<expr><operator>!</operator><call><name>GetToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>monitor_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <do>do<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
                    while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                    <expr_stmt><expr><call><name>monitor_datanode_slave</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
            while<condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <expr_stmt><expr><call><name>monitor_datanode</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>TestToken</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>monitor_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>monitor_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>monitor_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>monitor_coordinator</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>monitor_datanode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
        while <condition>(<expr><call><name>GetToken</name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>monitor_something</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Ping a given GTM or GTM-proxy
 */</comment>
<function><type><name>int</name></type>
<name>do_gtm_ping</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>connect_str</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no hostname is specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Invalid port number, %d.\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
	<comment type="block">/* Use 60s as connection timeout, use GTM_NODE_GTM_CTL as remote type here */</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_str</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d postmaster=0 connect_timeout=60"</literal></expr></argument>,
			<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>myName</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM_CTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_str</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"DEBUG3: Could not connect to %s, %d\n"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
