<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/gtm_cmd.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_cmd.c
 *
 *    GTM command module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * This module provides various gtm-related pgxc_operation.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"monitor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>


<comment type="block">/*  ======================================================================================
 *
 * GTM Staff
 *
 * =======================================================================================
 */</comment>
<comment type="block">/*
 * Init gtm master -----------------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initGtmMaster</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdInitGtmMaster</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdGtmConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdGxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fileList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                <literal type="string">"Skip GTM initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Kill current gtm, bild work directory and run initgtm */</comment>
    <expr_stmt><expr><name>cmdInitGtmMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdInitGtmMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"%s"</literal>
             <literal type="string">"[ -f %s/gtm.pid ] &amp;&amp; gtm_ctl -D %s -m immediate -Z gtm stop;"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"PGXC_CTL_SILENT=1 initgtm -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Then prepare gtm.conf file */</comment>

    <comment type="block">/* Prepare local Stdin */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitGtmMaster</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdGtmConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdGtmConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmdInitGtmMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdInitGtmMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===============================================\n"</literal>
            <literal type="string">"# Added at initialization, %s\n"</literal>
            <literal type="string">"listen_addresses = '*'\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"port = %s\n"</literal>
            <literal type="string">"nodename = '%s'\n"</literal>
            <literal type="string">"startup = ACT\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* other options */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/gtm.conf"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Setup GTM with appropriate GXID value */</comment>
    
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdGtmConf</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdGxid</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGxid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"(gtm -x 2000 -D %s &amp;); sleep 1; gtm_ctl stop -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
     <else>else<block type="pseudo"><block_content>
         <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGxid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
              <argument><expr><literal type="string">"(gtm -x 2000 -D %s &amp;); sleep 1;"</literal></expr></argument>,
              <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>cmdInitGtmMaster</name></expr>;</return>
</block_content>}</block></function>
 
<function><type><name>int</name></type> <name>init_gtm_master</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize GTM master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"No GTM master specified, exiting!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Kill current gtm, build work directory and run initgtm */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_initGtmMaster</name><argument_list>(<argument><expr><name>stop</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add gtm master
 *
 */</comment>
<function><type><name>int</name></type> <name>add_gtmMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__port_s__</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm master with the name \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm master with the name \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm master with the directory \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkSpecificResourceConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: New specified name:%s, host:%s, port:%d and dir:\"%s\" conflicts with existing node.\n"</literal></expr></argument>,
             <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>__port_s__</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>__port_s__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>makeServerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__port_s__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM master addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>, 
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>init_gtm_master</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__port_s__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__port_s__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_gtm_master</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add gtm slave: to be used after all the configuration is done.
 *
 * This function only maintains internal configuration, updte configuration file,
 * and make backup if configured.   You should run init_gtm_slave and stat_gtm_slave
 * separately.
 */</comment>
<function><type><name>int</name></type> <name>add_gtmSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__dir__</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is already configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm slave with the name \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm slave with the name \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm slave with the directory \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkSpecificResourceConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: New specified name:%s, host:%s, port:%d and dir:\"%s\" conflicts with existing node.\n"</literal></expr></argument>,
             <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>__dir__</name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>, <argument><expr><name>__dir__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>makeServerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__dir__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM slave addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>, 
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>init_gtm_slave</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__dir__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__dir__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_gtm_slave</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_gtmMaster</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <comment type="block">/* Check if gtm_slave is configured */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM master is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check if gtm_master is running and stop if yes */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Removing gtm master.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Clean */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>clean_gtm_master</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Reconfigure */</comment>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Write the configuration file and bakup it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM master removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_gtmSlave</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <comment type="block">/* Check if gtm_slave is configured */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if gtm_slave is not running */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is now running. Cannot remove it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Removing gtm slave.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Clean */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>clean_gtm_slave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Reconfigure */</comment>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Write the configuration file and bakup it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM slave removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Init gtm slave -------------------------------------------------------------
 */</comment>

<comment type="block">/* 
 * Assumes Gtm Slave is configured.
 * Caller should check this.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initGtmSlave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdInitGtm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdGtmConf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fileList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Kill current gtm, build work directory and run initgtm */</comment>
    <expr_stmt><expr><name>cmdInitGtm</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"[ -f %s/gtm.pid ] &amp;&amp; gtm_ctl -D %s -m immediate -Z gtm stop;"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"PGXC_CTL_SILENT=1 initgtm -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Prepare gtm.conf file */</comment>

    <comment type="block">/* Prepare local Stdin */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdGtmConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/gtm.conf"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdGtmConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===============================================\n"</literal>
            <literal type="string">"# Added at initialization, %s\n"</literal>
            <literal type="string">"listen_addresses = '*'\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"port = %s\n"</literal>
            <literal type="string">"nodename = '%s'\n"</literal>
            <literal type="string">"startup = STANDBY\n"</literal>
            <literal type="string">"active_host = '%s'\n"</literal>
            <literal type="string">"active_port = %d\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>cmdInitGtm</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdInitGtm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize GTM slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdInitGtm</name> <operator>=</operator> <call><name>prepare_initGtmSlave</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Do all the commands and clean */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start gtm master -----------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startGtmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdGtmCtl</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdGtmCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, 
             <argument><expr><literal type="string">"[ -f %s/gtm.pid ] &amp;&amp; gtm_ctl stop -Z gtm -D %s;"</literal>
             <literal type="string">"rm -f %s/register.node;"</literal>
             <literal type="string">"gtm_ctl start -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmdGtmCtl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_gtm_master</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Start GTM master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"No GTM master specified, cannot start. Exiting!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_startGtmMaster</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start gtm slave ----------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startGtmSlave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdGtmCtl</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdGtmCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, 
             <argument><expr><literal type="string">"[ -f %s/gtm.pid ] &amp;&amp; gtm_ctl stop -Z gtm -D %s;"</literal>
             <literal type="string">"rm -rf %s/register.node;"</literal>
             <literal type="string">"gtm_ctl start -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>cmdGtmCtl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Start GTM slave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startGtmSlave</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Stop gtm master ---------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopGtmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdGtmCtl</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdGtmCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"gtm_ctl stop -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmdGtmCtl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stop_gtm_master</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stop GTM master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_stopGtmMaster</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Stop gtm slave ---------------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopGtmSlave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdGtmCtl</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdGtmCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"gtm_ctl stop -Z gtm -D %s"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmdGtmCtl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stop_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stop GTM slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopGtmSlave</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill gtm master -----------------------------------------------------
 *
 * You should not kill gtm master in this way.   This may discard the latest
 * gtm status.  This is just in case.  You must try to stop gtm master
 * gracefully.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killGtmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdKill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>gtmPid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdKill</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gtmPid</name> <operator>=</operator> <call><name>get_gtm_pid</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>gtmPid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d; rm -rf /tmp/.s.'*'%d'*' %s/gtm.pid"</literal></expr></argument>,
                 <argument><expr><name>gtmPid</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for gtm master was not found.  Remove socket only.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf /tmp/.s.'*'%d'*' %s/gtm.pid"</literal></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmdKill</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>kill_gtm_master</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd_killGtmMaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Kill GTM master\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd_killGtmMaster</name> <operator>=</operator> <call><name>prepare_killGtmMaster</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd_killGtmMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill gtm slave --------------------------------------------------------
 *
 * GTM slave has no significant informaion to carry over.  But it is a good
 * habit to stop gtm slave gracefully with stop command.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killGtmSlave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdKill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>gtmPid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdKill</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gtmPid</name> <operator>=</operator> <call><name>get_gtm_pid</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>gtmPid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d; rm -rf /tmp/.s.'*'%d'*' %s/gtm.pid"</literal></expr></argument>,
                 <argument><expr><name>gtmPid</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for gtm slave was not found.  Remove socket only.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf /tmp/.s.'*'%d'*' %s/gtm.pid"</literal></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmdKill</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>kill_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdKill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Kill GTM slave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdKill</name> <operator>=</operator> <call><name>prepare_killGtmSlave</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmdKill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Failover the gtm ------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>failover_gtm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stdIn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Failover gtm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not configured. Cannot failover.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>do_gtm_ping</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM slave is not running\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Promote the slave */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Running \"gtm_ctl promote -Z gtm -D %s\"\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                     <argument><expr><literal type="string">"gtm_ctl promote -Z gtm -D %s"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not promote gtm (host:%s, dir:%s)\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Configure promoted gtm */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name>stdIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# Updated due to GTM failover\n"</literal>
            <literal type="string">"#        %s\n"</literal>
            <literal type="string">"startup = ACT\n"</literal>
            <literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Updating gtm.conf at %s:%s\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stdIn</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/gtm.conf"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not update gtm.conf (host: %s, dir:%s)\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>stdIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Update and backup configuration file */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><name>stdIn</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM failover\n"</literal>
            <literal type="string">"#        %s\n"</literal>
            <literal type="string">"gtmMasterServer=%s\n"</literal>
            <literal type="string">"gtmMasterPort=%s\n"</literal>
            <literal type="string">"gtmMasterDir=%s\n"</literal>
            <literal type="string">"gtmSlave=n\n"</literal>
            <literal type="string">"gtmSlaveServer=none\n"</literal>
            <literal type="string">"gtmSlavePort=0\n"</literal>
            <literal type="string">"gtmSlaveDir=none\n"</literal>
            <literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stdIn</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not update gtm.conf (host: %s, dir:%s)\n"</literal></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>stdIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reconfigure myself */</comment>
    <expr_stmt><expr><call><name>assign_val</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_val</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>, <argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_val</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>, <argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean gtm master resources -- directory and socket --------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanGtmMaster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <comment type="block">/* Remote work dir and clean the socket */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>, 
             <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s; chmod 0700 %s;rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_gtm_master</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Clearing gtm master directory and socket.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanGtmMaster</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean gtm master resources -- direcotry and socket --------------------------
 */</comment>
<comment type="block">/*
 * Null will be retruend if gtm slave is not configured.
 * Be careful.   If you configure gtm slave and gtm master on a same server,
 * bott slave amd master process will be killed.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanGtmSlave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s; chmod 0700 %s;rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_gtm_slave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Clearing gtm slave resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><call><name>prepare_cleanGtmSlave</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ==================================================================================
 *
 * Gtm Proxy Staff
 *
 * ==================================================================================
 */</comment>

<comment type="block">/*
 * Add gtm proxy: to be used after all the configuration is done.
 *
 * This function only maintains internal configuration, updte configuration file,
 * and make backup if configured.   You should run init and start it separately.
 */</comment>
<function><type><name>int</name></type> <name>add_gtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm proxy with the name \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot add gtm proxy with the directory \"none\".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkSpecificResourceConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: New specified name:%s, host:%s, port:%d and dir:\"%s\" conflicts with existing node.\n"</literal></expr></argument>,
             <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>makeServerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM proxy (%s) addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><name>name</name></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init_gtm_proxy</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>start_gtm_proxy</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_gtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <comment type="block">/* Check if gtm proxy exists */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if it is in use */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>ifExists</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>ifExists</name><argument_list>(<argument><expr><name>VAR_coordSlaveServers</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>ifExists</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>ifExists</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy %s is in use\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"NOTICE: removing gtm_proxy %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Clean */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"NOTICE: cleaning target resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clean_gtm_proxy</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Reconfigure */</comment>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>makeServerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update configuration file and backup it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to GTM proxy addition\n"</literal>
            <literal type="string">"#        %s\n"</literal>
            <literal type="string">"%s=%s\n"</literal>                    <comment type="block">/* gtmProxy */</comment>
            <literal type="string">"%s=( %s )\n"</literal>                <comment type="block">/* gtmProxyNames */</comment>
            <literal type="string">"%s=( %s )\n"</literal>                <comment type="block">/* gtmProxyServers */</comment>
            <literal type="string">"%s=( %s )\n"</literal>                <comment type="block">/* gtmProxyPorts */</comment>
            <literal type="string">"%s=( %s )\n"</literal>                <comment type="block">/* gtmProxyDirs */</comment>
            <literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>VAR_gtmProxy</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>VAR_gtmProxyNames</name></expr></argument>, <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>VAR_gtmProxyServers</name></expr></argument>, <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>, <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>, <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
 * Does not check if node name is valid.
 */</comment>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdInitGtm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdGtmProxyConf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fileList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy configuration.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                <literal type="string">"Skip GTM proxy initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build directory and run initgtm */</comment>
    <expr_stmt><expr><name>cmdInitGtm</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"%s"</literal>
             <literal type="string">"[ -f %s/gtm_proxy.pid ] &amp;&amp; gtm_ctl -D %s -m immediate -Z gtm_proxy stop;"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"PGXC_CTL_SILENT=1 initgtm -Z gtm_proxy -D %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure gtm_proxy.conf */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdGtmProxyConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdGtmProxyConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdInitGtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#===========================\n"</literal>
            <literal type="string">"# Added at initialization, %s\n"</literal>
            <literal type="string">"nodename = '%s'\n"</literal>
            <literal type="string">"listen_addresses = '*'\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"port = %s\n"</literal>
            <literal type="string">"gtm_host = '%s'\n"</literal>
            <literal type="string">"gtm_port = %s\n"</literal>
            <literal type="string">"worker_threads = 1\n"</literal>
            <literal type="string">"gtm_connect_retry_interval = 1\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmProxyConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/gtm_proxy.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmdInitGtm</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize gtm proxy -------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>init_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdInitGtmPxy</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init and run initgtm */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initializing gtm proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmdInitGtmPxy</name> <operator>=</operator> <call><name>prepare_initGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmdInitGtmPxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>init_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initialize all the gtm proxies.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return<expr><operator>(</operator><call><name>init_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start gtm proxy -----------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"[ -f %s/gtm_proxy.pid ] &amp;&amp; gtm_ctl -D %s -m immediate -Z gtm_proxy stop;"</literal>
             <literal type="string">"gtm_ctl start -Z gtm_proxy -D %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init and run initgtm */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Starting gtm proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Starting all the gtm proxies.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Stop gtm proxy -------------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"gtm_ctl stop -Z gtm_proxy -D %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>stop_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init and run initgtm */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Stopping gtm proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stop_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Stopping all the gtm proxies.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>stop_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill gtm proxy -------------------------------------------------------------------
 *
 * Although gtm proxy does not have significant resources to carry over to the next
 * run, it is a good habit to stop gtm proxy with stop command gracefully.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>gtmPxyPid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gtmPxyPid</name> <operator>=</operator> <call><name>get_gtmProxy_pid</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>gtmPxyPid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d; rm -rf /tmp/.s.'*'%d'*' %s/gtm_proxy.pid"</literal></expr></argument>,
                 <argument><expr><name>gtmPxyPid</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for gtm proxy \"%s\" was not found.  Remove socket only.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf /tmp/.s.'*'%d'*' %s/gtm_proxy.pid"</literal></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init and run initgtm */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Killing process of gtm proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_killGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Killing all the gtm proxy processes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>kill_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reconnect to the current GTM master --------------------------------------------------
 *
 * When failed over, the current Master must have been updated.
 * Remember to update gtm_proxy configuration file so that it 
 * connects to the new master at the next start.
 * Please note that we assume GTM has already been failed over.
 * First argument is gtm_proxy nodename
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_reconnectGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdGtmCtl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdGtmProxyConf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified name %s is not GTM Proxy\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* gtm_ctl reconnect */</comment>
    <expr_stmt><expr><name>cmdGtmCtl</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"gtm_ctl reconnect -Z gtm_proxy -D %s -o \\\"-s %s -t %s\\\""</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* gtm_proxy.conf */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdGtmProxyConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdGtmProxyConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdGtmCtl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# Updated due to GTM Proxy reconnect\n"</literal>
            <literal type="string">"#        %s\n"</literal>
            <literal type="string">"gtm_host = '%s'\n"</literal>
            <literal type="string">"gtm_port = %s\n"</literal>
            <literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdGtmProxyConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/gtm_proxy.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmdGtmCtl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>reconnect_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmProxy</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"GTM Proxy is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init and run initgtm */</comment>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Reconnecting gtm proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_reconnectGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>reconnect_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Reconnecting all the gtm proxies to the new one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>reconnect_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup -- nodeName must be valid.   Instead, NULL will bereturned.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanGtmProxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>idx</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>gtmProxyIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s; chmod 0700 %s;rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, 
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cmd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_gtm_proxy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Clearing resources for gtm_proxy %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_cleanGtmProxy</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s is not a gtm proxy.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_gtm_proxy_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Clearing all the gtm_proxy resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>clean_gtm_proxy</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * configuration --------------------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>show_config_gtmMaster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>lineBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>lineBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"GTM Master: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lineBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>lineBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>print_simple_node_info</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterDir</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_gtmSlave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>lineBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_gtmSlave</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><name>VAR_gtmSlaveServer</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: gtm slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>lineBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"GTM Slave: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>lineBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_simple_node_info</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlavePort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveDir</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmSlaveSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_gtmProxies</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nameList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nameList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>show_config_gtmProxy</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_gtmProxy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>lineBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>lineBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"GTM Proxy: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>lineBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lineBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>lineBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>print_simple_node_info</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmPxyExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmPxySpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
