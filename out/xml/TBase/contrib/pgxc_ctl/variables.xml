<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/variables.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * varibales.c
 *
 *    Variable haneling module of Postgres-XC configuration and operation tool.
 *
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var_tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_var</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Hash bucket size is up to 256
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hash_val</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>name_u</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>v</name></decl>;</decl_stmt>
	
	<for>for<control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>name_u</name></expr>;</condition> <incr><expr><name>name_u</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>*</operator><name>name_u</name></expr>;</expr_stmt></block_content></block></for>
	<return>return <expr><operator>(</operator><name>v</name><operator>%</operator><name>NUM_HASH_BUCKET</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMIT_TO_DOUBLE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCR_OVER_DOUBLE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>next_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <name>LIMIT_TO_DOUBLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>sz</name><operator>*</operator><literal type="number">2</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>sz</name> <operator>+</operator> <name>INCR_OVER_DOUBLE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_var_hash</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_HASH_BUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>el_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>el_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>el</name> <operator>=</operator> <operator>(</operator><name>pgxc_ctl_var</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgxc_ctl_var</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_from_hash</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>hash_v</name> <init>= <expr><call><name>hash_val</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>var</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if>
		<else>else
		<block>{<block_content>
			<for>for<control>(<init><expr><name>jj</name> <operator>=</operator> <name>ii</name></expr>;</init> <condition><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name>jj</name></expr>]</index></name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name>jj</name></expr>]</index></name> <operator>=</operator> <name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name>jj</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_used</name><operator>--</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_var_hash</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>hash_v</name> <init>= <expr><call><name>hash_val</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_used</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_size</name> <operator>=</operator> <call><name>next_size</name><argument_list>(<argument><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el</name> <operator>=</operator> <operator>(</operator><name>pgxc_ctl_var</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>Realloc</name><argument_list>(<argument><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgxc_ctl_var</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_used</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name><name>el</name><index>[<expr><name><name>var_hash</name><index>[<expr><name>hash_v</name></expr>]</index></name><operator>.</operator><name>el_used</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>new_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>newv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Variable %s already defined. Check your configuration.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>newv</name> <operator>=</operator> <operator>(</operator><name>pgxc_ctl_var</name> <operator>*</operator><operator>)</operator><call><name>Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgxc_ctl_var</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>var_head</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_head</name> <operator>=</operator> <name>var_tail</name> <operator>=</operator> <name>newv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>var_tail</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_tail</name> <operator>=</operator> <name>newv</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>varname</name></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>val_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>val_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newv</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_var_hash</name><argument_list>(<argument><expr><name>newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return<expr><operator>(</operator><name>newv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove_var</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var_head</name> <operator>==</operator> <name>var_tail</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>var_head</name> <operator>==</operator> <name>var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>var_head</name> <operator>=</operator> <name>var_tail</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>var_head</name> <operator>==</operator> <name>var</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_head</name> <operator>=</operator> <name><name>var_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var_head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>var_tail</name> <operator>==</operator> <name>var</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>var_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_tail</name> <operator>=</operator> <name><name>var_tail</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>clear_var</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_var</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remove_from_hash</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 
</block_content>}</block></function>		

<function><type><name>void</name></type> <name>add_val</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>val_size</name></name> <operator>&lt;=</operator> <name><name>var</name><operator>-&gt;</operator><name>val_used</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val_size</name></name> <operator>=</operator> <call><name>next_size</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>val_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>Realloc</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>var</name><operator>-&gt;</operator><name>val_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name><name>var</name><operator>-&gt;</operator><name>val_used</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name><name>var</name><operator>-&gt;</operator><name>val_used</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>add_val_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>var</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>


<function><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>find_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_var_hash</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><operator>&amp;</operator><name><name>var_hash</name><index>[<expr><call><name>hash_val</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash</name><operator>-&gt;</operator><name>el_used</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>varname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>hash</name><operator>-&gt;</operator><name>el</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>aval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>var</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_value</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Free</name> <argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assign_val</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>destName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>srcName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>reset_value</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assign_sval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>destName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>reset_value</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>confirm_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset_value</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_var_val</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>reset_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_val</name><argument_list>(<argument><expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>confirm_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>new_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>cur</name> <operator>=</operator> <name>var_head</name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name><operator>=</operator><name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print_var</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>vname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>MAXLINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>vname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Variable %s not found.\n"</literal></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>curv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>editbuf</name><index>[<expr><name>MAXPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editbuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"%s ("</literal></expr></argument>, <argument><expr><name>vname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editbuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>curv</name><operator>=</operator><name><name>var</name><operator>-&gt;</operator><name>val</name></name></expr>;</init> <condition><expr><operator>*</operator><name>curv</name></expr>;</condition> <incr><expr><name>curv</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editbuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">" \"%s\" "</literal></expr></argument>, <argument><expr><operator>*</operator><name>curv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editbuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_var</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>logFile</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print_var</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>arraySizeName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return<expr><operator>(</operator><call><name>arraySize</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>arraySize</name><parameter_list>(<parameter><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>var</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>add_member</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>array</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>Realloc</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rv</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rv</name><index>[<expr><name>ii</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return<expr><operator>(</operator><name>rv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clean_array</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition>
	<block>{<block_content>
		<for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>array</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>var_assign</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>listValue</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dest</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>dest</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ifExists</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>
	
<function><type><name>int</name></type> <name>IfExists</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>var</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extend the variable values array to newSize (plus 1 for store the
 * end-of-array marker
 */</comment> 
<function><type><name>int</name></type> <name>extendVar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>def_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>old_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>target</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>def_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>def_value</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * If the allocated array is not already big enough to store newSize + 1
	 * elements, we must extend it newSize + 1
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>val_size</name></name> <operator>&lt;=</operator> <name>newSize</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>old_val</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_size</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>val_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>Malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>newSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>old_val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>val_size</name></name> <operator>=</operator> <name>newSize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>old_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>val_used</name></name></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>newSize</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name><name>target</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator><index>[<expr><name>ii</name></expr>]</index> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>def_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Store NULL in the last element to mark the end-of-array */</comment>
	<expr_stmt><expr><operator>(</operator><name><name>target</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator><index>[<expr><name>newSize</name></expr>]</index> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>val_used</name></name> <operator>&lt;</operator> <name>newSize</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>val_used</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* 
 * If pad is NULL, then "none" will be padded.
 * Returns *val if success, NULL if failed
 */</comment>
<function><type><name>void</name></type> <name>assign_arrayEl_internal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>extend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>confirm_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * Pad if needed
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>extend</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>extendVar</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>Strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assign_arrayEl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>assign_arrayEl_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replace_arrayEl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>assign_arrayEl_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>doesExist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgxc_ctl_var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>var</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>val_used</name></name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
