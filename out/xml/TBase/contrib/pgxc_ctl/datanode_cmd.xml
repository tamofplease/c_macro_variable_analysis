<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/contrib/pgxc_ctl/datanode_cmd.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datanode_cmd.c
 *
 *    Datanode command module of Postgres-XC configuration and operation tool.
 *
 * Copyright (c) 2013 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/readline.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;readline/history.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varnames.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc_ctl_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"do_shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datanode_cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coord_cmd.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 *======================================================================
 *
 * Datanode staff
 *
 *=====================================================================
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>failover_oneDatanode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>datanodeIdx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize datanode master ------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>init_datanode_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initialize all the datanode masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>init_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initDatanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdInitdb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgHba</name></decl>;</decl_stmt>
    <comment type="line">//char *gtmHost;</comment>
    <comment type="line">//char *gtmPort;</comment>
    <comment type="line">//int gtmIdx;</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fileList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timeStamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteWalDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wal</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>remoteWalDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                <literal type="string">"Skip Datanode initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>
               )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>wal</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteWalDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                    <literal type="string">"target directory (%s) exists and not empty. "</literal>
                    <literal type="string">"Skip Datanode initilialization'; exit; fi;"</literal></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                    <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>
                   )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build each datanode's initialize command */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdInitdb</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"%s %s"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s; PGXC_CTL_SILENT=1 initdb --nodename %s --nodetype datanode %s %s -D %s "</literal>
             <literal type="string">"--master_gtm_nodename %s --master_gtm_ip %s --master_gtm_port %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><name>remoteWalDirCheck</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">"-X"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize postgresql.conf */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><operator>(</operator><name><name>cmdPgConf</name><operator>-&gt;</operator><name>localStdin</name></name> <operator>=</operator> <call><name>Malloc</name><argument_list>(<argument><expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#===========================================\n"</literal>
            <literal type="string">"# Added at initialization. %s\n"</literal>
            <literal type="string">"log_destination = 'stderr'\n"</literal>
            <literal type="string">"logging_collector = on\n"</literal>
            <literal type="string">"log_directory = 'pg_log'\n"</literal>
            <literal type="string">"listen_addresses = '*'\n"</literal>
            <literal type="string">"max_connections = 100\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timeStamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//gtmIdx = getEffectiveGtmProxyIdxFromServerName(aval(VAR_datanodeMasterServers)[idx]);</comment>
    <comment type="line">//gtmHost = (gtmIdx &lt; 0) ? sval(VAR_gtmMasterServer) : aval(VAR_gtmProxyServers)[gtmIdx];</comment>
    <comment type="line">//gtmPort = (gtmIdx &lt; 0) ? sval(VAR_gtmMasterPort) : aval(VAR_gtmProxyPorts)[gtmIdx];</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"port = %s\n"</literal>
            <literal type="string">"pooler_port = %s\n"</literal></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"pgxc_main_cluster_name = %s\n"</literal>
                <literal type="string">"pgxc_cluster_name = %s\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcMainClusterName</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Additional Initialization for log_shipping */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd_cleanDir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd_PgConf</name></decl>;</decl_stmt>
        <comment type="block">/* This datanode has a slave */</comment>

        <comment type="block">/* Build archive log target */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd_cleanDir</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd_cleanDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf %s;mkdir -p %s; chmod 0700 %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* postgresql.conf */</comment>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd_PgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd_PgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd_PgConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"wal_level = logical \n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"# archive_command = 'rsync %%p %s@%s:%s/%%f'\n"</literal>
                <literal type="string">"max_wal_senders = %s\n"</literal>
                <literal type="string">"# End of Addition\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd_PgConf</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmd_PgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd_PgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmd_PgConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# End of Addition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* pg_hba.conf */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdInitdb</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgHba</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgHba</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdPgHba</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=================================================\n"</literal>
            <literal type="string">"# Addition at initialization, %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timeStamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"host all %s %s trust\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                        <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                        <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# End of additon\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>init_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize the datanode master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_initDatanodeMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize datanode slave ----------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>init_datanode_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize all the datanode slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>init_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_initDatanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdBuildDir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdStartMaster</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdBaseBkup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdRecovConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdPgConf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdStopMaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>startMaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>remoteDirCheck</name><index>[<expr><name>MAXPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: specified node %s is not datanode. skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>startMaster</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
    <comment type="block">/* Check if the datanode master is running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>startMaster</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: slave not configured for datanode %s\n"</literal></expr></argument>,
             <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>remoteDirCheck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forceInit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>remoteDirCheck</name></expr></argument>, <argument><expr><literal type="string">"if [ '$(ls -A %s 2&gt; /dev/null)' ]; then echo 'ERROR: "</literal>
                                <literal type="string">"target directory (%s) exists and not empty. "</literal>
                                <literal type="string">"Skip Datanode initilialization'; exit; fi;"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build slave's directory -1- */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdBuildDir</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"%s"</literal>
             <literal type="string">"rm -rf %s;"</literal>
             <literal type="string">"mkdir -p %s;"</literal>
             <literal type="string">"chmod 0700 %s"</literal></expr></argument>,
             <argument><expr><name>remoteDirCheck</name></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start datanode master if it is not running -2- */</comment>
    <if_stmt><if>if <condition>(<expr><name>startMaster</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdStartMaster</name> <operator>=</operator> <call><name>prepare_startDatanodeMaster</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Obtain base backup of the master */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdBaseBkup</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdBaseBkup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_basebackup -U %s -p %s -h %s -D %s --wal-method=stream"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Configure recovery.conf of the slave */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdRecovConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdRecovConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/recovery.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdRecovConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to initialize the slave, %s\n"</literal>
            <literal type="string">"standby_mode = on\n"</literal>
            <literal type="string">"primary_conninfo = 'host = %s port = %s user = %s application_name = %s'\n"</literal>
            <literal type="string">"# restore_command = 'cp %s/%%f %%p'\n"</literal>
            <literal type="string">"# archive_cleanup_command = 'pg_archivecleanup %s %%r'\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Configure slave's postgresql.conf */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdPgConf</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdPgConf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdPgConf</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to startup the slave, %s\n"</literal>
            <literal type="string">"hot_standby = on\n"</literal>
            <literal type="string">"port = %s\n"</literal>
            <literal type="string">"pooler_port = %s\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_multiCluster</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"prefer_olap = true\n"</literal>
                <literal type="string">"olap_optimizer = true\n"</literal>
                <literal type="string">"pgxc_main_cluster_name = %s\n"</literal>
                <literal type="string">"pgxc_cluster_name = %s\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcMainClusterName</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveCluster</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Stp datanode master if needed */</comment>
    <if_stmt><if>if <condition>(<expr><name>startMaster</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdBuildDir</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdStopMaster</name> <operator>=</operator> <call><name>prepare_stopDatanodeMaster</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>FAST</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Initialize datanode slave %s\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_initDatanodeSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start datanode master --------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>start_datanode_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting all the datanode masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startDatanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdStartDatanodeMaster</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a datanode, skipping\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the target is running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: datanode master %s is running now. Skipping.\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmdStartDatanodeMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdStartDatanodeMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStartDatanodeMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl start -w -Z datanode -D %s -o -i"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmdStartDatanodeMaster</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting datanode master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startDatanodeMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start datanode slave --------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>start_datanode_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting all the datanode slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>start_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_startDatanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdStartDatanodeSlave</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdMasterToSyncMode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdMasterReload</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    
    <comment type="block">/* If the node really a datanode? */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: node %s is not a datanode. Skipping\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the datanode master is running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: master of the datanode %s is not running. Skipping\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: slave not configured for datanode %s\n"</literal></expr></argument>,
                <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdStartDatanodeSlave</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStartDatanodeSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl start -w -Z datanode -D %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Change the master to synchronous mode */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdStartDatanodeSlave</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdMasterToSyncMode</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdMasterToSyncMode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdMasterToSyncMode</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdStartDatanodeSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================================\n"</literal>
            <literal type="string">"# Added to start the slave in sync. mode, %s\n"</literal>
            <literal type="string">"# synchronous_standby_names = '%s'\n"</literal>
            <literal type="string">"# End of the addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reload postgresql.conf change */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdStartDatanodeSlave</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdMasterReload</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdMasterReload</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"pg_ctl reload -Z datanode -D %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>start_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting datanode slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_startDatanodeSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Stop datanode master ------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopDatanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdStopDatanodeMaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a datanode. Skipping\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmdStopDatanodeMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStopDatanodeMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z datanode -D %s -m %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStopDatanodeMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z datanode -D %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmdStopDatanodeMaster</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>stop_datanode_master_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping all the datanode masters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>stop_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>stop_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping datanode master %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopDatanodeMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Stop datanode slave --------------------------------------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_stopDatanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdMasterToAsyncMode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdStopSlave</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s is not a datanode. Skipping\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"datanode %s does not have a slave. Skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Set the master to asynchronous mode */</comment>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdMasterToAsyncMode</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdMasterToAsyncMode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>prepareLocalStdin</name><argument_list>(<argument><expr><call><name>newFilename</name><argument_list>(<argument><expr><name><name>cmdMasterToAsyncMode</name><operator>-&gt;</operator><name>localStdin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cleanCmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdMasterToAsyncMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=======================================\n"</literal>
            <literal type="string">"# Updated to trun off the slave %s\n"</literal>
            <literal type="string">"synchronous_standby_names = ''\n"</literal>
            <literal type="string">"# End of the update\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reload new config file if the master is running */</comment>
    <comment type="block">/* The next step might need improvement.  When GTM is dead, the following may
     * fail even though the master is running.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmdReloadMaster</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdMasterToAsyncMode</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdReloadMaster</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdReloadMaster</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl reload -Z datanode -D %s"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Stop the slave */</comment>
    <expr_stmt><expr><call><name>appendCmdEl</name><argument_list>(<argument><expr><name>cmdMasterToAsyncMode</name></expr></argument>, <argument><expr><operator>(</operator><name>cmdStopSlave</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStopSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z datanode -D %s -m %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmdStopSlave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"pg_ctl stop -w -Z datanode -D %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>stop_datanode_slave_all</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping all the datanode slaves.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stop_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Datanode slave is not configured.  Returning.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Stopping datanode slave %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_stopDatanodeSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>immediate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Failover datanode ---------------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>failover_datanode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Failover specified datanodes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datnaode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rc_local</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Failover the datanode %s.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode. Skipping.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: slave of the datanode %s is not configured. Skipping\n"</literal></expr></argument>,
                 <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>failover_oneDatanode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc_local</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name>rc_local</name><operator>)</operator></expr>;</return></block_content></block></if>
        <if type="elseif">else
            if <condition>(<expr><name>rc_local</name> <operator>&gt;</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc_local</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>failover_oneDatanode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>datanodeIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc_local</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <comment type="line">//char *gtmHost;</comment>
    <comment type="line">//char *gtmPort;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>gtmPxyIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>timestamp</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><name>MAXLINE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>cmdlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>dnReconfigured</name></decl>;</decl_stmt>

<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>checkRc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do{if(WEXITSTATUS(rc_local) &gt; rc) rc = WEXITSTATUS(rc_local);}while(0)</cpp:value></cpp:define>

    <comment type="block">/*
     * Determine the target GTM
     */</comment>
    <expr_stmt><expr><name>gtmPxyIdx</name> <operator>=</operator> <call><name>getEffectiveGtmProxyIdxFromServerName</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//gtmHost = (gtmPxyIdx &gt;= 0) ? aval(VAR_gtmProxyServers)[gtmPxyIdx] : sval(VAR_gtmMasterServer);</comment>
    <comment type="line">//gtmPort = (gtmPxyIdx &gt;= 0) ? aval(VAR_gtmProxyPorts)[gtmPxyIdx] : sval(VAR_gtmMasterPort);</comment>
    <if_stmt><if>if <condition>(<expr><name>gtmPxyIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Failover datanode %s using gtm %s\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_gtmProxyNames</name></expr></argument>)</argument_list></call><index>[<expr><name>gtmPxyIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Failover datanode %s using GTM itself\n"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Promote the slave */</comment>
    <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><literal type="string">"pg_ctl promote -Z datanode -D %s"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reconfigure new datanode master with new gtm_proxy or gtm */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator>  <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                           <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Could not prepare to update postgresql.conf, %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=================================================\n"</literal>
            <literal type="string">"# Added to promote, %s\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restart datanode slave (as the new master) */</comment>
    <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><literal type="string">"pg_ctl restart -w -Z datanode -D %s -o -i; sleep 1"</literal></expr></argument>,
                           <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Update the configuration variable
     */</comment>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>var_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><call><name>Strdup</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Update the configuration file
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Failed to open configuration file %s, %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#=====================================================\n"</literal>
            <literal type="string">"# Updated due to the datanode failover, %s, %s\n"</literal>
            <literal type="string">"datanodeMasterServers=( %s )\n"</literal>
            <literal type="string">"datanodePorts=( %s )\n"</literal>
            <literal type="string">"datanodePoolerPorts=( %s )\n"</literal>
            <literal type="string">"datanodeMasterDirs=( %s )\n"</literal>
            <literal type="string">"datanodeSlaveServers=( %s )\n"</literal>
            <literal type="string">"datanodeSlavePorts=( %s )\n"</literal>
            <literal type="string">"datanodeSlavePoolerPorts=( %s )\n"</literal>
            <literal type="string">"datanodeSlaveDirs=( %s )\n"</literal>
            <literal type="string">"# End of the update\n"</literal></expr></argument>,
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>, <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>listValue</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Backup the configuration file */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_configBackup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>rc_local</name> <operator>=</operator> <call><name>doConfigBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkRc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cmdlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <comment type="block">/*
     * Reconfigure datanodes with the new datanode. We prepare the commands and
     * pass them to the first coordinator we reconfigure later
     */</comment>
    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
            
        <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Datanode %s is not running.  Skip reconfiguration for this datanode.\n"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>cmdlen</name></expr></argument>, <argument><expr><name>MAXLINE</name> <operator>-</operator> <name>cmdlen</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'ALTER NODE %s WITH (HOST=''%s'', PORT=%s)';\n"</literal>
                <literal type="string">"EXECUTE DIRECT ON (%s) 'select pgxc_pool_reload()';\n"</literal></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>MAXLINE</name> <operator>-</operator> <name>cmdlen</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Datanode command exceeds the maximum allowed length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>cmdlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>dnReconfigured</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Reconfigure coordinators with new datanode
     */</comment>
    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
            
        <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Coordinator %s is not running.  Skip reconfiguration for this coordinator.\n"</literal></expr></argument>,
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s %s"</literal></expr></argument>,
                                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>,
                                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: failed to start psql for coordinator %s, %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"ALTER NODE %s WITH (HOST='%s', PORT=%s);\n"</literal>
                <literal type="string">"select pgxc_pool_reload();\n"</literal>
                <literal type="string">"%s"</literal>
                <literal type="string">"\\q\n"</literal></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>datanodeIdx</name></expr>]</index></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dnReconfigured</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>cmd</name></expr></else></ternary></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dnReconfigured</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>


    <return>return <expr><name>rc</name></expr>;</return>

<cpp:undef>#    <cpp:directive>undef</cpp:directive> <name>checkRc</name></cpp:undef>

</block_content>}</block></function>

<comment type="block">/*------------------------------------------------------------------------
 *
 * Add command
 *
 *-----------------------------------------------------------------------*/</comment>
<function><type><name>int</name></type> <name>add_datanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pooler</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>waldir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extraConf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>extraPgHbaConf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lockf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pooler_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>max_wal_senders_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">//int gtmPxyIdx;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>connCordIdx</name></decl>;</decl_stmt>
    <comment type="line">//char *gtmHost;</comment>
    <comment type="line">//char *gtmPort;</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pgdumpall_out</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>, <decl><type ref="prev"/><name>restore_dnode_idx</name></decl>, <decl><type ref="prev"/><name>restore_coord_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>confFiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pgHbaConfFiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wal</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>waldir</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>waldir</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    
    <comment type="block">/* Check if all the datanodes are running */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_AllDatanodeRunning</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Some of the datanode  masters are not running. Cannot add new one.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if there's no conflict with the current configuration */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>checkNameConflict</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Node name %s duplicate.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: port numbrer (%d) or pooler port (%d) at host %s conflicts.\n"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: directory \"%s\" conflicts at host %s.\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>waldir</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>waldir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: directory \"%s\" conflicts at host %s.\n"</literal></expr></argument>, <argument><expr><name>waldir</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * Check if datanode masgter configuration is consistent
     */</comment>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>size</name> <operator>=</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Found some conflicts in datanode master configuration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* find any available datanode */</comment>
    <expr_stmt><expr><name>restore_dnode_idx</name> <operator>=</operator> <call><name>get_any_available_datanode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>restore_dnode_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>restore_coord_idx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>restore_dnode_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>restore_coord_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no valid datanode or coordinator configuration!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"PANIC: Internal error, inconsistent datanode information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"PANIC: Internal error, inconsistent datanode slave information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Now reconfigure
     */</comment>
    <comment type="block">/*
     * 000 We need another way to configure specific pg_hba.conf and max_wal_senders.
     */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>max_wal_senders_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>getDefaultWalSender</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>port_s</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>waldir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>max_wal_senders_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>extraConf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assign_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>extraPgHbaConf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Update the configuration file and backup it
     */</comment>
    <comment type="block">/*
     * Take care of exrtra conf file
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Take care of exrtra conf pg_hba file
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>pgHbaConfFiles</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>pgHbaConfFiles</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/*
     * Main part
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to datanode master addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now add the master */</comment>

    <comment type="line">//gtmPxyIdx = getEffectiveGtmProxyIdxFromServerName(host);</comment>
    <comment type="line">//gtmHost = (gtmPxyIdx &gt; 0) ? aval(VAR_gtmProxyServers)[gtmPxyIdx] : sval(VAR_gtmMasterServer);</comment>
    <comment type="line">//gtmPort = (gtmPxyIdx &gt; 0) ? aval(VAR_gtmProxyPorts)[gtmPxyIdx] : sval(VAR_gtmMasterPort);</comment>

    <comment type="block">/* initdb */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"PGXC_CTL_SILENT=1 initdb -D %s %s %s --nodename %s --nodetype datanode "</literal>
                            <literal type="string">"--master_gtm_nodename %s --master_gtm_ip %s --master_gtm_port %s"</literal></expr></argument>, 
                            <argument><expr><name>dir</name></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">"-X"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><name>waldir</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                            <argument><expr><name>name</name></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmName</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterServer</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_gtmMasterPort</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Edit configurations */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#===========================================\n"</literal>
                <literal type="string">"# Added at initialization. %s\n"</literal>
                <literal type="string">"port = %d\n"</literal>
                <literal type="string">"pooler_port = %d\n"</literal>
                <literal type="string">"# End of Additon\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>confFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jj</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#===========================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# Added at initialization.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>appendFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pgHbaConfFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"host all %s %s trust\n"</literal></expr></argument>,    <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>jj</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"# End of addition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

     <comment type="block">/* Lock ddl */</comment>
     <if_stmt><if>if <condition>(<expr><name>restore_dnode_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
     <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lockf</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_dnode_idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_dnode_idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
         <block>{<block_content>
             <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not open datanode psql command, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <return>return <expr><literal type="number">1</literal></expr>;</return>
         </block_content>}</block></if></if_stmt>
     </block_content>}</block></if>
     <if type="elseif">else if <condition>(<expr><name>restore_coord_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
     <block>{<block_content>
         <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lockf</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_coord_idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_coord_idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
         <block>{<block_content>
             <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not open coordinator psql command, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
         <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no valid datanode or coordinator configuration!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
 
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>, <argument><expr><literal type="string">"select pgxc_lock_for_backup();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Keep open until the end of the addition. */</comment>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* pg_dumpall */</comment>
    <expr_stmt><expr><call><name>createLocalFileName</name><argument_list>(<argument><expr><name>GENERAL</name></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><name>restore_dnode_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"pg_dumpall -p %s -h %s -s --include-nodes --dump-nodes &gt;%s"</literal></expr></argument>,
                   <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_dnode_idx</name></expr>]</index></expr></argument>,
                   <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_dnode_idx</name></expr>]</index></expr></argument>,
                   <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
     <if type="elseif">else if <condition>(<expr><name>restore_coord_idx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"pg_dumpall -p %s -h %s -s --include-nodes --dump-nodes &gt;%s"</literal></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_coord_idx</name></expr>]</index></expr></argument>,
                        <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>restore_coord_idx</name></expr>]</index></expr></argument>,
                        <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
     <else>else
     <block>{<block_content>
         <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no valid datanode or coordinator configuration!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><literal type="number">1</literal></expr>;</return>
     </block_content>}</block></else></if_stmt>

    <comment type="block">/* Start the new datanode */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl start -w -Z restoremode -D %s -o -i"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allow the new datanode to start up by sleeping for a couple of seconds */</comment>
    <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">2000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restore the backup */</comment>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %d -d %s -f %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediateRaw</name><argument_list>(<argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>, <argument><expr><name>pgdumpall_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Quit the new datanode */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl stop -w -Z restoremode -D %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Start the new datanode with --datanode option */</comment>
    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start_datanode_master</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Issue CREATE NODE  on coordinators */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %s %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the coordinator master %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE = 'datanode', host='%s', PORT=%d);\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

     <if_stmt><if>if <condition>(<expr><name>restore_coord_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>connCordIdx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
     <else>else<block type="pseudo"><block_content>
         <expr_stmt><expr><name>connCordIdx</name> <operator>=</operator> <name>restore_coord_idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>connCordIdx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Issue CREATE NODE  on datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %s %s"</literal></expr></argument>,
                                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>,
                                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the datanode %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"CREATE NODE %s WITH (TYPE = 'datanode', host='%s', PORT=%d);\n"</literal></expr></argument>,  <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"ALTER NODE %s WITH (TYPE = 'datanode', host='%s', PORT=%d);\n"</literal></expr></argument>,  <argument><expr><name>name</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Quit DDL lokkup session */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>lockf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_datanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pooler</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,
        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>walDir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>archDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>port_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pooler_s</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>__p__</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>walDir</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>walDir</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


    <comment type="block">/* Check if the name is valid datanode */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Specified datanode %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the datanode slave is not configured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Slave for the datanode %s has already been configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the resource does not conflict */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: working directory is the same as WAL archive directory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * We dont check the name conflict here because acquiring datanode index means that
     * there's no name conflict.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>checkPortConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: the port %s has already been used in the host %s.\n"</literal></expr></argument>,  <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator> <name>walDir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <call><name>checkDirConflict</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>walDir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: directory %s or %s or %s has already been used by other node.\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>walDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if the datanode master is running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode master %s is not running.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Prepare the resources (directories) */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"mkdir -p %s;chmod 0700 %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s;chmod 0700 %s"</literal></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -rf %s; mkdir -p %s;chmod 0700 %s"</literal></expr></argument>, <argument><expr><name>walDir</name></expr></argument>,
            <argument><expr><name>walDir</name></expr></argument>, <argument><expr><name>walDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Reconfigure the master with WAL archive */</comment>
    <comment type="block">/* Update the configuration and backup the configuration file */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open datanode master's configuration file, %s/postgresql.conf"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#========================================\n"</literal>
            <literal type="string">"# Addition for log shipping, %s\n"</literal>
            <literal type="string">"wal_level = logical \n"</literal>
            <literal type="string">"archive_mode = off\n"</literal>
            <literal type="string">"# archive_command = 'rsync %%p %s@%s:%s/%%f'\n"</literal>
            <literal type="string">"max_wal_senders = %d\n"</literal>
            <literal type="string">"# synchronous_commit = on\n"</literal>
            <literal type="string">"# synchronous_standby_names = '%s'\n"</literal>
            <literal type="string">"# End of Addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcUser</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>,
            <argument><expr><call><name>getDefaultWalSender</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* pg_hba.conf for replication */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/pg_hba.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open datanode master's pg_hba.conf file, %s/pg_hba.conf, %s\n"</literal></expr></argument>, 
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================\n"</literal>
            <literal type="string">"# Additional entry by adding the slave, %s\n"</literal></expr></argument>,
			<argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"host replication %s %s trust\n"</literal></expr></argument>,
                <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>kk</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>__p__</name> <operator>=</operator> <call><name>getIpAddress</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"host replication %s %s/32 trust\n"</literal>
            <literal type="string">"# End of addition ===============================\n"</literal></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>__p__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>__p__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>arraySizeName</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Need an API to expand the array to desired size */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><call><name>extendVar</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"PANIC: Internal error, inconsistent datanode information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Reconfigure pgxc_ctl configuration with the new slave */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pooler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assign_sval</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>port_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pooler_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>walDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>archDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the configuration file and backup it */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#===================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to datanode slave addition\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"#----End of reconfiguration -------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restart the master */</comment>
    <comment type="block">/*
     * It's not a good idea to use "restart" here because some connection from other coordinators
     * may be alive.   They are posessed by the pooler and we have to reload the pool to release them,
     * which aborts all the transactions.
     *
     * Beacse we need to issue pgxc_pool_reload() at all the coordinators, we need to give up all the
     * transactions in the whole cluster.
     *
     * It is much better to shutdow the target datanode master fast because it does not affect
     * transactions this coordinator is not involved.
     */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                <argument><expr><literal type="string">"pg_ctl stop -w -Z datanode -D %s -m fast"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                <argument><expr><literal type="string">"pg_ctl start -w -Z datanode -D %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* pg_basebackup */</comment>
	<expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_basebackup -U %s -p %s -h %s -D %s --wal-method=stream %s %s"</literal></expr></argument>,
	            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>,
	            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">"--waldir"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><name>walDir</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the slave configuration with hot standby and port */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open the new slave's postgresql.conf, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to initialize the slave, %s\n"</literal>
            <literal type="string">"hot_standby = on\n"</literal>
            <literal type="string">"port = %s\n"</literal>
            <literal type="string">"pooler_port = %s\n"</literal>
            <literal type="string">"wal_level = logical \n"</literal>
            <literal type="string">"archive_mode = off\n"</literal>        <comment type="block">/* No archive mode */</comment>
            <literal type="string">"archive_command = ''\n"</literal>    <comment type="block">/* No archive mode */</comment>
            <literal type="string">"max_wal_senders = 0\n"</literal>        <comment type="block">/* Minimum WAL senders */</comment>
            <literal type="string">"# End of Addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Update the slave recovery.conf */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/recovery.conf"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Cannot open the slave's recovery.conf, %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
            <argument><expr><literal type="string">"#==========================================\n"</literal>
            <literal type="string">"# Added to add the slave, %s\n"</literal>
            <literal type="string">"standby_mode = on\n"</literal>
            <literal type="string">"primary_conninfo = 'host = %s port = %s "</literal>
            <literal type="string">"user = %s application_name = %s'\n"</literal>
            <literal type="string">"# restore_command = 'cp %s/%%f %%p'\n"</literal>
            <literal type="string">"# archive_cleanup_command = 'pg_archivecleanup %s %%r'\n"</literal>
            <literal type="string">"# End of addition\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_pgxcOwner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, 
            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Start the slave */</comment>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl start -w -Z datanode -D %s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*------------------------------------------------------------------------
 *
 * Remove command
 *
 *-----------------------------------------------------------------------*/</comment>
<function><type><name>int</name></type> <name>remove_datanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
      1. Transfer the data from the datanode to be removed to the rest of the datanodes for all the tables in all the databases.
         For example to shift data of the table rr_abc to the
         rest of the nodes we can use command

         ALTER TABLE rr_abc DELETE NODE (DATA_NODE_3);

         This step is not included in remove_datanodeMaster() function.

      2. Confirm that there is no data left on the datanode to be removed.
         For example to confirm that there is no data left on DATA_NODE_3

         select c.pcrelid from pgxc_class c, pgxc_node n where
         n.node_name = 'DATA_NODE_3' and n.oid = ANY (c.nodeoids);

         This step is not included in this function either.

      3. Stop the datanode server to be removed.
          Now any SELECTs that involve the datanode to be removed would start failing
         and DMLs have already been blocked, so essentially the cluster would work
         only partially.

         If datanode slave is also configured, we need to remove it first.

      4. Connect to any of the coordinators.
         In our example assuming COORD_1 is running on port 5432,
         the following command would connect to COORD_1

         psql postgres -p 5432

      5. Drop the datanode to be removed.
         For example to drop datanode DATA_NODE_3 use command

         DROP NODE DATA_NODE_3;

      6. Update the connection information cached in pool.

         SELECT pgxc_pool_reload();

      7. Repeat steps 4,5 &amp; 6 for all the coordinators in the cluster.
     */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>connCordIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>namelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Check if the datanode is configured */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Check if all the other datanodes are running */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ii</name> <operator>!=</operator> <name>idx</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode master %s is not running.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Check if there's a slave configured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>remove_datanodeSlave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>clean_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/* Stop the datanode master if running */</comment>
    if (pingNode(aval(VAR_datanodeMasterServers)[idx], aval(VAR_datanodePorts)[idx]) == 0)
    {
        AddMember(namelist, name);
        stop_datanode_master(namelist, "fast");
        CleanArray(namelist);
    }
    <comment type="block">/* Cleanup the datanode master resource if specified */</comment>
    if (clean_opt)
        doImmediate(aval(VAR_datanodeMasterServers)[idx], NULL, "rm -rf %s", aval(VAR_datanodeMasterDirs)[idx]);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* Issue "drop node" at all the other datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -p %d -h %s %s"</literal></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot begin psql for the coordinator master %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"DROP NODE %s;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"SELECT pgxc_pool_reload();\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* find any available coordinator */</comment>
    <expr_stmt><expr><name>connCordIdx</name> <operator>=</operator> <call><name>get_any_available_coord</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connCordIdx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Issue DROP NODE  on datanodes */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_wRaw</name><argument_list>(<argument><expr><literal type="string">"psql -h %s -p %s %s"</literal></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>connCordIdx</name></expr>]</index></expr></argument>,
                            <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_defaultDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot connect to the coordinator %s.\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_coordNames</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'DROP NODE %s';\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE DIRECT ON (%s) 'SELECT pgxc_pool_reload();'\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\\q\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Stop the datanode master if running */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stop_datanode_master</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>, <argument><expr><literal type="string">"fast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Cleanup the datanode master resource if specified */</comment>
    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"rm -rf %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Update configuration and backup --&gt; should cleanup "none" entries here */</comment>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
     <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePoolerPorts</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
 
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Write config files
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to datanode master removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_datanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clean_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave %s is not configured.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>AddMember</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>pingNodeSlave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
                <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>stop_datanode_slave</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>pgxc_popen_w</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">"cat &gt;&gt; %s/postgresql.conf"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open %s/postgresql.conf at %s, %s\n"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
                <argument><expr><literal type="string">"#=======================================\n"</literal>
                <literal type="string">"# Updated to remove the slave %s\n"</literal>
                <literal type="string">"archive_mode = off\n"</literal>
                <literal type="string">"synchronous_standby_names = ''\n"</literal>
                <literal type="string">"archive_command = ''\n"</literal>
                <literal type="string">"max_wal_senders = 0\n"</literal>
                <literal type="string">"wal_level = minimal\n"</literal>
                <literal type="string">"# End of the update\n"</literal></expr></argument>,
                <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>doImmediate</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_ctl restart -Z datanode -D %s"</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>clean_opt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>clean_datanode_slave</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/*
     * Maintain variables
     */</comment>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replace_arrayEl</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handle_no_slaves</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Maintain configuration file
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Should it be panic? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open configuration file \"%s\", %s\n"</literal></expr></argument>, <argument><expr><name>pgxc_ctl_config_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, 
            <argument><expr><literal type="string">"#================================================================\n"</literal>
            <literal type="string">"# pgxc configuration file updated due to datanode slave removal\n"</literal>
            <literal type="string">"#        %s\n"</literal></expr></argument>,
            <argument><expr><call><name>timeStampString</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>MAXTOKEN</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintSval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintAval</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>backup_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<comment type="block">/*
 * Clean datanode master resources -- directory and port -----------------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanDatanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wal</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator>  <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s; %s %s %s mkdir -p %s; chmod 0700 %s; rm -f /tmp/.s.*%d*"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">"rm -rf "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">";"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePoolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_datanode_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning all the datanode master resources.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>clean_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning datanode %s master resources.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_cleanDatanodeMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup datanode slave resources -- directory and the socket ------------------
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_cleanDatanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wal</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator>  <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s is not a datanode\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
             <argument><expr><literal type="string">"rm -rf %s; %s %s %s mkdir -p %s; chmod 0700 %s"</literal></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">" rm -rf "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveWALDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><ternary><condition><expr><name>wal</name></expr> ?</condition><then> <expr><literal type="string">";"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
             <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_datanode_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning all the datanode slave resouces.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><call><name>clean_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Cleaning datanode %s slave resources.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_cleanDatanodeSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: datanode slave %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Show configuration of datanodes -------------------------------------------------
 */</comment>
<function><type><name>int</name></type> <name>show_config_datanodeMaster</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"Datanode Master: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Nodename: '%s', port: %s, pooler port %s\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    MaxWALSenders: %s, Dir: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMaxWALSenders</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    ExtraConfig: '%s', Specific Extra Config: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraConfig</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"    pg_hba entries ( "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"'%s' "</literal></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePgHbaEntries</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s)\n"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Extra pg_hba: '%s', Specific Extra pg_hba: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>sval</name><argument_list>(<argument><expr><name>VAR_datanodeExtraPgHba</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSpecificExtraPgHba</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_datanodeSlave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>outBuf</name><index>[<expr><name>MAXLINE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>editBuf</name><index>[<expr><name>MAXPATH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"Datanode Slave: "</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostname</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXPATH</name></expr></argument>, <argument><expr><literal type="string">"host: %s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>editBuf</name></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>||</operator> <name>hostname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>outBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    Nodename: '%s', port: %s, pooler port: %s\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_poolerPorts</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,<argument><expr><literal type="string">"    Dir: '%s', Archive Log Dir: '%s'\n"</literal></expr></argument>,
         <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeArchLogDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_datanodeMasterSlaveMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a datanode, skipping.\n"</literal></expr></argument>, <argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>show_config_datanodeMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>show_config_datanodeSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_datanodeMasterMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a datanode. skipping\n"</literal></expr></argument>, <argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_datanodeMaster</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>show_config_datanodeSlaveMulti</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: %s is not a datanode, skipping.\n"</literal></expr></argument>, <argument><expr><name><name>nodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>show_config_datanodeSlave</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>idx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>unlockLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill datanode master ---------------------------------------------------------------
 *
 * Normally, you should not kill masters in such a manner.   It is just for
 * emergence.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killDatanodeMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>postmasterPid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dnIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIndex</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: \"%s\" is not a datanode name\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>postmasterPid</name> <operator>=</operator> <call><name>get_postmaster_pid</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidList</name> <init>= <expr><call><name>getChPidList</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>, <argument><expr><name>postmasterPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d %s;"</literal>	<comment type="block">/* Kill the postmaster and all its children */</comment>
                 <literal type="string">"rm -rf /tmp/.s.'*'%d'*'"</literal></expr></argument>,		<comment type="block">/* Remove the socket */</comment>
                 <argument><expr><name>postmasterPid</name></expr></argument>,
                 <argument><expr><name>pidList</name></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for datanode master \"%s\" was not found.  Remove socket only.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf /tmp/.s.'*'%d'*'"</literal></expr></argument>,		<comment type="block">/* Remove the socket */</comment>
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_datanode_master_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>kill_datanode_master</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_datanode_master</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_killDatanodeMaster</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>cmdList</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CleanArray</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Kill datanode slaves -----------------------------------------------------
 *
 * You should not kill datanodes in such a manner.  It is just for emergence.
 * You should try to stop it gracefully.
 */</comment>
<function><type><name>cmd_t</name> <modifier>*</modifier></type><name>prepare_killDatanodeSlave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>postmasterPid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dnIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_none</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dnIndex</name> <operator>=</operator> <call><name>datanodeIdx</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: \"%s\" is not a datanode name, skipping.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doesExist</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>, <argument><expr><name>dnIndex</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: datanode slave %s is not found.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>initCmd</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>postmasterPid</name> <operator>=</operator> <call><name>get_postmaster_pid</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveDirs</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>postmasterPid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No postmaster pid found */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: pid for datanode slave \"%s\" slave was not found.  Remove socket only.\n"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"rm -rf /tmp/.s.'*'%s'*'"</literal></expr></argument>,        <comment type="block">/* Remove the socket */</comment>
                 <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidList</name> <init>= <expr><call><name>getChPidList</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlaveServers</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>, <argument><expr><name>postmasterPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>newCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXLINE</name></expr></argument>,
                 <argument><expr><literal type="string">"kill -9 %d %s;"</literal>    <comment type="block">/* Kill the postmaster and all its children */</comment>
                 <literal type="string">"rm -rf /tmp/.s.'*'%d'*'"</literal></expr></argument>,        <comment type="block">/* Remove the socket */</comment>
                 <argument><expr><name>postmasterPid</name></expr></argument>, 
                 <argument><expr><name>pidList</name></expr></argument>,
                 <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeSlavePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>dnIndex</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeAndReset</name><argument_list>(<argument><expr><name>pidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return<expr><operator>(</operator><name>cmd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_datanode_slave_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>kill_datanode_slave</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>kill_datanode_slave</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>actualNodeList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmdList_t</name> <modifier>*</modifier></type><name>cmdList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cmd_t</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmdList</name> <operator>=</operator> <call><name>initCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>actualNodeList</name> <operator>=</operator> <call><name>makeActualNodeList</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isVarYes</name><argument_list>(<argument><expr><name>VAR_datanodeSlave</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Datanode slave is not configured.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>prepare_killDatanodeSlave</name><argument_list>(<argument><expr><name><name>actualNodeList</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addCmd</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanCmdList</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><name>actualNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator><name>rc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Checks if all the datanodes are running
 *
 * Returns FALSE if any of them are not running.
 */</comment>
<function><type><name>int</name></type> <name>check_AllDatanodeRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_none</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pingNode</name><argument_list>(<argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodeMasterServers</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>, <argument><expr><call><name>aval</name><argument_list>(<argument><expr><name>VAR_datanodePorts</name></expr></argument>)</argument_list></call><index>[<expr><name>ii</name></expr>]</index></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


</unit>
