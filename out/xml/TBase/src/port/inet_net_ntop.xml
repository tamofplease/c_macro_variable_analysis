<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/port/inet_net_ntop.c"><comment type="block">/*
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1996,1999 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *      src/backend/utils/adt/inet_net_ntop.c
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rcsid</name><index>[]</index></name> <init>= <expr><literal type="string">"Id: inet_net_ntop.c,v 1.1.2.2 2004/03/09 09:17:27 marka Exp $"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
 * In a frontend build, we can't include inet.h, but we still need to have
 * sensible definitions of these two constants.  Note that inet_net_ntop()
 * assumes that PGSQL_AF_INET is equal to AF_INET.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGSQL_AF_INET</name></cpp:macro>    <cpp:value>(AF_INET + 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGSQL_AF_INET6</name></cpp:macro>    <cpp:value>(AF_INET + 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_IN6ADDRSZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_INT16SZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPRINTF_CHAR</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPRINTF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(sprintf<comment type="block">/**/</comment>x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPRINTF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)sprintf x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>inet_net_ntop_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>,
                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>inet_net_ntop_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>,
                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * char *
 * inet_net_ntop(af, src, bits, dst, size)
 *    convert host/network address from network to presentation format.
 *    "src"'s size is determined from its "af".
 * return:
 *    pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *    192.5.5.1/28 has a nonzero host part, which means it isn't a network
 *    as called for by inet_net_pton() but it can be a host address with
 *    an included netmask.
 * author:
 *    Paul Vixie (ISC), October 1998
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>inet_net_ntop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * We need to cover both the address family constants used by the PG inet
     * type (PGSQL_AF_INET and PGSQL_AF_INET6) and those used by the system
     * libraries (AF_INET and AF_INET6).  We can safely assume PGSQL_AF_INET
     * == AF_INET, but the INET6 constants are very likely to be different. If
     * AF_INET6 isn't defined, silently ignore it.
     */</comment>
    <switch>switch <condition>(<expr><name>af</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PGSQL_AF_INET</name></expr>:</case>
            <return>return <expr><operator>(</operator><call><name>inet_net_ntop_ipv4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <case>case <expr><name>PGSQL_AF_INET6</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>AF_INET6</name> <operator>!=</operator> <name>PGSQL_AF_INET6</name></expr></cpp:if>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><operator>(</operator><call><name>inet_net_ntop_ipv6</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * static char *
 * inet_net_ntop_ipv4(src, bits, dst, size)
 *    convert IPv4 network address from network to presentation format.
 *    "src"'s size is determined from its "af".
 * return:
 *    pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *    network byte order assumed.  this means 192.5.5.240/28 has
 *    0b11110000 in its fourth octet.
 * author:
 *    Paul Vixie (ISC), October 1998
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>inet_net_ntop_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>b</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Always format all four octets, regardless of mask length. */</comment>
    <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>".255"</expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>odst</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* don't print masklen if 32 bits */</comment>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>"/32"</expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"/%u"</literal><operator>,</operator> <name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>odst</name><operator>)</operator></expr>;</return>

<label><name>emsgsize</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decoct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>b</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>"255."</expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>bytes</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>inet_net_ntop_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <comment type="block">/*
     * Note that int32_t and int16_t need only be "at least" large enough to
     * contain a value of the specified size.  On some systems, like Crays,
     * there is no such thing as an integer variable with 16 bits. Keep this
     * in mind if you think this function should have been coded to use
     * pointer overlays.  All the world's not a VAX.
     */</comment>
    <expr_stmt><expr><name>char</name>        <name><name>tmp</name><index>[<expr><sizeof>sizeof <name/></sizeof></expr></index></name>"ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255/128"]</expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
    <struct>struct
    <block>{
        <decl_stmt><decl><type><name>int</name></type>            <name>base</name></decl>,
                    <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    }</block>            <decl><name>best</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</struct>
    <decl_stmt><decl><type><name>u_int</name></type>        <name><name>words</name><index>[<expr><name>NS_IN6ADDRSZ</name> <operator>/</operator> <name>NS_INT16SZ</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Preprocess: Copy the input (bytewise) array into a wordwise array. Find
     * the longest run of 0x00's in src[] for :: shorthanding.
     */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>words</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NS_IN6ADDRSZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>best</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>NS_IN6ADDRSZ</name> <operator>/</operator> <name>NS_INT16SZ</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>cur</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name><name>best</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>best</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name><name>best</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>best</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>best</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Format the result.
     */</comment>
    <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>NS_IN6ADDRSZ</name> <operator>/</operator> <name>NS_INT16SZ</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="block">/* Are we inside the best run of 0x00's? */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>best</name><operator>.</operator><name>base</name></name> <operator>&amp;&amp;</operator>
            <name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>best</name><operator>.</operator><name>base</name></name> <operator>+</operator> <name><name>best</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>best</name><operator>.</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Are we following an initial run of 0x00s or any real hex? */</comment>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* Is this address an encapsulated IPv4? */</comment>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>best</name><operator>.</operator><name>base</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>best</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator>
                                         <operator>(</operator><name><name>best</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0001</literal><operator>)</operator> <operator>||</operator>
                                         <operator>(</operator><name><name>best</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decoct</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof> <operator>-</operator> <operator>(</operator><name>tp</name> <operator>-</operator> <name>tmp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
                <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>tp</name><operator>,</operator> <literal type="string">"%x"</literal><operator>,</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Was it a trailing run of 0x00's? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>best</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>best</name><operator>.</operator><name>base</name></name> <operator>+</operator> <name><name>best</name><operator>.</operator><name>len</name></name><operator>)</operator> <operator>==</operator>
        <operator>(</operator><name>NS_IN6ADDRSZ</name> <operator>/</operator> <name>NS_INT16SZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bits</name> <operator>!=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tp</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>tp</name><operator>,</operator> <literal type="string">"/%u"</literal><operator>,</operator> <name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Check for overflow, copy, and we're done.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>tp</name> <operator>-</operator> <name>tmp</name><operator>)</operator> <operator>&gt;</operator> <name>size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
