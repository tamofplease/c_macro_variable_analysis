<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/port/getopt.c"><comment type="block">/* src/port/getopt.c */</comment>

<comment type="block">/* This is used by psql under Win32 */</comment>

<comment type="block">/*
 * Copyright (c) 1987, 1993, 1994
 *    The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_getopt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sccsid</name><index>[]</index></name> <init>= <expr><literal type="string">"@(#)getopt.c    8.3 (Berkeley) 4/27/95"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* LIBC_SCCS and not lint */</comment>


<comment type="block">/*
 * On some versions of Solaris, opterr and friends are defined in core libc
 * rather than in a separate getopt module.  Define these variables only
 * if configure found they aren't there by default.  (We assume that testing
 * opterr is sufficient for all of these.)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_INT_OPTERR</name></cpp:ifndef>

<decl_stmt><decl><type><name>int</name></type>            <name>opterr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,            <comment type="block">/* if error message should be printed */</comment>
            <decl><type ref="prev"/><name>optind</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,            <comment type="block">/* index into parent argv vector */</comment>
            <decl><type ref="prev"/><name>optopt</name></decl>;</decl_stmt>                <comment type="block">/* character checked for validity */</comment>
<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>                <comment type="block">/* argument associated with option */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADCH</name></cpp:macro>    <cpp:value>(int)'?'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADARG</name></cpp:macro>    <cpp:value>(int)':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG</name></cpp:macro>    <cpp:value>""</cpp:value></cpp:define>

<comment type="block">/*
 * getopt
 *    Parse argc/argv argument vector.
 *
 * This implementation does not use optreset.  Instead, we guarantee that
 * it can be restarted on a new argv array after a previous call returned -1,
 * if the caller resets optind to 1 before the first call of the new series.
 * (Internally, this means we must be sure to reset "place" to EMSG before
 * returning -1.)
 */</comment>
<function><type><name>int</name></type>
<name>getopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nargc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>nargv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ostr</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><name>EMSG</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* option letter processing */</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>oli</name></decl>;</decl_stmt>            <comment type="block">/* option letter list index */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition>
    <block>{<block_content>                            <comment type="block">/* update scanning pointer */</comment>
        <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>nargc</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>place</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>place</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>                        <comment type="block">/* found "--" */</comment>
            <expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>                            <comment type="block">/* option letter okay? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>optopt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>place</name><operator>++</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="char">':'</literal> <operator>||</operator>
        <operator>!</operator><operator>(</operator><name>oli</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ostr</name></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * if the user didn't specify '-' as an option, assume it means -1.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>optopt</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'-'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>opterr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ostr</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                           <argument><expr><literal type="string">"illegal option -- %c\n"</literal></expr></argument>, <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>BADCH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>oli</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
    <block>{<block_content>                            <comment type="block">/* don't need argument */</comment>
        <expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>                            <comment type="block">/* need an argument */</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>                <comment type="block">/* no white space */</comment>
            <expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>place</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>nargc</name> <operator>&lt;=</operator> <operator>++</operator><name>optind</name></expr>)</condition>
        <block>{<block_content>                        <comment type="block">/* no arg */</comment>
            <expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ostr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>BADARG</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>opterr</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                               <argument><expr><literal type="string">"option requires an argument -- %c\n"</literal></expr></argument>,
                               <argument><expr><name>optopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>BADCH</name></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="block">/* white space */</comment>
            <expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>optopt</name></expr>;</return>                <comment type="block">/* dump back option letter */</comment>
</block_content>}</block></function>
</unit>
