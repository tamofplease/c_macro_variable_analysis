<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/port/rint.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * rint.c
 *      rint() implementation
 *
 * By Pedro Gimeno Fortea, donated to the public domain
 *
 * IDENTIFICATION
 *      src/port/rint.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Round to nearest integer, with halfway cases going to the nearest even.
 */</comment>
<function><type><name>double</name></type>
<name>rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>double</name></type>        <name>x_orig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>r</name></decl>;</decl_stmt>

    <comment type="block">/* Per POSIX, NaNs must be returned unchanged. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Both positive and negative zero should be returned unchanged. */</comment>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Subtracting 0.5 from a number very close to -0.5 can round to
         * exactly -1.0, producing incorrect results, so we take the opposite
         * approach: add 0.5 to the negative number, so that it goes closer to
         * zero (or at most to +0.5, which is dealt with next), avoiding the
         * precision issue.
         */</comment>
        <expr_stmt><expr><name>x_orig</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

        <comment type="block">/*
         * Be careful to return minus zero when input+0.5 &gt;= 0, as that's what
         * rint() should return with negative input.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/*
         * For very big numbers the input may have no decimals.  That case is
         * detected by testing x+0.5 == x+1.0; if that happens, the input is
         * returned unchanged.  This also covers the case of minus infinity.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>x_orig</name> <operator>+</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x_orig</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Otherwise produce a rounded estimate. */</comment>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If the rounding did not produce exactly input+0.5 then we're done.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/*
         * The original fractional part was exactly 0.5 (since
         * floor(input+0.5) == input+0.5).  We need to round to nearest even.
         * Dividing input+0.5 by 2, taking the floor and multiplying by 2
         * yields the closest even number.  This part assumes that division by
         * 2 is exact, which should be OK because underflow is impossible
         * here: x is an integer.
         */</comment>
        <return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2.0</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * The positive case is similar but with signs inverted and using
         * ceil() instead of floor().
         */</comment>
        <expr_stmt><expr><name>x_orig</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>x_orig</name> <operator>-</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x_orig</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2.0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
