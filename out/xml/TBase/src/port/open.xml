<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/port/open.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * open.c
 *       Win32 open() replacement
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 *
 * src/port/open.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>openFlagsToCreateFileFlags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>openFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>openFlags</name> <operator>&amp;</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
            <comment type="block">/* O_EXCL is meaningless without O_CREAT */</comment>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><name>O_EXCL</name></expr>:</case>
            <return>return <expr><name>OPEN_EXISTING</name></expr>;</return>

        <case>case <expr><name>O_CREAT</name></expr>:</case>
            <return>return <expr><name>OPEN_ALWAYS</name></expr>;</return>

            <comment type="block">/* O_EXCL is meaningless without O_CREAT */</comment>
        <case>case <expr><name>O_TRUNC</name></expr>:</case>
        <case>case <expr><name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
            <return>return <expr><name>TRUNCATE_EXISTING</name></expr>;</return>

        <case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>
            <return>return <expr><name>CREATE_ALWAYS</name></expr>;</return>

            <comment type="block">/* O_TRUNC is meaningless with O_CREAT */</comment>
        <case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
        <case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
            <return>return <expr><name>CREATE_NEW</name></expr>;</return>
    </block_content>}</block></switch>

    <comment type="block">/* will never get here */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *     - file attribute setting, based on fileMode?
 */</comment>
<function><type><name>int</name></type>
<name>pgwin32_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileFlags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type>        <name>h</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check that we can handle the request */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>O_RDONLY</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_RDWR</name><operator>)</operator> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator>
                         <operator>(</operator><name>O_RANDOM</name> <operator>|</operator> <name>O_SEQUENTIAL</name> <operator>|</operator> <name>O_TEMPORARY</name><operator>)</operator> <operator>|</operator>
                         <name>_O_SHORT_LIVED</name> <operator>|</operator> <name>O_DSYNC</name> <operator>|</operator> <name>O_DIRECT</name> <operator>|</operator>
                         <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>O_TEXT</name> <operator>|</operator> <name>O_BINARY</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <name>fileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,
    <comment type="block">/* cannot use O_RDONLY, as it == 0 */</comment>
                           <argument><expr><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_RDWR</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>GENERIC_WRITE</name> <operator>|</operator> <name>GENERIC_READ</name><operator>)</operator></expr> </then><else>:
                           <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_WRONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>GENERIC_WRITE</name></expr> </then><else>: <expr><name>GENERIC_READ</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
    <comment type="block">/* These flags allow concurrent rename/unlink */</comment>
                           <argument><expr><operator>(</operator><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_DELETE</name><operator>)</operator></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>,
                           <argument><expr><call><name>openFlagsToCreateFileFlags</name><argument_list>(<argument><expr><name>fileFlags</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_RANDOM</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_FLAG_RANDOM_ACCESS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_SEQUENTIAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_FLAG_SEQUENTIAL_SCAN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>_O_SHORT_LIVED</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_ATTRIBUTE_TEMPORARY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_TEMPORARY</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_FLAG_DELETE_ON_CLOSE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_DIRECT</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_FLAG_NO_BUFFERING</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                           <operator>(</operator><ternary><condition><expr><operator>(</operator><name>fileFlags</name> <operator>&amp;</operator> <name>O_DSYNC</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_FLAG_WRITE_THROUGH</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Sharing violation or locking error can indicate antivirus, backup
         * or similar software that's locking the file. Try again for 30
         * seconds before giving up.
         */</comment>
        <decl_stmt><decl><type><name>DWORD</name></type>        <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_SHARING_VIOLATION</name> <operator>||</operator>
            <name>err</name> <operator>==</operator> <name>ERROR_LOCK_VIOLATION</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>loops</name><operator>++</operator></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
            <if_stmt><if>if <condition>(<expr><name>loops</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
                                <argument><expr><ternary><condition><expr><operator>(</operator><name>err</name> <operator>==</operator> <name>ERROR_SHARING_VIOLATION</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sharing violation"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"lock violation"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Continuing to retry for 30 seconds."</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You might have antivirus, backup, or similar software interfering with the database system."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if <condition>(<expr><name>loops</name> <operator>&lt;</operator> <literal type="number">300</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></while>

    <comment type="block">/* _open_osfhandle will, on error, set errno accordingly */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name>fileFlags</name> <operator>&amp;</operator> <name>O_APPEND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>            <comment type="block">/* will not affect errno */</comment>
    <if type="elseif">else if <condition>(<expr><name>fileFlags</name> <operator>&amp;</operator> <operator>(</operator><name>O_TEXT</name> <operator>|</operator> <name>O_BINARY</name><operator>)</operator> <operator>&amp;&amp;</operator>
             <call><name>_setmode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fileFlags</name> <operator>&amp;</operator> <operator>(</operator><name>O_TEXT</name> <operator>|</operator> <name>O_BINARY</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type>
<name>pgwin32_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>openmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>fd</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"r+"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_RDWR</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_RDONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>openmode</name> <operator>|=</operator> <name>O_TEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>pgwin32_open</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>openmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
