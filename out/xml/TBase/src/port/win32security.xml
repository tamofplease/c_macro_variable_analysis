<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/port/win32security.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32security.c
 *      Microsoft Windows Win32 Security Support Functions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *      src/port/win32security.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * Utility wrapper for frontend and backend when reporting an error
 * message.
 */</comment>
<expr_stmt><expr><specifier>static</specifier>
<macro><name>pg_attribute_printf</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<name>void</name>
<macro><name>log_error</name><argument_list>(<argument>const char *fmt</argument>,<argument>...</argument>)</argument_list></macro>
<block>{
    <expr><name>va_list</name>        <name>ap</name></expr>;

    <expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
    <expr><call><name>write_stderr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;
}</block>

<comment type="block">/*
 * Returns nonzero if the current user has administrative privileges,
 * or zero if not.
 *
 * Note: this cannot use ereport() because it's called too early during
 * startup.
 */</comment>
<name>int</name>
<macro><name>pgwin32_is_admin</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
    <expr><name>PSID</name>        <name>AdministratorsSid</name></expr>;
    <expr><name>PSID</name>        <name>PowerUsersSid</name></expr>;
    <expr><name>SID_IDENTIFIER_AUTHORITY</name> <name>NtAuthority</name> <operator>=</operator> <block>{<expr><name>SECURITY_NT_AUTHORITY</name></expr>}</block></expr>;
    <expr><name>BOOL</name>        <name>IsAdministrators</name></expr>;
    <expr><name>BOOL</name>        <name>IsPowerUsers</name></expr>;

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NtAuthority</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                                  <argument><expr><name>SECURITY_BUILTIN_DOMAIN_RID</name></expr></argument>,
                                  <argument><expr><name>DOMAIN_ALIAS_RID_ADMINS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>AdministratorsSid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get SID for Administrators group: error code %lu\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NtAuthority</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                                  <argument><expr><name>SECURITY_BUILTIN_DOMAIN_RID</name></expr></argument>,
                                  <argument><expr><name>DOMAIN_ALIAS_RID_POWER_USERS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>PowerUsersSid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get SID for PowerUsers group: error code %lu\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AdministratorsSid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IsAdministrators</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PowerUsersSid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IsPowerUsers</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>log_error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not check access token membership: error code %lu\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>AdministratorsSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>PowerUsersSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>IsAdministrators</name> <operator>||</operator> <name>IsPowerUsers</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
}

<comment type="block">/*
 * We consider ourselves running as a service if one of the following is
 * true:
 *
 * 1) We are running as LocalSystem (only used by services)
 * 2) Our token contains SECURITY_SERVICE_RID (automatically added to the
 *      process token by the SCM when starting a service)
 *
 * The check for LocalSystem is needed, because surprisingly, if a service
 * is running as LocalSystem, it does not have SECURITY_SERVICE_RID in its
 * process token.
 *
 * Return values:
 *     0 = Not service
 *     1 = Service
 *    -1 = Error
 *
 * Note: we can't report errors via either ereport (we're called too early
 * in the backend) or write_stderr (because that calls this).  We are
 * therefore reduced to writing directly on stderr, which sucks, but we
 * have few alternatives.
 */</comment>
int
<macro><name>pgwin32_is_service</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>_is_service</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type>        <name>IsMember</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PSID</name></type>        <name>ServiceSid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PSID</name></type>        <name>LocalSystemSid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SID_IDENTIFIER_AUTHORITY</name></type> <name>NtAuthority</name> <init>= <expr><block>{<expr><name>SECURITY_NT_AUTHORITY</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Only check the first time */</comment>
    <if_stmt><if>if <condition>(<expr><name>_is_service</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_is_service</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* First check for LocalSystem */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NtAuthority</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                                  <argument><expr><name>SECURITY_LOCAL_SYSTEM_RID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>LocalSystemSid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not get SID for local system account\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LocalSystemSid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IsMember</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not check access token membership: error code %lu\n"</literal></expr></argument>,
                <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>LocalSystemSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>LocalSystemSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>IsMember</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>_is_service</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>_is_service</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check for service group membership */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocateAndInitializeSid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>NtAuthority</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                                  <argument><expr><name>SECURITY_SERVICE_RID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>ServiceSid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not get SID for service group: error code %lu\n"</literal></expr></argument>,
                <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckTokenMembership</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ServiceSid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IsMember</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not check access token membership: error code %lu\n"</literal></expr></argument>,
                <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>ServiceSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>FreeSid</name><argument_list>(<argument><expr><name>ServiceSid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>IsMember</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>_is_service</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>_is_service</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>_is_service</name></expr>;</return>
</block_content>}</block>
</unit>
