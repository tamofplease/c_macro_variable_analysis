<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/test/modules/test_ddl_deparse/test_ddl_deparse.c"><comment type="block">/*----------------------------------------------------------------------
 * test_ddl_deparse.c
 *        Support functions for the test_ddl_deparse module
 *
 * Copyright (c) 2014-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *      src/test/modules/test_ddl_deparse/test_ddl_deparse.c
 *----------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/deparse_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>get_command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>get_command_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>get_altertable_subcmdtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Return the textual representation of the struct type used to represent a
 * command in struct CollectedCommand format.
 */</comment>
<function><type><name>Datum</name></type>
<name>get_command_type</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>CollectedCommand</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>CollectedCommand</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SCT_Simple</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"simple"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_AlterTable</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"alter table"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_Grant</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"grant"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_AlterOpFamily</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"alter operator family"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_AlterDefaultPrivileges</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"alter default privileges"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_CreateOpClass</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"create operator class"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SCT_AlterTSConfig</name></expr>:</case>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"alter text search configuration"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"unknown command type"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return the command tag corresponding to a parse node contained in a
 * CollectedCommand struct.
 */</comment>
<function><type><name>Datum</name></type>
<name>get_command_tag</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CollectedCommand</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>CollectedCommand</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><operator>-&gt;</operator><name>parsetree</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>CreateCommandTag</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>parsetree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return a text array representation of the subcommands of an ALTER TABLE
 * command.
 */</comment>
<function><type><name>Datum</name></type>
<name>get_altertable_subcmdtypes</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>CollectedCommand</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>CollectedCommand</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SCT_AlterTable</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"command is not ALTER TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>cmd-&gt;d.alterTable.subcmds</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CollectedATSubcmd</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>subcmd</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>parsetree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtype</name></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>subcmd</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>AT_AddColumn</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddColumnRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddColumnToView</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN TO VIEW"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ColumnDefault</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET DEFAULT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropNotNull</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP NOT NULL"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetNotNull</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET NOT NULL"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetStatistics</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET STATS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET OPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ResetOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"RESET OPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetStorage</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET STORAGE"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropColumn</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP COLUMN"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropColumnRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP COLUMN (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddIndex</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD INDEX"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ReAddIndex</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD INDEX"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddConstraintRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ReAddConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AlterConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ValidateConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"VALIDATE CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ValidateConstraintRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"VALIDATE CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ProcessedConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD (processed) CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddIndexConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT (using index)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropConstraint</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CONSTRAINT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropConstraintRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ReAddComment</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD COMMENT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AlterColumnType</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET TYPE"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AlterColumnGenericOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET OPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ChangeOwner</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"CHANGE OWNER"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ClusterOn</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"CLUSTER"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropCluster</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CLUSTER"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetLogged</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET LOGGED"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetUnLogged</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET UNLOGGED"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddOids</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD OIDS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddOidsRecurse</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD OIDS (and recurse)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropOids</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP OIDS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetTableSpace</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET TABLESPACE"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_SetRelOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET RELOPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ResetRelOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"RESET RELOPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ReplaceRelOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"REPLACE RELOPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableTrig</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableAlwaysTrig</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (always)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableReplicaTrig</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (replica)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DisableTrig</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableTrigAll</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (all)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DisableTrigAll</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER (all)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableTrigUser</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (user)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DisableTrigUser</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER (user)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableRule</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableAlwaysRule</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE (always)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableReplicaRule</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE (replica)"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DisableRule</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE RULE"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddInherit</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD INHERIT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropInherit</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP INHERIT"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_AddOf</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"OF"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DropOf</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"NOT OF"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ReplicaIdentity</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"REPLICA IDENTITY"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_EnableRowSecurity</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE ROW SECURITY"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_DisableRowSecurity</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE ROW SECURITY"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_ForceRowSecurity</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"FORCE ROW SECURITY"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_NoForceRowSecurity</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"NO FORCE ROW SECURITY"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AT_GenericOptions</name></expr>:</case>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET OPTIONS"</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"unrecognized"</literal></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>astate</name> <operator>=</operator>
            <call><name>accumArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>strtype</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>astate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"empty alter table subcommand list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><call><name>makeArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
