<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/test/modules/test_parser/test_parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * test_parser.c
 *      Simple example of a text search parser
 *
 * Copyright (c) 2007-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *      src/test/modules/test_parser/test_parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/*
 * types
 */</comment>

<comment type="block">/* self-defined type */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>            <comment type="block">/* text to parse */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>            <comment type="block">/* length of the text in buffer */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>pos</name></decl>;</decl_stmt>            <comment type="block">/* position of the parser */</comment>
}</block></struct></type> <name>ParserState</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>lexid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
}</block></struct></type> <name>LexDescr</name>;</typedef>

<comment type="block">/*
 * functions
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>testprs_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>testprs_getlexeme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>testprs_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>testprs_lextype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>testprs_start</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParserState</name> <modifier>*</modifier></type><name>pst</name> <init>= <expr><operator>(</operator><name>ParserState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParserState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pst</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pst</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>pst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>testprs_getlexeme</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParserState</name> <modifier>*</modifier></type><name>pst</name> <init>= <expr><operator>(</operator><name>ParserState</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>      <modifier>*</modifier><modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>tlen</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>startpos</name> <init>= <expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>type</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name><name>pst</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pst</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>pst</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>pst</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator><index>[<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* blank type */</comment>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        <comment type="block">/* go to the next non-space character */</comment>
        <while>while <condition>(<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>pst</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
               <operator>(</operator><name><name>pst</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator><index>[<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* word type */</comment>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <comment type="block">/* go to the next space character */</comment>
        <while>while <condition>(<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>pst</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
               <operator>(</operator><name><name>pst</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator><index>[<expr><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><name><name>pst</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>tlen</name> <operator>=</operator> <name><name>pst</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>startpos</name></expr>;</expr_stmt>

    <comment type="block">/* we are finished if (*tlen == 0) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>testprs_end</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParserState</name> <modifier>*</modifier></type><name>pst</name> <init>= <expr><operator>(</operator><name>ParserState</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>testprs_lextype</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Remarks: - we have to return the blanks for headline reason - we use
     * the same lexids like Teodor in the default word parser; in this way we
     * can reuse the headline function of the default word parser.
     */</comment>
    <decl_stmt><decl><type><name>LexDescr</name>   <modifier>*</modifier></type><name>descr</name> <init>= <expr><operator>(</operator><name>LexDescr</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LexDescr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* there are only two types in this parser */</comment>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lexid</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>alias</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>descr</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"Word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lexid</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>alias</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"blank"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>descr</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"Space symbols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>descr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lexid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
