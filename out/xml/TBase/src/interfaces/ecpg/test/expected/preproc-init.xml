<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/interfaces/ecpg/test/expected/preproc-init.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlca.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_SQLCA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_SQLCA_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PGDLLIMPORT</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro> <cpp:value>__declspec (dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* __CYGWIN__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* PGDLLIMPORT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLERRMC_LEN</name></cpp:macro>    <cpp:value>150</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>sqlca_t</name>
<block>{
    <decl_stmt><decl><type><name>char</name></type>        <name><name>sqlcaid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>        <name>sqlabc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>        <name>sqlcode</name></decl>;</decl_stmt>
    <struct>struct
    <block>{
        <decl_stmt><decl><type><name>int</name></type>            <name>sqlerrml</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>        <name><name>sqlerrmc</name><index>[<expr><name>SQLERRMC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    }</block>            <decl><name>sqlerrm</name></decl>;</struct>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>sqlerrp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>        <name><name>sqlerrd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* Element 0: empty                        */</comment>
    <comment type="block">/* 1: OID of processed tuple if applicable            */</comment>
    <comment type="block">/* 2: number of rows processed                */</comment>
    <comment type="block">/* after an INSERT, UPDATE or                */</comment>
    <comment type="block">/* DELETE statement                    */</comment>
    <comment type="block">/* 3: empty                        */</comment>
    <comment type="block">/* 4: empty                        */</comment>
    <comment type="block">/* 5: empty                        */</comment>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>sqlwarn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* Element 0: set to 'W' if at least one other is 'W'    */</comment>
    <comment type="block">/* 1: if 'W' at least one character string        */</comment>
    <comment type="block">/* value was truncated when it was            */</comment>
    <comment type="block">/* stored into a host variable.             */</comment>

    <comment type="block">/*
     * 2: if 'W' a (hopefully) non-fatal notice occurred
     */</comment>    <comment type="block">/* 3: empty */</comment>
    <comment type="block">/* 4: empty                        */</comment>
    <comment type="block">/* 5: empty                        */</comment>
    <comment type="block">/* 6: empty                        */</comment>
    <comment type="block">/* 7: empty                        */</comment>

    <decl_stmt><decl><type><name>char</name></type>        <name><name>sqlstate</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>ECPGget_sqlca</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_ECPG_INTERNAL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlca</name></cpp:macro> <cpp:value>(*ECPGget_sqlca())</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>


<enum>enum <name>e</name> <block>{ <decl><name>ENUM0</name></decl>, <decl><name>ENUM1</name></decl> }</block>;</enum>
<struct>struct <name>sa</name> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>member</name></decl>;</decl_stmt> }</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in fa\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in fb (%d)\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in fc (%s)\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in fd (%s, %d)\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>*</operator><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fe</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>e</name></name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in fe (%d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlnotice</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>notice</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>notice</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>notice</name> <operator>=</operator> <literal type="string">"-empty-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"in sqlnotice (%s, %d)\n"</literal></expr></argument>, <argument><expr><name>notice</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_cplusplus</name></cpp:ifdef>
<decl_stmt><decl><type><name>namespace</name></type> <name>N</name>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sa</name></name></type> <name>x</name> <init>= <expr><block>{ <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name>x</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* exec sql begin declare section */</comment>
         
         
         
         
         
         
         

         
         
         
          <comment type="block">/* = 1L */</comment> 
    
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>62</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>b2</name> <init>= <expr><operator>(</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">7</literal> <operator>)</operator></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>x</name> <operator>.</operator> <name>member</name></name></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>fb</name> <argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>65</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal> <operator>^</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>66</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>y</name> <operator>-&gt;</operator> <name>member</name></name></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">10</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>70</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>bool</name></type> <name>h</name> <init>= <expr><literal type="number">2</literal> <operator>||</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>71</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>long</name></type> <name>iay</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>72</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>


    <decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><call><name>fa</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_cplusplus</name></cpp:ifdef>
    <comment type="block">/* exec sql begin declare section */</comment>
      <comment type="block">/* compile error */</comment>
    
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>78</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>N</name> <operator>:</operator> <operator>:</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>79</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d %d %d %d %d %d %d %d\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iay</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>iay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* exec sql whenever sqlerror  do fa ( ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>87</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fa</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <comment type="block">/* exec sql whenever sqlerror  do fb ( 20 ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>90</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fb</name> <argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>90</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <comment type="block">/* exec sql whenever sqlerror  do fc ( \"50\" ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>91</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>92</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fc</name> <argument_list>( <argument><expr><literal type="string">"50"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>92</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <comment type="block">/* exec sql whenever sqlerror  do fd ( \"50\" , 1 ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>93</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fd</name> <argument_list>( <argument><expr><literal type="string">"50"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <comment type="block">/* exec sql whenever sqlerror  do fe ( ENUM0 ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>95</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fe</name> <argument_list>( <argument><expr><name>ENUM0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <comment type="block">/* exec sql whenever sqlerror  do sqlnotice ( NULL , 0 ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>97</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select now ( )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlnotice</name> <argument_list>( <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"init.pgc"</cpp:file></cpp:line>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
