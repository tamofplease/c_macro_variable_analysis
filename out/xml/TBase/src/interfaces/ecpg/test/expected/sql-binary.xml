<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/interfaces/ecpg/test/expected/sql-binary.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>


<comment type="block">/* exec sql begin declare section */</comment>
 

   
   
   
   

<struct>struct <name>TBempl</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>9</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>long</name></type> <name>idnum</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>10</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>name</name> <index>[ <expr><literal type="number">21</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>11</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>short</name></type> <name>accs</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>12</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>byte</name> <index>[ <expr><literal type="number">20</literal></expr> ]</index></name></decl> ;</decl_stmt>
 }</block> ;</struct><comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>14</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>


<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* exec sql begin declare section */</comment>
    
     
     
  
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>20</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name><name>struct</name> <name>TBempl</name></name></type> <name>empl</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>21</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pointer</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><literal type="string">"\\001\\155\\000\\212"</literal></expr></init></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ECPGdebug</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>empl</name><operator>.</operator><name>idnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"connect error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set bytea_output = escape"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>36</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"set bytea_output error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table empl ( idnum integer , name char ( 20 ) , accs smallint , byte bytea )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>44</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"create error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into empl values ( 1 , 'first user' , 320 , $1  )"</literal></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>data</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>51</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"insert error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ECPGset_var</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>empl</name><operator>.</operator><name>idnum</name></name> <operator>)</operator></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
 <comment type="block">/* declare C cursor for select name , accs , byte from empl where idnum = $1  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare C cursor for select name , accs , byte from empl where idnum = $1 "</literal></expr></argument>, 
    <argument><expr><name>ECPGt_long</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>empl</name><operator>.</operator><name>idnum</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch C"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name><name>empl</name><operator>.</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">21</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">21</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>empl</name><operator>.</operator><name>accs</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name><name>empl</name><operator>.</operator><name>byte</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">20</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">20</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"fetch error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"name=%s, accs=%d byte=%s\n"</literal></expr></argument>, <argument><expr><name><name>empl</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>empl</name><operator>.</operator><name>accs</name></name></expr></argument>, <argument><expr><name><name>empl</name><operator>.</operator><name>byte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close C"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>


  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>empl</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">21L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ECPGset_var</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>empl</name><operator>.</operator><name>idnum</name></name> <operator>)</operator></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
 <comment type="block">/* declare B binary cursor for select name , accs , byte from empl where idnum = $1  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>72</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare B binary cursor for select name , accs , byte from empl where idnum = $1 "</literal></expr></argument>, 
    <argument><expr><name>ECPGt_long</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>empl</name><operator>.</operator><name>idnum</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>73</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch B"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name><name>empl</name><operator>.</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">21</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">21</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>empl</name><operator>.</operator><name>accs</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name><name>empl</name><operator>.</operator><name>byte</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">20</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">20</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>74</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"fetch error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close B"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>81</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>


  <comment type="block">/* do not print a.accs because big/little endian will have different outputs here */</comment>
  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"name=%s, byte="</literal></expr></argument>, <argument><expr><name><name>empl</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%o)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>empl</name><operator>.</operator><name>byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ECPGset_var</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>empl</name><operator>.</operator><name>idnum</name></name> <operator>)</operator></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
 <comment type="block">/* declare A binary cursor for select byte from empl where idnum = $1  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare A binary cursor for select byte from empl where idnum = $1 "</literal></expr></argument>, 
    <argument><expr><name>ECPGt_long</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>empl</name><operator>.</operator><name>idnum</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>90</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch A"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>pointer</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>91</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"fetch error = %ld\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close A"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>


  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"pointer="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%o)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"binary.pgc"</cpp:file></cpp:line>

  <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
