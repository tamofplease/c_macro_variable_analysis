<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/interfaces/ecpg/test/expected/pgtypeslib-num_test2.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"num_test2.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_numeric.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;decimal.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"num_test2.pgc"</cpp:file></cpp:line>



<comment type="block">/*

NOTE: This file has a different expect file for regression tests on MinGW32

*/</comment>


<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>nums</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"2E394"</literal></expr>, <expr><literal type="string">"-2"</literal></expr>, <expr><literal type="string">".794"</literal></expr>, <expr><literal type="string">"3.44"</literal></expr>, <expr><literal type="string">"592.49E21"</literal></expr>, <expr><literal type="string">"-32.84e4"</literal></expr>,
                 <expr><literal type="string">"2E-394"</literal></expr>, <expr><literal type="string">".1E-2"</literal></expr>, <expr><literal type="string">"+.0"</literal></expr>, <expr><literal type="string">"-592.49E-07"</literal></expr>, <expr><literal type="string">"+32.84e-4"</literal></expr>,
                 <expr><literal type="string">".500001"</literal></expr>, <expr><literal type="string">"-.5000001"</literal></expr>,
                 <expr><literal type="string">"1234567890123456789012345678.91"</literal></expr>, <comment type="block">/* 30 digits should fit
                                                       into decimal */</comment>
                 <expr><literal type="string">"1234567890123456789012345678.921"</literal></expr>, <comment type="block">/* 31 digits should NOT
                                                        fit into decimal */</comment>
                 <expr><literal type="string">"not a number"</literal></expr>,
                 <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>check_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name><init>=<expr><literal type="string">"error\n"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>numeric</name> <modifier>*</modifier></type><name>num</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>decimal</name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>numeric</name> <modifier>*</modifier><modifier>*</modifier></type><name>numarr</name> <init>= <expr><operator>(</operator><name>numeric</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"endptr of %d is not NULL\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*endptr of %d is not \\0\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>numarr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>numarr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>numarr</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,1]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,2]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,3]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,4]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nin</name> <operator>=</operator> <call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nin</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,5]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_long</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,6]: %ld (r: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>r</name></expr>?</condition><then><expr><literal type="number">0L</literal></expr></then><else>:<expr><name>l</name></expr></else></ternary></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_long</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nin</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>PGTYPESnumeric_cmp</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,7]: %s (r: %d - cmp: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_int</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,8]: %d (r: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>r</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>k</name></expr></else></ternary></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_int</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nin</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>PGTYPESnumeric_cmp</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,9]: %s (r: %d - cmp: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* underflow does not work reliable on several archs, so not testing it here */</comment>
            <comment type="block">/* this is a libc problem since we only call strtod() */</comment>

            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_double</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,10]: %g (r: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>r</name></expr>?</condition><then><expr><literal type="number">0.0</literal></expr></then><else>:<expr><name>d</name></expr></else></ternary></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* do not test double to numeric because
         * - extra digits are different on different architectures
         * - PGTYPESnumeric_from_double internally calls PGTYPESnumeric_from_asc anyway
         */</comment>

        <expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>PGTYPESdecimal_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_decimal</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* we have no special routine for outputting decimal, it would
         * convert to a numeric anyway */</comment>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,11]: - (r: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_decimal</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nin</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>PGTYPESnumeric_cmp</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[%d,12]: %s (r: %d - cmp: %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>PGTYPESdecimal_free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>nin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>numeric</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>numeric</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>numeric</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>numeric</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_add</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>numarr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[a,%d,%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_sub</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>numarr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[s,%d,%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_mul</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>numarr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[m,%d,%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>PGTYPESnumeric_div</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>numarr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>check_errno</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num[d,%d,%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name><name>numarr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>numarr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>errno</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(no errno set) - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PGTYPES_NUM_OVERFLOW</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(errno == PGTYPES_NUM_OVERFLOW) - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PGTYPES_NUM_UNDERFLOW</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(errno == PGTYPES_NUM_UNDERFLOW) - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PGTYPES_NUM_BAD_NUMERIC</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(errno == PGTYPES_NUM_BAD_NUMERIC) - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PGTYPES_NUM_DIVIDE_ZERO</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(errno == PGTYPES_NUM_DIVIDE_ZERO) - "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(unknown errno (%d))\n"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(libc: (%s)) "</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
