<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/interfaces/ecpg/test/expected/compat_informix-sqlda.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* Needed for informix compatibility */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpg_informix.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>5</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlda.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ECPG_SQLDA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPG_SQLDA_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_ECPG_INFORMIX_H</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-compat.h"</cpp:file></cpp:include>
<typedef>typedef <type><name><name>struct</name> <name>sqlvar_compat</name></name></type> <name>sqlvar_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>sqlda_compat</name></name></type> <name>sqlda_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-native.h"</cpp:file></cpp:include>
<typedef>typedef <type><name><name>struct</name> <name>sqlvar_struct</name></name></type> <name>sqlvar_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>sqlda_struct</name></name></type> <name>sqlda_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* ECPG_SQLDA_H */</comment>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqltypes.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ECPG_SQLTYPES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPG_SQLTYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCHARTYPE</name></cpp:macro>    <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSHORTTYPE</name></cpp:macro>    <cpp:value>ECPGt_short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINTTYPE</name></cpp:macro>    <cpp:value>ECPGt_int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONGTYPE</name></cpp:macro>    <cpp:value>ECPGt_long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFLOATTYPE</name></cpp:macro>    <cpp:value>ECPGt_float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDOUBLETYPE</name></cpp:macro> <cpp:value>ECPGt_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDECIMALTYPE</name></cpp:macro>    <cpp:value>ECPGt_decimal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFIXCHARTYPE</name></cpp:macro>    <cpp:value>108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRINGTYPE</name></cpp:macro> <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDATETYPE</name></cpp:macro>    <cpp:value>ECPGt_date</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMONEYTYPE</name></cpp:macro>    <cpp:value>111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDTIMETYPE</name></cpp:macro>    <cpp:value>ECPGt_timestamp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCATORTYPE</name></cpp:macro>    <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVCHARTYPE</name></cpp:macro>    <cpp:value>ECPGt_varchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINVTYPE</name></cpp:macro>    <cpp:value>115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFILETYPE</name></cpp:macro>    <cpp:value>116</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINT8TYPE</name></cpp:macro>    <cpp:value>ECPGt_long_long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCOLLTYPE</name></cpp:macro>        <cpp:value>118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLVCHARTYPE</name></cpp:macro>        <cpp:value>119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFIXBINTYPE</name></cpp:macro>        <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVARBINTYPE</name></cpp:macro>        <cpp:value>121</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBOOLTYPE</name></cpp:macro>        <cpp:value>ECPGt_bool</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROWTYPE</name></cpp:macro>        <cpp:value>123</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLVCHARPTRTYPE</name></cpp:macro>    <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTYPEMAX</name></cpp:macro>    <cpp:value>25</cpp:value></cpp:define>

<comment type="block">/*
 * Values used in sqlda-&gt;sqlvar[i]-&gt;sqltype
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLCHAR</name></cpp:macro>        <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLSMINT</name></cpp:macro>    <cpp:value>ECPGt_short</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLINT</name></cpp:macro>        <cpp:value>ECPGt_int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLFLOAT</name></cpp:macro>    <cpp:value>ECPGt_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLSMFLOAT</name></cpp:macro>    <cpp:value>ECPGt_float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLDECIMAL</name></cpp:macro>    <cpp:value>ECPGt_decimal</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLSERIAL</name></cpp:macro>    <cpp:value>ECPGt_int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLDATE</name></cpp:macro>        <cpp:value>ECPGt_date</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLDTIME</name></cpp:macro>    <cpp:value>ECPGt_timestamp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLTEXT</name></cpp:macro>        <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLVCHAR</name></cpp:macro>    <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLINTERVAL</name></cpp:macro>        <cpp:value>ECPGt_interval</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLNCHAR</name></cpp:macro>    <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLNVCHAR</name></cpp:macro>    <cpp:value>ECPGt_char</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT_64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLINT8</name></cpp:macro>        <cpp:value>ECPGt_long_long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLSERIAL8</name></cpp:macro>    <cpp:value>ECPGt_long_long</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLINT8</name></cpp:macro>        <cpp:value>ECPGt_long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLSERIAL8</name></cpp:macro>    <cpp:value>ECPGt_long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* ndef ECPG_SQLTYPES_H */</comment>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


<comment type="block">/* exec sql whenever sqlerror  stop ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>10</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


<comment type="block">/* These shouldn't be under DECLARE SECTION */</comment>
<decl_stmt><decl><type><name>sqlda_t</name>    <modifier>*</modifier></type><name>inp_sqlda</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outp_sqlda</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_sqlda</name><parameter_list>(<parameter><decl><type><name>sqlda_t</name> <modifier>*</modifier></type><name>sqlda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sqlda</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dump_sqlda called with NULL sqlda\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name sqlda descriptor: '%s' value NULL'\n"</literal></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
        <switch>switch <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name>SQLCHAR</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name sqlda descriptor: '%s' value '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SQLINT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name sqlda descriptor: '%s' value %d\n"</literal></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SQLFLOAT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name sqlda descriptor: '%s' value %lf\n"</literal></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SQLDECIMAL</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type>    <name><name>val</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>dectoasc</name><argument_list>(<argument><expr><operator>(</operator><name>decimal</name> <operator>*</operator><operator>)</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name sqlda descriptor: '%s' value DECIMAL '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* exec sql begin declare section */</comment>
          
          
        
        

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>stmt1</name> <init>= <expr><literal type="string">"SELECT * FROM t1"</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>stmt2</name> <init>= <expr><literal type="string">"SELECT * FROM t1 WHERE id = ?"</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>rec</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="string">"regress1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set datestyle to iso"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>71</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>71</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table t1 ( id integer , t text , d1 numeric , d2 float8 , c char ( 10 ) )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>79</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>79</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into t1 values ( 1 , 'a' , 1.0 , 1 , 'a' ) , ( 2 , null , null , null , null ) , ( 4 , 'd' , 4.0 , 4 , 'd' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>85</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>85</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <comment type="block">/* SQLDA test for getting all records from a table */</comment>

    <expr_stmt><expr><name>outp_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"st_id1"</literal></expr></argument>, <argument><expr><name>stmt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>95</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>95</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"declare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ECPG_informix_reset_sqlca</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* declare mycur1 cursor for $1 */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare mycur1 cursor for $1"</literal></expr></argument>, 
    <argument><expr><name>ECPGt_char_variable</name></expr></argument>,<argument><expr><operator>(</operator><call><name>ECPGprepared_statement</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id1"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>101</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>101</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <comment type="block">/* exec sql whenever not found  break ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>103</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><name>rec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch 1 from mycur1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>109</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>109</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>109</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FETCH RECORD %d\n"</literal></expr></argument>, <argument><expr><operator>++</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dump_sqlda</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* exec sql whenever not found  continue ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>115</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close mycur1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>118</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>118</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"deallocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdeallocate</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>121</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>121</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SQLDA test for getting all records from a table
       using the Informix-specific FETCH ... USING DESCRIPTOR
     */</comment>

    <expr_stmt><expr><name>outp_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"st_id2"</literal></expr></argument>, <argument><expr><name>stmt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>132</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>132</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"declare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ECPG_informix_reset_sqlca</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* declare mycur2 cursor for $1 */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>135</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare mycur2 cursor for $1"</literal></expr></argument>, 
    <argument><expr><name>ECPGt_char_variable</name></expr></argument>,<argument><expr><operator>(</operator><call><name>ECPGprepared_statement</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id2"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>138</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>138</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <comment type="block">/* exec sql whenever not found  break ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>140</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><name>rec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch from mycur2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>146</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>146</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>146</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FETCH RECORD %d\n"</literal></expr></argument>, <argument><expr><operator>++</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dump_sqlda</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* exec sql whenever not found  continue ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>152</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close mycur2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>155</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>155</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"deallocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdeallocate</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>158</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>158</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SQLDA test for getting one record using an input descriptor */</comment>

    <comment type="block">/* Input sqlda has to be built manually */</comment>
    <expr_stmt><expr><name>inp_sqlda</name> <operator>=</operator> <operator>(</operator><name>sqlda_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlda_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>inp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlda_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlvar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlvar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sqltype</name> <operator>=</operator> <name>SQLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE RECORD 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>outp_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"st_id3"</literal></expr></argument>, <argument><expr><name>stmt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>181</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>181</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"st_id3"</literal></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>184</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>184</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>dump_sqlda</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"deallocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdeallocate</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>189</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>189</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SQLDA test for getting one record using an input descriptor
     * on a named connection
     */</comment>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="string">"con2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>199</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>199</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <comment type="block">/* Input sqlda has to be built manually */</comment>
    <expr_stmt><expr><name>inp_sqlda</name> <operator>=</operator> <operator>(</operator><name>sqlda_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlda_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>inp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlda_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlvar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlvar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sqltype</name> <operator>=</operator> <name>SQLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE RECORD 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>outp_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"con2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"st_id4"</literal></expr></argument>, <argument><expr><name>stmt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>218</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>218</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"con2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"st_id4"</literal></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
    <argument><expr><name>ECPGt_sqlda</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outp_sqlda</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
    <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>221</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>221</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>dump_sqlda</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"con2"</literal></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>226</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>226</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"deallocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdeallocate</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"st_id4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>229</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>229</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inp_sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outp_sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"disconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"con2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>236</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>236</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <comment type="block">/* End test */</comment>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"drop table t1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>241</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>241</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>244</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>244</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"disconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>247</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>247</cpp:number> <cpp:file>"sqlda.pgc"</cpp:file></cpp:line>


    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
