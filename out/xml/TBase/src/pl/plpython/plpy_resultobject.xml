<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/pl/plpython/plpy_resultobject.c"><comment type="block">/*
 * the PLyResult class
 *
 * src/pl/plpython/plpy_resultobject.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_resultobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_result_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_colnames</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_coltypes</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_coltypmods</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_nrows</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_status</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Py_ssize_t</name></type> <name>PLy_result_length</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_item</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_slice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>lidx</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>hidx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>PLy_result_ass_slice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>lidx</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>hidx</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_str</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_result_subscript</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>PLy_result_ass_subscript</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>PLy_result_doc</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"Results of a PostgreSQL query"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PySequenceMethods</name></type> <name>PLy_result_as_sequence</name> <init>= <expr><block>{
    <expr><name>PLy_result_length</name></expr>,            <comment type="block">/* sq_length */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* sq_concat */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* sq_repeat */</comment>
    <expr><name>PLy_result_item</name></expr>,            <comment type="block">/* sq_item */</comment>
    <expr><name>PLy_result_slice</name></expr>,            <comment type="block">/* sq_slice */</comment>
    <expr><name>NULL</name></expr>,                        <comment type="block">/* sq_ass_item */</comment>
    <expr><name>PLy_result_ass_slice</name></expr>,        <comment type="block">/* sq_ass_slice */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMappingMethods</name></type> <name>PLy_result_as_mapping</name> <init>= <expr><block>{
    <expr><name>PLy_result_length</name></expr>,            <comment type="block">/* mp_length */</comment>
    <expr><name>PLy_result_subscript</name></expr>,        <comment type="block">/* mp_subscript */</comment>
    <expr><name>PLy_result_ass_subscript</name></expr>,    <comment type="block">/* mp_ass_subscript */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PLy_result_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"colnames"</literal></expr>, <expr><name>PLy_result_colnames</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"coltypes"</literal></expr>, <expr><name>PLy_result_coltypes</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"coltypmods"</literal></expr>, <expr><name>PLy_result_coltypmods</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"nrows"</literal></expr>, <expr><name>PLy_result_nrows</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"status"</literal></expr>, <expr><name>PLy_result_status</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PLy_ResultType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <literal type="string">"PLyResult"</literal></expr>,                <comment type="block">/* tp_name */</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyResultObject</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="block">/* tp_size */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_itemsize */</comment>

    <comment type="block">/*
     * methods
     */</comment>
    <expr><name>PLy_result_dealloc</name></expr>,            <comment type="block">/* tp_dealloc */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_print */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_getattr */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_setattr */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_compare */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_repr */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_as_number */</comment>
    <expr><operator>&amp;</operator><name>PLy_result_as_sequence</name></expr>,    <comment type="block">/* tp_as_sequence */</comment>
    <expr><operator>&amp;</operator><name>PLy_result_as_mapping</name></expr>,        <comment type="block">/* tp_as_mapping */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_hash */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_call */</comment>
    <expr><operator>&amp;</operator><name>PLy_result_str</name></expr>,            <comment type="block">/* tp_str */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_getattro */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_setattro */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_as_buffer */</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name></expr>,    <comment type="block">/* tp_flags */</comment>
    <expr><name>PLy_result_doc</name></expr>,                <comment type="block">/* tp_doc */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_traverse */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_clear */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_richcompare */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_weaklistoffset */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_iter */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* tp_iternext */</comment>
    <expr><name>PLy_result_methods</name></expr>,            <comment type="block">/* tp_tpmethods */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>PLy_result_init_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLy_ResultType</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not initialize PLy_ResultType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ob</name> <operator>=</operator> <call><name>PyObject_New</name><argument_list>(<argument><expr><name>PLyResultObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PLy_ResultType</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* ob-&gt;tuples = NULL; */</comment>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>ob</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_result_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>arg</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_free</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_colnames</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_error</name></expr></argument>, <argument><expr><literal type="string">"command did not produce a result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_coltypes</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_error</name></expr></argument>, <argument><expr><literal type="string">"command did not produce a result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_coltypmods</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_error</name></expr></argument>, <argument><expr><literal type="string">"command did not produce a result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>atttypmod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_nrows</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_status</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Py_ssize_t</name></type>
<name>PLy_result_length</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_item</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyList_GetItem</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_slice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>lidx</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>hidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>PyList_GetSlice</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>lidx</name></expr></argument>, <argument><expr><name>hidx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>PLy_result_ass_slice</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>lidx</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>hidx</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PyList_SetSlice</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>lidx</name></expr></argument>, <argument><expr><name>hidx</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_str</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
    <return>return <expr><call><name>PyUnicode_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;%s status=%S nrows=%S rows=%S&gt;"</literal></expr></argument>,
                                <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>,
                                <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>,
                                <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>,
                                <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>PyString_FromFormat</name><argument_list>(<argument><expr><literal type="string">"&lt;%s status=%ld nrows=%ld rows=%s&gt;"</literal></expr></argument>,
                               <argument><expr><name><name>ob</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_name</name></name></expr></argument>,
                               <argument><expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_result_subscript</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>PyObject_GetItem</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>PLy_result_ass_subscript</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>PyObject_SetItem</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
