<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/tools/findoidjoins/findoidjoins.c"><comment type="block">/*
 * findoidjoins.c
 *
 * Copyright (c) 2002-2017, PostgreSQL Global Development Group
 *
 * src/tools/findoidjoins/findoidjoins.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGconn</name>       <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>sql</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>pkrel_res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>fkrel_res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>fk_relname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>fk_nspname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>fk_attname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pk_relname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pk_nspname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>fk</name></decl>,
                <decl><type ref="prev"/><name>pk</name></decl>;</decl_stmt>                <comment type="block">/* loop counters */</comment>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage:  %s database\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"dbname=%s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectdb</name><argument_list>(<argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"connection error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Get a list of relations that have OIDs */</comment>

    <expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
                      <argument><expr><literal type="string">"SET search_path = public;"</literal>
                      <literal type="string">"SELECT c.relname, (SELECT nspname FROM "</literal>
                      <literal type="string">"pg_catalog.pg_namespace n WHERE n.oid = c.relnamespace) AS nspname "</literal>
                      <literal type="string">"FROM pg_catalog.pg_class c "</literal>
                      <literal type="string">"WHERE c.relkind = "</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call>
                      <literal type="string">" AND c.relhasoids "</literal>
                      <literal type="string">"ORDER BY nspname, c.relname"</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sql error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pkrel_res</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

    <comment type="block">/* Get a list of columns of OID type (or any OID-alias type) */</comment>

    <expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
                      <argument><expr><literal type="string">"SELECT c.relname, "</literal>
                      <literal type="string">"(SELECT nspname FROM pg_catalog.pg_namespace n WHERE n.oid = c.relnamespace) AS nspname, "</literal>
                      <literal type="string">"a.attname "</literal>
                      <literal type="string">"FROM pg_catalog.pg_class c, pg_catalog.pg_attribute a "</literal>
                      <literal type="string">"WHERE a.attnum &gt; 0"</literal>
                      <literal type="string">" AND c.relkind = "</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call>
                      <literal type="string">" AND a.attrelid = c.oid"</literal>
                      <literal type="string">" AND a.atttypid IN ('pg_catalog.oid'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regclass'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regoper'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regoperator'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regproc'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regprocedure'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regtype'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regconfig'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regdictionary'::regtype) "</literal>
                      <literal type="string">"ORDER BY nspname, c.relname, a.attnum"</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sql error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fkrel_res</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

    <comment type="block">/*
     * For each column and each relation-having-OIDs, look to see if the
     * column contains any values matching entries in the relation.
     */</comment>

    <for>for <control>(<init><expr><name>fk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fk</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>fk_relname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fk_nspname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fk_attname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>pk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pk</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pk</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>pk_relname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pk_nspname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>,
                              <argument><expr><literal type="string">"SELECT    1 "</literal>
                              <literal type="string">"FROM \"%s\".\"%s\" t1, "</literal>
                              <literal type="string">"\"%s\".\"%s\" t2 "</literal>
                              <literal type="string">"WHERE t1.\"%s\"::pg_catalog.oid = t2.oid "</literal>
                              <literal type="string">"LIMIT 1"</literal></expr></argument>,
                              <argument><expr><name>fk_nspname</name></expr></argument>, <argument><expr><name>fk_relname</name></expr></argument>,
                              <argument><expr><name>pk_nspname</name></expr></argument>, <argument><expr><name>pk_relname</name></expr></argument>,
                              <argument><expr><name>fk_attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sql error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Join %s.%s.%s =&gt; %s.%s.oid\n"</literal></expr></argument>,
                       <argument><expr><name>fk_nspname</name></expr></argument>, <argument><expr><name>fk_relname</name></expr></argument>, <argument><expr><name>fk_attname</name></expr></argument>,
                       <argument><expr><name>pk_nspname</name></expr></argument>, <argument><expr><name>pk_relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now, do the same for referencing columns that are arrays */</comment>

    <comment type="block">/* Get a list of columns of OID-array type (or any OID-alias type) */</comment>

    <expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
                      <argument><expr><literal type="string">"SELECT c.relname, "</literal>
                      <literal type="string">"(SELECT nspname FROM pg_catalog.pg_namespace n WHERE n.oid = c.relnamespace) AS nspname, "</literal>
                      <literal type="string">"a.attname "</literal>
                      <literal type="string">"FROM pg_catalog.pg_class c, pg_catalog.pg_attribute a "</literal>
                      <literal type="string">"WHERE a.attnum &gt; 0"</literal>
                      <literal type="string">" AND c.relkind = "</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call>
                      <literal type="string">" AND a.attrelid = c.oid"</literal>
                      <literal type="string">" AND a.atttypid IN ('pg_catalog.oid[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regclass[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regoper[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regoperator[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regproc[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regprocedure[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regtype[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regconfig[]'::regtype, "</literal>
                      <literal type="string">" 'pg_catalog.regdictionary[]'::regtype) "</literal>
                      <literal type="string">"ORDER BY nspname, c.relname, a.attnum"</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sql error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fkrel_res</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

    <comment type="block">/*
     * For each column and each relation-having-OIDs, look to see if the
     * column contains any values matching entries in the relation.
     */</comment>

    <for>for <control>(<init><expr><name>fk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fk</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>fk_relname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fk_nspname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fk_attname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>pk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pk</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pk</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>pk_relname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pk_nspname</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>,
                              <argument><expr><literal type="string">"SELECT    1 "</literal>
                              <literal type="string">"FROM \"%s\".\"%s\" t1, "</literal>
                              <literal type="string">"\"%s\".\"%s\" t2 "</literal>
                              <literal type="string">"WHERE t2.oid = ANY(t1.\"%s\")"</literal>
                              <literal type="string">"LIMIT 1"</literal></expr></argument>,
                              <argument><expr><name>fk_nspname</name></expr></argument>, <argument><expr><name>fk_relname</name></expr></argument>,
                              <argument><expr><name>pk_nspname</name></expr></argument>, <argument><expr><name>pk_relname</name></expr></argument>,
                              <argument><expr><name>fk_attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sql error:  %s\n"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Join %s.%s.%s []=&gt; %s.%s.oid\n"</literal></expr></argument>,
                       <argument><expr><name>fk_nspname</name></expr></argument>, <argument><expr><name>fk_relname</name></expr></argument>, <argument><expr><name>fk_attname</name></expr></argument>,
                       <argument><expr><name>pk_nspname</name></expr></argument>, <argument><expr><name>pk_relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>fkrel_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pkrel_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
