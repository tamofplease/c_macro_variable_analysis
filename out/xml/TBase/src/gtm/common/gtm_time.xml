<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/gtm_time.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_time.c
 *            Timestamp handling on GTM
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *            $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<function><type><name>GTM_Timestamp</name></type>
<name>GTM_TimestampGetCurrent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>    <name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type>    <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>GTM_Timestamp</name><operator>)</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator>
    <operator>(</operator><operator>(</operator><name>GTM_EPOCH_JDATE</name> <operator>-</operator> <name>UNIX_EPOCH_JDATE</name><operator>)</operator> <operator>*</operator> <name>SECS_PER_DAY</name><operator>)</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>*</operator> <name>USECS_PER_SEC</name><operator>)</operator> <operator>+</operator> <name><name>tp</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <operator>(</operator><name><name>tp</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalTimestamp</name></type>
<name>GTM_TimestampGetMonotonicRaw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type>     <name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type>  <name>result</name></decl>;</decl_stmt>    

    <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_RAW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>USECS_PER_SEC</name> <operator>+</operator> <name><name>tp</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"clock gettime sec "</literal><name>INT64_FORMAT</name> <literal type="string">" nsec "</literal> <name>INT64_FORMAT</name> <literal type="string">" res "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>GlobalTimestamp</name></type>
<name>GTM_TimestampGetMonotonicRawPrecise</name><parameter_list>(<parameter><decl><type><name>GlobalTimestamp</name> <modifier>*</modifier></type><name>tv_sec</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name> <modifier>*</modifier></type><name>tv_nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type>     <name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type>  <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_RAW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>USECS_PER_SEC</name> <operator>+</operator> <name><name>tp</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"clock gettime sec "</literal><name>INT64_FORMAT</name> <literal type="string">" nsec "</literal> <name>INT64_FORMAT</name> <literal type="string">" res "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tv_sec</name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tv_nsec</name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TimestampDifference -- convert the difference between two timestamps
 *        into integer seconds and microseconds
 *
 * Both inputs must be ordinary finite timestamps (in current usage,
 * they'll be results from GTM_TimestampGetCurrent()).
 *
 * We expect start_time &lt;= stop_time.  If not, we return zeroes; for current
 * callers there is no need to be tense about which way division rounds on
 * negative inputs.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_TimestampDifference</name><parameter_list>(<parameter><decl><type><name>GTM_Timestamp</name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name></type> <name>stop_time</name></decl></parameter>,
                    <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>secs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>microsecs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>diff</name> <init>= <expr><name>stop_time</name> <operator>-</operator> <name>start_time</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>secs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>microsecs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
        <expr_stmt><expr><operator>*</operator><name>secs</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>diff</name> <operator>/</operator> <name>USECS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>microsecs</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>diff</name> <operator>%</operator> <name>USECS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><operator>*</operator><name>secs</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>diff</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>microsecs</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>diff</name> <operator>-</operator> <operator>*</operator><name>secs</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * GTM_TimestampDifferenceExceeds -- report whether the difference between two
 *        timestamps is &gt;= a threshold (expressed in milliseconds)
 *
 * Both inputs must be ordinary finite timestamps (in current usage,
 * they'll be results from GTM_TimestampDifferenceExceeds()).
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_TimestampDifferenceExceeds</name><parameter_list>(<parameter><decl><type><name>GTM_Timestamp</name></type> <name>start_time</name></decl></parameter>,
                           <parameter><decl><type><name>GTM_Timestamp</name></type> <name>stop_time</name></decl></parameter>,
                           <parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>diff</name> <init>= <expr><name>stop_time</name> <operator>-</operator> <name>start_time</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
    <return>return <expr><operator>(</operator><name>diff</name> <operator>&gt;=</operator> <name>msec</name> <operator>*</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><operator>(</operator><name>diff</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>&gt;=</operator> <name>msec</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
