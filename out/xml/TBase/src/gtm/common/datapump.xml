<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/datapump.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datapump.c
 *
 *
 *	  lockless message queue
 *
 * Copyright (c) 2020-Present TBase development team, Tencent
 *
 *
 * IDENTIFICATION
 *	  src/gtm/common/datapump.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/datapump.h"</cpp:file></cpp:include>


<comment type="block">/*
 * The following funciton is used to handle lockless message queue.
 */</comment>
 
<comment type="block">/*
 * Get data pointer, use with the following functions.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetData</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>uiLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>border</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>DataSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>border</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>border</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tail</name>   <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>INVALID_BORDER</name> <operator>==</operator> <name>border</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* read from tail to border*/</comment>
		<if_stmt><if>if <condition>(<expr><name>border</name> <operator>&gt;=</operator>  <name>tail</name></expr>)</condition>
		<block>{<block_content> 
			 <comment type="block">/* Only sender increases tail, no need to lock. */</comment>
			 <expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <name>border</name> <operator>-</operator> <name>tail</name></expr>;</expr_stmt>  
			 <expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>tail</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>  
			<comment type="block">/* read from tail to end */</comment>
			<expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>tail</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>tail</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>wrap_around</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt> 
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Increate data offset, used after finishing read data from queue.
 */</comment>
<function><type><name>void</name></type>
<name>IncDataOff</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>uiLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>tail</name></name>  <operator>=</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name>uiLen</name><operator>)</operator> <operator>%</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>border</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>border</name></name> <operator>=</operator> <name>INVALID_BORDER</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return total data size in buffer
 */</comment>
<function><type><name>uint32</name></type>
<name>DataSize</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>border</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>head</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tail</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>head</name>   <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tail</name>   <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>border</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>border</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>INVALID_BORDER</name> <operator>==</operator> <name>border</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>&lt;=</operator> <name>head</name></expr>)</condition>
		<block>{<block_content>	
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>head</name> <operator>-</operator> <name>tail</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>tail</name> <operator>+</operator> <name>head</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><name>size</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the pointer to write and return the length to write.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetWriteOff</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>uiLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>head</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>ptr</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>FreeSpace</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>head</name> <operator>&gt;=</operator>  <name>tail</name></expr>)</condition>
		<block>{<block_content> 
		   <comment type="block">/* tail is the beginning of the queue. */</comment>
		   <if_stmt><if>if <condition>(<expr><name>tail</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		   <block>{<block_content>
			   
			   <expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>head</name></expr>;</expr_stmt>
		   </block_content>}</block></if>
		   <else>else
		   <block>{<block_content>
			   <comment type="block">/* Reserved one byte as flag. */</comment>
			   <expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>head</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		   </block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>			   
		   <comment type="block">/* Reserved one byte as flag. */</comment>
		   <expr_stmt><expr><operator>*</operator><name>uiLen</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>head</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>		
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>head</name></expr>;</expr_stmt>
		<return>return <expr><name>ptr</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>	
</block_content>}</block></function>

<comment type="block">/*
 * Used to increase the write pointer after write some data.
 */</comment>
<function><type><name>void</name></type>
<name>IncWriteOff</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>uiLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>head</name></name>  <operator>+=</operator> <name>uiLen</name></expr>;</expr_stmt>
   		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>head</name></name>  <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name> <operator>%</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reserve space in print buffer
 */</comment>
<function><type><name>int</name></type>
<name>ReserveSpace</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* not enough space avaliable, wait */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FreeSpace</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>offset</name>	<operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
   		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>head</name></name>  <operator>=</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>%</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>		
</block_content>}</block></function>

<function><type><name>uint32</name></type>
<name>BufferOffsetAdd</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>	
   		<return>return <expr><operator>(</operator><name>pointer</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>%</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>		
</block_content>}</block></function>

<comment type="block">/*
 * No need to lock, reader never read the data before we set border.
 */</comment>
<function><type><name>int</name></type>
<name>ReturnSpace</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>		
</block_content>}</block></function>

<comment type="block">/*
 * Fill data into reserved by ReserveSpace
 */</comment>
<function><type><name>void</name></type>
<name>FillReserveSpace</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>bytes2end</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>bytesfrombegin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   

	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>		
		<expr_stmt><expr><name>bytes2end</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>bytes2end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>bytesfrombegin</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>bytes2end</name></expr>;</expr_stmt>				
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes2end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <name>bytes2end</name></expr></argument>, <argument><expr><name>bytesfrombegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>	
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return free space of the buffer.
 */</comment>
<function><type><name>uint32</name></type>
<name>FreeSpace</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>head</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>len</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>&lt;=</operator> <name>head</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>tail</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name>head</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>tail</name> <operator>-</operator> <name>head</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set tuple end border of the buffer.
 */</comment>
<function><type><name>void</name></type>
<name>SetBorder</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>border</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send data into buffer
 */</comment>
<function><type><name>void</name></type>
<name>PutData</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>	
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>  <name>bufferLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>  <name>needLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>needLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>			
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GetWriteOff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>bufferLen</name> <operator>&gt;=</operator> <name>needLen</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>needLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>IncWriteOff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>needLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>IncWriteOff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>needLen</name> <operator>-=</operator> <name>bufferLen</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>offset</name>  <operator>+=</operator> <name>bufferLen</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>


</unit>
