<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/bloom.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bloom.c
 *
 *	  a bloom filter, using murmurhash
 *
 * Copyright (c) 2020-Present TBase development team, Tencent
 *
 *
 * IDENTIFICATION
 *	  src/gtm/common/bloom.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/bloom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/palloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETBIT</name><parameter_list>(<parameter><type><name>bitmap</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bitmap)[(bit)/CHAR_BIT] |= (1&lt;&lt;((bit)%CHAR_BIT)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETBIT</name><parameter_list>(<parameter><type><name>bitmap</name></type></parameter>, <parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bitmap)[(bit)/CHAR_BIT] &amp; (1&lt;&lt;((bit)%CHAR_BIT)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ k *= m; k ^= k &gt;&gt; r; k *= m; h *= m; h ^= k; }</cpp:value></cpp:define>

<comment type="block">/*
 * Create a bloom filter, variable parameter is hash seed
 * hash function num depend on seeds
 */</comment>
<function><type><name>BLOOM</name> <modifier>*</modifier></type>
<name>BloomCreate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bitmap_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfuncs</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bloom</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BLOOM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>bloom</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>bitmap_size</name> <operator>+</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bloom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name></name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><name>nfuncs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>bloom</name><operator>-&gt;</operator><name>seeds</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bloom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>nfuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfuncs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>uint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name> <operator>=</operator> <name>bitmap_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bloom</name><operator>-&gt;</operator><name>nfuncs</name></name> <operator>=</operator> <name>nfuncs</name></expr>;</expr_stmt>

    <return>return <expr><name>bloom</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy a bloom filter
 */</comment>
<function><type><name>int</name></type>
<name>BloomDestroy</name><parameter_list>(<parameter><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bloom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reset bloom filter's bitmap
 */</comment>
<function><type><name>void</name></type>
<name>BloomReset</name><parameter_list>(<parameter><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name> <operator>+</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>CHAR_BIT</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add an item into bloom filter
 */</comment>
<function><type><name>void</name></type>
<name>BloomAdd</name><parameter_list>(<parameter><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bloom</name><operator>-&gt;</operator><name>nfuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><call><name>MurmurHash2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the item exist
 */</comment>
<function><type><name>bool</name></type>
<name>BloomCheck</name><parameter_list>(<parameter><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bloom</name><operator>-&gt;</operator><name>nfuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>GETBIT</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><call><name>MurmurHash2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the item exist, if not exist, add the item into bloom
 */</comment>
<function><type><name>bool</name></type>
<name>BloomCheckAndAdd</name><parameter_list>(<parameter><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>exist</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bloom</name><operator>-&gt;</operator><name>nfuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>MurmurHash2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>GETBIT</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>bloom</name><operator>-&gt;</operator><name>nfuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>MurmurHash2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>seeds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>bloom</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name><name>bloom</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>exist</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Murmurhash function
 */</comment>
<function><type><name>uint32_t</name></type>
<name>MurmurHash2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0x5bd1e995</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><name>seed</name> <operator>^</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>align</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>data</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>align</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Pre-load the temp registers */</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>sl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>sr</name></decl>;</decl_stmt>

        <switch>switch<condition>(<expr><name>align</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>t</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>t</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>t</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>t</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>align</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal><operator>-</operator><name>align</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal><operator>-</operator><name>align</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>sl</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal><operator>-</operator><name>align</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>sr</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>align</name></expr>;</expr_stmt>

        <comment type="block">/* Mix */</comment>

        <while>while<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <name>sl</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MIX</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Handle leftover data in temp registers */</comment>

        <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>align</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>;</decl_stmt>

            <switch>switch<condition>(<expr><name>align</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></switch>

            <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <name>sl</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MIX</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>align</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>align</name></expr>;</expr_stmt>

            <comment type="block">/* ----------
             * Handle tail bytes */</comment>

            <switch>switch<condition>(<expr><name>len</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
            </block_content>}</block></switch><empty_stmt>;</empty_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <switch>switch<condition>(<expr><name>len</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>sr</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <name>sl</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

        <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>MIX</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* ----------
         * Handle tail bytes */</comment>

        <switch>switch<condition>(<expr><name>len</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>h</name> <operator>^=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></switch><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

        <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
