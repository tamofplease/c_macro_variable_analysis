<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/heap.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block" format="doxygen">/**
 * This file defines the methods declared in heap.h
 * These are used to create and manipulate a heap
 * data structure.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/heap.h"</cpp:file></cpp:include>

<comment type="line">// Helpful Macros</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_CHILD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((i&lt;&lt;1)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_CHILD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((i&lt;&lt;1)+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARENT_ENTRY</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i-1)&gt;&gt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP_ENTRIES</name><parameter_list>(<parameter><type><name>parent</name></type></parameter>,<parameter><type><name>child</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>{ \
                                      void* temp = parent-&gt;key; \
                                      parent-&gt;key = child-&gt;key;          \
                                      child-&gt;key = temp;                 \
                                      temp = parent-&gt;value;              \
                                      parent-&gt;value = child-&gt;value;      \
                                      child-&gt;value = temp;               \
                                    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ENTRY</name><parameter_list>(<parameter><type><name>index</name></type></parameter>,<parameter><type><name>table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((heap_entry*)(table+index))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compare_int_keys</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block" format="doxygen">/**
 * Stores the number of heap_entry structures
 * we can fit into a single page of memory.
 *
 * This is determined by the page size, so we
 * need to determine this at run time.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ENTRIES_PER_PAGE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Stores the number of bytes in a single
 * page of memory.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>PAGE_SIZE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Helper function to map a number of pages into memory</comment>
<comment type="line">// Returns NULL on error, otherwise returns a pointer to the</comment>
<comment type="line">// first page.</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>map_in_pages</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_count</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Check everything</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>page_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Call mmmap to get the pages</comment>

    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>page_count</name><operator>*</operator><name>PAGE_SIZE</name></expr></argument>, <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_ANON</name><operator>|</operator><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
        <comment type="line">// Clear the memory</comment>
        <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><name>addr</name></expr></argument>,<argument><expr><name>page_count</name><operator>*</operator><name>PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Return the address </comment>
        <return>return <expr><name>addr</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="line">// Helper function to map a number of pages out of memory</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>map_out_pages</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_count</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <comment type="line">// Check everything</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>addr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>page_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Call munmap to get rid of the pages</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>munmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>page_count</name><operator>*</operator><name>PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The result should be 0</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// This is a comparison function that treats keys as signed ints</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_int_keys</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>void</name><modifier>*</modifier></type> <name>key1</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>void</name><modifier>*</modifier></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Cast them as int* and read them in</comment>
    <decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>key1_v</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>key1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>key2_v</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// Perform the comparison</comment>
    <if_stmt><if>if <condition>(<expr><name>key1_v</name> <operator>&lt;</operator> <name>key2_v</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>key1_v</name> <operator>==</operator> <name>key2_v</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="line">// Creates a new heap</comment>
<function><type><name>void</name></type> <name>heap_create</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_size</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>comp_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Check if we need to setup our globals</comment>
    <if_stmt><if>if <condition>(<expr><name>PAGE_SIZE</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the page size</comment>
        <expr_stmt><expr><name>PAGE_SIZE</name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Calculate the max entries</comment>
        <expr_stmt><expr><name>ENTRIES_PER_PAGE</name> <operator>=</operator> <name>PAGE_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>heap_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="line">// Check that initial size is greater than 0, else set it to ENTRIES_PER_PAGE</comment>
    <if_stmt><if>if <condition>(<expr><name>initial_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>initial_size</name> <operator>=</operator> <name>ENTRIES_PER_PAGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If the comp_func is null, treat the keys as signed ints</comment>
    <if_stmt><if>if <condition>(<expr><name>comp_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>comp_func</name> <operator>=</operator> <name>compare_int_keys</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


    <comment type="line">// Store the compare function</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>compare_func</name></name> <operator>=</operator> <name>comp_func</name></expr>;</expr_stmt>

    <comment type="line">// Set active entries to 0</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// Determine how many pages of entries we need</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>=</operator> <name>initial_size</name> <operator>/</operator> <name>ENTRIES_PER_PAGE</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>initial_size</name> <operator>%</operator> <name>ENTRIES_PER_PAGE</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>minimum_pages</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name></expr>;</expr_stmt>

    <comment type="line">// Allocate the table</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>map_in_pages</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Cleanup a heap</comment>
<function><type><name>void</name></type> <name>heap_destroy</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Check that h is not null</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Map out the table</comment>
    <expr_stmt><expr><call><name>map_out_pages</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Clear everything</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Gets the size of the heap</comment>
<function><type><name>int</name></type> <name>heap_size</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Return the active entries</comment>
    <return>return <expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Gets the minimum element</comment>
<function><type><name>int</name></type> <name>heap_min</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>root</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Check the number of elements, abort if 0</comment>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Get the 0th element</comment>
    <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the key and value</comment>
    <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

    <comment type="line">// Success</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Insert a new element</comment>
<function><type><name>void</name></type> <name>heap_insert</name><parameter_list>(<parameter><decl><type><name>heap</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>max_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>table</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>current_index</name></decl>;</decl_stmt>
    <comment type="line">// Loop variables</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>parent_index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_entry</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

    <comment type="line">// Check if this heap is not destoyed</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check if we have room</comment>
    <expr_stmt><expr><name>max_entries</name> <operator>=</operator>  <name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>*</operator> <name>ENTRIES_PER_PAGE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>max_entries</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the new number of entries we need</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Map in a new table</comment>
        <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>new_table</name> <init>= <expr><call><name>map_in_pages</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Copy the old entries, copy the entire pages</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name><operator>*</operator><name>PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Cleanup the old table</comment>
        <expr_stmt><expr><call><name>map_out_pages</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Switch to the new table</comment>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>new_table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="line">// Store the comparison function</comment>
    <expr_stmt><expr><name>cmp_func</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>compare_func</name></name></expr>;</expr_stmt>

    <comment type="line">// Store the table address</comment>
    <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr>;</expr_stmt>

    <comment type="line">// Get the current index</comment>
    <expr_stmt><expr><name>current_index</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>current_index</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// While we can, keep swapping with our parent</comment>
    <while>while <condition>(<expr><name>current_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the parent index</comment>
        <expr_stmt><expr><name>parent_index</name> <operator>=</operator> <call><name>PARENT_ENTRY</name><argument_list>(<argument><expr><name>current_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the parent entry</comment>
        <expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>parent_index</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
        <comment type="line">// Compare the keys, and swap if we need to </comment>
        <if_stmt><if>if <condition>(<expr><call><name>cmp_func</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Move the parent down</comment>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

            <comment type="line">// Move our reference</comment>
            <expr_stmt><expr><name>current_index</name> <operator>=</operator> <name>parent_index</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

        <comment type="line">// We are done swapping</comment>
        </block_content>}</block></if>   <else>else<block type="pseudo"><block_content>
            <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="line">// Insert at the current index</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 

    <comment type="line">// Increase the number of active entries</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Deletes the minimum entry in the heap</comment>
<function><type><name>int</name></type> <name>heap_delmin</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>current_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>used_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Store the left index</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>left_child_index</name></decl>;</decl_stmt>

    <comment type="line">// Check there is a minimum</comment>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Load in the map table</comment>
    <expr_stmt><expr><name>table</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr>;</expr_stmt>

    <comment type="line">// Get the root element</comment>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>current_index</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Store the outputs</comment>
    <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

    <comment type="line">// Reduce the number of active entries</comment>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="line">// Get the active entries</comment>
    <expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name></expr>;</expr_stmt>
   
    <comment type="line">// If there are any other nodes, we may need to move them up</comment>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Move the last element to the root</comment>
        <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <comment type="line">// Loop variables</comment>
        <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>left_child</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>right_child</name></decl>;</decl_stmt>
        <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

        <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>,<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

        <comment type="line">// Load the comparison function</comment>
        <expr_stmt><expr><name>cmp_func</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>compare_func</name></name></expr>;</expr_stmt>


        <while>while <condition>(<expr><name>left_child_index</name> <operator>=</operator> <call><name>LEFT_CHILD</name><argument_list>(<argument><expr><name>current_index</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>left_child_index</name> <operator>&lt;</operator> <name>entries</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Load the left child</comment>
            <expr_stmt><expr><name>left_child</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>left_child_index</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// We have a left + right child</comment>
            <if_stmt><if>if <condition>(<expr><name>left_child_index</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>entries</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Load the right child</comment>
                <expr_stmt><expr><name>right_child</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><operator>(</operator><name>left_child_index</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Find the smaller child</comment>
                <if_stmt><if>if <condition>(<expr><call><name>cmp_func</name><argument_list>(<argument><expr><name><name>left_child</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>right_child</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

                    <comment type="line">// Swap with the left if it is smaller</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>cmp_func</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>left_child</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>SWAP_ENTRIES</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>left_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current_index</name> <operator>=</operator> <name>left_child_index</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <name>left_child</name></expr>;</expr_stmt>

                    <comment type="line">// Otherwise, the current is smaller</comment>
                    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></else></if_stmt>

                <comment type="line">// Right child is smaller</comment>
                </block_content>}</block></if> <else>else <block>{<block_content>

                    <comment type="line">// Swap with the right if it is smaller</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>cmp_func</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>right_child</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>SWAP_ENTRIES</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>right_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current_index</name> <operator>=</operator> <name>left_child_index</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <name>right_child</name></expr>;</expr_stmt>

                    <comment type="line">// Current is smaller</comment>
                    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></else></if_stmt>

                </block_content>}</block></else></if_stmt>


            <comment type="line">// We only have a left child, only do something if the left is smaller</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cmp_func</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>left_child</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>SWAP_ENTRIES</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>left_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>current_index</name> <operator>=</operator> <name>left_child_index</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>current</name> <operator>=</operator> <name>left_child</name></expr>;</expr_stmt>

            <comment type="line">// Done otherwise</comment>
            </block_content>}</block></if>  <else>else<block type="pseudo"><block_content>
                <break>break;</break></block_content></block></else></if_stmt>

        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt> 

    <comment type="line">// Check if we should release a page of memory</comment>
    <expr_stmt><expr><name>used_pages</name> <operator>=</operator> <name>entries</name> <operator>/</operator> <name>ENTRIES_PER_PAGE</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>entries</name> <operator>%</operator> <name>ENTRIES_PER_PAGE</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">// Allow one empty page, but not two</comment>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>used_pages</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>minimum_pages</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the new number of entries we need</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Map in a new table</comment>
        <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>new_table</name> <init>= <expr><call><name>map_in_pages</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Copy the old entries, copy the entire pages</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>used_pages</name><operator>*</operator><name>PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Cleanup the old table</comment>
        <expr_stmt><expr><call><name>map_out_pages</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Switch to the new table</comment>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>new_table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>allocated_pages</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Success</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Allows a user to iterate over all entries, e.g. to free() the memory</comment>
<function><type><name>void</name></type> <name>heap_foreach</name><parameter_list>(<parameter><decl><type><name>heap</name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Store the current index and max index</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>active_entries</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_entry</name><modifier>*</modifier></type> <name>table</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition><expr><name>index</name><operator>&lt;</operator><name>entries</name></expr>;</condition><incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Get the entry</comment>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>GET_ENTRY</name><argument_list>(<argument><expr><name>index</name></expr></argument>,<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Call the user function</comment>
        <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


</unit>
