<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/gtm_serialize_debug.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_serialize_debug.c
 *  Debug functionalities of serialization management
 *
 * Portions Copyright (c) 1996-2010, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *        src/gtm/common/gtm_serialize_debug.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_seq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>dump_transactioninfo_elog</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  ========= GTM_TransactionInfo ========="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_handle: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_client_id: %u"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_in_use: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_in_use</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_gxid: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_state: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_xmin: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_isolevel: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_isolevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_readonly: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_readonly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_proxy_client_id: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_proxy_client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_nodestring: %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_gid: %s"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  sn_xmin: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  sn_xmax: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  sn_xcnt: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Print all the GXIDs in snapshot */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>txn</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name> <argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  sn_xip[%d]: %d"</literal></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xip</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_snapshot_set: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_snapshot_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"gti_vacuum: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_vacuum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  ========================================"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dump_transactions_elog</name><parameter_list>(<parameter><decl><type><name>GTM_Transactions</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"============ GTM_Transactions ============"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_txn_count: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_txn_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_XidGenLock: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>txn</name><operator>-&gt;</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_nextXid: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_nextXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_oldestXid: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_oldestXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_xidVacLimit: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_xidVacLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_xidWarnLimit: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_xidWarnLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_xidStopLimit: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_xidStopLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_xidWrapLimit: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_xidWrapLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_latestCompletedXid: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_latestCompletedXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_recent_global_xmin: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_recent_global_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_lastslot: %d"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gt_lastslot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_txn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_gxid</name> <operator>!=</operator> <name>InvalidGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dump_transactioninfo_elog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txn</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"  gt_TransArrayLock: %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>txn</name><operator>-&gt;</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"=========================================="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
