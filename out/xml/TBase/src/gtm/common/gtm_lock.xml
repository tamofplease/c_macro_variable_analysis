<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/gtm_lock.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_lock.c
 *    Handling for locks in GTM
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>get_abstime_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Acquire the request lock. Block if the lock is not available
 *
 * TODO We should track the locks acquired in the thread specific context. If an
 * error is thrown and cought, we don't want to keep holding to those locks
 * since that would lead to a deadlock. Right now, we assume that the caller
 * will appropriately catch errors and release the locks sanely.
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_RWLockAcquire</name><parameter_list>(<parameter><decl><type><name>GTM_RWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>GTM_LockMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>EINVAL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>indx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>my_threadinfo</name> <init>= <expr><name>GetMyThreadInfo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>my_threadinfo</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>xlog_inserting</name></name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>lock_flag</name></name><operator>&amp;</operator><name>GTM_RWLOCK_FLAG_STORE</name></expr>)</condition>
    <block>{<block_content>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_write_number</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lock</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_counters</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GTM_LOCKMODE_WRITE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Thread %p already owns a read-lock and may deadlock"</literal></expr></argument>,
                            <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Thread %p already owns a write-lock and may deadlock"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>indx</name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>wr_waiters_count</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>indx</name> <operator>&lt;</operator> <name>GTM_LOCK_DEBUG_MAX_READ_TRACKERS</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_waiters</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>wr_waiters_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_granted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>indx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_waiters</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_waiters_count</name></name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_rwlock_wrlock returned %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <case>case <expr><name>GTM_LOCKMODE_READ</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>wr_waiters_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Thread %p already owns a read-lock and "</literal>
                                <literal type="string">"there are blocked writers - this may deadlock"</literal></expr></argument>,
                                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Thread %p already owns a write-lock and may deadlock"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>indx</name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>rd_waiters_count</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>indx</name> <operator>&lt;</operator> <name>GTM_LOCK_DEBUG_MAX_READ_TRACKERS</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_waiters</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_waiters_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <comment type="block">/* Now acquire the lock */</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_granted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name> <operator>==</operator> <name>GTM_LOCK_DEBUG_MAX_READ_TRACKERS</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>indx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_waiters</name><index>[<expr><name>indx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_waiters_count</name></name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_rwlock_rdlock returned %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid lockmode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,<argument><expr><literal type="string">"rw lock acquire fails %d %s"</literal></expr></argument>,<argument><expr><name>status</name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Remember the lock we got. */</comment>
    <if_stmt><if>if <condition>(<expr><name>my_threadinfo</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>max_lock_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name> <operator>&gt;=</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>max_lock_number</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
        <if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>GTM_LOCKMODE_WRITE</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>xlog_inserting</name></name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>lock_flag</name></name><operator>&amp;</operator><name>GTM_RWLOCK_FLAG_STORE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_counters</name><index>[<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_write_number</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_write_number</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>lock</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release previously acquired lock
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_RWLockRelease</name><parameter_list>(<parameter><decl><type><name>GTM_RWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>__XLOG__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>my_threadinfo</name> <init>= <expr><name>GetMyThreadInfo</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>my_threadinfo</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>xlog_inserting</name></name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>lock_flag</name></name><operator>&amp;</operator><name>GTM_RWLOCK_FLAG_STORE</name></expr>)</condition>
    <block>{<block_content>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_write_number</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lock</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>write_counters</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"pthread_rwlock_unlock returned %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>wr_granted</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_granted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator>
                        <name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Thread %p does not own a read-lock"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,<argument><expr><literal type="string">"rw lock release fails %d %s"</literal></expr></argument>,<argument><expr><name>status</name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Remember the lock we got. */</comment>
    <if_stmt><if>if <condition>(<expr><name>true</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>my_threadinfo</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>max_lock_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lock</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
                    <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name><operator>--</operator></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>void</name></type> <name>RWLockCleanUp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>my_threadinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>my_threadinfo</name> <operator>=</operator> <name>GetMyThreadInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"execute lock clean up for thread %p"</literal></expr></argument>,<argument><expr><name>my_threadinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>my_threadinfo</name> <operator>&amp;&amp;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>max_lock_number</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>xlog_inserting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lk_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>locks_hold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>current_write_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Initialize a lock
 */</comment>
<function><type><name>int</name></type>
<name>GTM_RWLockInit</name><parameter_list>(<parameter><decl><type><name>GTM_RWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>lock_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy a lock
 */</comment>
<function><type><name>int</name></type>
<name>GTM_RWLockDestroy</name><parameter_list>(<parameter><decl><type><name>GTM_RWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thr</name> <init>= <expr><name>GetMyThreadInfo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>thr</name> <operator>&amp;&amp;</operator> <name><name>thr</name><operator>-&gt;</operator><name>xlog_inserting</name></name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>lock_flag</name></name><operator>&amp;</operator><name>GTM_RWLOCK_FLAG_STORE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"lock destory %p"</literal></expr></argument>,<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thr</name><operator>-&gt;</operator><name>current_write_number</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>thr</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>lock</name></expr>)</condition>
            <block>{<block_content>
                <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>thr</name><operator>-&gt;</operator><name>current_write_number</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>thr</name><operator>-&gt;</operator><name>write_locks_hold</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>thr</name><operator>-&gt;</operator><name>current_write_number</name></name><operator>--</operator></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Conditionally acquire a lock. If the lock is not available, the function
 * immediately returns without blocking.
 *
 * Returns true if lock is successfully acquired. Otherwise returns false
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_RWLockConditionalAcquire</name><parameter_list>(<parameter><decl><type><name>GTM_RWLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>GTM_LockMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>EINVAL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GTM_LOCKMODE_WRITE</name></expr>:</case>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_trywrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_granted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>wr_owner</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <case>case <expr><name>GTM_LOCKMODE_READ</name></expr>:</case>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pthread_rwlock_tryrdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GTM_LOCK_DEBUG</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name> <operator>==</operator> <name>GTM_LOCK_DEBUG_MAX_READ_TRACKERS</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too many threads waiting for a read-lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders</name><index>[<expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>rd_holders_overflow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_debug_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid lockmode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a mutex lock
 */</comment>
<function><type><name>int</name></type>
<name>GTM_MutexLockInit</name><parameter_list>(<parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy a mutex lock
 */</comment>
<function><type><name>int</name></type>
<name>GTM_MutexLockDestroy</name><parameter_list>(<parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Acquire a mutex lock
 *
 * Return true if the lock is successfully acquired, else return false.
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_MutexLockAcquire</name><parameter_list>(<parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release previously acquired lock
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_MutexLockRelease</name><parameter_list>(<parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>=  <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Conditionally acquire a lock. If the lock is not available, the function
 * immediately returns without blocking.
 *
 * Returns true if lock is successfully acquired. Otherwise returns false
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_MutexLockConditionalAcquire</name><parameter_list>(<parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a condition variable
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CVInit</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy the conditional variable
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CVDestroy</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up all the threads waiting on this conditional variable
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CVBcast</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up only one thread waiting on this conditional variable
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CVSignal</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wait on a conditional variable. The caller must have acquired the mutex lock
 * already.
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CVWait</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>, <parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>get_abstime_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>absmsec</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>absmsec</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000ll</literal> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000ll</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>absmsec</name> <operator>+=</operator> <name>microseconds</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>abstime</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>absmsec</name> <operator>/</operator> <literal type="number">1000ll</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>abstime</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <name>absmsec</name> <operator>%</operator> <literal type="number">1000ll</literal> <operator>*</operator> <literal type="number">1000000ll</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GTM_CVTimeWait</name><parameter_list>(<parameter><decl><type><name>GTM_CV</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>, <parameter><decl><type><name>GTM_MutexLock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>micro_seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>time</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_abstime_wait</name><argument_list>(<argument><expr><name>micro_seconds</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>cv_condvar</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>lk_lock</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SpinLockInit</name><parameter_list>(<parameter><decl><type><name>s_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SpinLockAcquire</name><parameter_list>(<parameter><decl><type><name>s_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while<condition>(<expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SpinLockRelease</name><parameter_list>(<parameter><decl><type><name>s_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>__sync_lock_release</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>GTM_Queue</name> <modifier>*</modifier></type> <name>CreateQueue</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>queue</name> <operator>=</operator> <call><name>palloc0</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Queue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_list</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>            
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>queue</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>DestoryQueue</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>QueuePop</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>                
    </block_content>}</block></if></if_stmt>            
    <expr_stmt><expr><name>ptr</name>                             <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_list</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_list</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>                
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name>                   <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name>  <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QueueEnq</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_list</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name>  <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>QueueIsFull</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>QueueIsEmpty</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>==</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>QueueLength</name><parameter_list>(<parameter><decl><type><name>GTM_Queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_head</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name><operator>)</operator> <operator>%</operator> <name><name>queue</name><operator>-&gt;</operator><name>q_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>q_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

</unit>
