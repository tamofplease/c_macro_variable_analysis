<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/syslogger.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * syslogger.c
 *
 * The system logger (syslogger) catches all
 * stderr output from the gtm thread by redirecting to a pipe, and
 * writes it to a set of logfiles. It's possible to have size and
 * age limits for the logfile configured in gtm.conf. If these limits
 * are reached or passed, the current logfile is closed and a new one
 * is created (rotated) The logfiles are stored in a subdirectory gtm_log.
 *
 * Copyright (c) 2021-Present TBase development team, Tencent
 *
 * IDENTIFICATION
 *	  src/gtm/common/syslogger.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/syslogger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GUC parameters.  Logging_collector cannot be changed after postmaster
 * start, but the rest can change at SIGHUP.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>Logging_collector</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Log_RotationAge</name> <init>= <expr><name>HOURS_PER_DAY</name> <operator>*</operator> <name>MINS_PER_HOUR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Log_RotationSize</name> <init>= <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>Log_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>Log_filename</name> <init>= <expr><literal type="string">"gtm-%Y-%m-%d_%H%M%S.log"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>Log_truncate_on_rotation</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Log_file_mode</name> <init>= <expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Private state
 */</comment>
<decl_stmt><decl><type><name>pg_time_t</name></type> <name>next_rotation_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rotation_disabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>gtmlogFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pg_time_t</name></type> <name>first_syslogger_file_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>last_file_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rotation_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Buffers for saving partial messages from different backends.
 *
 * Keep NBUFFER_LISTS lists of these, with the entry for a given source pid
 * being in the list numbered (pid % NBUFFER_LISTS), so as to cut down on
 * the number of entries we have to examine for any one incoming message.
 * There must never be more than one entry for the same source pid.
 *
 * An inactive buffer is not removed from its list, just held for re-use.
 * An inactive buffer has pid == 0 and undefined contents of data.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int32</name></type>		<name>pid</name></decl>;</decl_stmt>			<comment type="block">/* PID of source process */</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>data</name></decl>;</decl_stmt>		<comment type="block">/* accumulated data, as a StringInfo */</comment>
}</block></struct></type> <name>save_buffer</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBUFFER_LISTS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>gtm_List</name> <modifier>*</modifier></type><name><name>buffer_lists</name><index>[<expr><name>NBUFFER_LISTS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type>	<name><name>syslogPipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>	<name><name>signalPipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>flush_pipe_input</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logbuffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytes_in_logbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>logfile_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type> <name>allow_errors</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>logfile_rotate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>time_based_rotation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_rotation_for</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>logfile_getname</name><parameter_list>(<parameter><decl><type><name>pg_time_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* --------------------------------
 *		pipe protocol handling
 * --------------------------------
 */</comment>

<comment type="block">/*
 * Process data received through the syslogger pipe.
 *
 * This routine interprets the log pipe protocol which sends log messages as
 * (hopefully atomic) chunks - such chunks are detected and reassembled here.
 *
 * The protocol has a header that starts with two nul bytes, then has a 16 bit
 * length, the pid of the sending process, and a flag to indicate if it is
 * the last chunk in a message. Incomplete chunks are saved until we read some
 * more, and non-final chunks are accumulated until we get the final chunk.
 *
 * All of this is to avoid 2 problems:
 * . partial messages being written to logfiles (messes rotation), and
 * . messages from different backends being interleaved (messages garbled).
 *
 * Any non-protocol messages are written out directly. These should only come
 * from non-PostgreSQL sources, however (e.g. third party libraries writing to
 * stderr).
 *
 * logbuffer is the data input buffer, and *bytes_in_logbuffer is the number
 * of bytes present.  On exit, any not-yet-eaten data is left-justified in
 * logbuffer, and *bytes_in_logbuffer is updated.
 */</comment>
<function><type><name>void</name></type>
<name>process_pipe_input</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logbuffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytes_in_logbuffer</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pipe_eof_seen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>logbuffer</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><operator>*</operator><name>bytes_in_logbuffer</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>dest</name> <init>= <expr><name>LOG_DESTINATION_STDERR</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* While we have enough for a header, process data... */</comment>
    <while>while <condition>(<expr><name>count</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr><name>PipeProtoHeader</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PipeProtoHeader</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>			<name>chunklen</name></decl>;</decl_stmt>

        <comment type="block">/* Do we have a valid header? */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PipeProtoHeader</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>nuls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>nuls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
            <name><name>p</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>len</name></name> <operator>&lt;=</operator> <name>PIPE_MAX_PAYLOAD</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator>
             <name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>gtm_List</name>	   <modifier>*</modifier></type><name>buffer_list</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>gtm_ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>save_buffer</name> <modifier>*</modifier></type><name>existing_slot</name> <init>= <expr><name>NULL</name></expr></init></decl>,
                    <decl><type ref="prev"><modifier>*</modifier></type><name>free_slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringInfo</name></type>	<name>str</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>chunklen</name> <operator>=</operator> <name>PIPE_HEADER_SIZE</name> <operator>+</operator> <name><name>p</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>pid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>pipe_eof_seen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* Fall out of loop if we don't have the whole chunk yet */</comment>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>chunklen</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>dest</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'F'</literal><operator>)</operator></expr> ?</condition><then>
                   <expr><name>LOG_DESTINATION_CSVLOG</name></expr> </then><else>: <expr><name>LOG_DESTINATION_STDERR</name></expr></else></ternary></expr>;</expr_stmt>

            <comment type="block">/* Locate any existing buffer for this source pid */</comment>
            <expr_stmt><expr><name>buffer_list</name> <operator>=</operator> <name><name>buffer_lists</name><index>[<expr><name><name>p</name><operator>.</operator><name>pid</name></name> <operator>%</operator> <name>NBUFFER_LISTS</name></expr>]</index></name></expr>;</expr_stmt>
            <macro><name>gtm_foreach</name><argument_list>(<argument>cell</argument>, <argument>buffer_list</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>save_buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>save_buffer</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>pid</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>existing_slot</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>free_slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>free_slot</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block>

            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>p</name><operator>.</operator><name>is_last</name></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Save a complete non-final chunk in a per-pid buffer
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>existing_slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Add chunk to data from preceding chunks */</comment>
                    <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>existing_slot</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
                                           <argument><expr><name>cursor</name> <operator>+</operator> <name>PIPE_HEADER_SIZE</name></expr></argument>,
                                           <argument><expr><name><name>p</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* First chunk of message, save in a new buffer */</comment>
                    <if_stmt><if>if <condition>(<expr><name>free_slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/*
                         * Need a free slot, but there isn't one in the list,
                         * so create a new one and extend the list with it.
                         */</comment>
                        <expr_stmt><expr><name>free_slot</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>save_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>buffer_list</name> <operator>=</operator> <call><name>gtm_lappend</name><argument_list>(<argument><expr><name>buffer_list</name></expr></argument>, <argument><expr><name>free_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>buffer_lists</name><index>[<expr><name><name>p</name><operator>.</operator><name>pid</name></name> <operator>%</operator> <name>NBUFFER_LISTS</name></expr>]</index></name> <operator>=</operator> <name>buffer_list</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>free_slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>pid</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>free_slot</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
                                           <argument><expr><name>cursor</name> <operator>+</operator> <name>PIPE_HEADER_SIZE</name></expr></argument>,
                                           <argument><expr><name><name>p</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/*
                 * Final chunk --- add it to anything saved for that pid, and
                 * either way write the whole thing out.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>existing_slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>existing_slot</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
                                           <argument><expr><name>cursor</name> <operator>+</operator> <name>PIPE_HEADER_SIZE</name></expr></argument>,
                                           <argument><expr><name><name>p</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>write_syslogger_file</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/* Mark the buffer unused, and reclaim string storage */</comment>
                    <expr_stmt><expr><name><name>existing_slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* The whole message was one chunk, evidently. */</comment>
                    <expr_stmt><expr><call><name>write_syslogger_file</name><argument_list>(<argument><expr><name>cursor</name> <operator>+</operator> <name>PIPE_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>len</name></name></expr></argument>,
                                         <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Finished processing this chunk */</comment>
            <expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>chunklen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>chunklen</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Process non-protocol data */</comment>

            <comment type="block">/*
             * Look for the start of a protocol header.  If found, dump data
             * up to there and repeat the loop.  Otherwise, dump it all and
             * fall out of the loop.  (Note: we want to dump it all if at all
             * possible, so as to avoid dividing non-protocol messages across
             * logfiles.  We expect that in many scenarios, a non-protocol
             * message will arrive all in one read(), and we want to respect
             * the read() boundary if possible.)
             */</comment>
            <for>for <control>(<init><expr><name>chunklen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>chunklen</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>chunklen</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>cursor</name><index>[<expr><name>chunklen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <comment type="block">/* fall back on the stderr log as the destination */</comment>
            <expr_stmt><expr><call><name>write_syslogger_file</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>chunklen</name></expr></argument>, <argument><expr><name>LOG_DESTINATION_STDERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>chunklen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>chunklen</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* We don't have a full chunk, so left-align what remains in the buffer */</comment>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cursor</name> <operator>!=</operator> <name>logbuffer</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>logbuffer</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bytes_in_logbuffer</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Force out any buffered data
 *
 * This is currently used only at syslogger shutdown, but could perhaps be
 * useful at other times, so it is careful to leave things in a clean state.
 */</comment>
<function><type><name>void</name></type>
<name>flush_pipe_input</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>logbuffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytes_in_logbuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Dump any incomplete protocol messages */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBUFFER_LISTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>gtm_List</name>	   <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>buffer_lists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gtm_ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

        <macro><name>gtm_foreach</name><argument_list>(<argument>cell</argument>, <argument>list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>save_buffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>save_buffer</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringInfo</name></type>	<name>str</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>write_syslogger_file</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>LOG_DESTINATION_STDERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Mark the buffer unused, and reclaim string storage */</comment>
                <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block></for>

    <comment type="block">/*
     * Force out any remaining pipe data as-is; we don't bother trying to
     * remove any protocol headers that may exist in it.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>bytes_in_logbuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>write_syslogger_file</name><argument_list>(<argument><expr><name>logbuffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bytes_in_logbuffer</name></expr></argument>, <argument><expr><name>LOG_DESTINATION_STDERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bytes_in_logbuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 *		logfile routines
 * --------------------------------
 */</comment>

<comment type="block">/*
 * Write text to the currently open logfile
 *
 * This is exported so that elog.c can call it when am_syslogger is true.
 * This allows the syslogger process to record elog messages of its own,
 * even though its stderr does not point at the syslog pipe.
 */</comment>
<function><type><name>void</name></type>
<name>write_syslogger_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>destination</name> <operator>!=</operator> <name>LOG_DESTINATION_STDERR</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>gtmlogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>gtmlogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* can't use ereport here because of possible recursion */</comment>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"could not write to log file: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Open a new logfile with proper permissions and buffering options.
 *
 * If allow_errors is true, we just log any open failure and return NULL
 * (with errno still correct for the fopen failure).
 * Otherwise, errors are treated as fatal.
 */</comment>
<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type>
<name>logfile_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_errors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mode_t</name></type>		<name>oumask</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Note we do not let Log_file_mode disable IWUSR, since we certainly want
     * to be able to write the files ourselves.
     */</comment>
    <expr_stmt><expr><name>oumask</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>Log_file_mode</name> <operator>|</operator> <name>S_IWUSR</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>oumask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fh</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PG_IOLBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <comment type="block">/* use CRLF line endings on Windows */</comment>
        <expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>allow_errors</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>FATAL</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open log file \"%s\": %m"</literal></expr></argument>,
                               <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>fh</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * perform logfile rotation
 */</comment>
<function><type><name>void</name></type>
<name>logfile_rotate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>time_based_rotation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_rotation_for</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type>	<name>fntime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rotation_requested</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/*
     * When doing a time-based rotation, invent the new logfile name based on
     * the planned rotation time, not current time, to avoid "slippage" in the
     * file name when we don't do the rotation immediately.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>time_based_rotation</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fntime</name> <operator>=</operator> <name>next_rotation_time</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>fntime</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>logfile_getname</name><argument_list>(<argument><expr><name>fntime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Decide whether to overwrite or append.  We can overwrite if (a)
     * Log_truncate_on_rotation is set, (b) the rotation was triggered by
     * elapsed time and not something else, and (c) the computed file name is
     * different from what we were previously logging into.
     *
     * Note: last_file_name should never be NULL here, but if it is, append.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>time_based_rotation</name> <operator>||</operator> <operator>(</operator><name>size_rotation_for</name> <operator>&amp;</operator> <name>LOG_DESTINATION_STDERR</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>Log_truncate_on_rotation</name> <operator>&amp;&amp;</operator> <name>time_based_rotation</name> <operator>&amp;&amp;</operator>
            <name>last_file_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>last_file_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>logfile_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>logfile_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fh</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * ENFILE/EMFILE are not too surprising on a busy system; just
             * keep using the old file till we manage to get a new one.
             * Otherwise, assume something's wrong with Log_directory and stop
             * trying to create files.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENFILE</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EMFILE</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"disabling automatic rotation (use SIGHUP to re-enable)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rotation_disabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>gtmlogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gtmlogFile</name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>

        <comment type="block">/* instead of pfree'ing filename, remember it for next time */</comment>
        <if_stmt><if>if <condition>(<expr><name>last_file_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>last_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>last_file_name</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>set_next_rotation_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * construct logfile name using timestamp information
 *
 * If suffix isn't NULL, append it to the name, replacing any ".log"
 * that may be in the pattern.
 *
 * Result is palloc'd.postgresql-%Y-%m-%d_%H%M%S.log
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>logfile_getname</name><parameter_list>(<parameter><decl><type><name>pg_time_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>	<name>stamp_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>   <name>timeinfo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>Log_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stamp_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stamp_time</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* treat Log_filename as a strftime pattern */</comment>
    <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAXPGPATH</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>Log_filename</name></expr></argument>,
             <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>suffix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">".log"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>MAXPGPATH</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>filename</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Determine the next planned rotation time, and store in next_rotation_time.
 */</comment>
<function><type><name>void</name></type>
<name>set_next_rotation_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pg_time_t</name></type>	<name>now</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>rotinterval</name></decl>;</decl_stmt>

    <comment type="block">/* nothing to do if time-based rotation is disabled */</comment>
    <if_stmt><if>if <condition>(<expr><name>Log_RotationAge</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * The requirements here are to choose the next time &gt; now that is a
     * "multiple" of the log rotation interval.  "Multiple" can be interpreted
     * fairly loosely.  In this version we align to log_timezone rather than
     * GMT.
     */</comment>
    <expr_stmt><expr><name>rotinterval</name> <operator>=</operator> <name>Log_RotationAge</name> <operator>*</operator> <name>SECS_PER_MINUTE</name></expr>;</expr_stmt>	<comment type="block">/* convert to seconds */</comment>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>+=</operator> <name><name>timeinfo</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>-=</operator> <name>now</name> <operator>%</operator> <name>rotinterval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>+=</operator> <name>rotinterval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>-=</operator> <name><name>timeinfo</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next_rotation_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialization of error output file
 */</comment>
<function><type><name>void</name></type>
<name>GTM_LogFileInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Create log directory if not present; ignore errors
     */</comment>
    <expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><name>Log_directory</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>first_syslogger_file_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>logfile_getname</name><argument_list>(<argument><expr><name>first_syslogger_file_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gtmlogFile</name> <operator>=</operator> <call><name>logfile_open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send one byte to the signal pipe, to wake up syslogger
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SendNotifyByte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>		<name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>signalPipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>signalPipe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* If interrupted by signal, just retry */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/*
         * If the pipe is full, we don't need to retry, the data that's there
         * already is enough to wake up WaitLatch.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Oops, the write() failed for some other reason. We might be in a
         * signal handler, so it's not safe to elog(). We have no choice but
         * silently ignore the error.
         */</comment>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read all available data from the signal pipe
 */</comment>
<function><type><name>void</name></type>
<name>GTM_drainNotifyBytes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * There shouldn't normally be more than one byte in the pipe, or maybe a
     * few bytes if multiple processes run SetLatch at the same instant.
     */</comment>
    <decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>signalPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>signalPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if>			<comment type="block">/* the pipe is empty */</comment>
            <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>		<comment type="block">/* retry */</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"read() on signalPipe failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"unexpected EOF on signalPipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* we successfully drained the pipe; no need to read() again */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* else buffer wasn't big enough, so read again */</comment>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GTM_InitSysloggerEpoll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>efd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>event</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>syslogPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>signalPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>efd</name> <operator>=</operator> <call><name>epoll_create1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>efd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"failed to create epoll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>syslogPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>efd</name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>syslogPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"failed to add socket to epoll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>signalPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>epoll_ctl</name> <argument_list>(<argument><expr><name>efd</name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>signalPipe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"failed to add socket to epoll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>efd</name></expr>;</return>
</block_content>}</block></function>
</unit>
