<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/common/gtm_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_utils.c
 *  Utililies of GTM
 *
 * Portions Copyright (c) 1996-2010, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *        src/gtm/common/gtm_utils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>

<struct>struct <name>enum_name</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Advise:
 * Following table can be formatted using gtm_msg.h definitions.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>enum_name</name></name></type> <name><name>message_name_tab</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{<expr><name>MSG_TYPE_INVALID</name></expr>, <expr><literal type="string">"MSG_TYPE_INVALID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SYNC_STANDBY</name></expr>, <expr><literal type="string">"MSG_SYNC_STANDBY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_NODE_REGISTER</name></expr>, <expr><literal type="string">"MSG_NODE_REGISTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_NODE_REGISTER</name></expr>, <expr><literal type="string">"MSG_BKUP_NODE_REGISTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_NODE_UNREGISTER</name></expr>, <expr><literal type="string">"MSG_NODE_UNREGISTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_NODE_UNREGISTER</name></expr>, <expr><literal type="string">"MSG_BKUP_NODE_UNREGISTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_REGISTER_SESSION</name></expr>, <expr><literal type="string">"MSG_REGISTER_SESSION"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_REPORT_XMIN</name></expr>, <expr><literal type="string">"MSG_REPORT_XMIN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_NODE_LIST</name></expr>, <expr><literal type="string">"MSG_NODE_LIST"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_NODE_BEGIN_REPLICATION_INIT</name></expr>, <expr><literal type="string">"MSG_NODE_BEGIN_REPLICATION_INIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_NODE_END_REPLICATION_INIT</name></expr>, <expr><literal type="string">"MSG_NODE_END_REPLICATION_INIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BEGIN_BACKUP</name></expr>, <expr><literal type="string">"MSG_BEGIN_BACKUP"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_END_BACKUP</name></expr>, <expr><literal type="string">"MSG_END_BACKUP"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_BEGIN</name></expr>, <expr><literal type="string">"MSG_TXN_BEGIN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_BEGIN</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_BEGIN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_GLOBAL_TIMESTAMP</name></expr>, <expr><literal type="string">"MSG_BKUP_GLOBAL_TIMESTAMP"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_BEGIN_GETGXID</name></expr>, <expr><literal type="string">"MSG_TXN_BEGIN_GETGXID"</literal></expr>}</block></expr>,    
    <expr><block>{<expr><name>MSG_BKUP_TXN_BEGIN_GETGXID</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_BEGIN_GETGXID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_BEGIN_GETGXID_MULTI</name></expr>, <expr><literal type="string">"MSG_TXN_BEGIN_GETGXID_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_BEGIN_GETGXID_MULTI</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_BEGIN_GETGXID_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_START_PREPARED</name></expr>, <expr><literal type="string">"MSG_TXN_START_PREPARED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_START_PREPARED</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_START_PREPARED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_COMMIT</name></expr>, <expr><literal type="string">"MSG_TXN_COMMIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_COMMIT</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_COMMIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_LOG_GLOBAL_COMMIT</name></expr>, <expr><literal type="string">"MSG_TXN_LOG_GLOBAL_COMMIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_LOG_COMMIT</name></expr>, <expr><literal type="string">"MSG_TXN_LOG_COMMIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_LOG_GLOBAL_SCAN</name></expr>, <expr><literal type="string">"MSG_TXN_LOG_GLOBAL_SCAN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_LOG_SCAN</name></expr>, <expr><literal type="string">"MSG_TXN_LOG_SCAN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_COMMIT_MULTI</name></expr>, <expr><literal type="string">"MSG_TXN_COMMIT_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_COMMIT_MULTI</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_COMMIT_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_COMMIT_PREPARED</name></expr>, <expr><literal type="string">"MSG_TXN_COMMIT_PREPARED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_COMMIT_PREPARED</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_COMMIT_PREPARED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_PREPARE</name></expr>, <expr><literal type="string">"MSG_TXN_PREPARE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_PREPARE</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_PREPARE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_ROLLBACK</name></expr>, <expr><literal type="string">"MSG_TXN_ROLLBACK"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_ROLLBACK</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_ROLLBACK"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_ROLLBACK_MULTI</name></expr>, <expr><literal type="string">"MSG_TXN_ROLLBACK_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_ROLLBACK_MULTI</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_ROLLBACK_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GET_GID_DATA</name></expr>, <expr><literal type="string">"MSG_TXN_GET_GID_DATA"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GET_GXID</name></expr>, <expr><literal type="string">"MSG_TXN_GET_GXID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_GET_GXID</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_GET_GXID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GET_NEXT_GXID</name></expr>, <expr><literal type="string">"MSG_TXN_GET_NEXT_GXID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GXID_LIST</name></expr>, <expr><literal type="string">"MSG_TXN_GXID_LIST"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SNAPSHOT_GET</name></expr>, <expr><literal type="string">"MSG_SNAPSHOT_GET"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SNAPSHOT_GET_MULTI</name></expr>, <expr><literal type="string">"MSG_SNAPSHOT_GET_MULTI"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SNAPSHOT_GXID_GET</name></expr>, <expr><literal type="string">"MSG_SNAPSHOT_GXID_GET"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_INIT</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_INIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_INIT</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_INIT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_GET_CURRENT</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_GET_CURRENT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_GET_NEXT</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_GET_NEXT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_GET_NEXT</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_GET_NEXT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_GET_LAST</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_GET_LAST"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_SET_VAL</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_SET_VAL"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_SET_VAL</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_SET_VAL"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_RESET</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_RESET"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_RESET</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_RESET"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_CLOSE</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_CLOSE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_CLOSE</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_CLOSE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_RENAME</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_RENAME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_RENAME</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_RENAME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_RENAME</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_RENAME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_ALTER</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_ALTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_SEQUENCE_ALTER</name></expr>, <expr><literal type="string">"MSG_BKUP_SEQUENCE_ALTER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_LIST</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_LIST"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GET_STATUS</name></expr>, <expr><literal type="string">"MSG_TXN_GET_STATUS"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_GET_ALL_PREPARED</name></expr>, <expr><literal type="string">"MSG_TXN_GET_ALL_PREPARED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TXN_BEGIN_GETGXID_AUTOVACUUM</name></expr>, <expr><literal type="string">"MSG_TXN_BEGIN_GETGXID_AUTOVACUUM"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BKUP_TXN_BEGIN_GETGXID_AUTOVACUUM</name></expr>, <expr><literal type="string">"MSG_BKUP_TXN_BEGIN_GETGXID_AUTOVACUUM"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_DATA_FLUSH</name></expr>, <expr><literal type="string">"MSG_DATA_FLUSH"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_BACKEND_DISCONNECT</name></expr>, <expr><literal type="string">"MSG_BACKEND_DISCONNECT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_TYPE_COUNT</name></expr>, <expr><literal type="string">"MSG_TYPE_COUNT"</literal></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr><block>{<expr><name>MSG_GET_STORAGE</name></expr>, <expr><literal type="string">"MSG_GET_STORAGE"</literal></expr>}</block></expr>,    
    <expr><block>{<expr><name>MSG_TXN_FINISH_GID</name></expr>, <expr><literal type="string">"MSG_TXN_FINISH_GID"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_LIST_GTM_STORE</name></expr>, <expr><literal type="string">"MSG_LIST_GTM_STORE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_LIST_GTM_STORE_SEQ</name></expr>, <expr><literal type="string">"MSG_LIST_GTM_STORE_SEQ"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_LIST_GTM_STORE_TXN</name></expr>, <expr><literal type="string">"MSG_LIST_GTM_STORE_TXN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_CHECK_GTM_STORE_SEQ</name></expr>, <expr><literal type="string">"MSG_CHECK_GTM_STORE_SEQ"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_CHECK_GTM_STORE_TXN</name></expr>, <expr><literal type="string">"MSG_CHECK_GTM_STORE_TXN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_CLEAN_SESSION_SEQ</name></expr>, <expr><literal type="string">"MSG_CLEAN_SESSION_SEQ"</literal></expr>}</block></expr>,

    <expr><block>{<expr><name>MSG_GETGTS</name></expr>,    <expr><literal type="string">"MSG_GETGTS"</literal></expr>}</block></expr>,                
    <expr><block>{<expr><name>MSG_GETGTS_MULTI</name></expr>, <expr><literal type="string">"MSG_GETGTS_MULTI"</literal></expr>}</block></expr>,

    <expr><block>{<expr><name>MSG_CHECK_GTM_STATUS</name></expr>, <expr><literal type="string">"MSG_CHECK_GTM_STATUS"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <expr><block>{<expr><name>MSG_START_REPLICATION</name></expr>,<expr><literal type="string">"MSG_START_REPLICATION"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_GET_REPLICATION_STATUS</name></expr>,<expr><literal type="string">"MSG_GET_REPLICATION_STATUS"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_GET_REPLICATION_TRANSFER</name></expr>,<expr><literal type="string">"MSG_GET_REPLICATION_TRANSFER"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>MSG_GET_STATISTICS</name></expr>, <expr><literal type="string">"MSG_GET_STATISTICS"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_GET_ERRORLOG</name></expr>, <expr><literal type="string">"MSG_GET_ERRORLOG"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_SEQUENCE_COPY</name></expr>, <expr><literal type="string">"MSG_SEQUENCE_COPY"</literal></expr>}</block></expr>,

    <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>enum_name</name></name></type> <name><name>result_name_tab</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{<expr><name>SYNC_STANDBY_RESULT</name></expr>, <expr><literal type="string">"SYNC_STANDBY_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NODE_REGISTER_RESULT</name></expr>, <expr><literal type="string">"NODE_REGISTER_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NODE_UNREGISTER_RESULT</name></expr>, <expr><literal type="string">"NODE_UNREGISTER_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NODE_LIST_RESULT</name></expr>, <expr><literal type="string">"NODE_LIST_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NODE_BEGIN_REPLICATION_INIT_RESULT</name></expr>, <expr><literal type="string">"NODE_BEGIN_REPLICATION_INIT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NODE_END_REPLICATION_INIT_RESULT</name></expr>, <expr><literal type="string">"NODE_END_REPLICATION_INIT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>BEGIN_BACKUP_SUCCEED_RESULT</name></expr>, <expr><literal type="string">"BEGIN_BACKUP_SUCCEED_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>BEGIN_BACKUP_FAIL_RESULT</name></expr>, <expr><literal type="string">"BEGIN_BACKUP_FAIL_RESULT"</literal></expr>}</block></expr>,    
    <expr><block>{<expr><name>END_BACKUP_RESULT</name></expr>, <expr><literal type="string">"END_BACKUP_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_BEGIN_RESULT</name></expr>, <expr><literal type="string">"TXN_BEGIN_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_BEGIN_GETGXID_RESULT</name></expr>, <expr><literal type="string">"TXN_BEGIN_GETGXID_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_BEGIN_GETGXID_MULTI_RESULT</name></expr>, <expr><literal type="string">"TXN_BEGIN_GETGXID_MULTI_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_PREPARE_RESULT</name></expr>, <expr><literal type="string">"TXN_PREPARE_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_START_PREPARED_RESULT</name></expr>, <expr><literal type="string">"TXN_START_PREPARED_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_LOG_TRANSACTION_RESULT</name></expr>, <expr><literal type="string">"TXN_LOG_TRANSACTION_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_LOG_SCAN_RESULT</name></expr>, <expr><literal type="string">"TXN_LOG_SCAN_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_COMMIT_PREPARED_RESULT</name></expr>, <expr><literal type="string">"TXN_COMMIT_PREPARED_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_COMMIT_RESULT</name></expr>, <expr><literal type="string">"TXN_COMMIT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_COMMIT_MULTI_RESULT</name></expr>, <expr><literal type="string">"TXN_COMMIT_MULTI_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_ROLLBACK_RESULT</name></expr>, <expr><literal type="string">"TXN_ROLLBACK_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_ROLLBACK_MULTI_RESULT</name></expr>, <expr><literal type="string">"TXN_ROLLBACK_MULTI_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GET_GID_DATA_RESULT</name></expr>, <expr><literal type="string">"TXN_GET_GID_DATA_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GET_GXID_RESULT</name></expr>, <expr><literal type="string">"TXN_GET_GXID_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GET_NEXT_GXID_RESULT</name></expr>, <expr><literal type="string">"TXN_GET_NEXT_GXID_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GXID_LIST_RESULT</name></expr>, <expr><literal type="string">"TXN_GXID_LIST_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_GET_RESULT</name></expr>, <expr><literal type="string">"SNAPSHOT_GET_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_GET_MULTI_RESULT</name></expr>, <expr><literal type="string">"SNAPSHOT_GET_MULTI_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_GXID_GET_RESULT</name></expr>, <expr><literal type="string">"SNAPSHOT_GXID_GET_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_INIT_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_INIT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_GET_CURRENT_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_GET_CURRENT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_GET_NEXT_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_GET_NEXT_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_GET_LAST_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_GET_LAST_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_SET_VAL_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_SET_VAL_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_RESET_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_RESET_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_CLOSE_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_CLOSE_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_RENAME_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_RENAME_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_ALTER_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_ALTER_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_LIST_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_LIST_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GET_STATUS_RESULT</name></expr>, <expr><literal type="string">"TXN_GET_STATUS_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_GET_ALL_PREPARED_RESULT</name></expr>, <expr><literal type="string">"TXN_GET_ALL_PREPARED_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>TXN_BEGIN_GETGXID_AUTOVACUUM_RESULT</name></expr>, <expr><literal type="string">"TXN_BEGIN_GETGXID_AUTOVACUUM_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>REPORT_XMIN_RESULT</name></expr>, <expr><literal type="string">"REPORT_XMIN_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>RESULT_TYPE_COUNT</name></expr>, <expr><literal type="string">"RESULT_TYPE_COUNT"</literal></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <expr><block>{<expr><name>STORAGE_TRANSFER_RESULT</name></expr>, <expr><literal type="string">"STORAGE_TRANSFER_RESULT"</literal></expr>}</block></expr>,    
    <expr><block>{<expr><name>TXN_FINISH_GID_RESULT</name></expr>, <expr><literal type="string">"TXN_FINISH_GID_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_DB_SEQUENCE_RENAME_RESULT</name></expr>, <expr><literal type="string">"DB_SEQUENCE_RENAME_RESULT"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>MSG_GET_GTM_STATISTICS_RESULT</name></expr>, <expr><literal type="string">"MSG_GET_GTM_STATISTICS_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>MSG_GET_GTM_ERRORLOG_RESULT</name></expr>, <expr><literal type="string">"MSG_GET_GTM_ERRORLOG_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQUENCE_COPY_RESULT</name></expr>, <expr><literal type="string">"SEQUENCE_COPY_RESULT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>message_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>message_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>result_max</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>gtm_util_init_nametabs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>message_name</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>result_name</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>message_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>message_max</name> <operator>&lt;</operator> <name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>message_max</name> <operator>=</operator> <name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>message_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>message_max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>message_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>message_max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>message_name</name><index>[<expr><name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name> <operator>=</operator> <name><name>message_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>result_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>result_max</name> <operator>&lt;</operator> <name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result_max</name> <operator>=</operator> <name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>result_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>result_max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>result_max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>result_name</name><index>[<expr><name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name> <operator>=</operator> <name><name>result_name_tab</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>gtm_util_message_name</name><parameter_list>(<parameter><decl><type><name>GTM_MessageType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>message_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gtm_util_init_nametabs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>message_max</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="string">"UNKNOWN_MESSAGE"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>message_name</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>gtm_util_result_name</name><parameter_list>(<parameter><decl><type><name>GTM_ResultType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>result_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gtm_util_init_nametabs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>result_max</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="string">"UNKNOWN_RESULT"</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>result_name</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
