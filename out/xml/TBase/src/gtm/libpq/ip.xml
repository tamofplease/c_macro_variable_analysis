<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/libpq/ip.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ip.c
 *      IPv6-aware network access.
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL: pgsql/src/backend/libpq/ip.c,v 1.43 2009/01/01 17:23:42 momjian Exp $
 *
 * This file and the IPV6 implementation were initially provided by
 * Nigel Kukard &lt;nkukard@lbsd.net&gt;, Linux Based Systems Design
 * http://www.lbsd.net.
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* This is intended to be used in both frontend and backend, so use c.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NETINET_TCP_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/ip.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>range_sockaddr_AF_INET</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>netaddr</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>netmask</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>range_sockaddr_AF_INET6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>netaddr</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>netmask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getaddrinfo_unix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hintsp</name></decl></parameter>,
				 <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getnameinfo_unix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodelen</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servicelen</name></decl></parameter>,
				 <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 *    pg_getaddrinfo_all - get address info for Unix, IPv4 and IPv6 sockets
 */</comment>
<function><type><name>int</name></type>
<name>pg_getaddrinfo_all</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type> <name>hintp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>rc</name></decl>;</decl_stmt>

    <comment type="block">/* not all versions of getaddrinfo() zero *result on failure */</comment>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>hintp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>getaddrinfo_unix</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hintp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* NULL has special meaning to getaddrinfo(). */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>hostname</name> <operator>||</operator> <name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>hostname</name></expr></else></ternary></expr></argument>,
                     <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hintp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *    pg_freeaddrinfo_all - free addrinfo structures for IPv4, IPv6, or Unix
 *
 * Note: the ai_family field of the original hint structure must be passed
 * so that we can tell whether the addrinfo struct was built by the system's
 * getaddrinfo() routine or our own getaddrinfo_unix() routine.  Some versions
 * of getaddrinfo() might be willing to return AF_UNIX addresses, so it's
 * not safe to look at ai_family in the addrinfo itself.
 */</comment>
<function><type><name>void</name></type>
<name>pg_freeaddrinfo_all</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hint_ai_family</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type> <name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <comment type="block">/* struct was built by getaddrinfo() */</comment>
        <if_stmt><if>if <condition>(<expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 *    pg_getnameinfo_all - get name info for Unix, IPv4 and IPv6 sockets
 *
 * The API of this routine differs from the standard getnameinfo() definition
 * in two ways: first, the addr parameter is declared as sockaddr_storage
 * rather than struct sockaddr, and second, the node and service fields are
 * guaranteed to be filled with something even on failure return.
 */</comment>
<function><type><name>int</name></type>
<name>pg_getnameinfo_all</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodelen</name></decl></parameter>,
                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servicelen</name></decl></parameter>,
                   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>rc</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>getnameinfo_unix</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>,
							  <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>,
							  <argument><expr><name>service</name></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>,
							  <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>,
                     <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>,
                     <argument><expr><name>service</name></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>,
                     <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_range_sockaddr - is addr within the subnet specified by netaddr/netmask ?
 *
 * Note: caller must already have verified that all three addresses are
 * in the same address family; and AF_UNIX addresses are not supported.
 */</comment>
<function><type><name>int</name></type>
<name>pg_range_sockaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>netaddr</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>netmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>range_sockaddr_AF_INET</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></argument>,
                                      <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>netaddr</name></expr></argument>,
                                      <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>netmask</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
    <if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>range_sockaddr_AF_INET6</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></argument>,
                                       <argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>netaddr</name></expr></argument>,
                                       <argument><expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>netmask</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>range_sockaddr_AF_INET</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>netaddr</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type> <name>netmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>^</operator> <name><name>netaddr</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>&amp;</operator>
         <name><name>netmask</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>range_sockaddr_AF_INET6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>netaddr</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>netmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>addr</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>netaddr</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator>
             <name><name>netmask</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* HAVE_IPV6 */</comment>

<comment type="block">/*
 *    pg_sockaddr_cidr_mask - make a network mask of the appropriate family
 *      and required number of significant bits
 *
 * The resulting mask is placed in *mask, which had better be big enough.
 *
 * Return value is 0 if okay, -1 if not.
 */</comment>
<function><type><name>int</name></type>
<name>pg_sockaddr_cidr_mask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>numbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>long</name></type>        <name>bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>numbits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>numbits</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>family</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AF_INET</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>mask4</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type>        <name>maskl</name></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <comment type="block">/* avoid "x &lt;&lt; 32", which is not portable */</comment>
                <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>maskl</name> <operator>=</operator> <operator>(</operator><literal type="number">0xffffffffUL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>bits</name><operator>)</operator><operator>)</operator>
                        <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>maskl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <expr_stmt><expr><name><name>mask4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>maskl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mask4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
        <case>case <expr><name>AF_INET6</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>mask6</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>mask6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>mask6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>mask6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
                            <operator>(</operator><literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>bits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mask6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>mask</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>

<comment type="block">/*
 * pg_promote_v4_to_v6_addr --- convert an AF_INET addr to AF_INET6, using
 *        the standard convention for IPv4 addresses mapped into IPv6 world
 *
 * The passed addr is modified in place; be sure it is large enough to
 * hold the result!  Note that we only worry about setting the fields
 * that pg_range_sockaddr will look at.
 */</comment>
<function><type><name>void</name></type>
<name>pg_promote_v4_to_v6_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>addr6</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>ip4addr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr4</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ip4addr</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pg_promote_v4_to_v6_mask --- convert an AF_INET netmask to AF_INET6, using
 *        the standard convention for IPv4 addresses mapped into IPv6 world
 *
 * This must be different from pg_promote_v4_to_v6_addr because we want to
 * set the high-order bits to 1's not 0's.
 *
 * The passed addr is modified in place; be sure it is large enough to
 * hold the result!  Note that we only worry about setting the fields
 * that pg_range_sockaddr will look at.
 */</comment>
<function><type><name>void</name></type>
<name>pg_promote_v4_to_v6_mask</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>addr6</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>ip4addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr4</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ip4addr</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr6</name><operator>.</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ip4addr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* HAVE_IPV6 */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>

<comment type="block">/* -------
 *	getaddrinfo_unix - get unix socket info using IPv6-compatible API
 *
 *	Bugs: only one addrinfo is set even though hintsp is NULL or
 *		  ai_socktype is 0
 *		  AI_CANONNAME is not supported.
 * -------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>getaddrinfo_unix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hintsp</name></decl></parameter>,
				 <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>aip</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>unp</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>unp</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>hintsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>hintsp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>!=</operator> <name>AF_UNIX</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* shouldn't have been called */</comment>
		<return>return <expr><name>EAI_FAIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>aip</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>aip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>unp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>unp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EAI_MEMORY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>hints</name><operator>.</operator><name>ai_socktype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>hints</name><operator>.</operator><name>ai_protocol</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>aip</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>unp</name><operator>-&gt;</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>unp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aip</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>unp</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRUCT_SOCKADDR_STORAGE_SS_LEN</name></cpp:ifdef>
	<expr_stmt><expr><name><name>unp</name><operator>-&gt;</operator><name>sun_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an address to a hostname.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>getnameinfo_unix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodelen</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servicelen</name></decl></parameter>,
				 <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Invalid arguments. */</comment>
	<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sa</name><operator>-&gt;</operator><name>sun_family</name></name> <operator>!=</operator> <name>AF_UNIX</name> <operator>||</operator>
		<operator>(</operator><name>node</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>service</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"[local]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name>nodelen</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>servicelen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>sa</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name>servicelen</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_UNIX_SOCKETS */</comment>
</unit>
