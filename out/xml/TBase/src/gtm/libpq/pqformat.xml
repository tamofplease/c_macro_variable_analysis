<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/libpq/pqformat.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pqformat.c
 *        Routines for formatting and parsing frontend/backend messages
 *
 * Outgoing messages are built up in a StringInfo buffer (which is expansible)
 * and then sent in a single call to pq_putmessage.  This module provides data
 * formatting/conversion routines that are needed to produce valid messages.
 * Note in particular the distinction between "raw data" and "text"; raw data
 * is message protocol characters and binary values that are not subject to
 * character set conversion, while text is converted by character encoding
 * rules.
 *
 * Incoming messages are similarly read into a StringInfo buffer, via
 * pq_getmessage, and then parsed and converted from that using the routines
 * in this module.
 *
 * These same routines support reading and writing of external binary formats
 * (typsend/typreceive routines).  The conversion routines for individual
 * data types are exactly the same, only initialization and completion
 * are different.
 *
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *    $PostgreSQL: pgsql/src/backend/libpq/pqformat.c,v 1.48 2009/01/01 17:23:42 momjian Exp $
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * INTERFACE ROUTINES
 * Message assembly and output:
 *        pq_beginmessage - initialize StringInfo buffer
 *        pq_sendbyte        - append a raw byte to a StringInfo buffer
 *        pq_sendint        - append a binary integer to a StringInfo buffer
 *        pq_sendint64    - append a binary 8-byte int to a StringInfo buffer
 *        pq_sendfloat4    - append a float4 to a StringInfo buffer
 *        pq_sendfloat8    - append a float8 to a StringInfo buffer
 *        pq_sendbytes    - append raw data to a StringInfo buffer
 *        pq_sendcountedtext - append a counted text string (with character set conversion)
 *        pq_sendtext        - append a text string (with conversion)
 *        pq_sendstring    - append a null-terminated text string (with conversion)
 *        pq_send_ascii_string - append a null-terminated text string (without conversion)
 *        pq_endmessage    - send the completed message to the frontend
 * Note: it is also possible to append data to the StringInfo buffer using
 * the regular StringInfo routines, but this is discouraged since required
 * character set conversion may not occur.
 *
 * typsend support (construct a bytea value containing external binary data):
 *        pq_begintypsend - initialize StringInfo buffer
 *        pq_endtypsend    - return the completed string as a "bytea*"
 *
 * Special-case message output:
 *        pq_puttextmessage - generate a character set-converted message in one step
 *        pq_putemptymessage - convenience routine for message with empty body
 *
 * Message parsing after input:
 *        pq_getmsgbyte    - get a raw byte from a message buffer
 *        pq_getmsgint    - get a binary integer from a message buffer
 *        pq_getmsgint64    - get a binary 8-byte int from a message buffer
 *        pq_getmsgfloat4 - get a float4 from a message buffer
 *        pq_getmsgfloat8 - get a float8 from a message buffer
 *        pq_getmsgbytes    - get raw data from a message buffer
 *        pq_copymsgbytes - copy raw data from a message buffer
 *        pq_getmsgtext    - get a counted text string (with conversion)
 *        pq_getmsgstring - get a null-terminated text string (with conversion)
 *        pq_getmsgend    - verify message fully consumed
 *        pq_getmsgunreadlen - get length of the unread data in the message buffer
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>


<comment type="block">/* --------------------------------
 *        pq_beginmessage        - initialize for sending a message
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_beginmessage</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We stash the message type into the buffer's cursor field, expecting
     * that the pq_sendXXX routines won't touch it.  We could alternatively
     * make it the first byte of the buffer contents, but this seems easier.
     */</comment>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>msgtype</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendbyte        - append a raw byte to a StringInfo buffer
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendbyte</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>byt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>byt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendbytes    - append raw data to a StringInfo buffer
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendbytes</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendcountedtext - append a counted text string (with character set conversion)
 *
 * The data sent to the frontend by this routine is a 4-byte count field
 * followed by the string.    The count includes itself or not, as per the
 * countincludesself flag (pre-3.0 protocol requires it to include itself).
 * The passed text string need not be null-terminated, and the data sent
 * to the frontend isn't either.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendcountedtext</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,
                   <parameter><decl><type><name>bool</name></type> <name>countincludesself</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>extra</name> <init>= <expr><ternary><condition><expr><name>countincludesself</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <name>extra</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendtext        - append a text string (with conversion)
 *
 * The passed text string need not be null-terminated, and the data sent
 * to the frontend isn't either.  Note that this is not actually useful
 * for direct frontend transmissions, since there'd be no way for the
 * frontend to determine the string length.  But it is useful for binary
 * format conversions.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendtext</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendstring    - append a null-terminated text string (with conversion)
 *
 * NB: passed text string must be null-terminated, and so is the data
 * sent to the frontend.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendstring</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_send_ascii_string    - append a null-terminated text string (without conversion)
 *
 * This function intentionally bypasses encoding conversion, instead just
 * silently replacing any non-7-bit-ASCII characters with question marks.
 * It is used only when we are having trouble sending an error message to
 * the client with normal localization and encoding conversion.  The caller
 * should already have taken measures to ensure the string is just ASCII;
 * the extra work here is just to make certain we don't send a badly encoded
 * string to the client (which might or might not be robust about that).
 *
 * NB: passed text string must be null-terminated, and so is the data
 * sent to the frontend.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_send_ascii_string</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>    <name>ch</name> <init>= <expr><operator>*</operator><name>str</name><operator>++</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>appendStringInfoCharMacro</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendint        - append a binary integer to a StringInfo buffer
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendint</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>n8</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>n16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>n32</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>b</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>n8</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name>n16</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>uint16</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n16</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported integer size %d"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendint64    - append a binary 8-byte int to a StringInfo buffer
 *
 * It is tempting to merge this with pq_sendint, but we'd have to make the
 * argument int64 for all data widths --- that could be a big performance
 * hit on machines where int64 isn't efficient.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendint64</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>n32</name></decl>;</decl_stmt>

    <comment type="block">/* High order half first, since we're doing MSB-first */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INT64_IS_BUSTED</name></cpp:ifdef>
    <comment type="block">/* don't try a right shift of 32 on a 32-bit word */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now the low order half */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendfloat4    - append a float4 to a StringInfo buffer
 *
 * The point of this routine is to localize knowledge of the external binary
 * representation of float4, which is a component of several datatypes.
 *
 * We currently assume that float4 should be byte-swapped in the same way
 * as int4.  This rule is not perfect but it gives us portability across
 * most IEEE-float-using architectures.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendfloat4</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>float4</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float4</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name>i</name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>swap</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>swap</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_sendfloat8    - append a float8 to a StringInfo buffer
 *
 * The point of this routine is to localize knowledge of the external binary
 * representation of float8, which is a component of several datatypes.
 *
 * We currently assume that float8 should be byte-swapped in the same way
 * as int8.  This rule is not perfect but it gives us portability across
 * most IEEE-float-using architectures.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_sendfloat8</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>float8</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INT64_IS_BUSTED</name></cpp:ifdef>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float8</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
    <comment type="block">/* machine seems to be big-endian, send h[0] first */</comment>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* machine seems to be little-endian, send h[1] first */</comment>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* INT64 works */</comment>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float8</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64</name></type>        <name>i</name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>swap</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_endmessage    - send the completed message to the frontend
 *
 * The data buffer is pfree()d, but if the StringInfo was allocated with
 * makeStringInfo then the caller must still pfree it.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_endmessage</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* msgtype was saved in cursor field */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pq_putmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* no need to complain about any failure, since pqcomm.c already did */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 *        pq_puttextmessage - generate a character set-converted message in one step
 *
 *        This is the same as the pqcomm.c routine pq_putmessage, except that
 *        the message body is a null-terminated string to which encoding
 *        conversion applies.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_puttextmessage</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pq_putmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><name>msgtype</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 *        pq_putemptymessage - convenience routine for message with empty body
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_putemptymessage</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pq_putmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><name>msgtype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 *        pq_getmsgbyte    - get a raw byte from a message buffer
 * --------------------------------
 */</comment>
<function><type><name>int</name></type>
<name>pq_getmsgbyte</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no data left in message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgint    - get a binary integer from a message buffer
 *
 *        Values are treated as unsigned.
 * --------------------------------
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>pq_getmsgint</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>n8</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>n16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>n32</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>b</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>n8</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n16</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>n16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported integer size %d"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>            <comment type="block">/* keep compiler quiet */</comment>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgint64    - get a binary 8-byte int from a message buffer
 *
 * It is tempting to merge this with pq_getmsgint, but we'd have to make the
 * result int64 for all data widths --- that could be a big performance
 * hit on machines where int64 isn't efficient.
 * --------------------------------
 */</comment>
<function><type><name>int64</name></type>
<name>pq_getmsgint64</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>h32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>l32</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>h32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>l32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>h32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>l32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INT64_IS_BUSTED</name></cpp:ifdef>
    <comment type="block">/* error out if incoming value is wider than 32 bits */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>l32</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>h32</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>h32</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"binary value is out of range for type bigint"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>h32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>|=</operator> <name>l32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgfloat4 - get a float4 from a message buffer
 *
 * See notes for pq_sendfloat4.
 * --------------------------------
 */</comment>
<function><type><name>float4</name></type>
<name>pq_getmsgfloat4</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float4</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name>i</name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>swap</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgfloat8 - get a float8 from a message buffer
 *
 * See notes for pq_sendfloat8.
 * --------------------------------
 */</comment>
<function><type><name>float8</name></type>
<name>pq_getmsgfloat8</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INT64_IS_BUSTED</name></cpp:ifdef>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float8</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type>        <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
    <comment type="block">/* machine seems to be big-endian, receive h[0] first */</comment>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* machine seems to be little-endian, receive h[1] first */</comment>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name><name>swap</name><operator>.</operator><name>f</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* INT64 works */</comment>
    <union>union
    <block>{
        <decl_stmt><decl><type><name>float8</name></type>        <name>f</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64</name></type>        <name>i</name></decl>;</decl_stmt>
    }</block>            <decl><name>swap</name></decl>;</union>

    <expr_stmt><expr><name><name>swap</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>swap</name><operator>.</operator><name>f</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgbytes    - get raw data from a message buffer
 *
 *        Returns a pointer directly into the message buffer; note this
 *        may not have any particular alignment.
 * --------------------------------
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pq_getmsgbytes</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>datalen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>datalen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"insufficient data left in message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>datalen</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_copymsgbytes - copy raw data from a message buffer
 *
 *        Same as above, except data is copied to caller's buffer.
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_copymsgbytes</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>datalen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>datalen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"insufficient data left in message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>datalen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgtext    - get a counted text string (with conversion)
 *
 *        Always returns a pointer to a freshly palloc'd result.
 *        The result has a trailing null, *and* we return its strlen in *nbytes.
 * --------------------------------
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pq_getmsgtext</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rawbytes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>rawbytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>rawbytes</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"insufficient data left in message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>rawbytes</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>rawbytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>rawbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>rawbytes</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>nbytes</name> <operator>=</operator> <name>rawbytes</name></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgstring - get a null-terminated text string (with conversion)
 *
 *        May return a pointer directly into the message buffer, or a pointer
 *        to a palloc'd conversion result.
 * --------------------------------
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pq_getmsgstring</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>slen</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * It's safe to use strlen() here because a StringInfo is guaranteed to
     * have a trailing null byte.  But check we found a null inside the
     * message.
     */</comment>
    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+</operator> <name>slen</name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid string in message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *        pq_getmsgend    - verify message fully consumed
 * --------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>pq_getmsgend</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name> <operator>!=</operator> <name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid message format"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------
 *         pq_getmsgunreadlen - get length of the unread data in the message
 *         buffer
 * --------------------------------
 */</comment>
<function><type><name>int</name></type>
<name>pq_getmsgunreadlen</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
