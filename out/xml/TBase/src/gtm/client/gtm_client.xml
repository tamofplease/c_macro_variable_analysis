<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/client/gtm_client.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm-client.c
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/* Time in seconds to wait for a response from GTM */</comment>
<comment type="block">/* We should consider making this a GUC */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLIENT_GTM_TIMEOUT</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>GTM_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_GTM_TIMEOUT</name></cpp:macro> <cpp:value>3600</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_GTM_TIMEOUT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RETRY_SLEEP_MICRO</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>Backup_synchronously</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name>  <modifier>*</modifier></type><name>application_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>GTM_FreeResult</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>remote_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>GTM_Result</name> <modifier>*</modifier></type><name>makeEmptyResultIfIsNull</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>oldres</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>commit_prepared_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
                                                <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
                                                <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>start_prepared_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                                               <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>log_commit_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
                                                <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                                                  <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>,
                                                  <parameter><decl><type><name>bool</name></type> <name>isGlobal</name></decl></parameter>,
                                                  <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
                                                  <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl></parameter>, 
                                                  <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_ts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>log_scan_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
                                              <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>, 
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>start_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_start_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_complete_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                             <parameter><decl><type><name>int64</name></type>  <name>scan_number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prepare_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>abort_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>abort_transaction_multi_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>open_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
                                  <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                                  <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                                  <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_next_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
                  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,
                  <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_val_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reset_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>commit_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>close_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rename_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>alter_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
        <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
        <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>node_register_worker</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodePort</name></type> <name>port</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafolder</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodeStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>node_unregister_worker</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>node_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>report_barrier_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Make an empty result if old one is null.
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_Result</name> <modifier>*</modifier></type>
<name>makeEmptyResultIfIsNull</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>oldres</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>oldres</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>GTM_Result</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>oldres</name></expr>;</return></block_content></block></else></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Connection Management API
 */</comment>
<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>connect_gtm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connect_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>disconnect_gtm</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * begin_replication_initial_sync() acquires several locks to prepare
 * for copying internal transaction, xid and sequence information
 * to the standby node at its startup.
 *
 * returns 1 on success, 0 on failure.
 */</comment>
<function><type><name>int</name></type>
<name>begin_replication_initial_sync</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_NODE_BEGIN_REPLICATION_INIT</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>NODE_BEGIN_REPLICATION_INIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>NODE_BEGIN_REPLICATION_INIT_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>NODE_BEGIN_REPLICATION_INIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * end_replication_initial_sync() releases several locks
 * after copying internal transaction, xid and sequence information
 * to the standby node at its startup.
 *
 * returns 1 on success, 0 on failure.
 */</comment>
<function><type><name>int</name></type>
<name>end_replication_initial_sync</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_NODE_END_REPLICATION_INIT</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>NODE_END_REPLICATION_INIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>NODE_END_REPLICATION_INIT_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>NODE_END_REPLICATION_INIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_node_list()
 *
 * returns a number of nodes on success, -1 on failure.
 */</comment>
<function><type><name>size_t</name></type>
<name>get_node_list</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_NODE_LIST</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>NODE_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>NODE_LIST_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>NODE_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Do something here.
     */</comment>
    <expr_stmt><expr><name>num_node</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"get_node_list: num_node=%ld\n"</literal></expr></argument>, <argument><expr><name>num_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>num_node</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: number of nodes %zu greater than maximum"</literal></expr></argument>, <argument><expr><name>num_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_node</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>num_node</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_next_gxid()
 *
 * returns the next gxid on success, InvalidGlobalTransactionId on failure.
 */</comment>
<function><type><name>GlobalTransactionId</name></type>
<name>get_next_gxid</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>next_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_GET_NEXT_GXID</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"GTMPQgetResult() done.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>next_gxid</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_next_gxid</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_GET_NEXT_GXID_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_GET_NEXT_GXID_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_GET_NEXT_GXID_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* FIXME: should be a number of gxids */</comment>
    <return>return <expr><name>next_gxid</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_txn_gxid_list()
 *
 * returns a number of gxid on success, -1 on failure.
 */</comment>
<function><type><name>uint32</name></type>
<name>get_txn_gxid_list</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_Transactions</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_GXID_LIST</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_GXID_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_GXID_LIST_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_GXID_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>gtm_deserialize_transactions</name><argument_list>(<argument><expr><name>txn</name></expr></argument>,
                         <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>ptr</name></name></expr></argument>,
                         <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>txn_count</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_sequence_list()
 *
 * returns a number of sequences on success, -1 on failure.
 * Returned seq_list is pointing to GTM_Result structure, the data should be
 * copied before the next call to getResult.
 */</comment>
<function><type><name>size_t</name></type>
<name>get_sequence_list</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>seq_list</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_SEQUENCE_LIST</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>SEQUENCE_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>SEQUENCE_LIST_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>SEQUENCE_LIST_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>seq_list</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq</name></name></expr>;</expr_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq_count</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>int</name></type>
<name>bkup_global_timestamp</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_GLOBAL_TIMESTAMP</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>


<function><type><name>Get_GTS_Result</name></type>
<name>get_global_timestamp</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name>    <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Get_GTS_Result</name></type> <name>ret</name> <init>= <expr><block>{<expr><name>InvalidGlobalTimestamp</name></expr>,<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    
     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_GETGTS</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>gts</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>grd_gts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>gtm_readonly</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>gtm_readonly</name></name></expr>;</expr_stmt>
        
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>check_gtm_status</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>master</name></decl></parameter>,<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>master_ptr</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>standby_count</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>slave_is_sync</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier><modifier>*</modifier></type><name>standby</name></decl></parameter>
        ,<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier><modifier>*</modifier></type><name>slave_flush_ptr</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name><name>application_name</name><index>[<expr><name>GTM_MAX_WALSENDER</name></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>timeout_seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_CHECK_GTM_STATUS</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>timeout_seconds</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* add two seconds to allow extra wait */</comment>
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout_seconds</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>GTM_RESULT_OK</name> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>status</name>  <operator>=</operator>  <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>node_status</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>master</name>  <operator>=</operator>  <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>grd_gts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>master_ptr</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>master_flush</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>standby_count</name>    <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>slave_is_sync</name>    <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>slave_flush_ptr</name>  <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>standby</name>          <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>application_name</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name></name></expr>;</expr_stmt>

        <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * to get GTM statistics info
 */</comment>
<function><type><name>int</name></type>
<name>get_gtm_statistics</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clear_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_seconds</name></decl></parameter>, <parameter><decl><type><name>GTM_StatisticsResult</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_GET_STATISTICS</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>clear_flag</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* add two seconds to allow extra wait */</comment>
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout_seconds</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>GTM_RESULT_OK</name> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name></name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * to get gtm error log
 */</comment>
<function><type><name>int</name></type>
<name>get_gtm_errlog</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_seconds</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errlog</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_GET_ERRORLOG</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* add two seconds to allow extra wait */</comment>
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout_seconds</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>GTM_RESULT_OK</name> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>errlog</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Transaction Management API
 */</comment>

<function><type><name>int</name></type>
<name>bkup_begin_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                       <parameter><decl><type><name>bool</name></type> <name>read_only</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                       <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name> <init>= <expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then>
        <expr><call><name>strlen</name><argument_list>(<argument><expr><name>global_sessionid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_TXN_BEGIN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>read_only</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then> <expr><name>global_sessionid</name></expr> </then><else>: <expr><name>eos</name></expr></else></ternary></expr></argument>,
            <argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>client_id</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_begin_transaction_gxid</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                            <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>read_only</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                            <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name> <init>= <expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then>
        <expr><call><name>strlen</name><argument_list>(<argument><expr><name>global_sessionid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_TXN_BEGIN_GETGXID</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>read_only</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then> <expr><name>global_sessionid</name></expr> </then><else>: <expr><name>eos</name></expr></else></ternary></expr></argument>,
            <argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>client_id</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalTransactionId</name></type>
<name>begin_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
        <parameter><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name> <init>= <expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then>
        <expr><call><name>strlen</name><argument_list>(<argument><expr><name>global_sessionid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_BEGIN_GETGXID</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><ternary><condition><expr><name>global_sessionid</name></expr> ?</condition><then> <expr><name>global_sessionid</name></expr> </then><else>: <expr><name>eos</name></expr></else></ternary></expr></argument>,
            <argument><expr><name>global_sessionid_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>timestamp</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid_tp</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid_tp</name><operator>.</operator><name>gxid</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return></block_content></block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bkup_begin_transaction_autovacuum</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                                  <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_TXN_BEGIN_GETGXID_AUTOVACUUM</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>client_id</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Transaction Management API
 * Begin a transaction for an autovacuum worker process
 */</comment>
<function><type><name>GlobalTransactionId</name></type>
<name>begin_transaction_autovacuum</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_BEGIN_GETGXID_AUTOVACUUM</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return></block_content></block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_commit_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>commit_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>commit_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>txn_count_out</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>status_out</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>commit_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn_count_out</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>status_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>commit_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>waited_xid_count</name></expr></argument>,
                <argument><expr><name>waited_xids</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>commit_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>   <name>retry_sleep</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_COMMIT</name></expr> </then><else>: <expr><name>MSG_TXN_COMMIT</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>waited_xids</name></expr></argument>, <argument><expr><name>waited_xid_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_COMMIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_COMMIT_RESULT</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_COMMIT_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>receive_failed</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_eof_txn</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>STATUS_DELAYED</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/*
                     * GTM may decide to delay the transaction commit if one or
                     * more of the XIDs we had waited to finish for hasn't yet
                     * made to the GTM. While this window is very small, we
                     * need to guard against that to ensure that a transaction
                     * which is already seen as committed by datanodes is not
                     * reported as in-progress by GTM. Also, we don't wait at
                     * the GTM for other transactions to finish because that
                     * could potentially lead to deadlocks. So instead just
                     * sleep for a while (1ms right now) and retry the
                     * operation.
                     *
                     * Since the transactions we are waiting for are in fact
                     * already committed and hence we don't see a reason why we
                     * might end up in an inifinite loop. Nevertheless, it
                     * might make sense to flash a warning and proceed after
                     * certain number of retries
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><name>retry_sleep</name> <operator>&lt;=</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>retry_sleep</name> <operator>=</operator> <name>retry_sleep</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>retry_sleep</name> <operator>&gt;</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>retry_sleep</name> <operator>=</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>retry_sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>retry</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>commit_prepared_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>commit_prepared_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>prepared_gxid</name></expr></argument>,
            <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_commit_prepared_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>commit_prepared_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>prepared_gxid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>commit_prepared_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>   <name>retry_sleep</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
    <comment type="block">/* Start the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_COMMIT_PREPARED</name></expr> </then><else>: <expr><name>MSG_TXN_COMMIT_PREPARED</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prepared_gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>waited_xids</name></expr></argument>, <argument><expr><name>waited_xid_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backends gets it */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_COMMIT_PREPARED_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_COMMIT_PREPARED_RESULT</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_COMMIT_PREPARED_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>receive_failed</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_eof_txn</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>STATUS_DELAYED</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* See comments in commit_transaction_internal() */</comment>
                    <if_stmt><if>if <condition>(<expr><name>retry_sleep</name> <operator>&lt;=</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>retry_sleep</name> <operator>=</operator> <name>retry_sleep</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>retry_sleep</name> <operator>&gt;</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>retry_sleep</name> <operator>=</operator> <name>MAX_RETRY_SLEEP_MICRO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>retry_sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>retry</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>send_failed</name>:</label>
<label><name>receive_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>abort_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>abort_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_abort_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>abort_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>abort_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_ROLLBACK</name></expr> </then><else>: <expr><name>MSG_TXN_ROLLBACK</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_ROLLBACK_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_ROLLBACK_RESULT</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_ROLLBACK_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>receive_failed</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>
<name>backup_start_prepared_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                                  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nodestring</name> <operator>&amp;&amp;</operator> <name>gid</name> <operator>&amp;&amp;</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>start_prepared_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>start_prepared_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                           <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>start_prepared_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>start_prepared_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                           <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_START_PREPARED</name></expr> </then><else>: <expr><name>MSG_TXN_START_PREPARED</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nodestring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_backup</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_START_PREPARED_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_START_PREPARED_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_START_PREPARED_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>log_commit_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isGlobal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>, 
                           <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>log_commit_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                           <argument><expr><name>gxid</name></expr></argument>, 
                                           <argument><expr><name>gid</name></expr></argument>, 
                                           <argument><expr><name>nodestring</name></expr></argument>, 
                                           <argument><expr><name>node_count</name></expr></argument>, 
                                           <argument><expr><name>isGlobal</name></expr></argument>, 
                                           <argument><expr><name>isCommit</name></expr></argument>, 
                                           <argument><expr><name>prepare_ts</name></expr></argument>, 
                                           <argument><expr><name>commit_ts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>log_commit_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
                                                <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                                                  <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>,
                                                  <parameter><decl><type><name>bool</name></type> <name>isGlobal</name></decl></parameter>,
                                                  <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
                                                  <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl></parameter>, 
                                                  <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>isGlobal</name></expr>?</condition><then> <expr><name>MSG_TXN_LOG_GLOBAL_COMMIT</name></expr></then><else>: <expr><name>MSG_TXN_LOG_COMMIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if<condition>(<expr><name>nodestring</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nodestring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>node_count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isCommit</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>prepare_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>commit_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>
            )</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>node_count</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isCommit</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>prepare_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>commit_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>
            )</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_LOG_TRANSACTION_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_LOG_TRANSACTION_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_LOG_TRANSACTION_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>log_scan_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
                             <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>, 
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>start_ts</name></decl></parameter>,
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_start_ts</name></decl></parameter>,
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_complete_ts</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                             <parameter><decl><type><name>int64</name></type>  <name>scan_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>log_scan_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                         <argument><expr><name>gxid</name></expr></argument>,
                                         <argument><expr><name>node_string</name></expr></argument>,
                                         <argument><expr><name>start_ts</name></expr></argument>,
                                         <argument><expr><name>local_start_ts</name></expr></argument>,
                                         <argument><expr><name>local_complete_ts</name></expr></argument>,
                                         <argument><expr><name>scan_type</name></expr></argument>,
                                         <argument><expr><name>rel_name</name></expr></argument>,
                                         <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>log_scan_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 
                                              <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>, 
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>start_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_start_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_complete_ts</name></decl></parameter>,
                                              <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                             <parameter><decl><type><name>int64</name></type>  <name>scan_number</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>

 <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_LOG_SCAN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
         <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>start_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>local_start_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>local_complete_ts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>scan_type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>rel_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>scan_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>
     )</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>


    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_LOG_SCAN_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_LOG_SCAN_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_LOG_SCAN_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>prepare_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>prepare_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_prepare_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>prepare_transaction_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prepare_transaction_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_PREPARE</name></expr> </then><else>: <expr><name>MSG_TXN_PREPARE</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>TXN_PREPARE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name> <operator>==</operator> <name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>TXN_PREPARE_RESULT</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>TXN_PREPARE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>receive_failed</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_gid_data</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
             <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
             <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
             <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
             <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>prepared_gxid</name></decl></parameter>,
             <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_GET_GID_DATA</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>gxid</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>gxid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>prepared_gxid</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>prepared_gxid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>nodestring</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>int</name></type>
<name>finish_gid_gtm</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_FINISH_GID</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Send also GID for an explicit prepared transaction */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>gid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_finish_status</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>get_gtm_store_status</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTMStorageStatus</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_LIST_GTM_STORE</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gtm_status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_finish_status</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * get_storage_file()
 *
 * get storage file of primary.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>__XLOG__</name></cpp:ifdef>
<function><type><name>size_t</name></type>
<name>get_storage_file</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>,<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>start_pos</name></decl></parameter>,<parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>timeLineID</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
get_storage_file<parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_GET_STORAGE</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>STORAGE_TRANSFER_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>STORAGE_TRANSFER_RESULT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>STORAGE_TRANSFER_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <expr_stmt><expr><operator>*</operator><name>start_pos</name>  <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>start_pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>timeLineID</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>time_line</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

    <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32</name></type>
<name>get_storage_sequence_list</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_LIST_GTM_STORE_SEQ</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>MSG_LIST_GTM_STORE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>store_seq</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name></name></expr>;</expr_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type>
<name>get_storage_transaction_list</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_LIST_GTM_STORE_TXN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>MSG_LIST_GTM_TXN_STORE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>store_txn</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name></name></expr>;</expr_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type>
<name>check_storage_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTMStorageSequneceStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_CHECK_GTM_STORE_SEQ</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>need_fix</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>MSG_CHECK_GTM_SEQ_STORE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>store_seq</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type>
<name>check_storage_transaction</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTMStorageTransactionStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_CHECK_GTM_STORE_TXN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>need_fix</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>MSG_CHECK_GTM_TXN_STORE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>store_txn</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rename_db_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_DB_SEQUENCE_RENAME</name></expr> </then><else>: <expr><name>MSG_DB_SEQUENCE_RENAME</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rename_db_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <return>return <expr><call><name>rename_db_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Snapshot Management API
 */</comment>
<function><type><name>GTM_SnapshotData</name> <modifier>*</modifier></type>
<name>get_snapshot</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canbe_grouped</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ResultType</name> <name>res_type</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>res_type</name> <operator>=</operator> <ternary><condition><expr><name>canbe_grouped</name></expr> ?</condition><then> <expr><name>SNAPSHOT_GET_MULTI_RESULT</name></expr> </then><else>: <expr><name>SNAPSHOT_GET_RESULT</name></expr></else></ternary></expr>;</expr_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>canbe_grouped</name></expr> ?</condition><then> <expr><name>MSG_SNAPSHOT_GET_MULTI</name></expr> </then><else>: <expr><name>MSG_SNAPSHOT_GET</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>res_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>res_type</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>res_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*
         * !!FIXME - The following assertion fails when snapshots are requested
         * in non-grouping mode. We did some investigations and it appears that
         * GTMProxy_ProxyCommand() fails to record the incoming GXID and later
         * sends down a wrong GXID to the client. We should probably look at
         * populating cmd_data member before proxying message to the GTM
         *
         * Commenting out the assertion till then
         *
         *    Assert(res-&gt;gr_resdata.grd_txn_snap_multi.gxid == gxid);
         */</comment>
        <return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>gr_snapshot</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>


<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sequence Management API
 */</comment>
<function><type><name>int</name></type>
<name>open_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
              <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
              <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
              <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>open_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_open_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
                   <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                   <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>,
                   <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                   <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>open_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>open_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
                       <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                       <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                       <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                       <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>
                       )</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_INIT</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_INIT</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>increment</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>maxval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>startval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>alter_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>alter_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>lastval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>is_restart</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_alter_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
                    <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                    <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                    <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>alter_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>lastval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>is_restart</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>alter_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>,
                        <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                        <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                        <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_ALTER</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_ALTER</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>increment</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>maxval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>startval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lastval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>is_restart</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>close_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>close_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_close_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>close_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>close_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_CLOSE</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_CLOSE</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SequenceKeyType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rename_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>rename_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_rename_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>rename_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rename_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_RENAME</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_RENAME</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Copy the database sequences from src database
 */</comment>
<function><type><name>int</name></type>
<name>copy_database_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>src_key</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>dest_key</name></decl></parameter>,
                         <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_SEQUENCE_COPY</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>src_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>src_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>src_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>dest_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>dest_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>dest_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Request from GTM current value of the specified sequence in the specified
 * distributed session.
 * Function returns GTM_RESULT_OK if the current value is defined, it sets
 * the *result parameter in this case.
 * Other return value means a problem. Check GTMPQerrorMessage(conn) for details
 * about the problem.
 */</comment>
<function><type><name>int</name></type>
<name>get_current</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>coord_namelen</name> <init>= <expr><ternary><condition><expr><name>coord_name</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_SEQUENCE_GET_CURRENT</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_COMM_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Submit to GTM new next value of the specified sequence in the specified
 * distributed session. The nextval parameter is the new value, if is called
 * is set to false the nextval will be the next value returned from the sequence
 * by nextval() function, if true the function returns incremented value.
 * Function returns GTM_RESULT_OK if it succeedes.
 * Other return value means a problem. Check GTMPQerrorMessage(conn) for details
 * about the problem.
 */</comment>
<function><type><name>int</name></type>
<name>set_val</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>set_val_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>,
                            <argument><expr><name>iscalled</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_set_val</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
             <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>set_val_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>,
                            <argument><expr><name>iscalled</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_val_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>coord_namelen</name> <init>= <expr><ternary><condition><expr><name>coord_name</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_SET_VAL</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_SET_VAL</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nextval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>iscalled</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_COMM_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rexuest from GTM next value of the specified sequence.
 * Function returns GTM_RESULT_OK if it succeedes, it sets the *result parameter
 * in this case.
 * Other return value means a problem. Check GTMPQerrorMessage(conn) for details
 * about the problem.
 */</comment>
<function><type><name>int</name></type>
<name>get_next</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
     <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,
     <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>get_next_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>,
                             <argument><expr><name>range</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>rangemax</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_get_next</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
     <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,
     <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>get_next_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>,
                             <argument><expr><name>range</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>rangemax</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_next_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
                  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,
                  <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>coord_namelen</name> <init>= <expr><ternary><condition><expr><name>coord_name</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_GET_NEXT</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_GET_NEXT</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqval</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>rangemax</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>rangemax</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_RESULT_COMM_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>reset_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>reset_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_reset_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>reset_sequence_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>reset_sequence_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_SEQUENCE_RESET</name></expr> </then><else>: <expr><name>MSG_SEQUENCE_RESET</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>clean_session_sequence</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>coord_namelen</name> <init>= <expr><ternary><condition><expr><name>coord_name</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

     <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_CLEAN_SESSION_SEQ</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>(</operator><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    
    
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * rc would be 0 on success, non-zero on gtm_getnameinfo_all() failure.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>node_get_local_addr</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>local_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>local_port</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>local_host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_host</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>local_port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtm_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
                    <argument><expr><name>local_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><name>local_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <call><name>gtm_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
                              <argument><expr><name>local_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                              <argument><expr><name>local_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                              <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>local_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>local_host</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Register a Node on GTM
 * Seen from a Node viewpoint, we do not know if we are directly connected to GTM
 * or go through a proxy, so register 0 as proxy number.
 * This number is modified at proxy level automatically.
 *
 * node_register() returns 0 on success, -1 on failure.
 *
 * is_backup indicates the message should be *_BKUP_* message
 */</comment>
<function><type><name>int</name></type> <name>node_register</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
            <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>,
            <parameter><decl><type><name>GTM_PGXCNodePort</name></type> <name>port</name></decl></parameter>,
            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafolder</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>node_get_local_addr</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>node_register_worker</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>,
            <argument><expr><name>NODE_CONNECTED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>node_register_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
                           <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
                           <parameter><decl><type><name>GTM_PGXCNodePort</name></type> <name>port</name></decl></parameter>,
                           <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
                           <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafolder</name></decl></parameter>,
                           <parameter><decl><type><name>GTM_PGXCNodeStatus</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>node_register_worker</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>,
            <argument><expr><name>status</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bkup_node_register_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodePort</name></type> <name>port</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafolder</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodeStatus</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>node_register_worker</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>,
            <argument><expr><name>status</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>node_register_worker</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodePort</name></type> <name>port</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datafolder</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_PGXCNodeStatus</name></type> <name>status</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>proxy_name</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We should be very careful about the format of the message.
     * Host name and its length is needed only when registering
     * GTM Proxy.
     * In other case, they must not be included in the message.
     * PGXCTODO: FIXME How would this work in the new scenario
     * Fix that for GTM and GTM-proxy
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Message Type */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr>?</condition><then> <expr><name>MSG_BKUP_NODE_REGISTER</name></expr> </then><else>: <expr><name>MSG_NODE_REGISTER</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node Type to Register */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node name length */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node name (var-len) */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Host name length */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Host name (var-len) */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Port number */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodePort</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Proxy name length (zero if connected to GTM directly) */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proxy_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Proxy name (var-len) */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>proxy_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proxy_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Proxy ID (zero if connected to GTM directly) */</comment>
        <comment type="block">/* Data Folder length */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>datafolder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Data Folder (var-len) */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>datafolder</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>datafolder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node Status */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>receive_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Check on node type and node name */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name></expr></argument>,<argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>!=</operator> <name>NODE_REGISTER_RESULT</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"res-&gt;gr_type %d not match, expected %d.\n"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><name>NODE_REGISTER_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>receive_failed</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>node_unregister</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>node_unregister_worker</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bkup_node_unregister</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>node_unregister_worker</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>node_unregister_worker</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>node_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_NODE_UNREGISTER</name></expr> </then><else>: <expr><name>MSG_NODE_UNREGISTER</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node name length */</comment>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* Node name (var-len) */</comment>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Check on node type and node name */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>( <argument><expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>GTM_FreeResult</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>remote_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>gtmpqFreeResultData</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>remote_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>backend_disconnect</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_postmaster</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BACKEND_DISCONNECT</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name>is_postmaster</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Then send node type and node name if backend is a postmaster to
     * disconnect the correct node.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>is_postmaster</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <comment type="block">/* Node name length */</comment>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <comment type="block">/* Node name (var-len) */</comment>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>begin_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GTM_IsolationLevel</name> <modifier>*</modifier></type><name>txn_isolation_level</name></decl></parameter>,
            <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>txn_read_only</name></decl></parameter>, <parameter><decl><type><name>GTMProxy_ConnID</name> <modifier>*</modifier></type><name>txn_connid</name></decl></parameter>,
            <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid_out</name></decl></parameter>, <parameter><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>ts_out</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_BEGIN_GETGXID_MULTI</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>txn_isolation_level</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name><name>txn_read_only</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>txn_connid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>send_failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txn_count_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gxid_out</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_gxid</name></name></expr></argument>,
                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
                <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ts_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>bkup_begin_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>,
                             <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>, <parameter><decl><type><name>GTM_IsolationLevel</name> <modifier>*</modifier></type><name>isolevel</name></decl></parameter>,
                             <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>read_only</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>txn_global_sessionid</name><index>[]</index></name></decl></parameter>, 
                             <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>,
                             <parameter><decl><type><name>GTMProxy_ConnID</name> <modifier>*</modifier></type><name>txn_connid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_TXN_BEGIN_GETGXID_MULTI</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>isolevel</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutc</name><argument_list>(<argument><expr><name><name>read_only</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>txn_global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name><name>txn_global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>txn_global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>client_id</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name><name>txn_connid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMProxy_ConnID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_commit_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BKUP_TXN_COMMIT_MULTI</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>send_failed</name>:</label>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>commit_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
             <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_TXN_COMMIT_MULTI</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                  <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txn_count_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>status_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>*</operator><name>txn_count_out</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>abort_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
                        <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>abort_transaction_multi_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>txn_count_out</name></expr></argument>, <argument><expr><name>status_out</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_abort_transaction_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count_out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status_out</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <return>return <expr><call><name>abort_transaction_multi_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn_count_out</name></expr></argument>, <argument><expr><name>status_out</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>abort_transaction_multi_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_TXN_ROLLBACK_MULTI</name></expr> </then><else>: <expr><name>MSG_TXN_ROLLBACK_MULTI</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                  <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txn_count_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>status_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>*</operator><name>txn_count_out</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>snapshot_get_multi</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
           <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>txn_count_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_out</name></decl></parameter>,
           <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>xmin_out</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>xmax_out</name></decl></parameter>,
           <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>recent_global_xmin_out</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>xcnt_out</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: no proxy header */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_SNAPSHOT_GET_MULTI</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                  <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
              <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>txn_count_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>status_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>*</operator><name>txn_count_out</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xmin_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xmax_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xmax</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xcnt_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Barrier
 */</comment>

<function><type><name>int</name></type>
<name>report_barrier</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>report_barrier_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>bkup_report_barrier</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>report_barrier_internal</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>report_barrier_internal</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>barrier_id_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    

    <comment type="block">/* Send the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* FIXME: not proxy header --&gt; proxy shold handle this separately */</comment>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>is_backup</name></expr> ?</condition><then> <expr><name>MSG_BKUP_BARRIER</name></expr> </then><else>: <expr><name>MSG_BARRIER</name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>barrier_id_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>barrier_id</name></expr></argument>, <argument><expr><name>barrier_id_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* Flush the message */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* Flush to ensure backend gets it */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Handle the response */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

        <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_RESULT_OK</name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    
<function><type><name>int</name></type>
<name>set_begin_replication</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>application_name</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_START_REPLICATION</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>,<argument><expr><name>len</name></expr></argument> ,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>application_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>application_name</name></expr></argument>,<argument><expr><name>len</name></expr></argument> ,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><name><name>res</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>MSG_REPLICATION_START_RESULT_SUCCESS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Backup to Standby
 */</comment>

<function><type><name>int</name></type>
<name>set_begin_backup</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_BEGIN_BACKUP</name></expr></argument> ,
                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>identifier</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>lsn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>backup_result</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>set_end_backup</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_END_BACKUP</name></expr></argument>,
                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sync with standby
 */</comment>
<function><type><name>int</name></type>
<name>gtm_sync_standby</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>finish_time</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_SYNC_STANDBY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>send_failed</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>receive_failed</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Submit to GTM information about started distributed session.
 * The information is the session identifier consisting of coordinator name and
 * pid of the master process, and the BackendId of the master process.
 * The BackendId is used to track session end. BackendIds are the sequential
 * numbers from 1 to max_connections, and they are unique among active sessions
 * under the same postmaster. So if another session on the same coordinator with
 * the same BackendId is registering, that means the previous session is closed
 * and all resources assigned to it could be released.
 */</comment>
<function><type><name>int</name></type>
<name>register_session</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>coord_backendid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>         <name>finish_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_REGISTER_SESSION</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>coord_backendid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>report_global_xmin</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
        <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>global_xmin</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>latest_completed_xid</name></decl></parameter>,
        <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>         <name>finish_time</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>MSG_REPORT_XMIN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_MessageType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutInt</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>send_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CLIENT_GTM_TIMEOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>GTMPQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>receive_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>latest_completed_xid</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>latest_completed_xid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>global_xmin</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>global_xmin</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>errcode</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>res</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>

<label><name>receive_failed</name>:</label>
<label><name>send_failed</name>:</label>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>makeEmptyResultIfIsNull</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
