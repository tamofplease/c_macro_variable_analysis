<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/client/fe-connect.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fe-connect.c
 *      functions related to setting up a connection to the backend
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL: pgsql/src/interfaces/libpq/fe-connect.c,v 1.371 2008/12/15 10:28:21 mha Exp $
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>

<comment type="block">/* fall back options if they are not specified by arguments or defined
   by environment variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DefaultHost</name></cpp:macro>        <cpp:value>"localhost"</cpp:value></cpp:define>

<comment type="block">/* ----------
 * Definition of the conninfo parameters and their fallback resources.
 *
 * GTMPQconninfoOptions[] is a constant static array that we use to initialize
 * a dynamically allocated working copy.  All the "val" fields in
 * GTMPQconninfoOptions[] *must* be NULL.    In a working copy, non-null "val"
 * fields point to malloc'd strings that should be freed when the working
 * array is freed (see GTMPQconninfoFree).
 * ----------
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GTMPQconninfoOption</name></type> <name><name>GTMPQconninfoOptions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"connect_timeout"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"host"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"hostaddr"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"port"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"node_name"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"remote_type"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"postmaster"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"client_id"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="block">/* Terminating entry --- MUST BE LAST */</comment>
    <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>connectOptions1</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>connectGTMStart</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>connectGTMComplete</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>makeEmptyGTM_Conn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freeGTM_Conn</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>closeGTM_Conn</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>conninfo_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>,
               <parameter><decl><type><name>PQExpBuffer</name></type> <name>errorMessage</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_defaults</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo_getval</name><parameter_list>(<parameter><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>connOptions</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pqPacketSend</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>packet_type</name></decl></parameter>,
             <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>PQconnectGTM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Conn</name>       <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>PQconnectGTMStart</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CONNECTION_BAD</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>connectGTMComplete</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    else if (conn != NULL)
    {
        
        freeGTM_Conn(conn);
        conn = NULL;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *        PQconnectGTMStart
 *
 * Returns a GTM_Conn*.  If NULL is returned, a malloc error has occurred, and
 * you should not attempt to proceed with this connection.    If the status
 * field of the connection returned is CONNECTION_BAD, an error has
 * occurred. In this case you should call GTMPQfinish on the result, (perhaps
 * inspecting the error message first).  Other fields of the structure may not
 * be valid if that occurs.  If the status field is not CONNECTION_BAD, then
 * this stage has succeeded - call GTMPQconnectPoll, using select(2) to see when
 * this is necessary.
 *
 * See GTMPQconnectPoll for more info.
 */</comment>
<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>PQconnectGTMStart</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Conn</name>       <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Allocate memory for the conn structure
     */</comment>
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>makeEmptyGTM_Conn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Parse the conninfo string
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>connectOptions1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conninfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>conn</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Connect to the database
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>connectGTMStart</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Just in case we failed to set it in connectGTMStart */</comment>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *        connectOptions1
 *
 * Internal subroutine to set up connection parameters given an already-
 * created GTM_Conn and a conninfo string.
 *
 * Returns true if OK, false if trouble (in which case errorMessage is set
 * and so is conn-&gt;status).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>connectOptions1</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>connOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Parse the conninfo string
     */</comment>
    <expr_stmt><expr><name>connOptions</name> <operator>=</operator> <call><name>conninfo_parse</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connOptions</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
        <comment type="block">/* errorMessage is already set */</comment>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Move option values into conn structure
     *
     * XXX: probably worth checking strdup() return value here...
     */</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"hostaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"connect_timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"node_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>gc_node_name</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"postmaster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>is_postmaster</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"remote_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>GTM_NODE_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>conninfo_getval</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>, <argument><expr><literal type="string">"client_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>my_id</name></name> <operator>=</operator> <ternary><condition><expr><name>tmp</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block">/*
     * Free the option info - all is in conn now
     */</comment>
    <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * connectNoDelay -
 * Sets the TCP_NODELAY socket option.
 * Returns 1 if successful, 0 if not.
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>connectNoDelay</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>    <name>TCP_NODELAY</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type>            <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>,
                   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>,
                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
            <argument><expr><literal type="string">"could not set socket to TCP no delay mode: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * connectFailureMessage -
 * create a friendly error message on connection failure.
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>connectFailureMessage</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errorno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                          <argument><expr><literal type="string">"could not connect to server: \n"</literal>
                     <literal type="string">"\tIs the server running on host \"%s\" and accepting\n"</literal>
                                        <literal type="string">"\tTCP/IP connections on port %s? errno %d\n"</literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr>
                          ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr>
                          </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>
                             ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>
                             </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>,
                          <argument><expr><name>errorno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>



<comment type="block">/* ----------
 * connectGTMStart -
 *        Begin the process of making a connection to the backend.
 *
 * Returns 1 if successful, 0 if not.
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>connectGTMStart</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>portnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>portstr</name><index>[<expr><name>MAXGTMPATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Ensure our buffers are empty */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inEnd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>outCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Determine the parameters to pass to gtm_getaddrinfo_all.
     */</comment>

    <comment type="block">/* Initialize hint structure */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

    <comment type="block">/* Set up port number as a string */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pgport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>portnum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>portnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Using pghostaddr avoids a hostname lookup */</comment>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Using pghost, so we have to look-up the hostname */</comment>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>is_absolute_path</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UNIXSOCK_PATH</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><name>portnum</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>UNIXSOCK_PATH_BUFLEN</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                     <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"Unix-domain socket path \"%s\" is too long (maximum %d bytes)\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>portstr</name></expr></argument>,
                                     <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>UNIXSOCK_PATH_BUFLEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>connect_errReturn</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Use gtm_getaddrinfo_all() to resolve the address */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gtm_getaddrinfo_all</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>||</operator> <operator>!</operator><name>addrs</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                              <argument><expr><literal type="string">"could not translate host name \"%s\" to address: %s\n"</literal></expr></argument>,
                              <argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                              <argument><expr><literal type="string">"could not translate Unix-domain socket path \"%s\" to address: %s\n"</literal></expr></argument>,
                              <argument><expr><name>portstr</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>addrs</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_freeaddrinfo_all</name><argument_list>(<argument><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <goto>goto <name>connect_errReturn</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Set up to try to connect, with protocol 3.0 as the first attempt.
     */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist</name></name> <operator>=</operator> <name>addrs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name>addrs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist_family</name></name> <operator>=</operator> <name><name>hint</name><operator>.</operator><name>ai_family</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_NEEDED</name></expr>;</expr_stmt>

    <comment type="block">/*
     * The code for processing CONNECTION_NEEDED state is in GTMPQconnectPoll(),
     * so that it can easily be re-executed if needed again during the
     * asynchronous startup process.  However, we must run it once here,
     * because callers expect a success return from this routine to mean that
     * we are in PGRES_POLLING_WRITING connection state.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GTMPQconnectPoll</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_POLLING_WRITING</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>connect_errReturn</name>:</label>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *        connectGTMComplete
 *
 * Block and complete a connection.
 *
 * Returns 1 on success, 0 on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>connectGTMComplete</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTMClientPollingStatusType</name></type> <name>flag</name> <init>= <expr><name>PGRES_POLLING_WRITING</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>        <name>finish_time</name> <init>= <expr><operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Set up a time limit, if connect_timeout isn't zero.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>connect_timeout</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>timeout</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Rounding could cause connection to fail; need at least 2 secs
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block">/* calculate the finish time based on start + timeout */</comment>
            <expr_stmt><expr><name>finish_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <comment type="block">/*
         * Wait, if necessary.    Note that the initial state (just after
         * PQconnectGTMStart) is to wait for the socket to select for writing.
         */</comment>
        <switch>switch <condition>(<expr><name>flag</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>PGRES_POLLING_OK</name></expr>:</case>
                <comment type="block">/* Reset stored error messages since we now have a working connection */</comment>
                <expr_stmt><expr><call><name>resetGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">1</literal></expr>;</return>        <comment type="block">/* success! */</comment>

            <case>case <expr><name>PGRES_POLLING_READING</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>

            <case>case <expr><name>PGRES_POLLING_WRITING</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqWaitTimed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>finish_time</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>

            <default>default:</default>
                <comment type="block">/* Just in case we failed to set it in GTMPQconnectPoll */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></switch>

        <comment type="block">/*
         * Now try to advance the state machine.
         */</comment>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>GTMPQconnectPoll</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        GTMPQconnectPoll
 *
 * Poll an asynchronous connection.
 *
 * Returns a GTMClientPollingStatusType.
 * Before calling this function, use select(2) to determine when data
 * has arrived..
 *
 * You must call GTMPQfinish whether or not this fails.
 */</comment>
<function><type><name>GTMClientPollingStatusType</name></type>
<name>GTMPQconnectPoll</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PGRES_POLLING_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get the new data */</comment>
    <switch>switch <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
    <block>{<block_content>
            <comment type="block">/*
             * We really shouldn't have been polled in these two cases, but we
             * can handle it.
             */</comment>
        <case>case <expr><name>CONNECTION_BAD</name></expr>:</case>
            <return>return <expr><name>PGRES_POLLING_FAILED</name></expr>;</return>
        <case>case <expr><name>CONNECTION_OK</name></expr>:</case>
            <return>return <expr><name>PGRES_POLLING_OK</name></expr>;</return>

            <comment type="block">/* These are reading states */</comment>
        <case>case <expr><name>CONNECTION_AWAITING_RESPONSE</name></expr>:</case>
        <case>case <expr><name>CONNECTION_AUTH_OK</name></expr>:</case>
            <block>{<block_content>
                <comment type="block">/* Load waiting data */</comment>
                <decl_stmt><decl><type><name>int</name></type>            <name>n</name> <init>= <expr><call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>error_return</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return></block_content></block></if></if_stmt>

                <break>break;</break>
            </block_content>}</block>

            <comment type="block">/* These are writing states, so we just proceed. */</comment>
        <case>case <expr><name>CONNECTION_STARTED</name></expr>:</case>
        <case>case <expr><name>CONNECTION_MADE</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>CONNECTION_NEEDED</name></expr>:</case>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                            <argument><expr><literal type="string">"invalid connection state, "</literal>
                                 <literal type="string">"probably indicative of memory corruption\n"</literal></expr></argument>
                                            )</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_return</name>;</goto>
    </block_content>}</block></switch>


<label><name>keep_going</name>:</label>                        <comment type="block">/* We will come back to here until there is
                                 * nothing left to do. */</comment>
    <switch>switch <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>CONNECTION_NEEDED</name></expr>:</case>
            <block>{<block_content>
                <comment type="block">/*
                 * Try to initiate a connection to one of the addresses
                 * returned by gtm_getaddrinfo_all().  conn-&gt;addr_cur is the
                 * next one to try. We fail when we run out of addresses
                 * (reporting the error returned for the *last* alternative,
                 * which may not be what users expect :-().
                 */</comment>
                <while>while <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addr_cur</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name></expr></init></decl>;</decl_stmt>

                    <comment type="block">/* Remember current address for possible error msg */</comment>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
                           <argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>salen</name></name> <operator>=</operator> <name><name>addr_cur</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

                    <comment type="block">/* Open a socket */</comment>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/*
                         * ignore socket() failure if we have more addresses
                         * to try
                         */</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name><name>addr_cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                              <argument><expr><literal type="string">"could not create socket: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>

                    <comment type="block">/*
                     * Select socket options: no delay of outgoing data for
                     * TCP sockets, nonblock mode, close-on-exec. Fail if any
                     * of this fails.
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_AF_UNIX</name><argument_list>(<argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>connectNoDelay</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name><name>addr_cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_set_noblock</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name></type> <name><name>sebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
										  <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"could not set socket to nonblocking mode: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>pqStrerror</name><argument_list>(<argument><expr><name>SOCK_ERRNO</name></expr></argument>, <argument><expr><name>sebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

                    <comment type="block">/*
                     * Start/make connection.  This should not block, since we
                     * are in nonblock mode.  If it does, well, too bad.
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
                                <argument><expr><name><name>addr_cur</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>SOCK_ERRNO</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>||</operator>
                            <name>SOCK_ERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator>
                            <name>SOCK_ERRNO</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator>
                            <name>SOCK_ERRNO</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <comment type="block">/*
                             * This is fine - we're in non-blocking mode, and
                             * the connection is in progress.  Tell caller to
                             * wait for write-ready on socket.
                             */</comment>
                            <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_STARTED</name></expr>;</expr_stmt>
                            <return>return <expr><name>PGRES_POLLING_WRITING</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <comment type="block">/* otherwise, trouble */</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="block">/*
                         * Hm, we're connected already --- seems the "nonblock
                         * connection" wasn't.  Advance the state machine and
                         * go do the next stuff.
                         */</comment>
                        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_STARTED</name></expr>;</expr_stmt>
                        <goto>goto <name>keep_going</name>;</goto>
                    </block_content>}</block></else></if_stmt>

                    <comment type="block">/*
                     * This connection failed --- set up error report, then
                     * close socket (do it this way in case close() affects
                     * the value of errno...).    We will ignore the connect()
                     * failure and keep going if there are more addresses.
                     */</comment>
                    <expr_stmt><expr><call><name>connectFailureMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SOCK_ERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="block">/*
                     * Try the next address, if any.
                     */</comment>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name><name>addr_cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>                <comment type="block">/* loop over addresses */</comment>

                <comment type="block">/*
                 * Ooops, no more addresses.  An appropriate error message is
                 * already set up, so just set the right status.
                 */</comment>
                <goto>goto <name>error_return</name>;</goto>
            </block_content>}</block>

        <case>case <expr><name>CONNECTION_STARTED</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>            <name>optval</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ACCEPT_TYPE_ARG3</name></type> <name>optlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

                <comment type="block">/*
                 * Write ready, since we've made it here, so the connection
                 * has been made ... or has failed.
                 */</comment>

                <comment type="block">/*
                 * Now check (using getsockopt) that there is not an error
                 * state waiting for us on the socket.
                 */</comment>

                <if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>,
                               <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>optlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                    <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"could not get socket error status: \n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error_return</name>;</goto>
                </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>                
                else if (optval != 0)
                {
                    <comment type="block">/*
                     * When using a nonblocking connect, we will typically see
                     * connect failures at this point, so provide a friendly
                     * error message.
                     */</comment>
                    connectFailureMessage(conn, optval);

                    <comment type="block">/*
                     * If more addresses remain, keep trying, just as in the
                     * case where connect() returned failure immediately.
                     */</comment>
                    if (conn-&gt;addr_cur-&gt;ai_next != NULL)
                    {
                        if (conn-&gt;sock &gt;= 0)
                        {
                            close(conn-&gt;sock);
                            conn-&gt;sock = -1;
                        }
                        conn-&gt;addr_cur = conn-&gt;addr_cur-&gt;ai_next;
                        conn-&gt;status = CONNECTION_NEEDED;
                        goto keep_going;
                    }
                    goto error_return;
                }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <comment type="block">/* Fill in the client address */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,
                                <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>,
                                <argument><expr><operator>(</operator><name>socklen_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                      <argument><expr><literal type="string">"could not get client address from socket:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error_return</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/*
                 * Make sure we can write before advancing to next step.
                 */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_MADE</name></expr>;</expr_stmt>
                <return>return <expr><name>PGRES_POLLING_WRITING</name></expr>;</return>
            </block_content>}</block>

        <case>case <expr><name>CONNECTION_MADE</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_StartupPacket</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>(</operator><name>GTM_StartupPacket</name> <operator>*</operator><operator>)</operator>
                    <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StartupPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>packetlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StartupPacket</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StartupPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Build a startup packet. We tell the GTM server/proxy our
                 * PGXC Node name and whether we are a proxy or not.
                 *
                 * When the connection is made from the proxy, we let the GTM
                 * server know about it so that some special headers are
                 * handled correctly by the server.
                 */</comment>
                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>sp_node_name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>gc_node_name</name></name></expr></argument>, <argument><expr><name>SP_NODE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sp_remotetype</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sp_ispostmaster</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>is_postmaster</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sp_client_id</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>my_id</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>sp_backend_pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Send the startup packet.
                 *
                 * Theoretically, this could block, but it really shouldn't
                 * since we only got here if the socket is write-ready.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>pqPacketSend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sp</name></expr></argument>, <argument><expr><name>packetlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                        <argument><expr><literal type="string">"could not send startup packet: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error_return</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_AWAITING_RESPONSE</name></expr>;</expr_stmt>

                <comment type="block">/* Clean up startup packet */</comment>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return>
            </block_content>}</block>

            <comment type="block">/*
             * Handle authentication exchange: wait for postmaster messages
             * and respond as necessary.
             */</comment>
        <case>case <expr><name>CONNECTION_AWAITING_RESPONSE</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type>        <name>beresp</name></decl>;</decl_stmt>

                <comment type="block">/*
                 * Scan the message from current point (note that if we find
                 * the message is incomplete, we will return without advancing
                 * inStart, and resume here next time).
                 */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name></expr>;</expr_stmt>

                <comment type="block">/* Read type byte */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>beresp</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* We'll come back when there is more data */</comment>
                    <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/*
                 * Validate message type: we expect only an authentication
                 * request or an error here.  Anything else probably means
                 * it's not GTM on the other end at all.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>beresp</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>||</operator> <name>beresp</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                      <argument><expr><literal type="string">"expected authentication request from "</literal>
                                                <literal type="string">"server, but received %c\n"</literal></expr></argument>,
                                      <argument><expr><name>beresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>error_return</name>;</goto>
                </block_content>}</block></if></if_stmt>


                <comment type="block">/* Handle errors. */</comment>
                <if_stmt><if>if <condition>(<expr><name>beresp</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGets_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* We'll come back when there is more data */</comment>
                        <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* OK, we read the message; mark data consumed */</comment>
                    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name></expr>;</expr_stmt>
                    <goto>goto <name>error_return</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>msgLength</name></decl>;</decl_stmt>
                    <comment type="block">/*
                     * Read the message length word
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgLength</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* We'll come back when there is more data */</comment>
                        <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>msgLength</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                <argument><expr><literal type="string">"expected message length of 4 bytes from "</literal>
                                <literal type="string">"server, but received %d bytes\n"</literal></expr></argument>,
                                <argument><expr><name>msgLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>my_id</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* We'll come back when there is more data */</comment>
                        <return>return <expr><name>PGRES_POLLING_READING</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>

                <comment type="block">/*
                 * OK, we successfully read the message; mark data consumed
                 */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name></expr>;</expr_stmt>

                <comment type="block">/* We are done with authentication exchange */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_AUTH_OK</name></expr>;</expr_stmt>

                <comment type="block">/* Look to see if we have more data yet. */</comment>
                <goto>goto <name>keep_going</name>;</goto>
            </block_content>}</block>

        <case>case <expr><name>CONNECTION_AUTH_OK</name></expr>:</case>
            <block>{<block_content>
                <comment type="block">/* We can release the address list now. */</comment>
                <expr_stmt><expr><call><name>gtm_freeaddrinfo_all</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist_family</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                <comment type="block">/* Otherwise, we are open for business! */</comment>
                <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_OK</name></expr>;</expr_stmt>
                <return>return <expr><name>PGRES_POLLING_OK</name></expr>;</return>
            </block_content>}</block>


        <default>default:</default>
            <expr_stmt><expr><call><name>appendGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                                            <argument><expr><literal type="string">"invalid connection state %c, "</literal>
                                 <literal type="string">"probably indicative of memory corruption\n"</literal></expr></argument>
                                            ,
                              <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error_return</name>;</goto>
    </block_content>}</block></switch>

    <comment type="block">/* Unreachable */</comment>

<label><name>error_return</name>:</label>

    <comment type="block">/*
     * We used to close the socket at this point, but that makes it awkward
     * for those above us if they wish to remove this socket from their own
     * records (an fd_set for example).  We'll just have this socket closed
     * when GTMPQfinish is called (which is compulsory even after an error, since
     * the connection structure must be freed).
     */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
    <return>return <expr><name>PGRES_POLLING_FAILED</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * makeEmptyGTM_Conn
 *     - create a GTM_Conn data structure with (as yet) no interesting data
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type>
<name>makeEmptyGTM_Conn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Conn</name>       <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>GTM_Conn</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>conn</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Zero all pointers and booleans */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * We try to send at least 8K at a time, which is the usual size of pipe
     * buffers on Unix systems.  That way, when we are sending a large amount
     * of data, we avoid incurring extra kernel context swaps for partial
     * bufferloads.  The output buffer is initially made 16K in size, and we
     * try to dump it after accumulating 8K.
     *
     * With the same goal of minimizing context swaps, the input buffer will
     * be enlarged anytime it has less than 8K free, so we initially allocate
     * twice that.
     */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inBufSize</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inBuffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>outBufSize</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>outBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>workBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>inBuffer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>conn</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>workBuffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* out of memory already :-( */</comment>
        <expr_stmt><expr><call><name>freeGTM_Conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * freeGTM_Conn
 *     - free an idle (closed) GTM_Conn data structure
 *
 * NOTE: this should not overlap any functionality with closeGTM_Conn().
 * Clearing/resetting of transient state belongs there; what we do here is
 * release data that is to be held for the life of the GTM_Conn structure.
 * If a value ought to be cleared/freed during PQreset(), do it there not here.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>freeGTM_Conn</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>gc_node_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>gc_node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>inBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>outBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>outBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>termGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>termGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>workBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Free last snapshot if defined */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xip</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* release memory for one-time application */</comment>
        <expr_stmt><expr><call><name>gtmpqFreeResultResource</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * closeGTM_Conn
 *     - properly close a connection to the backend
 *
 * This should reset or release all transient state, but NOT the connection
 * parameters.  On exit, the GTM_Conn should be in condition to start a fresh
 * connection with the same parameters (see PQreset()).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>closeGTM_Conn</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Note that the protocol doesn't allow us to send Terminate messages
     * during the startup phase.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>CONNECTION_OK</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Try to send "close connection" message to backend. Ignore any
         * error.
         *
         * Force length word for backends may try to read that in a generic
         * code
         */</comment>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Close the connection, reset all transient state, flush I/O buffers.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>        <comment type="block">/* Well, not really _bad_ - just
                                         * absent */</comment>
    <expr_stmt><expr><call><name>gtm_freeaddrinfo_all</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist_family</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addrlist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>addr_cur</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inEnd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>outCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * GTMPQfinish: properly close a connection to the backend. Also frees
 * the GTM_Conn data structure so it shouldn't be re-used after this.
 */</comment>
<function><type><name>void</name></type>
<name>GTMPQfinish</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>closeGTM_Conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeGTM_Conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pqPacketSend() -- convenience routine to send a message to server.
 *
 * pack_type: the single-byte message type code.  (Pass zero for startup
 * packets, which have no message type code.)
 *
 * buf, buf_len: contents of message.  The given length includes only what
 * is in buf; the message type and message length fields are added here.
 *
 * RETURNS: STATUS_ERROR if the write fails, STATUS_OK otherwise.
 * SIDE_EFFECTS: may block.
 *
 * Note: all messages sent with this routine have a length word, whether
 * it's protocol 2.0 or 3.0.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pqPacketSend</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>pack_type</name></decl></parameter>,
             <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Start the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgStart</name><argument_list>(<argument><expr><name>pack_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Send the message body. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutnchar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Finish the message. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqPutMsgEnd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Flush to ensure backend gets it. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *        GTMPQconninfoParse
 *
 * Parse a string like PQconnectGTM() would do and return the
 * resulting connection options array.  NULL is returned on failure.
 * The result contains only options specified directly in the string,
 * not any possible default values.
 *
 * If errmsg isn't NULL, *errmsg is set to NULL on success, or a malloc'd
 * string on failure (use PQfreemem to free it).  In out-of-memory conditions
 * both *errmsg and the result could be NULL.
 *
 * NOTE: the returned array is dynamically allocated and should
 * be freed when no longer needed via GTMPQconninfoFree().
 */</comment>
<function><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type>
<name>GTMPQconninfoParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>errorBuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>connOptions</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>            <comment type="block">/* default */</comment>
    <expr_stmt><expr><call><name>initGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errorBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PQExpBufferDataBroken</name><argument_list>(<argument><expr><name>errorBuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>            <comment type="block">/* out of memory already :-( */</comment>
    <expr_stmt><expr><name>connOptions</name> <operator>=</operator> <call><name>conninfo_parse</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorBuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>connOptions</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>errmsg</name> <operator>=</operator> <name><name>errorBuf</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>termGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errorBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>connOptions</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Conninfo parser routine
 *
 * If successful, a malloc'd GTMPQconninfoOption array is returned.
 * If not successful, NULL is returned and an error message is
 * left in errorMessage.
 * Defaults are supplied (from a service file, environment variables, etc)
 * for unspecified options, but only if use_defaults is TRUE.
 */</comment>
<function><type><specifier>static</specifier> <name>GTMPQconninfoOption</name> <modifier>*</modifier></type>
<name>conninfo_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>errorMessage</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>use_defaults</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>pval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cp2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

    <comment type="block">/* Make a working copy of GTMPQconninfoOptions */</comment>
    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMPQconninfoOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                          <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>GTMPQconninfoOptions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMPQconninfoOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Need a modifiable copy of the input string */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                          <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Skip blanks before the parameter name */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Get the parameter name */</comment>
        <expr_stmt><expr><name>pname</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Check that there is a following '=' */</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                              <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"missing \"=\" after \"%s\" in connection info string\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <comment type="block">/* Skip blanks after the '=' */</comment>
        <while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Get the parameter value */</comment>
        <expr_stmt><expr><name>pval</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cp2</name> <operator>=</operator> <name>pval</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><operator>*</operator><name>cp2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>cp2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><operator>*</operator><name>cp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>cp2</name> <operator>=</operator> <name>pval</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                                      <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"unterminated quoted string in connection info string\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><operator>*</operator><name>cp2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>cp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>cp2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * Now we have the name and the value. Search for the param record.
         */</comment>
        <for>for <control>(<init><expr><name>option</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>option</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                         <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid connection option \"%s\"\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Store the value
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>,
                              <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTMPQconninfoFree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Done with the modifiable input string */</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>conninfo_getval</name><parameter_list>(<parameter><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>connOptions</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>option</name> <operator>=</operator> <name>connOptions</name></expr>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>option</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>GTMPQconninfoFree</name><parameter_list>(<parameter><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>connOptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMPQconninfoOption</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>connOptions</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>option</name> <operator>=</operator> <name>connOptions</name></expr>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>option</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>connOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GTMPQhost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GTMPQport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ConnStatusType</name></type>
<name>GTMPQstatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CONNECTION_BAD</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GTMPQispostmaster</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>is_postmaster</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GTMPQerrorMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"connection pointer is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GTMPQsocket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTMPQtrace</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debug_port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>GTMPQuntrace</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>Pfdebug</name></name> <operator>=</operator> <name>debug_port</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTMPQuntrace</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>Pfdebug</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>Pfdebug</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>Pfdebug</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set socket keepalive and user_timeout.
 * We can use this to detect the broken connection quickly.
 */</comment>
<function><type><name>bool</name></type>
<name>GTMSetSockKeepAlive</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcp_keepalives_idle</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>tcp_keepalives_interval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcp_keepalives_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>keepalive</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* user_timeout in ms */</comment>
	<decl_stmt><decl><type><name>uint32</name></type> <name>user_timeout</name> <init>= <expr><ternary><condition><expr><name>UINT32_MAX</name> <operator>/</operator> <literal type="number">1000</literal> <operator>&lt;</operator> <name>tcp_keepalives_idle</name></expr> ?</condition><then>
						  <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>tcp_keepalives_idle</name> <operator>*</operator> <operator>(</operator><name>uint32</name><operator>)</operator><literal type="number">1000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tcp_info</name></name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<comment type="block">/* check sock */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No need to set */</comment>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>tcpi_state</name></name> <operator>!=</operator> <name>TCP_ESTABLISHED</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No need to set */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* set keepalive */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>keepalive</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keepalive</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcp_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcp_keepalives_idle</name></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcp_keepalives_idle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcp_keepalives_interval</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcp_keepalives_interval</name></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcp_keepalives_interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tcp_keepalives_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tcp_keepalives_count</name></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcp_keepalives_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* set user_timeout */</comment>
	<if_stmt><if>if <condition>(<expr><name>user_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_USER_TIMEOUT</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>user_timeout</name></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user_timeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function></unit>
