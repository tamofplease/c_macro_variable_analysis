<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/client/test/test_txn.c"><comment type="block">/*
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>client_log</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>printf x</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><literal type="number">4000</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>connect_string</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>timestamp</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=localhost port=6666 node_name=one remote_type=%d"</literal></expr></argument>, <argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Error in connection\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_SERIALIZABLE</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>InvalidGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Started a new transaction (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"BEGIN transaction failed for ii=%d\n"</literal><operator>,</operator> <name>ii</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PREPARE successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PREPARE failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"ROLLBACK successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"ROLLBACK failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"COMMIT successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"COMMIT failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
