<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/client/test/test_txnperf.c"><comment type="block">/*
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>client_log</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>      <name>optind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>

<comment type="block">/* Calculate time difference */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>diffTime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t2</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>t1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>usec</name> <init>= <expr><name><name>t1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>usec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>usec</name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sec</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>usec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Help display should match 
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>help</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage:\n  %s [OPTION]...\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -h hostname     GTM proxy/server hostname/IP\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -p port         GTM proxy/serevr port number\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -c count        Number of clients\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -n count        Number of transactions per client\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -s count        Number of statements per transaction\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -i id           Coordinator ID\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>connect_string</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gtmport</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nclients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntxns_per_cli</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nstmts_per_txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gtmhost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>starttime</name></decl>, <decl><type ref="prev"/><name>endtime</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>testid</name></decl>, <decl><type ref="prev"/><name>this_testid</name></decl>, <decl><type ref="prev"/><name>max_testid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>snapsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>avg_sanpsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name><name>child_pids</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>parent_pid</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXN_COUNT</name></cpp:macro>        <cpp:value>1000</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>TXN_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>test_output</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>test_end</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>test_output_csv</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>system_cmd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * Catch standard options before doing much else
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>help</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

     <comment type="block">/*
         * Parse the command like options and set variables
         */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"h:p:c:n:s:i:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
        <switch>switch <condition>(<expr><name>opt</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'h'</literal></expr>:</case>
                <expr_stmt><expr><name>gtmhost</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'p'</literal></expr>:</case>
                <expr_stmt><expr><name>gtmport</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <expr_stmt><expr><name>nclients</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'n'</literal></expr>:</case>
                <expr_stmt><expr><name>ntxns_per_cli</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <expr_stmt><expr><name>nstmts_per_txn</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
                <expr_stmt><expr><name>tmp_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>test_output</name></expr></argument>, <argument><expr><literal type="string">"TEST_OUTPUT_%s\0"</literal></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>test_end</name></expr></argument>, <argument><expr><literal type="string">"TEST_END_%s\0"</literal></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>test_output_csv</name></expr></argument>, <argument><expr><literal type="string">"TEST_OUTPUT_%s.CSV\0"</literal></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized option %c\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>help</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>
        
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d"</literal></expr></argument>, <argument><expr><name>gtmhost</name></expr></argument>, <argument><expr><name>gtmport</name></expr></argument>, <argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>, <argument><expr><literal type="string">"echo -------------------------------------------------------- &gt;&gt; %s"</literal></expr></argument>, <argument><expr><name>test_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>, <argument><expr><literal type="string">"date &gt;&gt; %s"</literal></expr></argument>, <argument><expr><name>test_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>, <argument><expr><literal type="string">"echo -------------------------------------------------------- &gt;&gt; %s"</literal></expr></argument>, <argument><expr><name>test_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>test_output</name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fp2</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>test_output_csv</name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>max_testid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"TEST-ID: %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>testid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>max_testid</name> <operator>&lt;</operator> <name>testid</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>max_testid</name> <operator>=</operator> <name>testid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><name>this_testid</name> <operator>=</operator> <name>max_testid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"TEST-ID: %d"</literal></expr></argument>, <argument><expr><name>this_testid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>parent_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Start as many clients 
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>nclients</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cpid</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cpid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>child_pids</name><index>[<expr><name>ii</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cpid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> <operator>==</operator> <name>parent_pid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"started %d clients\n"</literal></expr></argument>, <argument><expr><name>nclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Error in connection\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>parent_pid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>snapsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name> <operator>&lt;=</operator> <name>ntxns_per_cli</name> <operator>/</operator> <name>TXN_COUNT</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>TXN_COUNT</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>jj</name> <operator>*</operator> <name>TXN_COUNT</name><operator>)</operator> <operator>+</operator> <name>ii</name> <operator>&gt;=</operator> <name>ntxns_per_cli</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>InvalidGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Started a new transaction (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"BEGIN transaction failed for ii=%d\n"</literal><operator>,</operator> <name>ii</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <name>nstmts_per_txn</name></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>snapshot</name> <init>= <expr><call><name>get_snapshot</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>snapsize</name> <operator>+=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PREPARE successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PREPARE failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"ROLLBACK successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"ROLLBACK failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"COMMIT successful (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"COMMIT failed (GXID:%u)\n"</literal><operator>,</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"client [%d] finished %d transactions\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>jj</name> <operator>*</operator> <name>TXN_COUNT</name><operator>)</operator> <operator>+</operator> <name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>parent_pid</name> <operator>==</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>nclients</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>diffTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>avg_sanpsize</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>snapsize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ntxns_per_cli</name> <operator>*</operator> <name>nstmts_per_txn</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Num of client: %d\n"</literal></expr></argument>, <argument><expr><name>nclients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Num of txns/client: %d\n"</literal></expr></argument>, <argument><expr><name>ntxns_per_cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Num of statements/txn: %d\n"</literal></expr></argument>, <argument><expr><name>nstmts_per_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"TPS: %2f\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>ntxns_per_cli</name> <operator>*</operator> <name>nclients</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>diff</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>+</operator> <name><name>diff</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Total snapshot size: %d\n"</literal></expr></argument>, <argument><expr><name>snapsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Average snapshot size: %f\n"</literal></expr></argument>, <argument><expr><name>avg_sanpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"Time: %d.%d\n"</literal></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>, <argument><expr><literal type="string">"touch %s\0"</literal></expr></argument>, <argument><expr><name>test_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>system_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>diffTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>endtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>starttime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>avg_sanpsize</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>snapsize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ntxns_per_cli</name> <operator>*</operator> <name>nstmts_per_txn</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>flock</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>parent_pid</name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,%d,%d,%d,%d,%d,%f,false\n"</literal></expr></argument>, <argument><expr><name>this_testid</name></expr></argument>, <argument><expr><name>nclients</name></expr></argument>, <argument><expr><name>ntxns_per_cli</name></expr></argument>, <argument><expr><name>nstmts_per_txn</name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_usec</name></name></expr></argument>, <argument><expr><name>snapsize</name></expr></argument>, <argument><expr><name>avg_sanpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,%d,%d,%d,%d,%d,%f,true\n"</literal></expr></argument>, <argument><expr><name>this_testid</name></expr></argument>, <argument><expr><name>nclients</name></expr></argument>, <argument><expr><name>ntxns_per_cli</name></expr></argument>, <argument><expr><name>nstmts_per_txn</name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>tv_usec</name></name></expr></argument>, <argument><expr><name>snapsize</name></expr></argument>, <argument><expr><name>avg_sanpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        
    <expr_stmt><expr><call><name>flock</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LOCK_UN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
