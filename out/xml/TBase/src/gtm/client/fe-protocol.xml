<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/client/fe-protocol.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fe-protocol3.c
 *      functions that are specific to frontend/backend protocol version 3
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_seq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_xlog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_client.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
 * This macro lists the backend message types that could be "long" (more
 * than a couple of kilobytes).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_LONG_MESSAGE_TYPE</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((id) == 'S' || (id) == 'E')</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handleSyncLoss</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msgLength</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTM_Result</name> <modifier>*</modifier></type><name>pqParseInput</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gtmpqParseSuccess</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gtmpqReadSeqKey</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * parseInput: if appropriate, parse input data from backend
 * until input is exhausted or a stopping state is reached.
 * Note that this function will NOT attempt to read more data from the backend.
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_Result</name> <modifier>*</modifier></type>
<name>pqParseInput</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name></type>        <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>msgLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>avail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Result</name>    <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name>GTM_Result</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Result</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gtmpqFreeResultData</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Try to read a message.  First get the type code and length. Return
     * if not enough data.
     */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgLength</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Try to validate message type/length here.  A length less than 4 is
     * definitely broken.  Large lengths should only be believed for a few
     * message types.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>msgLength</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>handleSyncLoss</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msgLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>msgLength</name> <operator>&gt;</operator> <literal type="number">30000</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VALID_LONG_MESSAGE_TYPE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>handleSyncLoss</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msgLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Can't process if message body isn't all here yet.
     */</comment>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name> <operator>=</operator> <name>msgLength</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inEnd</name></name> <operator>-</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name>msgLength</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Before returning, enlarge the input buffer if needed to hold
         * the whole message.  This is better than leaving it to
         * gtmpqReadData because we can avoid multiple cycles of realloc()
         * when the message is large; also, we can implement a reasonable
         * recovery strategy if we are unable to make the buffer big
         * enough.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqCheckInBufferSpace</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>msgLength</name></expr></argument>,
                                 <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * XXX add some better recovery code... plan is to skip over
             * the message using its length, then report an error. For the
             * moment, just treat this like loss of sync (which indeed it
             * might be!)
             */</comment>
            <expr_stmt><expr><call><name>handleSyncLoss</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msgLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>id</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="char">'S'</literal></expr>:</case>        <comment type="block">/* command complete */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqParseSuccess</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'E'</literal></expr>:</case>        <comment type="block">/* error return */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                              <argument><expr><literal type="string">"unexpected response from server; first received character was \"%c\"\n"</literal></expr></argument>,
                              <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>+=</operator> <name>msgLength</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>                    <comment type="block">/* switch on protocol character */</comment>
    <comment type="block">/* Successfully consumed this message */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>msgLength</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Normal case: parsing agrees with specified length */</comment>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>inCursor</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Trouble --- report it */</comment>
        <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                          <argument><expr><literal type="string">"message contents do not agree with length in message type \"%c\"\n"</literal></expr></argument>,
                          <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* trust the specified message length as what to skip */</comment>
        <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inStart</name></name> <operator>+=</operator> <literal type="number">5</literal> <operator>+</operator> <name>msgLength</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * handleSyncLoss: clean up after loss of message-boundary sync
 *
 * There isn't really a lot we can do here except abandon the connection.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>handleSyncLoss</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msgLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
    <argument><expr><literal type="string">"lost synchronization with server: got message type \"%c\", length %d\n"</literal></expr></argument>,
                      <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msgLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CONNECTION_BAD</name></expr>;</expr_stmt>        <comment type="block">/* No more connection to backend */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Attempt to read an Error or Notice response message.
 * This is possible in several places, so we break it out as a subroutine.
 * Entry: 'E' message type and length have already been consumed.
 * Exit: returns 0 if successfully consumed message.
 *         returns EOF if not enough data.
 */</comment>
<function><type><name>int</name></type>
<name>gtmpqGetError</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name></type>        <name>id</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If we are a GTM proxy, expect an additional proxy header in the incoming
     * message.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_proxyhdr</name></name></expr></argument>,
                    <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <comment type="block">/*
         * If the allocated buffer is not large enough to hold the proxied
         * data, realloc the buffer.
         *
         * Since the client side code is shared between the proxy and the
         * backend, we don't want any memory context management etc here. So
         * just use plain realloc. Anyways, we don't indent to free the memory.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_datalen</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(
                    <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_datalen</name></name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name></expr></argument>,
                    <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_UNKNOWN</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name>InvalidGTMProxyConnID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Read the fields and save into res.
     */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gtmpQgetResult
 *      Get the next GTM_Result produced.  Returns NULL if no
 *      query work remains or an error has occurred (e.g. out of
 *      memory).
 */</comment>

<function><type><name>GTM_Result</name> <modifier>*</modifier></type>
<name>GTMPQgetResult</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Parse any available data, if our state permits. */</comment>
    <while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>pqParseInput</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>flushResult</name></decl>;</decl_stmt>

        <comment type="block">/*
         * If data remains unsent, send it.  Else we might be waiting for the
         * result of a command the backend hasn't even got yet.
         */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>flushResult</name> <operator>=</operator> <call><name>gtmpqFlush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqWait</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>flushResult</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Wait for some more data, and load it. */</comment>
        <if_stmt><if>if <condition>(<expr><name>flushResult</name> <operator>||</operator>
            <call><name>gtmpqWait</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>gtmpqReadData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * conn-&gt;errorMessage has been set by gtmpqWait or gtmpqReadData.
             */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * return 0 if parsing command is totally completed.
 * return 1 if it needs to be read continuously.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gtmpqParseSuccess</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>xcnt</name></decl>, <decl><type ref="prev"/><name>xsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>xip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_OK</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_proxyhdr</name></name></expr></argument>,
                    <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name> <operator>-=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name>InvalidGTMProxyConnID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * If we are dealing with a proxied message, just read the remaining binary
     * data which can then be forwarded to the right backend.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>!=</operator> <name>InvalidGTMProxyConnID</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * If the allocated buffer is not large enough to hold the proxied
         * data, realloc the buffer.
         *
         * Since the client side code is shared between the proxy and the
         * backend, we don't want any memory context management etc here. So
         * just use plain realloc. Anyways, we don't indent to free the memory.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_datalen</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(
                    <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_datalen</name></name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>result</name><operator>-&gt;</operator><name>gr_proxy_data</name></name></expr></argument>,
                    <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_UNKNOWN</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_OK</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SYNC_STANDBY_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>NODE_BEGIN_REPLICATION_INIT_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>NODE_END_REPLICATION_INIT_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>BEGIN_BACKUP_SUCCEED_RESULT</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>backup_result</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>BEGIN_BACKUP_FAIL_RESULT</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>backup_result</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>END_BACKUP_RESULT</name></expr>:</case>
            <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
        <case>case <expr><name>REGISTER_SESSION_RESULT</name></expr>:</case>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <case>case <expr><name>TXN_BEGIN_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txnhandle</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_BEGIN_GETGXID_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid_tp</name><operator>.</operator><name>gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid_tp</name><operator>.</operator><name>timestamp</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
            <comment type="block">/* Add for global timestamp */</comment>
        <case>case <expr><name>TXN_BEGIN_GETGTS_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>grd_gts</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* compatible with former protocol,gtm sends read-only flag only if it's in read-only state */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>gtm_readonly</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>gtm_readonly</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_BEGIN_GETGTS_MULTI_RESULT</name></expr>:</case>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>grd_gts</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>


        <case>case <expr><name>TXN_CHECK_GTM_STATUS_RESULT</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>node_status</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>grd_gts</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>master_flush</name></name><operator>)</operator></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <name>GTM_MAX_WALSENDER</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name>   <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if<condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if<condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if<condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>,<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <case>case <expr><name>TXN_BEGIN_GETGXID_AUTOVACUUM_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_PREPARE_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_START_PREPARED_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_LOG_TRANSACTION_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_LOG_SCAN_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_ROLLBACK_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_COMMIT_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_COMMIT_PREPARED_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_eof_txn</name><operator>.</operator><name>gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_eof_txn</name><operator>.</operator><name>status</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_GXID_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn</name><operator>.</operator><name>txnhandle</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn</name><operator>.</operator><name>gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_NEXT_GXID_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_next_gxid</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_BEGIN_GETGXID_MULTI_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>,
                              <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_multi</name><operator>.</operator><name>timestamp</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_COMMIT_MULTI_RESULT</name></expr>:</case>
        <case>case <expr><name>TXN_ROLLBACK_MULTI_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>status</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_rc_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>SNAPSHOT_GXID_GET_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_snap_multi</name><operator>.</operator><name>txnhandle</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* Fall through */</comment>
        <case>case <expr><name>SNAPSHOT_GET_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_snap_multi</name><operator>.</operator><name>gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* Fall through */</comment>
        <case>case <expr><name>SNAPSHOT_GET_MULTI_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_snap_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_snap_multi</name><operator>.</operator><name>status</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_snap_multi</name><operator>.</operator><name>txn_count</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xmin</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xmax</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>xsize</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_xip_size</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xcnt</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xip</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xip</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xip</name> <operator>||</operator> <name>xcnt</name> <operator>&gt;</operator> <name>xsize</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xip</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>xip</name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
                                                         <name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>xip</name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>xip</name></expr></argument>,
                                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_snapshot</name><operator>.</operator><name>sn_xip</name></name> <operator>=</operator> <name>xip</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_xip_size</name></name> <operator>=</operator> <name>xcnt</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>xcnt</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>

        <case>case <expr><name>SEQUENCE_INIT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_RESET_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_CLOSE_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_RENAME_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_COPY_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_ALTER_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_SET_VAL_RESULT</name></expr>:</case>
        <case>case <expr><name>MSG_DB_SEQUENCE_RENAME_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqReadSeqKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seqkey</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>SEQUENCE_GET_CURRENT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_GET_NEXT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_GET_LAST_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqReadSeqKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqkey</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqval</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_type</name></name> <operator>==</operator> <name>SEQUENCE_GET_NEXT_RESULT</name> <operator>&amp;&amp;</operator>
<call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>rangemax</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <case>case <expr><name>STORAGE_TRANSFER_RESULT</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int32</name></type> <name>loop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
            <comment type="block">/* get xlog start pos and timeline */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>time_line</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeLineID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<comment type="block">/* communication protocol: total data len, pkg number, {pkg_len,pkg_data}, {pkg_len,pkg_data},*/</comment>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* get loop count */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loop_count</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_buf</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<comment type="block">/* a length of the next send pkg */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* pkg body */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name>data_buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>data_len</name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>!=</operator> <name>GTM_RESULT_OK</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>TXN_FINISH_GID_RESULT</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_finish_status</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>MSG_LIST_GTM_STORE_RESULT</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_identifier</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_major_version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_minor_version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_gtm_status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_next_gts</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_global_xmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_next_gxid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_seq_freelist</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_txn_freelist</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_lsn</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>


			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_last_update_time</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_crc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>seq_total</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>seq_used</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>txn_total</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gtm_status</name><operator>.</operator><name>txn_used</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>MSG_LIST_GTM_STORE_SEQ_RESULT</name></expr>:</case>    <comment type="block">/* List  gtm running sequence info */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name></name> <operator>=</operator>
					<operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
												 <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>MSG_LIST_GTM_TXN_STORE_RESULT</name></expr>:</case>    <comment type="block">/* List  gtm running sequence info */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name></name> <operator>=</operator>
					<operator>(</operator><name>GTM_StoredTransactionInfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
														 <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
								  <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block>


		<case>case <expr><name>MSG_CHECK_GTM_SEQ_STORE_RESULT</name></expr>:</case>    <comment type="block">/* Check gtm sequence valid info */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name></name> <operator>=</operator>
					<operator>(</operator><name>GTMStorageSequneceStatus</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageSequneceStatus</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
														<name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageSequneceStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>,
								  <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>MSG_CHECK_GTM_TXN_STORE_RESULT</name></expr>:</case>    <comment type="block">/* Check gtm transaction usage info */</comment>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name></name> <operator>=</operator>
					<operator>(</operator><name>GTMStorageTransactionStatus</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageTransactionStatus</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
														   <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageTransactionStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block>

        <case>case <expr><name>MSG_GET_GTM_STATISTICS_RESULT</name></expr>:</case>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>start_time</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>end_time</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>sequences_remained</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>txn_remained</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>stat_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>,
                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>stat_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avg_costtime</name></expr></argument>,
                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>stat_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>,
                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>statistic_result</name><operator>.</operator><name>stat_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>,
                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <break>break;</break>
        </block_content>}</block>
	    <case>case <expr><name>MSG_GET_GTM_ERRORLOG_RESULT</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name> <operator>=</operator>
                    <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name></expr></argument>,
                              <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_msglen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <case>case <expr><name>SEQUENCE_LIST_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq_count</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq</name></name> <operator>=</operator>
                    <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
                                           <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

                <comment type="block">/* a length of the next serialized sequence */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* a data body of the serialized sequence */</comment>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>gtm_deserialize_sequence</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq_list</name><operator>.</operator><name>seq</name></name> <operator>+</operator> <name>i</name></expr></argument>,
                                         <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_STATUS_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_ALL_PREPARED_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_GID_DATA_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>prepared_gxid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodelen</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodelen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
				<comment type="block">/* Do necessary allocation, free outside */</comment>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name></name> <operator>=</operator>
                        <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodelen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* get the string itself */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name></name></expr></argument>,
                                  <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodelen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* null terminate the name*/</comment>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodelen</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_get_gid_data</name><operator>.</operator><name>nodestring</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break>break;</break>

        <case>case <expr><name>TXN_GXID_LIST_RESULT</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>len</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * I don't understand why malloc() here?  Should be palloc()?
             */</comment>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>ptr</name></name> <operator>=</operator>
                    <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>ptr</name></name></expr></argument>,
                              <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_txn_gid_list</name><operator>.</operator><name>len</name></name></expr></argument>,
                              <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>  <comment type="block">/* serialized GTM_Transactions */</comment>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>NODE_UNREGISTER_RESULT</name></expr>:</case>
        <case>case <expr><name>NODE_REGISTER_RESULT</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>type</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>len</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name> <operator>=</operator>
                    <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name></expr></argument>,
                              <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>len</name></name></expr></argument>,
                              <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>  <comment type="block">/* serialized GTM_Transactions */</comment>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

            <break>break;</break>

		<case>case <expr><name>NODE_LIST_RESULT</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>   <name>buf_size</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><literal type="string">"malloc buffer for node list data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition>
				<block>{<block_content>
                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><literal type="string">"realloc buffer for node list data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gtm_deserialize_pgxcnodeinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>proxyname</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sessions</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sessions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
			    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>BARRIER_RESULT</name></expr>:</case>
			<break>break;</break>

        <case>case <expr><name>REPORT_XMIN_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>latest_completed_xid</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>global_xmin</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_report_xmin</name><operator>.</operator><name>errcode</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MSG_CLEAN_SESSION_SEQ_RESULT</name></expr>:</case>
            <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
        <case>case <expr><name>MSG_REPLICATION_START_RESULT_SUCCESS</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>MSG_REPLICATION_START_RESULT_FAIL</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>MSG_REPLICATION_STATUS</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_replication</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_replication</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_replication</name><operator>.</operator><name>apply</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>

        <case>case <expr><name>MSG_REPLICATION_CONTENT</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>loop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>offset</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pack_size</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>Send_OK</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>flush</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>reply</name></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt64</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>GTM_XLOG_SEG_SIZE</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <comment type="block">/* get loop count */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>loop_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loop_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pack_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>pack_size</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>pack_size</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if<condition>(<expr><name>offset</name> <operator>!=</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <expr_stmt><expr><call><name>printfGTMPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
                              <argument><expr><literal type="string">"unexpected result type from server; result typr was \"%d\"\n"</literal></expr></argument>,
                              <argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>=</operator> <name>GTM_RESULT_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>gr_status</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gtmpqReadSeqKey</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Read keylength
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Do some sanity checks on the keylength
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>&gt;</operator> <name>GTM_MAX_SEQKEY_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call><operator>)</operator>    <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>gtmpqGetnchar</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * release the one-time-applied memory. if the memory design is reused,
 * please release it last in freeGTM_Conn
 */</comment>
<function><type><name>void</name></type>
<name>gtmpqFreeResultResource</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SEQUENCE_INIT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_RESET_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_CLOSE_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_RENAME_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_COPY_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_ALTER_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_SET_VAL_RESULT</name></expr>:</case>
        <case>case <expr><name>MSG_DB_SEQUENCE_RENAME_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>SEQUENCE_GET_CURRENT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_GET_NEXT_RESULT</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_GET_LAST_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seq</name><operator>.</operator><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_STATUS_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>TXN_GET_ALL_PREPARED_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>BARRIER_RESULT</name></expr>:</case>
            <break>break;</break>

        <case>case <expr><name>SNAPSHOT_GET_RESULT</name></expr>:</case>
        <case>case <expr><name>SNAPSHOT_GXID_GET_RESULT</name></expr>:</case>
            <comment type="block">/*
             * Lets not free the xip array in the snapshot since we may need it
             * again shortly
             */</comment>
            <break>break;</break>
        <case>case <expr><name>NODE_UNREGISTER_RESULT</name></expr>:</case>
        <case>case <expr><name>NODE_REGISTER_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node</name><operator>.</operator><name>node_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>NODE_LIST_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>proxyname</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>proxyname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sessions</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>genFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sessions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sessions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>nodeinfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_node_list</name><operator>.</operator><name>num_node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
        <case>case <expr><name>MSG_REPLICATION_CONTENT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>xlog_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_xlog_data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <case>case <expr><name>TXN_CHECK_GTM_STATUS_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name> <operator>&lt;=</operator> <name>GTM_MAX_WALSENDER</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_is_sync</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_timestamp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>slave_flush_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>application_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>gr_resdata</name><operator>.</operator><name>grd_gts</name><operator>.</operator><name>standby_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MSG_GET_GTM_ERRORLOG_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>errlog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_errlog</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>STORAGE_TRANSFER_RESULT</name></expr>:</case>
            <comment type="block">/* free result of last call */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_storage_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MSG_LIST_GTM_STORE_SEQ_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>seqs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_seq</name><operator>.</operator><name>count</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MSG_LIST_GTM_TXN_STORE_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>txns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_txn</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MSG_CHECK_GTM_SEQ_STORE_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>seqs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_seq</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>MSG_CHECK_GTM_TXN_STORE_RESULT</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>txns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>grd_store_check_txn</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gtmpqFreeResultData</name><parameter_list>(<parameter><decl><type><name>GTM_Result</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>remote_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
	 * If we are running as a GTM proxy, we don't have anything to do. This may
	 * change though as we add more message types below and some of them may
	 * need cleanup even at the proxy level
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>remote_type</name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>gtmpqFreeResultResource</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
