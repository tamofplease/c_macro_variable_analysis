<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/test/test_serialize.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type>   <name>threadinfo_key</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>setUp</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tearDown</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>test_snapshotdata_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_SnapshotData</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* build a dummy GTM_SnapshotData data. */</comment>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>GTM_SnapshotData</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SnapshotData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xmin</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xmax</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xcnt</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xip</name></name>  <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sn_xmin=%d, sn_xmax=%d, sn_xcnt=%d, sn_xip=%d\n"</literal></expr></argument>,
     <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* serialize */</comment>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SnapshotData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_serialize_snapshotdata</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* destroy old buf */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SnapshotData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* deserialize */</comment>
  <expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>GTM_SnapshotData</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SnapshotData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_deserialize_snapshotdata</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sn_xmin=%d, sn_xmax=%d, sn_xcnt=%d, sn_xip=%d\n"</literal></expr></argument>,
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type>
<name>build_dummy_gtm_transactioninfo</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_handle</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_proxy_client_id</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_datanodecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_datanodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_coordcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_coordinators</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_gid</name></name> <operator>=</operator> <literal type="string">"hoge"</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmin</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmax</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xip</name></name>  <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>test_transactioninfo_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>data</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>datanode</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>coordnode</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* build a dummy GTM_SnapshotData data. */</comment>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>build_dummy_gtm_transactioninfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_datanodecount</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_datanodes</name></name> <operator>=</operator> <name>datanode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_coordcount</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gti_coordinators</name></name> <operator>=</operator> <name>coordnode</name></expr>;</expr_stmt>

  <comment type="block">/* serialize */</comment>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>GTM_TransactionInfo</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_serialize_transactioninfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* destroy old buf */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* deserialize */</comment>
  <expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_deserialize_transactioninfo</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"deserialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_handle</name></name><operator>==</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_proxy_client_id</name></name><operator>==</operator><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_datanodecount</name></name><operator>==</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_coordcount</name></name><operator>==</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmin</name></name><operator>==</operator><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmax</name></name><operator>==</operator><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name><operator>==</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>(<argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gti_current_snapshot</name><operator>.</operator><name>sn_xip</name></name><operator>==</operator><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>test_transactions_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_Transactions</name> <modifier>*</modifier></type><name>data</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>datanode</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>coordnode</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>datanode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DN_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>coordnode</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"CN_5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>GTM_Transactions</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Transactions</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>gt_lastslot</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

  <comment type="block">/* build a dummy GTM_TransactionInfo data. */</comment>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>build_dummy_gtm_transactioninfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>gti_datanodecount</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>gti_datanodes</name></name> <operator>=</operator> <name>datanode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>gti_coordcount</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>gti_coordinators</name></name> <operator>=</operator> <name>coordnode</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gt_lastslot=%d\n"</literal></expr></argument>,
     <argument><expr><name><name>data</name><operator>-&gt;</operator><name>gt_lastslot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* serialize */</comment>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>gtm_get_transactions_size</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>gtm_serialize_transactions</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr> )</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* destroy old buf */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Transactions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* deserialize */</comment>
  <expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>GTM_Transactions</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Transactions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_deserialize_transactions</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"deserialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gt_lastslot=%d\n"</literal></expr></argument>,
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gt_lastslot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gti_handle=%d, gti_proxy_client_id=%d\n"</literal></expr></argument>, 
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gti_handle</name></expr></argument>,
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>gt_transactions_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gti_proxy_client_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>test_pgxcnodeinfo_1</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name> <operator>=</operator> <literal type="string">"three"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name> <operator>=</operator> <literal type="string">"foo"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name> <operator>=</operator> <literal type="string">"bar"</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"type=%d, nodename=%s, port=%d, ipaddress=%s, datafolder=%s\n"</literal></expr></argument>,
     <argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
     <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* serialize */</comment>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>gtm_get_pgxcnodeinfo_size</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>gtm_serialize_pgxcnodeinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr> )</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* destroy old buf */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* deserialize */</comment>
  <expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_deserialize_pgxcnodeinfo</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"deserialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"type=%d, nodename=%s, port=%d, ipaddress=%s, datafolder=%s\n"</literal></expr></argument>,
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
     <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>data2</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>test_seqinfo_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>gs_key</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* build a dummy GTM_SnapshotData data. */</comment>
  <expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>gs_key</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gs_key</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gs_key</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name>GTM_SEQ_DB_NAME</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_key</name></name> <operator>=</operator> <operator>&amp;</operator><name>gs_key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_last_value</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d1</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

  <comment type="block">/* serialize */</comment>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>gtm_get_sequence_size</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>gtm_serialize_sequence</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* destroy old buf */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* deserialize */</comment>
  <comment type="line">//  d2 = (GTM_SeqInfo *)malloc(sizeof(GTM_SeqInfo));</comment>
  <expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>gtm_deserialize_sequence</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name><name>d2</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>d2</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name><name>d2</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_type</name></name><operator>==</operator><name>GTM_SEQ_DB_NAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>test_snapshotdata_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_transactioninfo_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_transactions_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_pgxcnodeinfo_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_seqinfo_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
