<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/test/test_repli.c"><comment type="block">/*
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type>     <name>threadinfo_key</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>setUp</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=localhost port=6666 node_name=one remote_type=%d"</literal></expr></argument>,
        <argument><expr><name>GTM_NODE_GTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>conn</name><operator>!=</operator><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PGconnectGTM() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tearDown</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test01</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>begin_replication_initial_sync</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"begin_replication_initial_sync() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"begin_replication_initial_sync() failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>end_replication_initial_sync</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"end_replication_initial_sync() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"end_replication_initial_sync() failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test04</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Transactions</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>ts</name></decl>;</decl_stmt>

    <comment type="line">//    data = (GTM_PGXCNodeInfo *)malloc( sizeof(GTM_PGXCNodeInfo)*128 );</comment>
    <comment type="line">//    memset(data, 0, sizeof(GTM_PGXCNodeInfo)*128);</comment>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>get_txn_gxid_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_txn_gxid_list() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_txn_gxid_list() failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test05</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>next_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>next_gxid</name> <operator>=</operator> <call><name>get_next_gxid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>next_gxid</name><operator>!=</operator><name>InvalidGlobalTransactionId</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_next_gxid() ok. - %ld\n"</literal><operator>,</operator> <name>next_gxid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_txn_gxid_list() failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test08</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>next_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>key1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>key2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>key3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name><name>seq_list</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>key1</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"seq1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key1</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key2</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"seq2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key2</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key3</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"seq3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key3</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1024</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>get_sequence_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>seq_list</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_seq_list() ok. - %d\n"</literal><operator>,</operator> <name>rc</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>rc</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"key = %s\n"</literal><operator>,</operator> <name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"get_seq_list() failed.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>test01</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test04</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
    test05();
    test08();
    */</comment>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
