<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/test/test_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type>     <name>threadinfo_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GTM_ThreadID</name></type>      <name>TopMostThreadID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>timestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>connect_string</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>print_nodeinfo</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"type=%d, nodename=%s, proxyname=%s, ipaddress=%s, port=%d, datafolder=%s, status=%d\n"</literal><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>type</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>nodename</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>proxyname</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>ipaddress</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>port</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>datafolder</name></name><operator>,</operator>
            <name><name>d</name><operator>.</operator><name>status</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Connect to active GTM.
 */</comment>
<function><type><name>void</name></type>
<name>connect1</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=localhost port=6666 node_name=one_zero_one remote_type=%d"</literal></expr></argument>,
        <argument><expr><name>GTM_NODE_GTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Error in connection\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PGconnectGTM() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Connect to standby GTM.
 */</comment>
<function><type><name>void</name></type>
<name>connect2</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=localhost port=6667 node_name=one_zero_two remote_type=%d"</literal></expr></argument>,
        <argument><expr><name>GTM_NODE_GTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Error in connection\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PGconnectGTM() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Get a word count with using grep command in a log file.
 */</comment>
<function><type><name>int</name></type>
<name>grep_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"grep -c '%s' %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
</unit>
