<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/test/test_seq4.c"><comment type="block">/*
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type>     <name>threadinfo_key</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>setUp</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>connect1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tearDown</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_seq4_01</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * open sequence
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name>   <operator>=</operator> <name>GTM_SEQ_FULL_NAME</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>increment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minval</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxval</name>    <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>startval</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cycle</name>     <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>open_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
               <argument><expr><name>increment</name></expr></argument>,
               <argument><expr><name>minval</name></expr></argument>,
               <argument><expr><name>maxval</name></expr></argument>,
               <argument><expr><name>startval</name></expr></argument>,
               <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Opening sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Opening sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * get current
     */</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_current</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 0 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 0 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_current</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 0 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 0 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * get next
     */</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 1 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 1 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 2 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 2 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 3 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 3 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * set value
     */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>set_val</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Setting new value 13 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Setting new value 13 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 14 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 14 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef> <comment type="block">/* FIXME: snaga
    /*
     * FIXME: When `iscalled' is false, set_val() does not affect the sequence value.
     */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>set_val</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * reset
     */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>reset_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Resetting sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Resetting sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 1 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 1 for sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * close
     */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Closing sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Closing sequence seq1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>test_seq4_02</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * create a sequence
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name>   <operator>=</operator> <name>GTM_SEQ_FULL_NAME</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>increment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minval</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxval</name>    <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>startval</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cycle</name>     <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>open_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
               <argument><expr><name>increment</name></expr></argument>,
               <argument><expr><name>minval</name></expr></argument>,
               <argument><expr><name>maxval</name></expr></argument>,
               <argument><expr><name>startval</name></expr></argument>,
               <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create a new key */</comment>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seqnew"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name>   <operator>=</operator> <name>GTM_SEQ_FULL_NAME</name></expr>;</expr_stmt>

    <comment type="block">/*
     * rename key
     */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rename_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Renaming sequence seq1 to seqnew"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Renaming sequence seq1 to seqnew"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Closing sequence seqnew"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Closing sequence seqnew"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>test_seq4_03</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * create a sequence
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"seq2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name>   <operator>=</operator> <name>GTM_SEQ_FULL_NAME</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>increment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minval</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxval</name>    <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>startval</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cycle</name>     <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>open_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
               <argument><expr><name>increment</name></expr></argument>,
               <argument><expr><name>minval</name></expr></argument>,
               <argument><expr><name>maxval</name></expr></argument>,
               <argument><expr><name>startval</name></expr></argument>,
               <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>increment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>minval</name>    <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxval</name>    <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>startval</name>  <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cycle</name>     <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>alter_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
                    <argument><expr><name>increment</name></expr></argument>,
                    <argument><expr><name>minval</name></expr></argument>,
                    <argument><expr><name>maxval</name></expr></argument>,
                    <argument><expr><name>startval</name></expr></argument>,
                    <argument><expr><literal type="number">256</literal></expr></argument>, <comment type="block">/* lastval */</comment>
                    <argument><expr><name>cycle</name></expr></argument>,
                    <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Altering sequence key seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Altering sequence key seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_current</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 100 for sequence seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting current value 100 for sequence seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>cur</name><operator>==</operator><literal type="number">101</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_ACTIVE</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 101 for sequence seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><call><name>grep_count</name><argument_list>(<argument><expr><name>LOG_STANDBY</name></expr></argument>, <argument><expr><literal type="string">"Getting next value 101 for sequence seq2"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEARDOWN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"./stop.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"./clean.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"./start.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test_seq4_01</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_seq4_02</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* rename */</comment>
    <expr_stmt><expr><call><name>test_seq4_03</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* alter */</comment>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
