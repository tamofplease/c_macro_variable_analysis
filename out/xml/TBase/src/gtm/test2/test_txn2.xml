<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/test2/test_txn2.c"><comment type="block">/*
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type>     <name>threadinfo_key</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>setUp</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=localhost port=6666 node_name=one remote_type=%d"</literal></expr></argument>,
        <argument><expr><name>GTM_NODE_GTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Error in connection\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>client_log</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"PGconnectGTM() ok.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tearDown</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_txn_21</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name><name>txn_isolation_level</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>txn_read_only</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name><name>txn_connid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>start_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>start_ts</name></decl>;</decl_stmt>

    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn_isolation_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GTM_ISOLATION_SERIALIZABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_read_only</name><index>[<expr><name>i</name></expr>]</index></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <comment type="line">//        txn_connid[i]          = InvalidGTMProxyConnID;</comment>
        <expr_stmt><expr><name><name>txn_connid</name><index>[<expr><name>i</name></expr>]</index></name>          <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>begin_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                     <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>txn_connid</name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * commit test
     */</comment>
    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <name>txn_count2</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>start_gxid</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>commit_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tearDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_txn_22</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name><name>txn_isolation_level</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>txn_read_only</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name><name>txn_connid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>start_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>start_ts</name></decl>;</decl_stmt>

    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn_isolation_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GTM_ISOLATION_SERIALIZABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_read_only</name><index>[<expr><name>i</name></expr>]</index></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <comment type="line">//        txn_connid[i]          = InvalidGTMProxyConnID;</comment>
        <expr_stmt><expr><name><name>txn_connid</name><index>[<expr><name>i</name></expr>]</index></name>          <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>begin_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                     <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>txn_connid</name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * abort test
     */</comment>
    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <name>txn_count2</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>start_gxid</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>abort_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tearDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_txn_23</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name><name>txn_isolation_level</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>txn_read_only</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name><name>txn_connid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>start_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>start_ts</name></decl>;</decl_stmt>

    <comment type="block">/* request parameters */</comment>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* results */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xmin_out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xmax_out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>recent_global_xmin_out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>xcnt_out</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn_isolation_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>GTM_ISOLATION_SERIALIZABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_read_only</name><index>[<expr><name>i</name></expr>]</index></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <comment type="line">//        txn_connid[i]          = InvalidGTMProxyConnID;</comment>
        <expr_stmt><expr><name><name>txn_connid</name><index>[<expr><name>i</name></expr>]</index></name>          <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>begin_transaction_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                     <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>txn_connid</name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * snapshot get test
     */</comment>
    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <name>txn_count2</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>start_gxid</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>snapshot_get_multi</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>txn_count2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>xmin_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmax_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recent_global_xmin_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcnt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>txn_count2</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tearDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>test_txn_31</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_SERIALIZABLE</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>gxid</name> <operator>!=</operator> <name>InvalidGlobalTransactionId</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* kill standby while sleeping. */</comment>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepare_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSERT</name><argument_list>( <argument><expr><name>rc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tearDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>test_txn2_01</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
