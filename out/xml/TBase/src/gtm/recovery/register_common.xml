<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/recovery/register_common.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * register.c
 *  PGXC Node Register on GTM and GTM Proxy, node registering functions
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_NODE_FILE</name></cpp:macro>            <cpp:value>"register.node"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_HASH_TABLE_SIZE</name></cpp:macro>    <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_NODE_FILE_MAX_PATH</name></cpp:macro>    <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GTM_NodeInfoHashBucket</name>
<block>{
    <decl_stmt><decl><type><name>gtm_List</name>        <modifier>*</modifier></type><name>nhb_list</name></decl>;</decl_stmt>
}</block></struct></type> <name>GTM_PGXCNodeInfoHashBucket</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>GTMPGXCNodeFile</name><index>[<expr><name>GTM_NODE_FILE_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Lock access of record file when necessary */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name></type> <name>RegisterFileLock</name></decl>;</decl_stmt>

<comment type="block">/* Lock to control registration/unregistration of nodes */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name></type> <name>PGXCNodesLock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>NodeRegisterMagic</name> <init>= <expr><literal type="number">0xeaeaeaea</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>NodeUnregisterMagic</name> <init>= <expr><literal type="number">0xebebebeb</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>NodeEndMagic</name> <init>= <expr><literal type="number">0xefefefef</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_GlobalXmin</name></cpp:macro> <cpp:value>GTMTransactions.gt_recent_global_xmin</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_PGXCNodeInfoHashBucket</name></type> <name><name>GTM_PGXCNodes</name><index>[<expr><name>NODE_HASH_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_Timestamp</name></type> <name>GTM_GlobalXminComputedTime</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>pgxcnode_gethash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgxcnode_remove_info</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgxcnode_add_info</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pgxcnode_copy_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pgxcnode_type_equal</name><parameter_list>(<parameter><type><name>type1</name></type></parameter>,<parameter><type><name>type2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(type1 == type2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pgxcnode_port_equal</name><parameter_list>(<parameter><type><name>port1</name></type></parameter>,<parameter><type><name>port2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(port1 == port2)</cpp:value></cpp:define>

<function><type><name>size_t</name></type>
<name>pgxcnode_get_all</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>locked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NODE_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;nhb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>curr_nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>curr_nodeinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>curr_nodeinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>curr_nodeinfo</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locked</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>pgxcnode_find_by_type</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NODE_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;nhb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"pgxcnode_find_by_type: cur=%p, ipaddress=%s"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the pgxcnode info structure for the given node type and number key.
 */</comment>
<function><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type>
<name>pgxcnode_find_info</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>pgxcnode_gethash</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>curr_nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;nhb_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>curr_nodeinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pgxcnode_type_equal</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>curr_nodeinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>curr_nodeinfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the Hash Key depending on the node name
 * We do not except to have hundreds of nodes yet,
 * This function could be replaced by a better one
 * such as a double hash function indexed on type and Node Name
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>pgxcnode_gethash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>            <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodename</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nodename</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x238F13AF</literal> <operator>*</operator> <name>length</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>nodename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>*</operator> <literal type="number">5</literal> <operator>%</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><literal type="number">1103515243</literal> <operator>*</operator> <name>value</name> <operator>+</operator> <literal type="number">12345</literal><operator>)</operator> <operator>%</operator> <literal type="number">65537</literal> <operator>&amp;</operator> <literal type="number">0x00000FFF</literal></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>hash</name> <operator>%</operator> <name>NODE_HASH_TABLE_SIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove a PGXC Node Info structure from the global hash table
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pgxcnode_remove_info</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>pgxcnode_gethash</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name>   <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>nhb_list</name></name> <operator>=</operator> <call><name>gtm_list_delete</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>nhb_list</name></name></expr></argument>, <argument><expr><name>nodeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add a PGXC Node info structure to the global hash table
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pgxcnode_add_info</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>pgxcnode_gethash</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name>   <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name> <operator>=</operator> <name>GTM_GlobalXmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;nhb_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>curr_nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>curr_nodeinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* GTM Proxy are always registered as they do not have Identification numbers yet */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>pgxcnode_type_equal</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>NODE_CONNECTED</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * There are two ways nodes get registered on the GTM, either
                 * via ClusterMonitor or when a distribution session is
                 * started. We differentiate between them. While its okay to
                 * see duplicate messages for session registration or a session
                 * registration message when the node is already registered by
                 * the ClusterMonitor. Otherwise, return an error.
                 *
                 * The session registration is also converted into node
                 * registration if the second message comes late
                 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Node with the given ID number already exists - %s %d:%d"</literal></expr></argument>,
                            <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name></expr></argument>,
                            <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name> <operator>&amp;&amp;</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>EEXIST</name></expr>;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/*
                 * Node has been disconnected abruptly.
                 * And we are sure that disconnections are not done by other node
                 * trying to use the same ID.
                 * So check if its data (port, datafolder and remote IP) has changed
                 * and modify it.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pgxcnode_port_equal</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>,
                               <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>,
                               <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name> <operator>=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>,
                               <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>,
                               <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name> <operator>=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Reconnect a disconnected node */</comment>
                <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>NODE_CONNECTED</name></expr>;</expr_stmt>

                <comment type="block">/* Set socket number with the new one */</comment>
                <expr_stmt><expr><name><name>curr_nodeinfo</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * Safe to add the structure to the list
     */</comment>
    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>nhb_list</name></name> <operator>=</operator> <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>nhb_list</name></name></expr></argument>, <argument><expr><name>nodeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Makes a copy of given string in TopMostMemoryContext
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pgxcnode_copy_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the node information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>retstr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>,
                                         <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>retstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>retstr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>retstr</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>retstr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unregister the given node
 */</comment>
<function><type><name>int</name></type>
<name>Recovery_PGXCNodeUnregister</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>in_recovery</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Unregistration has to be made by the same connection as the one used for registration
         * or the one that reconnected the node.
         */</comment>
        <expr_stmt><expr><call><name>pgxcnode_remove_info</name><argument_list>(<argument><expr><name>nodeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Add a record to file on disk saying that this node has been unregistered correctly */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_recovery</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Recovery_RecordRegisterInfo</name><argument_list>(<argument><expr><name>nodeinfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Node:%s host:%s port:%d forder:%s unregistered."</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, 
                                                                     <argument><expr><ternary><condition><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr> ?</condition><then> <expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>, 
                                                                     <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, 
                                                                     <argument><expr><ternary><condition><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr> ?</condition><then> <expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>Recovery_PGXCNodeRegister</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name></decl></parameter>,
                          <parameter><decl><type><name>char</name>            <modifier>*</modifier></type><name>nodename</name></decl></parameter>,
                          <parameter><decl><type><name>GTM_PGXCNodePort</name></type>    <name>port</name></decl></parameter>,
                          <parameter><decl><type><name>char</name>            <modifier>*</modifier></type><name>proxyname</name></decl></parameter>,
                          <parameter><decl><type><name>GTM_PGXCNodeStatus</name></type>    <name>status</name></decl></parameter>,
                          <parameter><decl><type><name>char</name>            <modifier>*</modifier></type><name>ipaddress</name></decl></parameter>,
                          <parameter><decl><type><name>char</name>            <modifier>*</modifier></type><name>datafolder</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type>            <name>in_recovery</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type>            <name>socket</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type>            <name>is_session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>nodeinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Fill in structure */</comment>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodename</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name> <operator>=</operator> <call><name>pgxcnode_copy_char</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>proxyname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name> <operator>=</operator> <call><name>pgxcnode_copy_char</name><argument_list>(<argument><expr><name>proxyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>datafolder</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name> <operator>=</operator> <call><name>pgxcnode_copy_char</name><argument_list>(<argument><expr><name>datafolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ipaddress</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name> <operator>=</operator> <call><name>pgxcnode_copy_char</name><argument_list>(<argument><expr><name>ipaddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <name>socket</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>is_session</name></name> <operator>=</operator> <name>is_session</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"Recovery_PGXCNodeRegister Request info: type=%d, nodename=%s, port=%d,"</literal> \
              <literal type="string">"datafolder=%s, ipaddress=%s, status=%d"</literal></expr></argument>,
              <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>, <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Recovery_PGXCNodeRegister Node info: type=%d, nodename=%s, port=%d, "</literal>\
              <literal type="string">"datafolder=%s, ipaddress=%s, status=%d"</literal></expr></argument>,
              <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
              <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add PGXC Node Info to the global hash table */</comment>
    <expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>pgxcnode_add_info</name><argument_list>(<argument><expr><name>nodeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Add a Record to file disk saying that this node
     * with given data has been correctly registered
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_recovery</name> <operator>&amp;&amp;</operator> <name>errcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Recovery_RecordRegisterInfo</name><argument_list>(<argument><expr><name>nodeinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>




<comment type="block">/*
 * Called at GTM shutdown, rewrite on disk register information
 * and write only data of nodes currently registered.
 */</comment>
<function><type><name>void</name></type>
<name>Recovery_SaveRegisterInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>ctlfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>filebkp</name><index>[<expr><name>GTM_NODE_FILE_MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Create a backup file in case their is a problem during file writing */</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filebkp</name></expr></argument>, <argument><expr><literal type="string">"%s.bkp"</literal></expr></argument>, <argument><expr><name>GTMPGXCNodeFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ctlfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filebkp</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>,
                 <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ctlfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>NODE_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTM_PGXCNodes</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block">/* Write one by one information about registered nodes */</comment>
        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;nhb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>nodeinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NodeRegisterMagic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>NodeRegisterMagic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodePort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NodeEndMagic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeEndMagic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Replace former file by backup file */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>filebkp</name></expr></argument>, <argument><expr><name>GTMPGXCNodeFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Cannot save register file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add a Register or Unregister record on PGXC Node file on disk.
 */</comment>
<function><type><name>void</name></type>
<name>Recovery_RecordRegisterInfo</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_register</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ctlfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ctlfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTMPGXCNodeFile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr></argument>,
                 <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctlfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_register</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NodeRegisterMagic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>NodeRegisterMagic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NodeUnregisterMagic</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>NodeUnregisterMagic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_register</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodePort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>proxyname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>datafolder</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NodeEndMagic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeEndMagic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ctlfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Recovery_SaveRegisterFileName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>GTMPGXCNodeFile</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>GTM_NODE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Disconnect node whose master connection has been cut with GTM
 */</comment>
<function><type><name>void</name></type>
<name>Recovery_PGXCNodeDisconnect</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name> <init>= <expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>nodename</name> <init>= <expr><name><name>myport</name><operator>-&gt;</operator><name>node_name</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name>    <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>

    <comment type="block">/* Only a master connection can disconnect a node */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>myport</name><operator>-&gt;</operator><name>is_postmaster</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the Node ID information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nodeinfo</name> <operator>=</operator> <call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Disconnection cannot be made with another socket than the one used for registration.
         * socket may have a dummy value (-1) under GTM standby node.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>myport</name><operator>-&gt;</operator><name>sock</name></name> <operator>!=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>NODE_DISCONNECTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>Recovery_PGXCNodeBackendDisconnect</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


    <if_stmt><if>if <condition>(<expr><name>nodeinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * A node can be only disconnected by the same connection as the one used for registration
         * or reconnection.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>socket</name> <operator>!=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>NODE_DISCONNECTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>errcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Register active distributed session. If another session with specified
 * BackendId already exists return the PID of the session, so caller could clean
 * it up. Otherwise return 0.
 */</comment>
<function><type><name>int</name></type>
<name>Recovery_PGXCNodeRegisterCoordProcess</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>,
                                      <parameter><decl><type><name>int</name></type> <name>coord_backendid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name>   <modifier>*</modifier></type><name>nodeinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Get the registration record for the coordinator node. If not specified,
     * register it now.
     */</comment>
    <expr_stmt><expr><name>nodeinfo</name> <operator>=</operator> <call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>, <argument><expr><name>coord_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>nodeinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><call><name>Recovery_PGXCNodeRegister</name><argument_list>(<argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>, <argument><expr><name>coord_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><name>NODE_CONNECTED</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * If another thread registers before we get a chance, just look for
         * the nodeinfo again
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>errcode</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errcode</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>nodeinfo</name> <operator>=</operator> <call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>GTM_NODE_COORDINATOR</name></expr></argument>, <argument><expr><name>coord_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Iterate over the existing sessions */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>num_sessions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gps_coord_proc_id</name> <operator>==</operator> <name>coord_procid</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Already registered, nothing todo.
             * May be session lost the GTM connection and now is reconnecting.
             */</comment>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gps_coord_backend_id</name> <operator>==</operator> <name>coord_backendid</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Reuse the entry and return PID of the previous session.
             */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gps_coord_proc_id</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"New session %s:%d with existing BackendId %d"</literal></expr></argument>,
                 <argument><expr><name>coord_node</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gps_coord_proc_id</name> <operator>=</operator> <name>coord_procid</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Session not found, populate new entry */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"New session %s:%d with BackendId %d"</literal></expr></argument>,
         <argument><expr><name>coord_node</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>num_sessions</name></name> <operator>==</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>max_sessions</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* need to extend array */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_SESSIONS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>max_sessions</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name></name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCSession</name> <operator>*</operator><operator>)</operator>
                    <call><name>palloc</name><argument_list>(<argument><expr><name>INIT_SESSIONS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCSession</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>max_sessions</name></name> <operator>=</operator> <name>INIT_SESSIONS</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>max_sessions</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name></name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCSession</name> <operator>*</operator><operator>)</operator>
                    <call><name>repalloc</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name></name></expr></argument>,
                             <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCSession</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>max_sessions</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>num_sessions</name></name></expr>]</index></name><operator>.</operator><name>gps_coord_proc_id</name> <operator>=</operator> <name>coord_procid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>sessions</name><index>[<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>num_sessions</name></name></expr>]</index></name><operator>.</operator><name>gps_coord_backend_id</name> <operator>=</operator> <name>coord_backendid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>num_sessions</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_BACKEND_DISCONNECT
 *
 * A Backend has disconnected on a Proxy.
 * If this backend is postmaster, mark the referenced node as disconnected.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPGXCNodeBackendDisconnect</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>is_postmaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>node_name</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>is_postmaster</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_postmaster</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Read Node Type and name */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Read Node name */</comment>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>NI_MAXHOST</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Invalid node name length %d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_postmaster</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* Nothing to do */</comment>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the Node ID information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_PGXCNodeBackendDisconnect</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Cannot disconnect Unregistered node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/*
     * Forwarding MSG_BACKEND_DISCONNECT message to GTM standby.
     * No need to wait any response.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"forwarding MSG_BACKEND_DISCONNECT to standby GTM %p."</literal></expr></argument>,
                  <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
        <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>backend_disconnect</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                     <argument><expr><name>is_postmaster</name></expr></argument>,
                     <argument><expr><name>type</name></expr></argument>,
                     <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"MSG_BACKEND_DISCONNECT rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_InitNodeManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>NODE_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>GTM_PGXCNodes</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>nhb_list</name> <operator>=</operator> <name>gtm_NIL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>RegisterFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
 * Set to 600 seconds, but should be a few multiple for cluster monitor naptime
 */</comment> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_REPORT_XMIN_DELAY_THRESHOLD</name></cpp:macro> <cpp:value>(600 * 1000)</cpp:value></cpp:define>

<function><type><name>GlobalTransactionId</name></type>
<name>GTM_HandleGlobalXmin</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>reported_xmin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name><name>all_nodes</name><index>[<expr><name>MAX_NODES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_nodes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>current_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>mynodeinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>global_xmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"node_name: %s, reported_xmin: %d, global_xmin: %d"</literal></expr></argument>,
            <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>reported_xmin</name></expr></argument>,
            <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>mynodeinfo</name> <operator>=</operator> <call><name>pgxcnode_find_info</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mynodeinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>GTM_ERRCODE_NODE_NOT_REGISTERED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_ERRCODE_NODE_NOT_REGISTERED - node_name %s"</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mynodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If we were excluded from the GlobalXmin calculation because we failed to
     * report our status for GTM_REPORT_XMIN_DELAY_THRESHOLD seconds, we can
     * only join the cluster back iff the GlobalXmin hasn't advanced beyond
     * what we'd last reported. Otherwise its possible that some nodes are way
     * ahead of us. So we must give up and restart all over again (this is done
     * via PANIC in Cluster Monitor process on the remote side
     *
     * The GTM_REPORT_XMIN_DELAY_THRESHOLD is of many order higher than the
     * naptime used by Cluster Monitor. So unless there was a network outage or
     * the remote node got serious busy such that the Cluster Monitor did not
     * get opportunity to report xmin in a timely fashion, we shouldn't get
     * into this situation often.
     *
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mynodeinfo</name><operator>-&gt;</operator><name>excluded</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>reported_xmin</name></expr></argument>, <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>GTM_ERRCODE_NODE_EXCLUDED</name></expr>;</expr_stmt>

        <comment type="block">/*
         * This node is joining back the cluster after being excluded from the
         * GTM_GlobalXmin calculation because of timeout, disconnection or node
         * failure. In such cases, we send appropriate error back to the node
         * and let it handle the situation. To ensure that our GTM_GlobalXmin
         * does not keep advancing while the node is trying to join back the
         * cluster, we temporarily set reported_xmin to the current
         * GTM_GlobalXmin and wait to see if the node finally catches up.
         *
         * Note: If the node had old transaction running while it was excluded
         * by the GTM, it will fail the consistency checks and restart itself.
         */</comment>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>joining</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name> <operator>=</operator> <name>GTM_GlobalXmin</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mynodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_ERRCODE_NODE_EXCLUDED - node_name %s, reported_xmin %d "</literal>
                <literal type="string">"previously reported_xmin %d, GTM_GlobalXmin %d"</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>,
                <argument><expr><name>reported_xmin</name></expr></argument>,
                <argument><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>,
                <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * The remote node must not report a xmin which precedes the GTM_GlobalXmin
     * we have already computed. If it ever happens, send an error back and let
     * the remote node handle it, possibly restarting itself
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>reported_xmin</name></expr></argument>, <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>GTM_ERRCODE_TOO_OLD_XMIN</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>joining</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <comment type="block">/*
         * When node registers from the first time, the reported_xmin is set
         * to GTM_GlobalXmin and what we receive from the node would most
         * likely precedes that, especially because nodes' latestCompletedXid
         * could precede our GTM_GlobalXmin. The node is prepared to handle
         * that case, but we should avoid logging an useless and often
         * confusing log message.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_ERRCODE_TOO_OLD_XMIN - node_name %s, reported_xmin %d, "</literal>
                    <literal type="string">"previously reported_xmin %d, GTM_GlobalXmin %d"</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>,
                    <argument><expr><name>reported_xmin</name></expr></argument>, <argument><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>, <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name> <operator>=</operator> <name>GTM_GlobalXmin</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mynodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>InvalidGlobalTransactionId</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"node_name: %s, reported_xmin: %d, nodeinfo-&gt;reported_xmin: %d"</literal></expr></argument>,
            <argument><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>reported_xmin</name></expr></argument>,
            <argument><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name> <operator>=</operator> <name>reported_xmin</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Node joined back, set both excluded and joining to false
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>excluded</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>excluded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>joining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>mynodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name> <operator>=</operator> <name>current_time</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mynodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Compute global xmin */</comment>
    <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Hold the PGXCNodesLock in READ mode until we are done with the
     * GlobalXmin calculation. We don't want any new node to join the cluster,
     * but its OK for other nodes to report and do these computation in
     * parallel. If the other guy beats us and advances the GlobalXmin beyond
     * what we compute, we accept that calculation
     */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>num_nodes</name> <operator>=</operator> <call><name>pgxcnode_get_all</name><argument_list>(<argument><expr><name>all_nodes</name></expr></argument>, <argument><expr><name>MAX_NODES</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_nodes</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><name><name>all_nodes</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"nodeinfo %p, type: %d, exclude %c, xmin %d, time %ld"</literal></expr></argument>,
                <argument><expr><name>nodeinfo</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>excluded</name></name></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>,
                <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If a node has not reported its status for
         * GTM_REPORT_XMIN_DELAY_THRESHOLD and neither in the process of
         * rejoining the cluster, don't include it in the GTM_GlobalXmin
         * calculation
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>excluded</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>joining</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Care only for datanodes and coordinators
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GTM_NODE_COORDINATOR</name> <operator>&amp;&amp;</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator>
                <name>GTM_NODE_DATANODE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name> <operator>&amp;&amp;</operator>
            <call><name>GTM_TimestampDifferenceExceeds</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr></argument>,
                    <argument><expr><name>current_time</name></expr></argument>, <argument><expr><name>GTM_REPORT_XMIN_DELAY_THRESHOLD</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Timediff exceeds threshold - last reporting time %ld, "</literal>
                    <literal type="string">"current time %ld, last reported_xmin %d, reported_xmin %d,"</literal>
                    <literal type="string">" - excluding the node %s from GlobalXmin calculation"</literal></expr></argument>,
                    <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr></argument>, <argument><expr><name>current_time</name></expr></argument>,
                    <argument><expr><name>reported_xmin</name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>,
                    <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GTM_TimestampDifferenceExceeds</name><argument_list>(<argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr></argument>,
                        <argument><expr><name>current_time</name></expr></argument>, <argument><expr><name>GTM_REPORT_XMIN_DELAY_THRESHOLD</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>excluded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>joining</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Now grab the lock on the nodeinfo so that no further changes are
         * possible to its state.
         */</comment>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 
         * Just check again if the excluded state hasn't changed. Shouldn't
         * happen too often anyways
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>excluded</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodeinfo</name><operator>-&gt;</operator><name>node_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Now all nodes that must be excluded from GlobalXmin computation have
     * been marked correctly and xmin computed and set for an idle remote node,
     * if so. Lets compute the GlobalXmin
     */</comment>

    <comment type="block">/*
     * GlobalXmin is capped by the latestCompletedXid. Since any future
     * additions/changes can't cross this horizon, it seems appropriate to use
     * this as upper bound for GlobalXmin computation
     */</comment>
    <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GlobalTransactionIdAdvance</name><argument_list>(<argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>GTMTransactions.gt_open_transactions</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

        <comment type="block">/* Update globalxmin to be the smallest valid xmin */</comment>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_xmin</name></name></expr>;</expr_stmt>        <comment type="block">/* fetch just once */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Fetch xid just once - see GetNewTransactionId */</comment>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>num_nodes</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>nodeinfo</name> <init>= <expr><name><name>all_nodes</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>excluded</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Node %s is excluded (last reported time %ld, current"</literal>
                <literal type="string">" time %ld, last reported_xmin %d. This node won't be included in "</literal>
                <literal type="string">"GTM_GlobalXmin computation"</literal></expr></argument>,
                <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin_time</name></name></expr></argument>,
                <argument><expr><call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GTM_NODE_COORDINATOR</name> <operator>&amp;&amp;</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator>
                <name>GTM_NODE_DATANODE</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Fetch once */</comment>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>nodeinfo</name><operator>-&gt;</operator><name>reported_xmin</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Now update the GTM_GlobalXmin and also record the time when its updated
     * but iff someone else has not beaten us in the calculation already, which
     * is possible because we did the calculation holding only a READ lock on
     * PGXCNodesLock
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>GTM_GlobalXmin</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Computed new GTM_GlobalXmin %d, old value was %d"</literal></expr></argument>,
                    <argument><expr><name>global_xmin</name></expr></argument>, <argument><expr><name>GTM_GlobalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>GTM_GlobalXmin</name> <operator>=</operator> <name>global_xmin</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>GTM_GlobalXminComputedTime</name> <operator>=</operator> <name>current_time</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GlobalTransactionIdFollows</name><argument_list>(<argument><expr><name>GTM_GlobalXmin</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"The current (old) GTM_GlobalXmin %d is newer than what "</literal>
                    <literal type="string">"we just computed %d - keeping the current value"</literal></expr></argument>,
                    <argument><expr><name>GTM_GlobalXmin</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <name>GTM_GlobalXmin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGXCNodesLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <return>return <expr><name>global_xmin</name></expr>;</return>
</block_content>}</block></function>
</unit>
