<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/recovery/register_gtm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * register.c
 *  PGXC Node Register on GTM and GTM Proxy, node registering functions
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_ip.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_store.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>finishStandbyConn</name><parameter_list>(<parameter><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>Backup_synchronously</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GTM_ThreadInfo</name>  <modifier>*</modifier></type><name>g_basebackup_thread</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GTM_TimerHandle</name></type>  <name>g_GTM_Backup_Timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GTM_RWLock</name></type>        <name>g_GTM_Backup_Timer_Lock</name></decl>;</decl_stmt>

<comment type="block">/*
 * Process MSG_NODE_REGISTER/MSG_BKUP_NODE_REGISTER message.
 *
 * is_backup indicates the message is MSG_BKUP_NODE_REGISTER.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPGXCNodeRegister</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodePort</name></type>    <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>remote_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>remote_port</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>datafolder</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>node_name</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>proxyname</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>ipaddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>        <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeStatus</name></type>    <name>status</name></decl>;</decl_stmt>

    <comment type="block">/* Read Node Type */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block">/* Read Node name */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>NI_MAXHOST</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid name length."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

     <comment type="block">/* Read Host name */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>remote_host</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>remote_host</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ipaddress</name> <operator>=</operator> <name>remote_host</name></expr>;</expr_stmt>

    <comment type="block">/* Read Port Number */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodePort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodePort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read Proxy name (empty string if no proxy used) */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>NI_MAXHOST</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid proxy name length."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>proxyname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>proxyname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Finish by reading Data Folder (length and then string)
     */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>datafolder</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>datafolder</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>gtm_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>myport</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>myport</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
                       <argument><expr><name>remote_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><name>remote_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ipaddress</name> <operator>=</operator> <name>remote_host</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>,
         <argument><expr><literal type="string">"ProcessPGXCNodeRegister: ipaddress = \"%s\", node name = \"%s\", proxy name = \"%s\", "</literal>
         <literal type="string">"datafolder \"%s\", status = %d"</literal></expr></argument>,
         <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_GTM_PROXY</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_GTM_PROXY_POSTMASTER</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_COORDINATOR</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_DATANODE</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_GTM</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name><operator>!=</operator><name>GTM_NODE_DEFAULT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unknown node type."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Node type = %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the Node ID information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/*
     * We don't check if the this is not in standby mode to allow
     * cascaded standby.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
    <block>{<block_content>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Registering GTM Standby.  Try to unregister the current one."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * There's another standby.   May be failed one.
         * Clean this up.  This means that we allow
         * only one standby at the same time.
         *
         * This helps to give up failed standby and connect
         * new one, regardless how they stopped.
         *
         * Be sure that all ther threads are locked by other
         * means, typically by receiving MSG_BEGIN_BACKUP.
         *
         * First try to unregister GTM which is now connected.  We don't care
         * if it failed.
         */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Recovery_PGXCNodeUnregister</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"No GTM standby exist, unregister failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*
         * Then disconnect the connections to the standby from each thread.
         * Please note that we assume only one standby is allowed at the same time.
         * Cascade standby may be allowed.
         */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Try to disconect off the gtm standby."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_DoForAllOtherThreads</name><argument_list>(<argument><expr><name>finishStandbyConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <comment type="block">/* Add node to node type store and hash. */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Recovery_PGXCNodeRegister</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
                                  <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
                                  <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>EEXIST</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"gtm slave reconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to Register node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Add node to node type store and hash. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_PGXCNodeRegister</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
                                  <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
                                  <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>datafolder</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to Register node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/*
     * We don't check if the this is not in standby mode to allow
     * cascaded standby.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>GTM_NODE_GTM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>==</operator> <name>NODE_CONNECTED</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_standby_ready</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/*
         * Backup first
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>standbynode</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling node_register_internal() for standby GTM %p."</literal></expr></argument>,
                 <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_node_register_internal</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                              <argument><expr><name>type</name></expr></argument>,
                                              <argument><expr><name>ipaddress</name></expr></argument>,
                                              <argument><expr><name>port</name></expr></argument>,
                                              <argument><expr><name>node_name</name></expr></argument>,
                                              <argument><expr><name>datafolder</name></expr></argument>,
                                              <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"node_register_internal() returns rc %d."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Now check if there're other standby registered. */</comment>
            <expr_stmt><expr><name>standbynode</name> <operator>=</operator> <call><name>find_standby_node_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>standbynode</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_standby_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
         * Then, send a SUCCESS message back to the client
         */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NODE_REGISTER_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Node name length */</comment>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Node name (var-len) */</comment>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_NODE_UNREGISTER/MSG_BKUP_NODE_UNREGISTER
 *
 * is_backup indiccates MSG_BKUP_NODE_UNREGISTER
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPGXCNodeUnregister</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>        <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>node_name</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Read Node Type and number */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block">/* Read Node name */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>NI_MAXHOST</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid node name length"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the Node ID information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_PGXCNodeUnregister</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to Unregister node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/*
         * Backup first
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling node_unregister() for standby GTM %p."</literal></expr></argument>,
                 <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_node_unregister</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                       <argument><expr><name>type</name></expr></argument>,
                                       <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"node_unregister() returns rc %d."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
         * Send a SUCCESS message back to the client
         */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NODE_UNREGISTER_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Node name length */</comment>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Node name (var-len) */</comment>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Flush standby before flush to the client */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_NODE_LIST
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPGXCNodeList</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>        <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>num_node</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>MAX_NODES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>s_data</name><index>[<expr><name>MAX_NODES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>s_datalen</name><index>[<expr><name>MAX_NODES</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the Node ID information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>num_node</name> <operator>=</operator> <call><name>pgxcnode_get_all</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>MAX_NODES</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_node</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>s_len</name> <operator>=</operator> <call><name>gtm_get_pgxcnodeinfo_size</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Allocate memory blocks for serialized GTM_PGXCNodeInfo data.
         */</comment>
        <expr_stmt><expr><name><name>s_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>s_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>s_datalen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>gtm_serialize_pgxcnodeinfo</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"gtm_get_pgxcnodeinfo_size: s_len=%ld, s_datalen=%ld"</literal></expr></argument>, <argument><expr><name>s_len</name></expr></argument>, <argument><expr><name><name>s_datalen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send a SUCCESS message back to the client
     */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NODE_LIST_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>num_node</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* number of nodes */</comment>

    <comment type="block">/*
     * Send pairs of GTM_PGXCNodeInfo size and serialized GTM_PGXCNodeInfo body.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_node</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>s_datalen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>s_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s_datalen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Release memory blocks for the serialized data.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_node</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessPGXCNodeList() ok."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessGTMBeginBackup</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>bool</name></type>  <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>  <name>bret</name>   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>local_sysid</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>local_syslsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>local_sysgts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>remote_sysid</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>remote_syslsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>remote_sysgts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>my_threadinfo</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>event</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>remote_sysid</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_sysid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>remote_syslsn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_syslsn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>remote_sysgts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_StoreGetSysInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_sysid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_syslsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_sysgts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM start backup get system info failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>remote_sysid</name> <operator>&amp;&amp;</operator> <name>remote_syslsn</name> <operator>&amp;&amp;</operator> <name>remote_sysgts</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>remote_sysid</name> <operator>!=</operator> <name>local_sysid</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>remote_syslsn</name> <operator>&gt;</operator> <name>local_syslsn</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>remote_sysgts</name> <operator>&gt;</operator> <name>local_sysgts</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM start backup consistancy check failed, local identifier:%ld local lsn:%ld local gts:%ld remote identifier:%ld, remote lsn:%ld, remote gts:%ld"</literal></expr></argument>,
                    <argument><expr><name>local_sysid</name></expr></argument>, <argument><expr><name>local_syslsn</name></expr></argument>, <argument><expr><name>local_sysgts</name></expr></argument>, <argument><expr><name>remote_sysid</name></expr></argument>, <argument><expr><name>remote_syslsn</name></expr></argument>, <argument><expr><name>remote_sysgts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>my_threadinfo</name> <operator>=</operator> <name>GetMyThreadInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM start backup local identifier:%ld local lsn:%ld local gts:%ld remote identifier:%ld, remote lsn:%ld, remote gts:%ld"</literal></expr></argument>,
                    <argument><expr><name>local_sysid</name></expr></argument>, <argument><expr><name>local_syslsn</name></expr></argument>, <argument><expr><name>local_sysgts</name></expr></argument>, <argument><expr><name>remote_sysid</name></expr></argument>, <argument><expr><name>remote_syslsn</name></expr></argument>, <argument><expr><name>remote_sysgts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>my_threadinfo</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>thr_lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* disconnect from current thread */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>thr_efd</name></name></expr></argument>,<argument><expr><name>EPOLL_CTL_DEL</name></expr></argument>,<argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"epoll delete fails %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>thr_conn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>g_basebackup_thread</name><operator>-&gt;</operator><name>thr_efd</name></name></expr></argument>,<argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>,<argument><expr><name><name>myport</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"epoll add fails %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM start backup %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><literal type="string">"failed"</literal></expr> </then><else>: <expr><literal type="string">"succeed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>thr_status</name></name> <operator>=</operator> <name>GTM_THREAD_BACKUP</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><name>BEGIN_BACKUP_FAIL_RESULT</name></expr> </then><else>: <expr><name>BEGIN_BACKUP_SUCCEED_RESULT</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessGTMEndBackup</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type>  <name>ii</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>bool</name></type> <name>bret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>do_unlock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>my_threadinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>my_threadinfo</name> <operator>=</operator> <name>GetMyThreadInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM end backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>my_threadinfo</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>thr_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_GTM_Backup_Timer</name> <operator>!=</operator> <name>INVALID_TIMER_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RemoveTimer</name><argument_list>(<argument><expr><name>g_GTM_Backup_Timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_GTM_Backup_Timer</name> <operator>=</operator> <name>INVALID_TIMER_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>do_unlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>do_unlock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_StoreUnLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessGTMEndBackup GTM_StoreUnLock failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM end backup complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>my_threadinfo</name><operator>-&gt;</operator><name>thr_status</name></name> <operator>=</operator> <name>GTM_THREAD_RUNNING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>END_BACKUP_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>finishStandbyConn</name><parameter_list>(<parameter><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>thrinfo</name><operator>-&gt;</operator><name>standby</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name><name>thrinfo</name><operator>-&gt;</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>thrinfo</name><operator>-&gt;</operator><name>standby</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Process MSG_REGISTER_SESSION message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPGXCRegisterSession</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>coord_name</name><index>[<expr><name>SP_NODE_NAME</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>            <name>coord_procid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>            <name>coord_backendid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>            <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>old_procid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>    <name>buf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>SP_NODE_NAME</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid name length."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>coord_name</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>coord_procid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>coord_backendid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check if all required data are supplied
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>coord_procid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>coord_backendid</name> <operator>!=</operator> <name>InvalidBackendId</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Register the session
         */</comment>
        <expr_stmt><expr><name>old_procid</name> <operator>=</operator> <call><name>Recovery_PGXCNodeRegisterCoordProcess</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>,
                                                           <argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If there was a session with same backend id clean it up.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>old_procid</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>GTM_CleanupSeqSession</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>old_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/*
     * If there is a standby forward the info to it
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>standbynode</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling register_session() for standby GTM %p."</literal></expr></argument>,
             <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>register_session</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                   <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>coord_backendid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"register_session() returns rc %d."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <comment type="block">/* Now check if there're other standby registered. */</comment>
        <expr_stmt><expr><name>standbynode</name> <operator>=</operator> <call><name>find_standby_node_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>standbynode</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_standby_ready</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Make up response */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>REGISTER_SESSION_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* For proxy write out header */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Flush connections */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
