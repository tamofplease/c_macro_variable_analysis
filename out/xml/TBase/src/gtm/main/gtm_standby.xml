<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_standby.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_standby.c
 *		Functionalities of GTM Standby
 *
 * Portions Copyright (c) 1996-2010, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *		src/gtm/common/gtm_standby.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_xlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_c.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/standby_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_seq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/register.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_store.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>

<decl_stmt><decl><type><name>GTM_StandbyReplication</name> <modifier>*</modifier></type><name>g_StandbyReplication</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GTM_RWLock</name></type>              <name>g_SyncReplicatioLck</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTM_StandbyReplication</name> <modifier>*</modifier></type><name>g_SyncReplication</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>GTMControlHeader</name>  <modifier>*</modifier></type><name>g_GTM_Store_Header</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>GTM_ActiveConn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>standbyHostName</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>standbyNodeName</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>standbyPortNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>standbyDataDir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name>  <modifier>*</modifier></type><name>NodeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>	 <name>GTMPortNumber</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>gtm_standby_connect_to_standby_int</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>report_needed</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>gtm_standby_connectToActiveGTM</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddBackupLabel</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>segment_no</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Defined in main.c */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>NodeName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>   <name>max_wal_sender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>   <name>GTM_Standby_Connetion_Timeout</name></decl>;</decl_stmt>


<function><type><name>int</name></type>
<name>gtm_standby_start_startup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>GTM_ActiveConn</name> <operator>=</operator> <call><name>gtm_standby_connectToActiveGTM</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>GTM_ActiveConn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>GTM_ActiveConn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can not connect to GTM: %s %m"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"connection is null: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>GTM_ActiveConn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>GTM_ActiveConn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Connection established to the GTM active."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_finish_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Closing a startup connection..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>GTM_ActiveConn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"A startup connection closed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_restore_next_gxid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>next_gxid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>	
	<expr_stmt><expr><name>next_gxid</name> <operator>=</operator> <call><name>get_next_gxid</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GTM_RestoreStoreInfo</name><argument_list>(<argument><expr><name>next_gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>next_gxid</name> <operator>=</operator> <call><name>get_next_gxid</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GTM_RestoreTxnInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>next_gxid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Restoring the next GXID done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_restore_sequence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seq_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	
	<comment type="block">/*
	 * Restore sequence data.
	 */</comment>
	<expr_stmt><expr><name>num_seq</name> <operator>=</operator> <call><name>get_sequence_list</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_seq</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GTM_SeqRestore</name><argument_list>(<argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_key</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_increment_by</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_min_value</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_max_value</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_init_value</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_value</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_state</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_cycle</name></expr></argument>,
					   <argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>	

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Restoring sequences done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_restore_gxid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
	<decl_stmt><decl><type><name>int</name></type> <name>num_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_Transactions</name></type> <name>txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * Restore gxid data.
	 */</comment>
	<expr_stmt><expr><name>num_txn</name> <operator>=</operator> <call><name>get_txn_gxid_list</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_txn_count</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_txn_count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_gtm_state</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_gtm_state</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_nextXid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_oldestXid</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_oldestXid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidVacLimit</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_xidVacLimit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWarnLimit</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_xidWarnLimit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidStopLimit</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_xidStopLimit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWrapLimit</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_xidWrapLimit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_latestCompletedXid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_recent_global_xmin</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_recent_global_xmin</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_lastslot</name></name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_lastslot</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_txn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>handle</name> <init>= <expr><name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_handle</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_handle</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_handle</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_client_id</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_client_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_in_use</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_in_use</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_gxid</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_gxid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_state</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_state</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_xmin</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_xmin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_isolevel</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_isolevel</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_readonly</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_readonly</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_proxy_client_id</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_proxy_client_id</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodestring</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>nodestring</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>nodestring</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodestring</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* GID */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_gid</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_gid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_gid</name> <operator>=</operator> <name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_gid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* copy GTM_SnapshotData */</comment>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmin</name></name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmin</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmax</name></name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xmax</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xip</name></name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gti_current_snapshot</name><operator>.</operator><name>sn_xip</name></name></expr>;</expr_stmt>
		<comment type="block">/* end of copying GTM_SnapshotData */</comment>

		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_snapshot_set</name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_snapshot_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_vacuum</name> <operator>=</operator>
						<name><name>txn</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_vacuum</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Is this correct? Is GTM_TXN_COMMITTED transaction categorized as "open"?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name><operator>.</operator><name>gti_state</name> <operator>!=</operator> <name>GTM_TXN_ABORTED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name> <operator>=</operator>
					<call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>dump_transactions_elog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GTMTransactions</name></expr></argument>, <argument><expr><name>num_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Restoring %d gxid(s) done."</literal></expr></argument>, <argument><expr><name>num_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_restore_node</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_node</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Copying node information from the GTM active..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>GTM_PGXCNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_PGXCNodeInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>get_node_list</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"get_node_list() failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<goto>goto <name>finished</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>num_node</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_node</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"get_node_list: nodetype=%d, nodename=%s, datafolder=%s"</literal></expr></argument>,
			 <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodename</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>datafolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>Recovery_PGXCNodeRegister</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodename</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>,
					 <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proxyname</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>,
					 <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipaddress</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>datafolder</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
					 <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* dummy socket */</comment>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<goto>goto <name>finished</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Copying node information from GTM active done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finished</name>:</label>	
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Register myself to the GTM (active) as a "disconnected" node.
 *
 * This status would be updated later after restoring completion.
 * See gtm_standby_update_self().
 *
 * Returns 1 on success, 0 on failure.
 */</comment>
<function><type><name>int</name></type>
<name>gtm_standby_register_self</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datadir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>s_node_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>s_port</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>s_datadir</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init</name>         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>init</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s_node_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s_datadir</name>     <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s_port</name>        <operator>=</operator> <name>port</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>node_name</name> <operator>=</operator> <name>s_node_name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>port</name>      <operator>=</operator> <name>s_port</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>datadir</name>   <operator>=</operator> <name>s_datadir</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"Registering standby-GTM status..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>node_get_local_addr</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>standbyHostName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>standbyNodeName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>standbyPortNumber</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>standbyDataDir</name><operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>datadir</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"register standbyhostname %s, port number %d node name %s datadir %s"</literal></expr></argument>, 
					<argument><expr><name>standbyHostName</name></expr></argument>, <argument><expr><name>standbyPortNumber</name></expr></argument>, <argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><name>standbyDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>node_register_internal</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>standbyHostName</name></expr></argument>, <argument><expr><name>standbyPortNumber</name></expr></argument>,
								<argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><name>standbyDataDir</name></expr></argument>,
								<argument><expr><name>NODE_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Failed to register a standby-GTM status."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Registering standby-GTM done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Update my node status from "disconnected" to "connected" in GTM by myself.
 *
 * Returns 1 on success, 0 on failure.
 */</comment>
<function><type><name>int</name></type>
<name>gtm_standby_activate_self</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Updating the standby-GTM status to \"CONNECTED\"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>node_unregister</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>standbyNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Failed to unregister old standby-GTM status."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"register standbyhostname %s, port number %d node name %s datadir %s"</literal></expr></argument>, 
					<argument><expr><name>standbyHostName</name></expr></argument>, <argument><expr><name>standbyPortNumber</name></expr></argument>, <argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><name>standbyDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>node_register_internal</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>standbyHostName</name></expr></argument>, <argument><expr><name>standbyPortNumber</name></expr></argument>,
								<argument><expr><name>standbyNodeName</name></expr></argument>, <argument><expr><name>standbyDataDir</name></expr></argument>,
								<argument><expr><name>NODE_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Failed to register a new standby-GTM status."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>	

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Updating the standby-GTM status done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Find "one" GTM standby node info.
 *
 * Returns a pointer to GTM_PGXCNodeInfo on success,
 * or returns NULL on failure.
 */</comment>
<function><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type>
<name>find_standby_node_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name><name>node</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>pgxcnode_find_by_type</name><argument_list>(<argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"pgxcnode_find_by_type: nodename=%s, type=%d, ipaddress=%s, port=%d, status=%d"</literal></expr></argument>,
			 <argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>,
			 <argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
			 <argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ipaddress</name></expr></argument>,
			 <argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>port</name></expr></argument>,
			 <argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* 
		 * Must not try and connect to ourself. That will lead to a deadlock
		 *
		 * !!TODO Ideally we should not be registered on the GTM, but when a
		 * failover happens, the standby may carry forward the node
		 * registration information previously sent by the original master as a
		 * backup. This needs to be studied further
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>status</name> <operator>==</operator> <name>NODE_CONNECTED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>

<comment type="block">/*
 * Make a connection to the GTM standby node when getting connected
 * from the client.
 *
 * Returns a pointer to a GTM_Conn object on success, or NULL on failure.
 */</comment>
<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>gtm_standby_connect_to_standby</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>report</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>gtm_standby_connect_to_standby_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>gtm_connect_to_standby</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>standby</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>conn_string</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"GTM standby is active. Going to connect."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		 <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d connect_timeout=%d"</literal></expr></argument>,
			 <argument><expr><name><name>n</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>standby</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>conn_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>standby</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>standby</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can not connect to GTM standby: %s %m"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"connection is null: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>standby</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>standby</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type>
<name>gtm_standby_connect_to_standby_int</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>report_needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>standby</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_PGXCNodeInfo</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>conn_string</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	
	<expr_stmt><expr><operator>*</operator><name>report_needed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>find_standby_node_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Any GTM standby node not found in registered node(s)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"GTM standby is active. Going to connect."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>report_needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		 <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d connect_timeout=%d"</literal></expr></argument>,
			 <argument><expr><name><name>n</name><operator>-&gt;</operator><name>ipaddress</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>GTM_Standby_Connetion_Timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>standby</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>conn_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>standby</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>standby</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can not connect to GTM standby: %s %m"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"connection is null: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>standby</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"Connection established with GTM standby. - %p conn %s socket %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>conn_string</name></expr></argument>, <argument><expr><name><name>standby</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>standby</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><name>void</name></type>
<name>gtm_standby_disconnect_from_standby</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>GTM_Conn</name> <modifier>*</modifier></type>
<name>gtm_standby_reconnect_to_standby</name><parameter_list>(<parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>old_conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retry_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>newconn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>report</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gtm_standby_disconnect_from_standby</name><argument_list>(<argument><expr><name>old_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>retry_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"gtm_standby_reconnect_to_standby(): going to re-connect. retry=%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>newconn</name> <operator>=</operator> <call><name>gtm_standby_connect_to_standby_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newconn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"gtm_standby_reconnect_to_standby(): re-connect failed. retry=%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>newconn</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_STANDBY_RETRY_MAX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>  <name>__XLOG__</name></cpp:ifndef>
<function><type><name>bool</name></type>
<name>gtm_standby_check_communication_error</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>retry_count</name></decl></parameter>, <parameter><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	
	<comment type="block">/*
	 * This function may be called without result from standby.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>standby</name><operator>-&gt;</operator><name>result</name></name>
		<operator>&amp;&amp;</operator> <call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>standby</name><operator>-&gt;</operator><name>result</name><operator>-&gt;</operator><name>gr_status</name></name> <operator>==</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>retry_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>retry_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name> <operator>=</operator>
					<call><name>gtm_standby_reconnect_to_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
													 <argument><expr><name>GTM_STANDBY_RETRY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"communication error with standby."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>gtm_standby_begin_backup</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>set_begin_backup</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>gts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_end_backup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>set_end_backup</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>gtm_standby_start_replication</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>application_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ip_port</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>application_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>node_get_local_addr</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>ip_port</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ip_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ip_port</name> <operator>+</operator> <name>len</name></expr></argument>,<argument><expr><name>NI_MAXHOST</name> <operator>-</operator> <name>len</name></expr></argument>,<argument><expr><literal type="string">":%d"</literal></expr></argument>,<argument><expr><name>GTMPortNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>ip_port</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ip_port</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<return>return <expr><call><name>set_begin_replication</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>,<argument><expr><name>ip_port</name></expr></argument>,<argument><expr><name>NodeName</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>set_begin_replication</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>,<argument><expr><name>application_name</name></expr></argument>,<argument><expr><name>NodeName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>NodeName</name></decl>;</decl_stmt>		<comment type="block">/* Defined in main.c */</comment>

<function><type><name>void</name></type>
<name>gtm_standby_finishActiveConn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	
	<expr_stmt><expr><name>GTM_ActiveConn</name> <operator>=</operator> <call><name>gtm_standby_connectToActiveGTM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>GTM_ActiveConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"Error in connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Connection established to the GTM active."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Unregister self from Active-GTM */</comment>
	<expr_stmt><expr><call><name>node_unregister</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Disconnect form Active */</comment>
	<expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<expr_stmt><expr><name>GTM_ActiveConn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type>
<name>gtm_standby_connectToActiveGTM</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>connect_string</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>active_port</name> <init>= <expr><call><name>Recovery_StandbyGetActivePort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>active_address</name> <init>= <expr><call><name>Recovery_StandbyGetActiveAddress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Need to connect to Active-GTM again here */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Connecting the GTM active on %s:%d..."</literal></expr></argument>, <argument><expr><name>active_address</name></expr></argument>, <argument><expr><name>active_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d connect_timeout=%d"</literal></expr></argument>,
                <argument><expr><name>active_address</name></expr></argument>, <argument><expr><name>active_port</name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d"</literal></expr></argument>,
                <argument><expr><name>active_address</name></expr></argument>, <argument><expr><name>active_port</name></expr></argument>, <argument><expr><name>NodeName</name></expr></argument>, <argument><expr><name>GTM_NODE_GTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>connect_string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<comment type="block">/*
 * Init standby storage.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreStandbyInitFromMaster</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>  <name>ret</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>data_dir</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInitFromMaster invalid null parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInitFromMaster begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator><call><name>get_storage_file</name><argument_list>(<argument><expr><name>GTM_ActiveConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>XLogCtl</name><operator>-&gt;</operator><name>apply</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>XLogCtl</name><operator>-&gt;</operator><name>thisTimeLineID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInitFromMaster get_storage_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreStandbyInit</name><argument_list>(<argument><expr><name>data_dir</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInitFromMaster GTM_StoreStandbyInit failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <comment type="block">/* we transfer data from the beginning of xlog */</comment>
	<expr_stmt><expr><name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Write</name></name> <operator>=</operator> <name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Flush</name></name> <operator>=</operator> <name><name>XLogCtl</name><operator>-&gt;</operator><name>apply</name></name> <operator>-</operator> <operator>(</operator><name><name>XLogCtl</name><operator>-&gt;</operator><name>apply</name></name> <operator>%</operator> <name>GTM_XLOG_SEG_SIZE</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NewXLogFile</name><argument_list>(<argument><expr><call><name>GetSegmentNo</name><argument_list>(<argument><expr><name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Flush</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ControlData</name><operator>-&gt;</operator><name>checkPoint</name></name>     <operator>=</operator> <name><name>XLogCtl</name><operator>-&gt;</operator><name>apply</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ControlData</name><operator>-&gt;</operator><name>prevCheckPoint</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ControlData</name><operator>-&gt;</operator><name>thisTimeLineID</name></name> <operator>=</operator> <name><name>XLogCtl</name><operator>-&gt;</operator><name>thisTimeLineID</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ControlData</name><operator>-&gt;</operator><name>gts</name></name>            <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ControlData</name><operator>-&gt;</operator><name>time</name></name>           <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ControlDataSync</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddBackupLabel</name><argument_list>(<argument><expr><call><name>GetSegmentNo</name><argument_list>(<argument><expr><name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Flush</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"Get start replication at %X/%X,timeLine: %d"</literal></expr></argument>,
		 <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Flush</name></name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator></expr></argument>,
		 <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>XLogCtl</name><operator>-&gt;</operator><name>LogwrtResult</name><operator>.</operator><name>Flush</name></name><operator>)</operator></expr></argument>,
		 <argument><expr><name><name>XLogCtl</name><operator>-&gt;</operator><name>thisTimeLineID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInitFromMaster done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddBackupLabel</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>segment_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>xlog_filename</name><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TimeLineID</name></type> <name>timeline</name>  <init>= <expr><name>FIRST_TIMELINE_ID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>timeline</name> <operator>=</operator> <call><name>GetCurrentTimeLineID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"backup_label"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"could not create backup_label file \"backup_label\": %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTMXLogFileNameWithoutGtmDir</name><argument_list>(<argument><expr><name>xlog_filename</name></expr></argument>,<argument><expr><name>timeline</name></expr></argument>,<argument><expr><name>segment_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>xlog_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"could not write backup_label file \"backup_label\": %s"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
