<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_stat_error.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_stat_error.c

 *	  collect error logs of gtm
 *
 * Copyright (c) 2020-Present TBase development team, Tencent
 *
 * IDENTIFICATION
 *	  src/gtm/main/gtm_stat_error.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_stat_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gtm_err_log_min</name> <init>= <expr><name>ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gtm_errmsg_size</name> <init>= <expr><name>GTM_MAX_ERRMSG_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gtm_max_errlog_tuple_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>GTM_MAX_ERRMSG_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GTM_LogCollector</name></type> <name>GlobalLogCollector</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>GTM_ErrorLogCollector</name><parameter_list>(<parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buff</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Build data pump buffer.
 */</comment>
<function><type><name>DataPumpBuf</name><modifier>*</modifier></type>
<name>GTM_BuildDataPumpBuf</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buff</name> <operator>=</operator> <operator>(</operator><name>DataPumpBuf</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DataPumpBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buff</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name><name>buff</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>buff</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buff</name><operator>-&gt;</operator><name>pointer_lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>head</name></name>  		  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>tail</name></name>  		  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>wrap_around</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buff</name><operator>-&gt;</operator><name>border</name></name>		  <operator>=</operator> <name>INVALID_BORDER</name></expr>;</expr_stmt>

    <return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy data pump buffer.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_DestroyDataPumpBuf</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buff</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Thread-level log collector
 * call by each thread's send_message_to_server_log, can't log any error log
 */</comment>
<function><type><name>void</name></type>
<name>GTM_ErrorLogCollector</name><parameter_list>(<parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name> <init>= <expr><name>GetMyThreadInfo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>errmsg_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>free_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ErrLog</name></type> <name>err_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataPumpBuf</name><modifier>*</modifier></type> <name>datapump_buff</name> <init>= <expr><name><name>thrinfo</name><operator>-&gt;</operator><name>datapump_buff</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>&lt;</operator> <name>gtm_err_log_min</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>buff</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>errmsg_len</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>buff</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>gtm_errmsg_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>err_info</name><operator>.</operator><name>proc_id</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_info</name><operator>.</operator><name>error_no</name></name> <operator>=</operator> <name><name>edata</name><operator>-&gt;</operator><name>saved_errno</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_info</name><operator>.</operator><name>log_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_info</name><operator>.</operator><name>err_level</name></name> <operator>=</operator> <name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>err_info</name><operator>.</operator><name>errmsg_len</name></name> <operator>=</operator> <name>errmsg_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>free_space</name> <operator>=</operator> <call><name>FreeSpace</name><argument_list>(<argument><expr><name>datapump_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>free_space</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>errmsg_len</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PutData</name><argument_list>(<argument><expr><name>datapump_buff</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PutData</name><argument_list>(<argument><expr><name>datapump_buff</name></expr></argument>, <argument><expr><name><name>buff</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>errmsg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetBorder</name><argument_list>(<argument><expr><name>datapump_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Init the global log collector
 */</comment>
<function><type><name>int</name></type>
<name>GTM_InitLogCollector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>gtm_max_errlog_tuple_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create tmpBuf, out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name> <operator>=</operator> <call><name>BloomCreate</name><argument_list>(<argument><expr><name>GTM_BLOOM_FILTER_SIZE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create bloom filter, out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name> <operator>=</operator> <call><name>GTM_BuildDataPumpBuf</name><argument_list>(<argument><expr><name>GTM_GLOBAL_ERRLOG_DATAPUMP_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to datapump buf, out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BloomDestroy</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Deinit the global log collector
 */</comment>
<function><type><name>void</name></type>
<name>GTM_DeInitLogCollector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BloomDestroy</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_DestroyDataPumpBuf</name><argument_list>(<argument><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get a log tuple from datapump buff
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>GTM_GetLogTupleFromDataPump</name><parameter_list>(<parameter><decl><type><name>DataPumpBuf</name><modifier>*</modifier></type> <name>dataPumpBuf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ErrLog</name><modifier>*</modifier></type> <name>err_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>tuple_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GetData</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>data</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* no data */</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* copy the last part of datapumpbuff to temp buff */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data_len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GetData</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* copy the rest */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>err_info</name> <operator>=</operator> <operator>(</operator><name>GTM_ErrLog</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><name>tuple_len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>err_info</name> <operator>=</operator> <operator>(</operator><name>GTM_ErrLog</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>&lt;</operator> <name>tuple_len</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data_len</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GetData</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>tuple_len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><name>tuple_len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>tuple_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>dataPumpBuf</name></expr></argument>, <argument><expr><name>tuple_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Collect errlog data from various threads and eliminate duplication
 */</comment>
<function><type><name>void</name></type>
<name>GTM_ProcessLogCollection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataPumpBuf</name><modifier>*</modifier></type> <name>datapump_buff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataPumpBuf</name><modifier>*</modifier></type> <name>global_datapump_buff</name> <init>= <expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom_filter</name> <init>= <expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_buff</name> <init>= <expr><name><name>GlobalLogCollector</name><operator>.</operator><name>tmp_buff</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ErrLog</name><modifier>*</modifier></type> <name>err_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errmsg_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>thrinfo</name> <operator>=</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>thrinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"thread %d exits."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>datapump_buff</name> <operator>=</operator> <name><name>thrinfo</name><operator>-&gt;</operator><name>datapump_buff</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>datapump_buff</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <while>while <condition>(<expr><call><name>FreeSpace</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>gtm_max_errlog_tuple_len</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GTM_GetLogTupleFromDataPump</name><argument_list>(<argument><expr><name>datapump_buff</name></expr></argument>, <argument><expr><name>tmp_buff</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>err_info</name> <operator>=</operator> <operator>(</operator><name>GTM_ErrLog</name><operator>*</operator><operator>)</operator><name>tmp_buff</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BloomCheckAndAdd</name><argument_list>(<argument><expr><name>bloom_filter</name></expr></argument>, <argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* replace \n with space */</comment>
                <expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>err_info</name><operator>-&gt;</operator><name>errmsg</name></name></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <comment type="block">/* serialize */</comment>
                <expr_stmt><expr><name>errmsg_len</name> <operator>=</operator> <name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>err_info</name><operator>-&gt;</operator><name>proc_id</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>proc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>err_info</name><operator>-&gt;</operator><name>error_no</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>error_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>err_info</name><operator>-&gt;</operator><name>log_time</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>log_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>err_info</name><operator>-&gt;</operator><name>err_level</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>err_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>err_info</name><operator>-&gt;</operator><name>errmsg_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* put err log into global datapumpbuff */</comment>
                <expr_stmt><expr><call><name>PutData</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>err_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_ErrLog</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>errmsg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SetBorder</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><call><name>FreeSpace</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>gtm_max_errlog_tuple_len</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"global datapump buff is full."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_GET_ERRORLOG message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetErrorlogCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>total_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DataPumpBuf</name><modifier>*</modifier></type> <name>global_datapump_buff</name> <init>= <expr><name><name>GlobalLogCollector</name><operator>.</operator><name>datapump_buff</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BLOOM</name> <modifier>*</modifier></type><name>bloom_filter</name> <init>= <expr><name><name>GlobalLogCollector</name><operator>.</operator><name>bloom_filter</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_GET_GTM_ERRORLOG_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GetData</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>data</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>total_len</name> <operator>+=</operator> <name>data_len</name></expr>;</expr_stmt>
        <comment type="block">/* check max lenï¼if the producer is faster than the consumer, it may block here */</comment>
        <if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>&gt;=</operator> <name>GTM_GLOBAL_ERRLOG_DATAPUMP_SIZE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>IncDataOff</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>GetData</name><argument_list>(<argument><expr><name>global_datapump_buff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* clear bitmap */</comment>
    <expr_stmt><expr><call><name>BloomReset</name><argument_list>(<argument><expr><name>bloom_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GlobalLogCollector</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
