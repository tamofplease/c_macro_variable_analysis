<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_seq.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_seq.c
 *    Sequence handling on GTM
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_xlog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_seq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/standby_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_backup.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_store.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>enable_gtm_sequence_debug</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>Backup_synchronously</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>GTM_SeqInfoHashBucket</name>
<block>{
    <decl_stmt><decl><type><name>gtm_List</name>   <modifier>*</modifier></type><name>shb_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_RWLock</name></type>    <name>shb_lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>GTM_SeqInfoHashBucket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>GTM_SeqAlteredInfo</name>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type> <name>storage_handle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SequenceKey</name></type>    <name>curr_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKey</name></type>    <name>prev_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>GTM_SeqAlteredInfo</name>;</typedef>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQ_HASH_TABLE_SIZE</name></cpp:macro>        <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_SeqInfoHashBucket</name></type> <name><name>GTMSequences</name><index>[<expr><name>SEQ_HASH_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>seq_gethash</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_keys_equal</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key1</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_key_dbname_equal</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>nsp</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seq_find_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seq_release_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seq_add_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seq_remove_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seq_rename_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>GTM_SequenceKey</name></type> <name>seq_copy_key_context</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>,
        <parameter><decl><type><name>MemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>GTM_SequenceKey</name></type> <name>seq_copy_key</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>seq_drop_with_dbkey</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>nsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GTM_NeedSeqRestoreUpdateInternal</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>GTM_Sequence</name></type> <name>get_rangemax</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,<parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>used_count</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>GTM_Sequence</name></type> <name>get_rangemax</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>GTM_JudgeReserve</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTM_SeqInfo</name><modifier>*</modifier></type> <name>GTM_FormSeqOfStore</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Get the hash value given the sequence key
 *
 * XXX This should probably be replaced by a better hash function.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>seq_gethash</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>key</name><operator>-&gt;</operator><name>gsk_key</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><operator>(</operator><name>total</name> <operator>%</operator> <name>SEQ_HASH_TABLE_SIZE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return true if both keys are equal, else return false
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_keys_equal</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key1</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>key1</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key2</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,
                  <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name><name>key1</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><name><name>key2</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the seqinfo structure for the given key. The reference count is
 * incremented before structure is returned. The caller must release the
 * reference to the structure when done with it
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_SeqInfo</name> <modifier>*</modifier></type>
<name>seq_find_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>seq_gethash</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>curr_seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;shb_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>seq_keys_equal</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>curr_seqinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>!=</operator> <name>SEQ_STATE_ACTIVE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Sequence not active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>!=</operator> <name>SEQ_MAX_REFCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>curr_seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_find_seqinfo seq: %s seq:%d, value:%zu gs_ref_count:%d done"</literal></expr></argument>, <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>, <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>curr_seqinfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release previously grabbed reference to the structure. If the structure is
 * marked for deletion, it will be removed from the global array and released
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>seq_release_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>remove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_release_seqinfo seq: %s seq:%d, value:%zu gs_ref_count:%d begin"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>==</operator> <name>SEQ_STATE_DELETED</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>remove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_release_seqinfo seq: %s seq:%d, value:%zu gs_ref_count:%d remove:%d done"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/*
     * Remove the structure from the global hash table
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition> 
    <block>{<block_content>
        <expr_stmt><expr><call><name>seq_remove_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add a seqinfo structure to the global hash table.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>seq_add_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>seq_gethash</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name>    <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;shb_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>curr_seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>seq_keys_equal</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence with the given key already exists"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EEXIST</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * Safe to add the structure to the list
     */</comment>
    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name> <operator>=</operator> <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>, <argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_add_seqinfo seq:%s add to bucket:%d, seq:%d, value:%zu"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove the seqinfo structure from the global hash table. If the structure is
 * currently referenced by some other thread, just mark the structure for
 * deletion and it will be deleted by the final reference is released.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>seq_remove_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash</name> <init>= <expr><call><name>seq_gethash</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name>    <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_remove_seqinfo remove seq:%s from bucket:%d, seq:%d, value:%zu gs_ref_count:%d"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <name>SEQ_STATE_DELETED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EBUSY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name> <operator>=</operator> <call><name>gtm_list_delete</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>, <argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"seq_remove_seqinfo remove succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreDropSeq</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"seq_remove_seqinfo GTM_StoreDropSeq %s failed"</literal></expr></argument>,<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>            
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rename sequence managed by seqinfo to "newkey".
 *
 * The sequence is moved to the new bucket and rest of the fields remain
 * unchanged.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>seq_rename_seqinfo</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldhash</name> <init>= <expr><call><name>seq_gethash</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>newhash</name> <init>= <expr><call><name>seq_gethash</name><argument_list>(<argument><expr><name>newkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name>    <modifier>*</modifier></type><name>oldbucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name>    <modifier>*</modifier></type><name>newbucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldbucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>oldhash</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>newbucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>newhash</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * We must lock both old and new hash buckets. To avoid deadlock, we must
     * ensure that we don't try to lock the same bucket twice (in case old and
     * new keys are mapped to the same bucket) and also lock them in the same
     * order.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>oldhash</name> <operator>&lt;</operator> <name>newhash</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>oldhash</name> <operator>&gt;</operator> <name>newhash</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="block">/* old and new buckets are just the same */</comment>
        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>newbucket-&gt;shb_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>curr_seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>seq_keys_equal</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * Release oldbucket lock but only if its not same as the new
             * bucket
             * */</comment>
            <if_stmt><if>if <condition>(<expr><name>oldhash</name> <operator>!=</operator> <name>newhash</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence with the given key already exists"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EEXIST</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    
    <comment type="block">/*
     * Must use TopMostMemoryContext since the hash bucket links can survive
     * forever
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>newkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_list</name></name> <operator>=</operator> <call><name>gtm_list_delete</name><argument_list>(<argument><expr><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>, <argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newbucket</name><operator>-&gt;</operator><name>shb_list</name></name> <operator>=</operator> <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>newbucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>, <argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Release oldbucket lock but only if its not same as the new bucket */</comment>
    <if_stmt><if>if <condition>(<expr><name>oldhash</name> <operator>!=</operator> <name>newhash</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oldbucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
<comment type="block">/*
 * Same as seq_copy_key but use specified MemoryContext
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_SequenceKey</name></type>
<name>seq_copy_key_context</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKey</name></type>    <name>newkey</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newkey</name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>newkey</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Copy sequence key in the CurrentMemoryContext
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_SequenceKey</name></type>
<name>seq_copy_key</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKey</name></type> <name>retkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the sequence information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>retkey</name> <operator>=</operator> <operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SequenceKeyData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                                                        <name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block">/* two more bytes for ending flag. */</comment>

    <if_stmt><if>if <condition>(<expr><name>retkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>retkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>retkey</name><operator>-&gt;</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>retkey</name> <operator>+</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SequenceKeyData</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>retkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>retkey</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a new sequence. Optionally set the initial value of the sequence.
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqOpen</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>,
            <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment_by</name></decl></parameter>,
            <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>,
            <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
            <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>,
            <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
            <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type>                  <name>ret</name>          <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>      <name>seq_handle</name>  <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>          <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqOpen seq:%s enter."</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqOpen Sequence with key:%s found in hashtab"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Release sequence, otherwise the sequence will be busy when be dropped.
		 */</comment>
		<expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EEXIST</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqOpen Sequence with key:%s found in store"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Release sequence, otherwise the sequence will be busy when be dropped.
		 */</comment>
		<expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EEXIST</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <name>SEQ_STATE_ACTIVE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_created_gxid</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Set the increment. Default is 1
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SEQVAL_IS_VALID</name><argument_list>(<argument><expr><name>increment_by</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <name>increment_by</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * If minval is specified, set the minvalue to the given minval,
     * otherwise set to the defaults
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SEQVAL_IS_VALID</name><argument_list>(<argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <name>minval</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <name>SEQ_DEF_MIN_SEQVAL_ASCEND</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <name>SEQ_DEF_MIN_SEQVAL_DESCEND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * If maxval is specfied, set the maxvalue to the given maxval, otherwise
     * set to the defaults depending on whether the seqeunce is ascending or
     * descending. Also do some basic contraint checks
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SEQVAL_IS_VALID</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>maxval</name> <operator>&lt;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Max value must be greater than min value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name>maxval</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name>SEQ_DEF_MAX_SEQVAL_ASCEND</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name>SEQ_DEF_MAX_SEQVAL_DESCEND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


    <comment type="block">/*
     * Set the startval if specified. Do some basic checks like startval must
     * be in-between min and max values
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SEQVAL_IS_VALID</name><argument_list>(<argument><expr><name>startval</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>startval</name> <operator>&lt;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Start value must be greater than or equal to the min value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>startval</name> <operator>&gt;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Start value must be less than or equal to the max value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>startval</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>SEQ_DEF_MIN_SEQVAL_ASCEND</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>SEQ_DEF_MIN_SEQVAL_DESCEND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Should we wrap around ?
     */</comment>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>=</operator> <name>cycle</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>    

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>seq_add_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <return>return <expr><name>errcode</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* open the sequence and remember the newly created sequence. */</comment>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
        <expr_stmt><expr><call><name>GTM_RememberCreatedSequence</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><call><name>seq_copy_key_context</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>,
                    <argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>    
    <expr_stmt><expr><call><name>GTM_SetNeedBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name>                 <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>seq_handle</name> <operator>=</operator> <call><name>GTM_StoreSeqCreate</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>seq_handle</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreSeqCreate for gxid:%d, seq:%s failed"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name> <operator>=</operator> <name>seq_handle</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreReserveSeqValue for gxid:%d failed"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqOpen seq:%s done."</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Alter a sequence
 *
 * We don't track altered sequences because changes to sequence values are not
 * transactional and must not be rolled back if the transaction aborts.
 */</comment>
<function><type><name>int</name></type> <name>GTM_SeqAlter</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment_by</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>     <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seqkey_copy</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Find seqinfo by using GTM_SEQ_POSTFIX seqkey when can not find by seqkey*/</comment>
        <expr_stmt><expr><name>seqkey_copy</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The sequence with the given key does not exist"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>, <argument><expr><name>InvalidGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Modify the data if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>!=</operator> <name>cycle</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>=</operator> <name>cycle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>!=</operator> <name>minval</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <name>minval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>!=</operator> <name>maxval</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name>maxval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>!=</operator> <name>increment_by</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <name>increment_by</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Check start/restart processes.
     * Check first if restart is necessary and reset sequence in that case.
     * If not, check if a simple start is necessary and update sequence.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>is_restart</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Restart command has been used, reset the sequence */</comment>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>lastval</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>!=</operator> <name>startval</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name>startval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSeqAlter</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>is_restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqAlter GTM_StoreSeqAlter failed to alter sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_JudgeReserve</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* if newly start reserve the sequence value. */</comment>
    <if_stmt><if>if <condition>(<expr><name>is_restart</name> <operator>&amp;&amp;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqAlter GTM_StoreReserveSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Remove the old key with the old name */</comment>    
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Restore a sequence.
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqRestore</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment_by</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name></type> <name>curval</name></decl></parameter>,
               <parameter><decl><type><name>int32</name></type> <name>state</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>called</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>called</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <name>increment_by</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator> <name>minval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name>maxval</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name>startval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>curval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Should we wrap around ?
     */</comment>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>=</operator> <name>cycle</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>seq_add_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
         <expr_stmt><expr><call><name>GTM_RWLockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy the given sequence depending on type of given key
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqClose</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GTM_SEQ_FULL_NAME</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="block">/*
             * If the sequence by created by the same transaction, then just
             * drop it completely
             */</comment>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>seqinfo</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>seqinfo</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_created_gxid</name></name> <operator>==</operator> <name>gxid</name><operator>)</operator><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
                <expr_stmt><expr><call><name>GTM_ForgetCreatedSequence</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_remove_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <comment type="block">/*
             * Otherwise we rename it to a special value so that it can be
             * restored back if the transaction fails
             */</comment>
            <if type="elseif">else if <condition>(<expr><name>seqinfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>newkey</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>newkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator>
                        <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"__dropped_"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>newkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><literal type="string">"%s_dropped_%d"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,
                        <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>newkey</name><operator>.</operator><name>gsk_key</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>newkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>newkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>newkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_oldkey</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>seq_rename_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>GTM_RememberDroppedSequence</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>,
                            <argument><expr><call><name>seq_copy_key_context</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>GTM_SEQ_DB_NAME</name></expr>:</case>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>seq_drop_with_dbkey</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if sequence key contains only Database name */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_key_dbname_equal</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>nsp</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Sequence key of GTM_SEQ_DB_NAME type has to be shorter
     * than given sequence key.
     */</comment>
    <if_stmt><if>if<condition>(<expr><name><name>nsp</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>&gt;=</operator> <name><name>seq</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Check also if first part of sequence key name has a dot at the right place.
     * This accelerates process instead of making numerous memcmp.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>gsk_key</name><index>[<expr><name><name>nsp</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Then Check the strings */</comment>
    <return>return <expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>nsp</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>nsp</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove all sequences with given key depending on its type.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>seq_drop_with_dbkey</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>nsp</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>        
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>curr_seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>deleted</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_list_head</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>cell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>deleted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>seq_key_dbname_equal</name><argument_list>(<argument><expr><name>nsp</name></expr></argument>, <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <name>SEQ_STATE_DELETED</name></expr>;</expr_stmt>

                    <comment type="block">/* can not happen, be checked before called */</comment>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"Sequence %s is in use, mark for deletion only"</literal></expr></argument>,
                             <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/*
                     * Continue to delete other sequences linked to this dbname,
                     * sequences in use are deleted later.
                     */</comment>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* Sequence is not is busy state, it can be deleted safely */</comment>

                    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name> <operator>=</operator> <call><name>gtm_list_delete_cell</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>, <argument><expr><name>cell</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Sequence %s was deleted from GTM"</literal></expr></argument>,
                              <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>deleted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>GTM_StoreDropSeq</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropSeq fail"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>deleted</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_lnext</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_list_head</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>shb_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_lnext</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>GTM_StoreDropAllSeqInDatabase</name><argument_list>(<argument><expr><name>nsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropSeq fail"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Rename an existing sequence with a new name
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqRename</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>newseqkey</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>newseqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqAlteredInfo</name> <modifier>*</modifier></type><name>alterinfo</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* replace old key by new key */</comment>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>newseqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>newseqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>newseqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>(<expr><name>newseqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence with the key:%s does not exist"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EEXIST</name><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence with the key:%s has been renamed to %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>newseqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>alterinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqAlteredInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SeqAlteredInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <comment type="block">/*Here we do nothing, just rename the seq when transaction commit. */</comment>
    <expr_stmt><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>storage_handle</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    


    <expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>seq_rename_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>errcode</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
        <expr_stmt><expr><call><name>GTM_RememberAlteredSequence</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>alterinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>ret</name>    <operator>=</operator> <call><name>GTM_StoreSeqRename</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>storage_handle</name></name></expr></argument>, 
                                 <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,
                                 <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,
                                  <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>,
                                 <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreSeqRename sequence:%s to newname:%s failed"</literal></expr></argument>, <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get current value for the sequence without incrementing it
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqGetCurrent</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>     <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seqkey_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Look up last value of Sequence %s in session %s:%d"</literal></expr></argument>,
            <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Find seqinfo by using GTM_SEQ_POSTFIX seqkey when can not find by seqkey*/</comment>
        <expr_stmt><expr><name>seqkey_copy</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sequence \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>, <argument><expr><name>InvalidGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_coord_name</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_coord_procid</name> <operator>==</operator> <name>coord_procid</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_last_value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"currval of sequence \"%s\" is not yet defined in this session"</literal></expr></argument>,
                        <argument><expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetCurrent]seqname:%s  gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Store the sequence value as last for the specified distributed session
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>seq_set_lastval</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>newval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqLastVal</name> <modifier>*</modifier></type><name>lastval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Can not assign value to not defined value */</comment>
    <if_stmt><if>if <condition>(<expr><name>coord_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>coord_procid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Remember last value of Sequence %s in session %s:%d"</literal></expr></argument>,
            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If last value is already defined for the session update it
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_coord_name</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_coord_procid</name> <operator>==</operator> <name>coord_procid</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_last_value</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Not found, add new entry for the distributed session */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name> <operator>==</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Need more room */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_LASTVALS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

        <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* No values at all, palloc memory block */</comment>
            <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name> <operator>=</operator> <operator>(</operator><name>GTM_SeqLastVal</name> <operator>*</operator><operator>)</operator>
                    <call><name>palloc</name><argument_list>(<argument><expr><name>INIT_LASTVALS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqLastVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>=</operator> <name>INIT_LASTVALS</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Increase existing array */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name> <operator>=</operator> <operator>(</operator><name>GTM_SeqLastVal</name> <operator>*</operator><operator>)</operator>
                    <call><name>repalloc</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name></expr></argument>,
                             <argument><expr><name>newsize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqLastVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Populate new entry */</comment>
    <expr_stmt><expr><name>lastval</name> <operator>=</operator> <operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_name</name></name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_procid</name></name> <operator>=</operator> <name>coord_procid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_last_value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Set values for the sequence
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqSetVal</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
              <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>     <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seqkey_copy</name></decl>;</decl_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Find seqinfo by using GTM_SEQ_POSTFIX seqkey when can not find by seqkey*/</comment>
        <expr_stmt><expr><name>seqkey_copy</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The sequence with the given key does not exist"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>, <argument><expr><name>InvalidGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>nextval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>iscalled</name></expr>;</expr_stmt>

    <comment type="block">/* If sequence is called, update last value for the session */</comment>
    <if_stmt><if>if <condition>(<expr><name>iscalled</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>seq_set_lastval</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>        
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSetSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>, <argument><expr><name>iscalled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqSetVal GTM_StoreSetSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqSetVal GTM_StoreReserveSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Remove the old key with the old name */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get next value for the sequence
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqGetNext</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>,
               <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>,
               <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <decl_stmt><decl><type><name>int32</name></type>          <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>         <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>used_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>     <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seqkey_copy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Find seqinfo by using GTM_SEQ_POSTFIX seqkey when can not find by seqkey*/</comment>
        <expr_stmt><expr><name>seqkey_copy</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The sequence with the given key does not exist"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>, <argument><expr><name>InvalidGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If the sequence is called for the first time return the current value.
     * It should be already initialized.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SEQ_IS_CALLED</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetNext] SEQ IS NOT CALLED. seqname:%s range:%lld gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
                <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>range</name></expr></argument>,
                <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreMarkSeqCalled</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqGetNext GTM_StoreMarkSeqCalled failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>            
        
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>        
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Check if the sequence is about to wrap-around. If the sequence
             * does not support wrap-around, throw an error.
             * Beware overflow!
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name>
                    <operator>&gt;=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>newval</name> <init>= <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetNext] SEQ_IS_ASCENDING seqname:%s range:%lld gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
                            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>range</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetNext] SEQ_IS_ASCENDING&amp;&amp;SEQ_IS_CYCLE seqname:%s range:%lld gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
                            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>range</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                          <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nextval: reached maximum value of sequence \"%s\" (%s)"</literal></expr></argument>,
                                    <argument><expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence reached maximum value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><name>ERANGE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * Check if the sequence is about to wrap-around. If the sequence
             * does not support wrap-around, throw an error.
             * Beware overflow!
             *
             * Note: The gs_increment_by is a signed integer and is negative for
             * descending sequences. So we don't need special handling below
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name>
                    <operator>&lt;=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>newval</name> <init>= <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetNext] SEQ_IS_DESCENDING seqname:%s range:%lld gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
                            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>range</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[GTM_SeqGetNext] SEQ_IS_DESCENDING &amp;&amp; SEQ_IS_CYCLE. seqname:%s range:%lld gs_increment_by:%lld result:%lld coord_name:%s coord_procid:%d"</literal></expr></argument>, 
                            <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>range</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>                
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                          <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nextval: reached minimum value of sequence \"%s\" (%s)"</literal></expr></argument>,
                                    <argument><expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Sequence reached maximum value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><name>ERANGE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* if range is specified calculate valid max value for this range */</comment>
    <if_stmt><if>if <condition>(<expr><name>range</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><operator>*</operator><name>rangemax</name> <operator>=</operator> <call><name>get_rangemax</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>range</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>used_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><operator>*</operator><name>rangemax</name> <operator>=</operator> <call><name>get_rangemax</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rangemax</name>  <operator>=</operator> <operator>*</operator><name>result</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><name>used_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

        
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqGetNext seq:%d sequence:%s value:%zu"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>-=</operator> <name>used_count</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&gt;=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqGetNext GTM_StoreReserveSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>+=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * lastval has to be set to rangemax obtained above because
     * values upto it will be consumed by this nextval caller and
     * the next caller should get values starting above this
     * lastval. Same reasoning for gs_value, but we still return
     * result as the first calculated gs_value above to form the
     * local starting seed at the caller. This will go upto the
     * rangemax value before contacting GTM again..
     */</comment>
    <expr_stmt><expr><call><name>seq_set_lastval</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><operator>*</operator><name>rangemax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <operator>*</operator><name>rangemax</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqGetNext seq:%d reserved:%d"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>                
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSyncSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqGetNext GTM_StoreSyncSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given a sequence and the requested range for its values, calculate
 * the legitimate maximum permissible value for this range. In
 * particular we need to be careful about overflow and underflow for
 * mix and max types of sequences..
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_Sequence</name></type>
<name>get_rangemax</name><argument_list>(<argument><expr><name>GTM_SeqInfo</name> <operator>*</operator><name>seqinfo</name></expr></argument>, <argument><expr><name>GTM_Sequence</name> <name>range</name></expr></argument>,<argument><expr><name>GTM_Sequence</name> <operator>*</operator><name>used_count</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>GTM_Sequence</name>
<name>get_rangemax</name><argument_list>(<argument><expr><name>GTM_SeqInfo</name> <operator>*</operator><name>seqinfo</name></expr></argument>, <argument><expr><name>GTM_Sequence</name> <name>range</name></expr></argument>,<argument><expr><name>GTM_Sequence</name> <operator>*</operator><name>used_count</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>rangemax</name> <init>= <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>used_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Deduct 1 from range because the currval has been accounted
     * for already before this call has been made
     */</comment>
    <expr_stmt><expr><name>range</name><operator>--</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Check if the sequence will overflow because of the range
         * request. If yes, cap it at close to or equal to max value
         */</comment>
        <while>while <condition>(<expr><name>range</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>&gt;=</operator>
                  <name>rangemax</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>rangemax</name> <operator>+=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>range</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>used_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * Check if the sequence will underflow because of the range
         * request. If yes, cap it at close to or equal to min value
         *
         * Note: The gs_increment_by is a signed integer and is negative for
         * descending sequences. So we don't need special handling below
         */</comment>
        <while>while <condition>(<expr><name>range</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>&lt;=</operator>
                 <name>rangemax</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>rangemax</name> <operator>+=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>range</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>used_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>rangemax</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/*
 * Reset the sequence
 */</comment>
<function><type><name>int</name></type>
<name>GTM_SeqReset</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type>         <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>     <name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seqkey_copy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Find seqinfo by using GTM_SEQ_POSTFIX seqkey when can not find by seqkey*/</comment>
        <expr_stmt><expr><name>seqkey_copy</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>seqkey_copy</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
        <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The sequence with the given key does not exist"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>seqkey</name></expr></argument>, <argument><expr><name>InvalidGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>        
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreResetSeq</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqReset GTM_StoreResetSeq failed to alter sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if newly start reserve the sequence value. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqReset GTM_StoreReserveSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gtm_bkup_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GTM_SetNeedBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_InitSeqManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>GTMSequences</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>shb_list</name> <operator>=</operator> <name>gtm_NIL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>shb_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_INIT/MSG_BKUP_SEQUENCE_INIT message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_INIT
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceInitCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>, <decl><type ref="prev"/><name>minval</name></decl>, <decl><type ref="prev"/><name>maxval</name></decl>, <decl><type ref="prev"/><name>startval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>postfix</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block">/*
     * Get the sequence key
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check whether the seqkey contains GTM_SEQ_POSTFIX */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>&gt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>+</operator> <operator>(</operator><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>, <argument><expr><name>GTM_SEQ_POSTFIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"postfix of sequence key can not be _$TBASE$_sequence_temp_54312678712612."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Read various sequence parameters
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cycle</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the sequence information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>errcode</name>    <operator>=</operator> <call><name>GTM_SeqOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>startval</name></expr></argument>,
                              <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>errcode</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to create new sequence:%s for:%s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Opening sequence %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling open_sequence() for standby GTM %p."</literal></expr></argument>,  <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label><name>retry</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"calling open_sequence() for standby GTM %p, seq:%s."</literal></expr></argument>,  <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_open_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
                                    <argument><expr><name>increment</name></expr></argument>,
                                    <argument><expr><name>minval</name></expr></argument>,
                                    <argument><expr><name>maxval</name></expr></argument>,
                                    <argument><expr><name>startval</name></expr></argument>,
                                    <argument><expr><name>cycle</name></expr></argument>,
                                    <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"open_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>            
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"calling open_sequence() for standby GTM %p, seq:%s, rc:%d."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"CREATE SEQUENCE on Standby failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>    
        <comment type="block">/* Save control file with new seq info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Send a SUCCESS message back to the client
         */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_INIT_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_SEQUENCE_ALTER/MSG_BKUP_SEQUENCE_ALTER message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_ALTER
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceAlterCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl>, <decl><type ref="prev"/><name>minval</name></decl>, <decl><type ref="prev"/><name>maxval</name></decl>, <decl><type ref="prev"/><name>startval</name></decl>, <decl><type ref="prev"/><name>lastval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>cycle</name></decl>, <decl><type ref="prev"/><name>is_restart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/*
     * Get the sequence key
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Read various sequence parameters
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>increment</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cycle</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_restart</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the sequence information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Altering sequence key %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqAlter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>startval</name></expr></argument>,
                    <argument><expr><name>lastval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>is_restart</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to open existing sequence:%s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling alter_sequence() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_alter_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
                                     <argument><expr><name>increment</name></expr></argument>,
                                     <argument><expr><name>minval</name></expr></argument>,
                                     <argument><expr><name>maxval</name></expr></argument>,
                                     <argument><expr><name>startval</name></expr></argument>,
                                     <argument><expr><name>lastval</name></expr></argument>,
                                     <argument><expr><name>cycle</name></expr></argument>,
                                     <argument><expr><name>is_restart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"alter_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>    
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>        
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_ALTER_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* FIXME: need to check errors */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ProcessSequenceCleanCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_namelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>coord_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_procid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>coord_namelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>coord_procid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_CleanupSeqSession</name><argument_list>(<argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Clean session sequence for coord_name:%s coord_procid:%u"</literal></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_CLEAN_SESSION_SEQ_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* FIXME: need to check errors */</comment>
    
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_SEQUENCE_LIST message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceListCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>seq_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>seq_maxcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>seq_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>seq_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seq_maxcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

    <comment type="block">/*
     * Store pointers to all GTM_SeqInfo in the hash buckets into an array.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>b-&gt;shb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="block">/* Allocate larger array if required */</comment>
            <if_stmt><if>if <condition>(<expr><name>seq_count</name> <operator>==</operator> <name>seq_maxcount</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>             <name>newcount</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GTM_SeqInfo</name>   <modifier>*</modifier><modifier>*</modifier></type><name>newlist</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>seq_maxcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * If failed try to get less. It is unlikely to happen, but
                 * let's be safe.
                 */</comment>
                <while>while <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>newcount</name> <operator>=</operator> <name>seq_maxcount</name> <operator>+</operator> <operator>(</operator><name>newcount</name> <operator>-</operator> <name>seq_maxcount</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&lt;=</operator> <name>seq_maxcount</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* give up */</comment>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not list all the sequences"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_LIST_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>seq_count</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send sequences from the array
     */</comment>
    <block>{<block_content>
        <comment type="block">/*
         * TODO set initial size big enough to fit any sequence, and avoid
         * reallocations.
         */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>seq_maxlen</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seq_maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seq_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>seq_buflen</name> <init>= <expr><call><name>gtm_get_sequence_size</name><argument_list>(<argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>seq_buflen</name> <operator>&gt;</operator> <name>seq_maxlen</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>seq_maxlen</name> <operator>=</operator> <name>seq_buflen</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>seq_buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>repalloc</name><argument_list>(<argument><expr><name>seq_buf</name></expr></argument>, <argument><expr><name>seq_maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>gtm_serialize_sequence</name><argument_list>(<argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>seq_buf</name></expr></argument>, <argument><expr><name>seq_buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"seq_buflen = %ld"</literal></expr></argument>, <argument><expr><name>seq_buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>seq_buflen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>seq_buf</name></expr></argument>, <argument><expr><name>seq_buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessSequenceListCommand() done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_SEQUENCE_GET_CURRENT message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceGetCurrentCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>seqval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_namelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>coord_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_procid</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>coord_namelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>coord_procid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_SeqGetCurrent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Getting current value %ld for sequence %s"</literal></expr></argument>, <argument><expr><name>seqval</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_GET_CURRENT_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>seqval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* Don't flush to the standby because this does not change the status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * I don't think backup is needed here. It does not change internal state.
     * 27th Dec., 2011, K.Suzuki
     */</comment>


    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_GET_NEXT/MSG_BKUP_SEQUENCE_GET_NEXT message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_GET_NEXT
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceGetNextCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>seqval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>rangemax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>coord_namelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>coord_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>coord_procid</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>	


	<expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>coord_namelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>coord_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>coord_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>coord_procid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GTM_SeqGetNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>range</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>seqval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangemax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not get current value of the sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Getting next value %ld for sequence %s"</literal></expr></argument>, <argument><expr><name>seqval</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>loc_seq</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling get_next() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><call><name>bkup_get_next</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
                          <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>,
                          <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc_seq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangemax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator><operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"get_next() returns GTM_Sequence %ld."</literal></expr></argument>, <argument><expr><name>loc_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>    
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_GET_NEXT_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>seqval</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rangemax</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush to the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* FIXME: need to check errors */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_SET_VAL/MSG_BKUP_SEQUENCE_SET_VAL message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_SET_VAL
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceSetValCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iscalled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_namelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>coord_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>coord_procid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/*
     * Get the sequence key
     */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>coord_namelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coord_namelen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>coord_namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>coord_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>coord_procid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>coord_procid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read parameters to be set */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextval</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iscalled</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We must use the TopMostMemoryContext because the sequence information is
     * not bound to a thread and can outlive any of the thread specific
     * contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Setting new value %ld for sequence %s"</literal></expr></argument>, <argument><expr><name>nextval</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqSetVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>, <argument><expr><name>iscalled</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to set values of sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling set_val() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_set_val</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>,
                              <argument><expr><name>coord_name</name></expr></argument>,
                              <argument><expr><name>coord_procid</name></expr></argument>,
                              <argument><expr><name>nextval</name></expr></argument>,
                              <argument><expr><name>iscalled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"set_val() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_SET_VAL_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_RESET/MSG_BKUP_SEQUENCE_RESET message
 *
 * is_backup indicates the cmessage is MSG_BKUP_SEQUENCE_RESULT
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceResetCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Resetting sequence %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not reset the sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling reset_sequence() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_reset_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"reset_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_RESET_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_CLOSE/MSG_BKUP_SEQUENCE_CLOSE message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_CLOSE
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceCloseCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SequenceKeyType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_SequenceKeyType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Closing sequence %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not close the sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>=<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling close_sequence() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_close_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"close_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>                
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_CLOSE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* FIXME: need to check errors */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_RENAME/MSG_BKUP_SEQUENCE_RENAME message
 *
 * is_backup indicates the message is MSG_BKUP_SEQUENCE_RENAME
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSequenceRenameCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>, <decl><type ref="prev"/><name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/* get the message from backend */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the rest of the message, new name length and string with new name */</comment>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/*
     * As when creating a sequence, we must use the TopMostMemoryContext
     * because the sequence information is not bound to a thread and
     * can outlive any of the thread specific contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Renaming sequence %s to %s"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not rename the sequence"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling rename_sequence() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_rename_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"rename_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>        
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    
    
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Send a SUCCESS message back to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_RENAME_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>



<comment type="block">/*
 * Escape whitespace and non-printable characters in the sequence name to
 * store it to the control file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>encode_seq_key</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>out</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <comment type="block">/* double backslach */</comment>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">' '</literal></expr>)</condition> <comment type="block">/* no need to escape */</comment>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <comment type="block">/* below some known non-printable chars */</comment>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="block">/* other non-printable chars */</comment>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>c</name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>c</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Add NULL terminator */</comment>
    <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Decode the string encoded by the encode_seq_key function
 */</comment>
<function><type><name>void</name></type>
<name>decode_seq_key</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name><name>out</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>in</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <comment type="block">/* get escaped character */</comment>
        <block>{<block_content>
            <expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* next value */</comment>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <comment type="block">/* \nn format */</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>in</name><operator>++</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>val</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>in</name><operator>++</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <comment type="block">/* get plain character */</comment>
        <block>{<block_content>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* copy result to palloc'ed memory */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GTM_Sequence</name></type> <name>distanceToBackedUpSeqValue</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SEQ_IS_CALLED</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>GTM_Sequence</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GTM_NeedSeqRestoreUpdate</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>GTM_NeedSeqRestoreUpdateInternal</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GTM_NeedSeqRestoreUpdateInternal</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>distance</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SEQ_IS_CALLED</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* The first call.  Must backup */</comment>
        <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>distance</name> <operator>=</operator> <call><name>distanceToBackedUpSeqValue</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>distance</name> <operator>&gt;=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name><operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator><name>distance</name> <operator>&lt;=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Save seqinfo to diskfile.*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_SaveSeqInfo2</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ctlf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBackup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;shb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>==</operator> <name>SEQ_STATE_DELETED</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>encode_seq_key</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>ctlf</name></expr></argument>, <argument><expr><literal type="string">"%s\t%ld\t%ld\t%ld\t%ld\t%ld\t%c\t%c\t%x\n"</literal></expr></argument>,
                    <argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isBackup</name></expr> ?</condition><then> <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name></expr> </then><else>: <expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></else></ternary></expr></argument>,
                    <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>,
                    <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_called</name></name></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                    <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>GTM_SaveSeqInfo</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ctlf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTM_SaveSeqInfo2</name><argument_list>(<argument><expr><name>ctlf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advance_gs_value</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>distance</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>distance</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>*</operator> <name>RestoreDuration</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>distance</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name>distance</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>+</operator> <operator>(</operator><name>distance</name> <operator>-</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>distance</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name>distance</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>+</operator> <operator>(</operator><name>distance</name> <operator>-</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_backedUpValue</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_UpdateRestorePointSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;shb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>==</operator> <name>SEQ_STATE_DELETED</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>advance_gs_value</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>GTM_WriteRestorePointSeq</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ctlf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTM_UpdateRestorePointSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_SaveSeqInfo2</name><argument_list>(<argument><expr><name>ctlf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove all current values allocated for the specified session from all
 * sequences.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_CleanupSeqSession</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>coord_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coord_procid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Clean up Sequences used in session %s:%d"</literal></expr></argument>,
            <argument><expr><name>coord_name</name></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coord_name</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GTM_CleanupSeqSession] recv empty coord_name, coord_procid:%d"</literal></expr></argument>, <argument><expr><name>coord_procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SEQ_HASH_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_SeqInfoHashBucket</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><operator>&amp;</operator><name><name>GTMSequences</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>curr_seqinfo</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>bucket-&gt;shb_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>curr_seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>!=</operator> <name>SEQ_STATE_ACTIVE</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GTM_SeqLastVal</name> <modifier>*</modifier></type><name>lastval</name> <init>= <expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_name</name></name></expr></argument>, <argument><expr><name>coord_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                        <name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_procid</name></name> <operator>==</operator> <name>coord_procid</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>newcount</name> <init>= <expr><operator>--</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"remove value of Sequence %s acquired for session %s:%d"</literal></expr></argument>,
                         <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_name</name></name></expr></argument>,
                         <argument><expr><name><name>lastval</name><operator>-&gt;</operator><name>gs_coord_procid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>newcount</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lastval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name><index>[<expr><name>newcount</name></expr>]</index></name></expr></argument>,
                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqLastVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lastval_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Sequence %s is not used, free curr values memory"</literal></expr></argument>,
                             <argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_max_lastvals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_last_values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curr_seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bucket</name><operator>-&gt;</operator><name>shb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Upon transaction abort, remove the sequence created in the transaction being
 * aborted.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqRemoveCreated</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreDropSeq</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropSeq failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_remove_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Upon transaction abort, restore the sequence back to its state when it was
 * altered first time in the transaction.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqRestoreAltered</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqAlteredInfo</name> <modifier>*</modifier></type><name>alterinfo</name> <init>= <expr><operator>(</operator><name>GTM_SeqAlteredInfo</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_keys_equal</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>, <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>seq_rename_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>alterinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Upon transaction abort, rename the sequence back to its original value.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqRestoreDropped</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>seq_rename_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_oldkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
</block_content>}</block></function>

<comment type="block">/*
 * Upon transaction commit, forget the original sequence state. The current
 * state becomes the final state of the sequence.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqRemoveAltered</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqAlteredInfo</name> <modifier>*</modifier></type><name>alterinfo</name> <init>= <expr><operator>(</operator><name>GTM_SeqAlteredInfo</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>alterinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>curr_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>prev_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>alterinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Upon transaction commit, remove the temporarily renamed sequence forever
 * from the global structure.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SeqRemoveDropped</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_SequenceKey</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name>    <operator>=</operator> <call><name>GTM_StoreDropSeq</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropSeq failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_remove_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>GTM_JudgeReserve</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>SEQ_RESERVE_COUNT</name> <operator>*</operator> <name>SEQ_RESERVE_MIN_GAP</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name>                 <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name>                 <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>SEQ_RESERVE_COUNT</name> <operator>*</operator> <name>SEQ_RESERVE_MIN_GAP</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name>                 <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name>                 <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSetSeqReserve</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSetSeqReserve seq:%d failed"</literal></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Form the sequence from GTM storage.
 */</comment>
<function><type><name>GTM_SeqInfo</name><modifier>*</modifier></type>
<name>GTM_FormSeqOfStore</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>             <name>ret</name>        <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name>     <modifier>*</modifier></type><name>seqinfo</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>old_memorycontext</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>old_memorycontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_SeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>seqinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_ref_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name> <operator>=</operator> <call><name>seq_copy_key</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_state</name></name> <operator>=</operator> <name>SEQ_STATE_ACTIVE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>seq_handle</name> <operator>=</operator> <call><name>GTM_StoreLoadSeq</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>seq_handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>seq_add_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_FormSeqOfStore seq_add_seqinfo failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
        
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name> <operator>=</operator> <name>seq_handle</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreReserveSeqValue</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name></expr></argument>, <argument><expr><name>SEQ_RESERVE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreReserveSeqValue failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_left_reserve_seq_number</name></name> <operator>=</operator> <name>SEQ_RESERVE_COUNT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_memorycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_FormSeqOfStore seq: %s found in store, seq:%d, value:%zu"</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>seqinfo</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Invalidate the SEQ store handle in hashtab.
 */</comment>
<function><type><name>void</name></type> <name>GTM_SeqInvalidateHandle</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seqkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqkey</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqInvalidateHandle failed for null ptr"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqInvalidateHandle seq:%s begin."</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_FormSeqOfStore</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seqinfo</name> <operator>=</operator> <call><name>seq_find_seqinfo</name><argument_list>(<argument><expr><name>seqkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seqinfo</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_SeqInvalidateHandle failed for ALTER"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>seq_release_seqinfo</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_store_handle</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqInvalidateHandle seq:%s done."</literal></expr></argument>, <argument><expr><name><name>seqkey</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Invalidate the altered SEQ store handle in hashtab.
 */</comment>
<function><type><name>void</name></type> <name>GTM_SeqInvalidateAlteredSeq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SeqAlteredInfo</name> <modifier>*</modifier></type><name>alterinfo</name> <init>= <expr><operator>(</operator><name>GTM_SeqAlteredInfo</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>alterinfo</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_SeqInvalidateAlteredSeq seq:%d done."</literal></expr></argument>, <argument><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>storage_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>alterinfo</name><operator>-&gt;</operator><name>storage_handle</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>        
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_DB_SEQUENCE_RENAME message.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessDBSequenceRenameCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>, <decl><type ref="prev"/><name>newseqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name>  <modifier>*</modifier></type><name>handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>               <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>count</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/* get the message from backend */</comment>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the rest of the message, new name length and string with new name */</comment>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/*
     * As when creating a sequence, we must use the TopMostMemoryContext
     * because the sequence information is not bound to a thread and
     * can outlive any of the thread specific contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>handles</name> <operator>=</operator> <call><name>GTM_StoreGetAllSeqInDatabase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>handles</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>temp_seqkey</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type>    <name>temp_newseqkey</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>old_key</name><index>[<expr><name>SEQ_KEY_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>new_key</name><index>[<expr><name>SEQ_KEY_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name>GTM_StoreGetSeqKey</name><argument_list>(<argument><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>old_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temp_seqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <name>old_key</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp_seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name>old_key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>old_key</name> <operator>+</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temp_newseqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <name>new_key</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp_newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqRename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_newseqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not rename sequence:%s to %s"</literal></expr></argument>, <argument><expr><name>old_key</name></expr></argument>, <argument><expr><name>new_key</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling rename_sequence() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bkup_rename_sequence</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"rename_sequence() returns rc %d."</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>        
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
        <comment type="block">/* Save control file info */</comment>
        <expr_stmt><expr><call><name>SaveControlInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    
    
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Send a SUCCESS message back to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_RENAME_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block">/* FIXME: need to check errors */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SEQUENCE_COPY message.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCopyDataBaseSequenceCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>src_seqkey</name></decl>, <decl><type ref="prev"/><name>dest_seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name>  <modifier>*</modifier></type><name>handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>			   <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>count</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide sequence to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get src database name */</comment>
    <expr_stmt><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get dest database name */</comment>
    <expr_stmt><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/*
     * As when creating a sequence, we must use the TopMostMemoryContext
     * because the sequence information is not bound to a thread and
     * can outlive any of the thread specific contextes.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>handles</name> <operator>=</operator> <call><name>GTM_StoreGetAllSeqInDatabase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>handles</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_SeqCreateInfo</name></type>  <name>create_info</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>newseqkey</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>new_key</name><index>[<expr><name>SEQ_KEY_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>GTM_StoreGetSeqCreateInfo</name><argument_list>(<argument><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>create_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* generate new sequence key name in dest database */</comment>
            <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>create_info</name><operator>.</operator><name>seqkey</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>&gt;</operator> <name>SEQ_KEY_MAX_LENGTH</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sequence:%s is too long to copy to database %s"</literal></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>seqkey</name></name></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>seqkey</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>new_key</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>GTM_SeqOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>increment_by</name></name></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>minval</name></name></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>maxval</name></name></expr></argument>, <argument><expr><name><name>create_info</name><operator>.</operator><name>startval</name></name></expr></argument>,
                                      <argument><expr><name><name>create_info</name><operator>.</operator><name>cycle</name></name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>errcode</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>errcode</name><operator>,</operator>
                                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to create new sequence:%s for:%s"</literal></expr></argument>, <argument><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send a SUCCESS message back to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SEQUENCE_COPY_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
