<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_store.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_store.c
 *    GTM storage handling on GTM
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 * Portions Copyright (c) 2012-2018 TBase Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_seq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/standby_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_xlog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_time.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>SCAN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>SNAPSHOT_SCAN</name></decl>,
    <decl><name>SNAPSHOT_SCAN_BEFORE_PREPARE</name></decl>,
    <decl><name>SNAPSHOT_SCAN_AFTER_PREPARE</name></decl>,
    <decl><name>SNAPSHOT_SCAN_AFTER_COMMITTED</name></decl>,
    <decl><name>SNAPSHOT_SCAN_AFTER_ABORT</name></decl>,
    <decl><name>SEQ_SCAN</name></decl>,
    <decl><name>BITMAP_SCAN</name></decl>,
    <decl><name>INDEX_SCAN</name></decl>,
    <decl><name>PARALLEL_SEQ_SCAN</name></decl>,
    <decl><name>PARALLEL_BITMAP_SCAN</name></decl>,
    <decl><name>PARALLEL_INDEX_SCAN</name></decl>,
    <decl><name>INSERT_TUPLES</name></decl>
}</block></enum></type><name>ScanType</name>;</typedef>

<struct>struct <name>scan_enum_name</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>enable_gtm_sequence_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>first_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32</name></type> <name>g_GTMStoreMapFile</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>g_GTMStoreMapAddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>g_GTMStoreSize</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>g_GTMDebugLogFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>g_GTMDebugScanLogFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>g_GTMDebugStoreAddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>g_GTMDebugStoreSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTMControlHeader</name>   <modifier>*</modifier></type><name>g_GTM_Store_Header</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GTM_RWLock</name>            <modifier>*</modifier></type><name>g_GTM_Store_Head_Lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name>            <modifier>*</modifier></type><name>g_GTM_Seq_Store_Hash_Lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name>            <modifier>*</modifier></type><name>g_GTM_Txn_Store_Hash_Lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Lock for lock gtm store block. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name></type>             <name>g_GTM_store_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>                      <name>g_GTM_store_lock_cnt</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_StoredHashTable</name>       <modifier>*</modifier></type><name>g_GTM_Store_SeqHashTab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_StoredHashTable</name>       <modifier>*</modifier></type><name>g_GTM_Store_TxnHashTab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>g_GTM_Store_SeqInfo</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>g_GTM_Store_TxnInfo</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>g_GTM_TxnDebugInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTMDebugControlHeader</name></type>    <name>g_GTM_DebugHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name></type>                <name>g_GTM_Debug_Lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_RWLock</name></type>                <name>g_GTM_Scan_Debug_Lock</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
<decl_stmt><decl><type><name>GTM_TimerHandle</name></type>  <name>g_GTM_Backup_Timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GTM_RWLock</name></type>         <name>g_GTM_Backup_Timer_Lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Advise:
 * Following table can be formatted using gtm_msg.h definitions.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>scan_enum_name</name></name></type> <name><name>scan_type_tab</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{<expr><name>SCAN</name></expr>, <expr><literal type="string">"scan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_SCAN</name></expr>, <expr><literal type="string">"snapshotscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_SCAN_BEFORE_PREPARE</name></expr>, <expr><literal type="string">"scanbeforeprepare"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_SCAN_AFTER_PREPARE</name></expr>, <expr><literal type="string">"scanafterprepare"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_SCAN_AFTER_COMMITTED</name></expr>, <expr><literal type="string">"scanaftercommitted"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SNAPSHOT_SCAN_AFTER_ABORT</name></expr>, <expr><literal type="string">"scanafterabort"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SEQ_SCAN</name></expr>, <expr><literal type="string">"seqscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>BITMAP_SCAN</name></expr>, <expr><literal type="string">"bitmapscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>INDEX_SCAN</name></expr>, <expr><literal type="string">"indexscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>PARALLEL_SEQ_SCAN</name></expr>, <expr><literal type="string">"parallelseqscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>PARALLEL_BITMAP_SCAN</name></expr>, <expr><literal type="string">"parallelbitmapscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>PARALLEL_INDEX_SCAN</name></expr>, <expr><literal type="string">"parallelindexscan"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>INSERT_TUPLES</name></expr>, <expr><literal type="string">"insert"</literal></expr>}</block></expr>,
    <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTxnDebugEntry</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_TransactionDebugInfo*) (g_GTM_TxnDebugInfo + (i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetScanDebugEntry</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_TransactionDebugInfo *) (g_GTM_ScanDebugInfo + (i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTxnStore</name><parameter_list>(<parameter><type><name>txn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_StoredTransactionInfo*)(g_GTM_Store_TxnInfo + txn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetSeqStore</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_StoredSeqInfo*)(g_GTM_Store_SeqInfo + seq)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AcquireTxnHashLock</name><parameter_list>(<parameter><type><name>txn</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_RWLockAcquire(g_GTM_Txn_Store_Hash_Lock + txn, mode))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ReleaseTxnHashLock</name><parameter_list>(<parameter><type><name>txn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_RWLockRelease(g_GTM_Txn_Store_Hash_Lock + txn))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AcquireSeqHashLock</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_RWLockAcquire(g_GTM_Seq_Store_Hash_Lock + seq, mode))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ReleaseSeqHashLock</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTM_RWLockRelease(g_GTM_Seq_Store_Hash_Lock + seq))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetSeqHashBucket</name><parameter_list>(<parameter><type><name>seq</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_GTM_Store_SeqHashTab-&gt;m_buckets[seq])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTxnHashBucket</name><parameter_list>(<parameter><type><name>txn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_GTM_Store_TxnHashTab-&gt;m_buckets[txn])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetSeqHashBucket</name><parameter_list>(<parameter><type><name>bucket</name></type></parameter>, <parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_GTM_Store_SeqHashTab-&gt;m_buckets[bucket] = handle)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetTxnHashBucket</name><parameter_list>(<parameter><type><name>bucket</name></type></parameter>, <parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(g_GTM_Store_TxnHashTab-&gt;m_buckets[bucket] = handle)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_SEQ_HANDLE</name><parameter_list>(<parameter><type><name>seq_handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(seq_handle &gt;= 0 &amp;&amp; seq_handle &lt; GTM_MAX_SEQ_NUMBER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_TXN_HANDLE</name><parameter_list>(<parameter><type><name>txn_handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(txn_handle &gt;= 0 &amp;&amp; txn_handle &lt; MAX_PREPARED_TXN)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreTxnHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreSeqHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>GTM_StoreGetHashValue</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreHeaderRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreHeaderShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreAllocSeq</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>key_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RebuildTransactionList</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RebuildSequenceList</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_InitStoreSyncHeader</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>needLsn</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreSyncHeader</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>needLsn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreSyncSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_ResetSyncSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreSyncTxn</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>GTM_StoreInitRawTxn</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>GTM_StoreInitRawSeq</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreSyncTxnHashBucket</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>bucket</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreSyncSeqHashBucket</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>bucket</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>GTM_StoreFreeSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GTM_StoreAddTxnToHash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>GTMStorageHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GTM_StoreAddSeqToHash</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreTxnHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreSeqHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type>  <name>GTM_StoreFreeTxn</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>GTM_StoreGetHashBucket</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type>  <name>GTM_StoreSync</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type>  <name>GTM_StoreInitSync</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>GTM_StoreCheckHeaderCRC</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type>  <name>GTM_StoreGetHeader</name><parameter_list>(<parameter><decl><type><name>GTMControlHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32</name></type>  <name>GTM_StoreGetUsedSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32</name></type>  <name>GTM_StoreGetUsedTxn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>GTM_StoreCheckSeqCRC</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>GTM_StoreCheckTxnCRC</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>GTM_StoreSeqInFreelist</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>GTM_StoreTxnInFreelist</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* Caculate the hash value. */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>GTM_StoreGetHashValue</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>ii</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>key</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type> <name>GTM_StoreGetHashBucket</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash_value</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>hash_bucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>hash_value</name> <operator>=</operator> <call><name>GTM_StoreGetHashValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash_bucket</name> <operator>=</operator> <name>hash_value</name> <operator>%</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</expr_stmt>
    <return>return <expr><name>hash_bucket</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Init stand storage file. 
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreStandbyInit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                        <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                       <name>fd</name>     <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                        <name>ret</name>    <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                        <name>i</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>                     <name>size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                       <name><name>path</name><index>[<expr><name>NODE_STRING_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>data_dir</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit invalid NULL file path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* init the memory structure */</comment>
    <expr_stmt><expr><name>size</name>  <operator>=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* header */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* seq hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* sequence table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_PREPARED_TXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>PAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>        <comment type="block">/* two more pages for align*/</comment>

    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <name>size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit invalid data length:%u, required length:%zu."</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTMStoreSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NODE_STRING_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit open file:%s failed for:%s, try to create a new file."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rename</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit stat file:%s failed for:%s, try to create a new file."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <name>g_GTMStoreSize</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rename</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit stat file:%s size:%zu not equal required size:%zu, file maybe corrupted, backup it to %s"</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>, <argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else 
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>rename</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit backup file:%s to %s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>GTM_MAP_BACKUP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>    
    
    <comment type="block">/* in standby node, we need to reinitliaze the map file */</comment>        
    <expr_stmt><expr><name>g_GTMStoreMapFile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_GTMStoreMapFile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit create file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTMStoreMapAddr</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_GTMStoreMapAddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
    <block>{<block_content>        
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit mmap file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* sync the data to file */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreInitSync</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit msync file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>                
    
    <comment type="block">/* init the global pointers */</comment>
    <expr_stmt><expr><name>g_GTM_Store_Header</name>     <operator>=</operator> <operator>(</operator><name>GTMControlHeader</name><operator>*</operator><operator>)</operator><name>g_GTMStoreMapAddr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GTM_StoreCheckHeaderCRC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit file:%s header CRC check failed."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit file:%s header CRC check succeed."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>g_GTM_Store_SeqHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_TxnHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_SeqInfo</name>    <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_TxnInfo</name>    <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>


    <expr_stmt><expr><name>g_GTM_Store_Head_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Store_Head_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTM_Seq_Store_Hash_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Seq_Store_Hash_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTM_Txn_Store_Hash_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Seq_Store_Hash_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Seq_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* init the locks */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>INIT_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_GTM_Seq_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>INIT_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>    
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_GTM_Txn_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>INIT_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>    
    </block_content>}</block></for>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>INIT_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_StoreHeaderRunning</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreStandbyInit succeed, storage file:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>    
    
<label><name>INIT_ERROR</name>:</label>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Seq_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Txn_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Function to check Header CRC result. */</comment>
<function><type><name>bool</name></type> <name>GTM_StoreCheckHeaderCRC</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>                <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_crc32c</name></type>            <name>crc_result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMControlHeader</name>    <modifier>*</modifier></type><name>header</name> <init>= <expr><name>g_GTM_Store_Header</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>g_GTM_Store_Header</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc_result</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></argument>,
                    <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>, <argument><expr><name>m_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator>  <call><name>EQ_CRC32C</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>, <argument><expr><name>crc_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM Storage file VERSION:%d.%d, GTM VERSION:%d.%d"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_major_version</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_minor_version</name></name></expr></argument>, <argument><expr><name>GTM_STORE_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>GTM_STORE_MINOR_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/* Function to init the gtm storage file when system init. */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreMasterInit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                        <name>bneed_create</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                       <name>fd</name>     <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                        <name>ret</name>    <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                        <name>i</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>                     <name>size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type>              <name>now</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>GTMControlHeader</name>          <modifier>*</modifier></type><name>header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredHashTable</name>       <modifier>*</modifier></type><name>seqHashTab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredHashTable</name>       <modifier>*</modifier></type><name>txnHashTab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seqInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txnInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>                <name>current_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                       <name><name>path</name><index>[<expr><name>NODE_STRING_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>data_dir</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit invalid NULL file path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* init the memory structure */</comment>
    <expr_stmt><expr><name>size</name>  <operator>=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* header */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* seq hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* sequence table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_PREPARED_TXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>PAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>        <comment type="block">/* two more pages for align*/</comment>
    <expr_stmt><expr><name>g_GTMStoreSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NODE_STRING_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>data_dir</name></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bneed_create</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit open file:%s failed for:%s, try to create a new file."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit stat file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <name>g_GTMStoreSize</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit stat file:%s size:%zu not equal required size:%zu, file maybe corrupted, try to create a new file."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>    

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>g_GTMDebugLogFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>GTM_DEBUG_FILE_NAME</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_GTMDebugLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit create debug log file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_DEBUG_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>g_GTMDebugScanLogFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>GTM_SCAN_DEBUG_FILE_NAME</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_GTMDebugScanLogFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit create debug scan log file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_SCAN_DEBUG_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>g_GTMDebugStoreSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionDebugInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_DEBUG_TXN_INFO</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_GTMDebugStoreAddr</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>g_GTMDebugStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTMDebugStoreAddr</name></expr>)</condition> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit failed for:%s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_GTMDebugStoreAddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>g_GTMDebugStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_GTM_TxnDebugInfo</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionDebugInfo</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMDebugStoreAddr</name><operator>)</operator></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_len</name></name> <operator>=</operator> <name>GTM_MAX_DEBUG_TXN_INFO</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Scan_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>bneed_create</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><name>g_GTMStoreMapFile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_GTMStoreMapFile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit create file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>g_GTMStoreMapAddr</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTMStoreMapAddr</name></expr>)</condition> 
        <block>{<block_content>        
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit mmap file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><literal type="number">0X00</literal></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>GTMControlHeader</name><operator>*</operator><operator>)</operator><name>g_GTMStoreMapAddr</name></expr>;</expr_stmt>

        <comment type="block">/* init header */</comment>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_major_version</name></name>    <operator>=</operator> <name>GTM_STORE_MAJOR_VERSION</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_minor_version</name></name>    <operator>=</operator> <name>GTM_STORE_MINOR_VERSION</name></expr>;</expr_stmt>     
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_gtm_status</name></name>       <operator>=</operator> <name>GTM_STARTING</name></expr>;</expr_stmt>           
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_global_xmin</name></name>      <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_next_gxid</name></name>        <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_next_gts</name></name>           <operator>=</operator> <name>FirstGlobalTimestamp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* first time through, we are on the first of the freelist. */</comment>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* first time through, we are on the first of the freelist. */</comment>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_lsn</name></name>               <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* init the gtm lsn */</comment>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>    
        
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* use us of current time as the system identifier */</comment>
        <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>m_identifier</name></name> <operator>=</operator> <operator>(</operator><name><name>current_time</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>current_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></argument>,
                    <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>, <argument><expr><name>m_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* init seq hashtab */</comment>
        <expr_stmt><expr><name>seqHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqHashTab</name><operator>-&gt;</operator><name>m_buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="block">/* init txn hashtab */</comment>
        <expr_stmt><expr><name>txnHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txnHashTab</name><operator>-&gt;</operator><name>m_buckets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="block">/* init seq freelist */</comment>
        <expr_stmt><expr><name>seqInfo</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_next</name>            <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_store_handle</name>   <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_status</name>             <operator>=</operator> <name>GTM_STORE_SEQ_STATUS_NOT_USE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seqInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>m_last_update_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_StoreInitRawSeq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="block">/* Set last element invalid */</comment>
        <expr_stmt><expr><name><name>seqInfo</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gs_next</name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_StoreInitRawSeq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seqInfo</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* init txn freelist */</comment>
        <expr_stmt><expr><name>txnInfo</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREPARED_TXN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txnInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gs_next</name>                 <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txnInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_store_handle</name>           <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txnInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_state</name>               <operator>=</operator> <name>GTM_TXN_INIT</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_StoreInitRawTxn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txnInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="block">/* Set last element invalid */</comment>
        <expr_stmt><expr><name><name>txnInfo</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gs_next</name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_StoreInitRawTxn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txnInfo</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreInitSync</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit msync file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit stat file:%s already exist, continue to startup."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_GTMStoreMapFile</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

        <comment type="block">/* load the map file into memory */</comment>
        <expr_stmt><expr><name>g_GTMStoreMapAddr</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_GTMStoreMapAddr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
        <block>{<block_content>        
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit mmap file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>, <argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>!=</operator> <name>g_GTMStoreSize</name></expr>)</condition> 
        <block>{<block_content>        
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit read file:%s failed for:%s, reqiured size:%zu, read size:%zu."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* init the global pointers */</comment>
    <expr_stmt><expr><name>g_GTM_Store_Header</name>     <operator>=</operator> <operator>(</operator><name>GTMControlHeader</name><operator>*</operator><operator>)</operator><name>g_GTMStoreMapAddr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_SeqHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_TxnHashTab</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredHashTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_SeqInfo</name>    <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Store_TxnInfo</name>    <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><name>g_GTMStoreMapAddr</name> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GTM_PrintControlHeader</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bneed_create</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GTM_StoreCheckHeaderCRC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit file:%s header CRC check failed."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit file:%s header CRC check succeed."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>g_GTM_Store_Head_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Store_Head_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTM_Seq_Store_Hash_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Seq_Store_Hash_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>g_GTM_Txn_Store_Hash_Lock</name> <operator>=</operator> <operator>(</operator><name>GTM_RWLock</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_RWLock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_GTM_Seq_Store_Hash_Lock</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Seq_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* init the locks */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>INIT_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>g_GTM_Store_Head_Lock</name><operator>-&gt;</operator><name>lock_flag</name></name> <operator>=</operator> <name>GTM_RWLOCK_FLAG_STORE</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_GTM_Seq_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>INIT_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>g_GTM_Seq_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock_flag</name> <operator>=</operator> <name>GTM_RWLOCK_FLAG_STORE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_GTM_Txn_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>INIT_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>g_GTM_Txn_Store_Hash_Lock</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock_flag</name> <operator>=</operator> <name>GTM_RWLOCK_FLAG_STORE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <goto>goto <name>INIT_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>g_GTM_store_lock</name><operator>.</operator><name>lock_flag</name></name> <operator>=</operator> <name>GTM_RWLOCK_FLAG_STORE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_StoreHeaderRunning</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit succeed, storage file:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>    
    
<label><name>INIT_ERROR</name>:</label>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Seq_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTM_Txn_Store_Hash_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMasterInit failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* shutdown the GTM store. */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreShutDown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Lock store to block any write. */</comment>
    <expr_stmt><expr><call><name>GTM_StoreLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we are shutting down ,just lock the header ensure no one can write. */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>GTM_StoreHeaderShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreInitSync</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>, <argument><expr><name>g_GTMStoreSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>g_GTMStoreMapAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>g_GTMDebugLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>g_GTMDebugScanLogFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>g_GTMStoreMapAddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTMStoreSize</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTMStoreMapFile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreShutDown succeed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Alloc a SEQ for a specific txn.
 */</comment>
<function><type><name>GTMStorageHandle</name></type> <name>GTM_StoreAllocSeq</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>key_type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name>                                <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>flush_head</name>                         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>head</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>next</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>current</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>key</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* alloc a seq from freelist */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* last free element. */</comment>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>current</name>                               <operator>=</operator> <name>head</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flush_head</name>                            <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* use second element in the free list for allocation, avoid writing head too often. */</comment>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name>   <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
    <comment type="block">/* just allocated */</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_status</name></name> <operator>=</operator> <name>GTM_STORE_SEQ_STATUS_ALLOCATE</name></expr>;</expr_stmt>
    
    <comment type="block">/* add the seq to hash */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name>key_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreAddSeqToHash</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* flush header */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush current seq */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>current</name> <operator>&amp;&amp;</operator> <name>next</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush seq head */</comment>
    <if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>current</name> <operator>&amp;&amp;</operator> <name>head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocSeq seq:%s key_type:%d handle:%d."</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_type</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreSyncSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeq invalid handle:%d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return     <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* increase LSN of header and sync to disk. */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>seq</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>, <argument><expr><name>gs_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeq seq:%d failed for: %s."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeq seq:%d done."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>  <name>GTM_StoreInitRawSeq</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>seq</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>, <argument><expr><name>gs_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_CommitSyncSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_status</name></name>          <operator>=</operator> <name>GTM_STORE_SEQ_STATUS_COMMITED</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_CommitSyncSeq reset seq:%d failed for: %s."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_CommitSyncSeq seq:%d done."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_ResetSyncSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_value</name></name>           <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_ResetSyncSeq reset seq:%d failed for: %s."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_ResetSyncSeq seq:%s seq:%d done"</literal></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
<comment type="block">/*
 * Sync the storage header to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_InitStoreSyncHeader</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>needLsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>needLsn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_lsn</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>g_GTM_Store_Header</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>, <argument><expr><name>m_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreInitSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>g_GTM_Store_Header</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncHeader msync header failed for: %s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Sync the storage header to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSyncHeader</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>needLsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name> <init>= <expr><name>GTM_STORE_OK</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>needLsn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_lsn</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>g_GTM_Store_Header</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>, <argument><expr><name>m_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>g_GTM_Store_Header</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncHeader msync header failed for: %s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreHeaderShutdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>       <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_gtm_status</name></name> <operator>=</operator> <name>GTM_SHUTTING_DOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreHeaderShutdown done, latest xid:%u, global_xmin:%u."</literal></expr></argument>, <argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name></expr></argument>, <argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_global_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreHeaderShutdown sync header to disk failed for:%s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreHeaderRunning</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_gtm_status</name></name> <operator>=</operator> <name>GTM_RUNNING</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_InitStoreSyncHeader</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreHeaderRunning sync header to disk failed for:%s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreHeaderRunning done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreSyncTxn</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_TXN_HANDLE</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncTxn invalid txn handle:%d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return     <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* increase LSN of header and sync to disk. */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>txn</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>, <argument><expr><name>gti_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>txn</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncTxn sync txn:%d info to disk failed for:%s."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncTxn seq:%d gid:%s node_string:%s."</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>,<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>,<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GTM_StoreInitRawTxn</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>txn</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>, <argument><expr><name>gti_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreSyncTxnHashBucket</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>bucket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>g_GTM_Store_TxnHashTab</name><operator>-&gt;</operator><name>m_buckets</name></name> <operator>+</operator> <name>bucket</name><operator>)</operator></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncTxnHashBucket sync bucket:%d failed for: %s."</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncTxnHashBucket bucket:%d."</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreSyncSeqHashBucket</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>bucket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>g_GTM_Store_SeqHashTab</name><operator>-&gt;</operator><name>m_buckets</name></name> <operator>+</operator> <name>bucket</name><operator>)</operator></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqHashBucket sync bucket:%d failed for: %s."</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqHashBucket bucket:%d."</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free the specific seq to store.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreFreeSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
    <decl_stmt><decl><type><name>bool</name></type>                        <name>flush_bucket</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>           <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>flush_head</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>flush_bucket_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>head</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>current</name>       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>next</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>bucket_info</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq invalid handle:%d"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* remove the txn from hash table */</comment>
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>GTM_STORE_SEQ_STATUS_NOT_USE</name> <operator>==</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_status</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq handle:%d already freed"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d bucket:%d."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq acquire seq lock failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq AcquireSeqHashLock bucktet:%d failed"</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* loop through the hash list */</comment>
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>bucket_handle</name> <operator>!=</operator> <name>seq</name> <operator>&amp;&amp;</operator> <name>bucket_handle</name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket_info</name>   <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <name>seq</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* first element */</comment>
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d is the first in bucket:%d."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>flush_bucket</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d is the middle of bucket:%d."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>flush_bucket_info</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* should not happen */</comment>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%d not found"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d not found in bucket:%d."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq acquire seq lock failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr>)</condition>
    <block>{<block_content>    
        <comment type="block">/* just print */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq no more element in freelist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name>flush_head</name>    <operator>=</operator> <name>true</name></expr>;</expr_stmt>    
        
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d handle:%d will be the only one in freelist."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr>)</condition>
        <block>{<block_content>            
            <comment type="block">/* only one element in freelist, we will be the last one, also the second one */</comment>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d handle:%d will be the second one in freelist."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</expr_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeSeq seq:%s key_type:%d handle:%d will in the middle of freelist."</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    
    <comment type="block">/* reset the status */</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_status</name></name> <operator>=</operator> <name>GTM_STORE_SEQ_STATUS_NOT_USE</name></expr>;</expr_stmt>
        
    <comment type="block">/* flush header */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* flush seq head */</comment>
    <if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* flush seq on prelink */</comment>
    <if_stmt><if>if<condition>(<expr><name>flush_bucket_info</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>bucket_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush current seq */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/* flush pre hash */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush_bucket</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* flush hash bucket */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_bucket</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Add the txn info into the hash list.
 */</comment>
<function><type><name>bool</name></type> <name>GTM_StoreAddTxnToHash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>GTMStorageHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>             <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>bucket_into</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_TXN_HANDLE</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>gid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash invalid parameter."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash gid:%s txn:%d begin."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash AcquireTxnHashLock bucket:%d lock failed for %s."</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash gid:%s txn:%d will be in bucket:%d."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* first element */</comment>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash gid:%s txn:%d will be the first of bucktet:%d."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* set the new transaction as the bucket header */</comment>
        <expr_stmt><expr><name>bucket_into</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>bucket_into</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash gid:%s txn:%d will be the middle of bucktet:%d."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreSyncTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddTxnToHash gid:%s txn:%d done."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Add seq to hash.
 */</comment>
<function><type><name>void</name></type> <name>GTM_StoreAddSeqToHash</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>             <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>           <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>          <modifier>*</modifier></type><name>bucket_info</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash invalid handle:%d"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>    

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash seq:%d begin."</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>bucket</name>   <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash AcquireSeqHashLock failed for %s, seq:%d, bucket:%d"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* first element */</comment>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash seq:%d is the first element in bucket:%d."</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* set the new transaction as the bucket header */</comment>
        <expr_stmt><expr><name>bucket_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>bucket_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash add seq:%d to bucket:%d, next is:%d."</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreSyncSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAddSeqToHash seq:%d done."</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Search the txn hash and return the txn handle.
 */</comment>
<function><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreTxnHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>found</name>         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>            <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>gid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnHashSearch invalid null ptr."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnHashSearch gid:%s begin."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnHashSearch gid:%s should be in hash bucktet:%d."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>,  <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnHashSearch gid:%s not found in hash bucktet:%d."</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name>found</name></expr> ?</condition><then> <expr><name>bucket_handle</name></expr> </then><else>: <expr><name>INVALID_STORAGE_HANDLE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Search the seq hash and return the seq handle.
 */</comment>
<function><type><specifier>static</specifier> <name>GTMStorageHandle</name></type> <name>GTM_StoreSeqHashSearch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seq_key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>found</name>         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>            <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>           <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>seq_key</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    
    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name>seq_key</name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name>seq_key</name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,  <argument><expr><name>seq_key</name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>found</name></expr> ?</condition><then> <expr><name>bucket_handle</name></expr> </then><else>: <expr><name>INVALID_STORAGE_HANDLE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Alloc a TXN control info.
 */</comment>
<function><type><name>GTMStorageHandle</name></type> <name>GTM_StoreAllocTxn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                                 <name>ret</name>          <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                                <name>flush_head</name>   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>head</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>next</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>current</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocTxn  begin gid:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
            
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocTxn  GTM_RWLockAcquire g_GTM_Store_Head_Lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocTxn no more txn handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* last free element. */</comment>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>current</name>                               <operator>=</operator> <name>head</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flush_head</name>                            <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocTxn only one element left in freelist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* use second element in the free list for allocation, avoid writing head too often. */</comment>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name>   <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
    <comment type="block">/* just allocated */</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gti_state</name></name> <operator>=</operator> <name>GTM_TXN_STARTING</name></expr>;</expr_stmt>
    
    <comment type="block">/* add the txn to hash */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreAddTxnToHash</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* flush header */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush current seq */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>current</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush seq head */</comment>
    <if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>current</name> <operator>&amp;&amp;</operator> <name>head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAllocTxn  done gid:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>current</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Free a TXN control info, move the txn from hash table to freelist.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreFreeTxn</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
    <decl_stmt><decl><type><name>bool</name></type>                               <name>flush_bucket</name>   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                              <name>ret</name>             <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                              <name>flush_head</name>     <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>head</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>current</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>          <modifier>*</modifier></type><name>next</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>uint32</name></type>                               <name>bucket</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>                   <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>         <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>         <modifier>*</modifier></type><name>bucket_info</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_TXN_HANDLE</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn invalid txn:%d"</literal></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn for txn:%d begin"</literal></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* remove the txn from hash table */</comment>
    <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>GTM_TXN_INIT</name> <operator>==</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gti_state</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn handle:%d already freed"</literal></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn gid:%s is in bucket:%d"</literal></expr></argument>, <argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn GTM_RWLockAcquire g_GTM_Store_Head_Lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn acquire lock for bucket:%d failed"</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* loop through the hash list */</comment>
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>bucket_handle</name> <operator>!=</operator> <name>txn</name> <operator>&amp;&amp;</operator> <name>bucket_handle</name><operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket_info</name>   <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <name>txn</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* first element */</comment>
        <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>SetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>flush_bucket</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>            
            
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn gid:%s is the only one in bucket:%d"</literal></expr></argument>, <argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn gid:%s is in the middle of bucket:%d"</literal></expr></argument>, <argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* should not happen */</comment>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn gid:%s not found in bucket:%d"</literal></expr></argument>, <argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/* return it to the freelist*/</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn GTM_RWLockAcquire g_GTM_Store_Head_Lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name>                   <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name>flush_head</name>    <operator>=</operator> <name>true</name></expr>;</expr_stmt>     
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name>    <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>next</name>             <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            <expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>gs_next</name></name>    <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* reset the status field */</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>gti_state</name></name>           <operator>=</operator> <name>GTM_TXN_INIT</name></expr>;</expr_stmt>    
    
    <comment type="block">/* flush header */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* flush txn head */</comment>
    <if_stmt><if>if <condition>(<expr><name>head</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush current txn */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/* flush pre hash */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush_bucket</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* flush hash bucket */</comment>
    <if_stmt><if>if <condition>(<expr><name>flush_bucket</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxnHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFreeTxn txn:%d done"</literal></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Move the txn from the TXN hash table to free list */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreFinishTxn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>          <name>txn</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt> 
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>gid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFinishTxn null gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFinishTxn for txn:%s begin"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>txn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFinishTxn GTM_StoreTxnHashSearch for txn:%s failed"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreFreeTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreFinishTxn for txn:%s done"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* move the txn from the TXN hash table to free list */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreCommitTxn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>          <name>txn</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt> 
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>gid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreCommitTxn null gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreCommitTxn for txn:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>txn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreCommitTxn GTM_StoreTxnHashSearch for txn:%s failed"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* process created seq */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreFreeTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* move the txn from the TXN hash table to free list and abort the seqences*/</comment>
<function><type><name>int32</name></type> <name>GTM_StoreAbortTxn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                      <name>ret</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>          <name>txn</name>        <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt> 
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>gid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAbortTxn null gid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAbortTxn for txn:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>txn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreAbortTxn GTM_StoreTxnHashSearch for txn:%s failed"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block">/* rollback the sequence status */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreFreeTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
<function><type><name>void</name></type> <name>GTM_StoreSizeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>size</name>  <operator>=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* header */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* seq hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredHashTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn hash table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* sequence table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ALIGN_PAGE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_PREPARED_TXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* txn table */</comment> 
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>PAGE_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>      <comment type="block">/* two more pages for align*/</comment>
    <expr_stmt><expr><name>g_GTMStoreSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>g_GTM_store_lock_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Backup_Timer</name> <operator>=</operator> <name>INVALID_TIMER_HANDLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Reserve the specific XID number and flush the head to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreReserveXid</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>now</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* over flow */</comment>
        <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>MaxGlobalTransactionId</name> <operator>-</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name> <operator>&lt;</operator> <name>FirstNormalGlobalTransactionId</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>          
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreReserveXid reserved %d gxid succeed, latest_xid:%u"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store latest global timestamp and flush the head to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreGlobalTimestamp</name><parameter_list>(<parameter><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type>         <name>now</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>res</name> <init>= <expr><name>GTM_STORE_OK</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/* no need to increase the LSN of header when we store GTS. */</comment>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name> <operator>=</operator> <name>gts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>GTM_STORE_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"syncing header fails return %d"</literal></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* backup gts to slaves */</comment>
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGlobalTimestamp "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Restore the gxid and global xim.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreRestore</name><parameter_list>(<parameter><decl><type><name>GlobalTimestamp</name> <modifier>*</modifier></type><name>gts</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>global_xmin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>gxid</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>global_xmin</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>gts</name>          <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>gxid</name>        <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>global_xmin</name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_global_xmin</name></name></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reserve seq value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>GTM_StoreReserveSeqValueIntern</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seqinfo</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>distance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>MAX_SEQUENCE_RESERVED</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>MAX_SEQUENCE_RESERVED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>distance</name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>*</operator> <name>count</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_ASCENDING</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>distance</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name>distance</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>+</operator> <operator>(</operator><name>distance</name> <operator>-</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator> <operator>&gt;=</operator> <name>distance</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>+</operator> <name>distance</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>SEQ_IS_CYCLE</name><argument_list>(<argument><expr><name>seqinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>+</operator> <operator>(</operator><name>distance</name> <operator>-</operator> <operator>(</operator><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>-</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>seqinfo</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name><name>seqinfo</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Reserve the specific seq value, and flush the new result to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreReserveSeqValue</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>        <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>seq_handle</name> <operator>||</operator> <name>seq_handle</name> <operator>&gt;=</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreReserveSeqValueIntern</name><argument_list>(<argument><expr><name>seq_info</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* first call */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreReserveSeqValue set gs_called for seq:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqValue reserve value:%d to gs_value:%zu for seq:%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sync seq new value, and flush the new result to disk.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSyncSeqValue</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>        <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqValue invalid handle:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* first call */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqValue set gs_called for seq:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSyncSeqValue set gs_value:%zu for seq:%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reset a sequence.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreResetSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GTM_ResetSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set a sequence value.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSetSeqValue</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_called</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_value</name></name>           <operator>=</operator> <name>value</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSetSeqValue seq:%d value:%zu is_called:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_called</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Mark seq as called.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreMarkSeqCalled</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_called</name></name>          <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreMarkSeqCalled seq:%d is called"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set reserve flag of the seq.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSetSeqReserve</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reserve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>m_last_update_time</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>gs_reserved</name></name>        <operator>=</operator> <name>reserve</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSetSeqReserve seq:%d gs_reserved:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>reserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><call><name>GTM_StoreSync</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seq</name></expr></argument>, <argument><expr><call><name>ALIGN8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Close a sequence.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreCloseSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Drop a sequence.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreDropSeq</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GTM_StoreFreeSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Create a new sequence.
 */</comment>
<function><type><name>GTMStorageHandle</name></type>
<name>GTM_StoreSeqCreate</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name>         <modifier>*</modifier></type><name>raw_seq</name></decl></parameter>,
                   <parameter><decl><type><name>char</name>                   <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>          <name>seq_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    

    <expr_stmt><expr><name>gid</name> <operator>=</operator> <name>gid</name></expr>;</expr_stmt>

    <comment type="block">/* create seq in GTM store */</comment>
    <expr_stmt><expr><name>seq_handle</name> <operator>=</operator> <call><name>GTM_StoreAllocSeq</name><argument_list>(<argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>seq_handle</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* init seq info */</comment>
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name>         <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_init_value</name></name>    <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_increment_by</name></name>  <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_min_value</name></name>     <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_max_value</name></name>     <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_cycle</name></name>            <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name>        <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_called</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_reserved</name></name>       <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_status</name></name>           <operator>=</operator> <name>GTM_STORE_SEQ_STATUS_ALLOCATE</name></expr>;</expr_stmt>    
    
    <comment type="block">/* sync the data into data files. */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    <return>return <expr><name>seq_handle</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Rename a sequence.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSeqRename</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>seq_handle</name></decl></parameter>, 
                         <parameter><decl><type><name>char</name>  <modifier>*</modifier></type><name>pre_key</name></decl></parameter>,
                         <parameter><decl><type><name>char</name>  <modifier>*</modifier></type><name>cur_key</name></decl></parameter>,
                          <parameter><decl><type><name>int32</name></type> <name>pre_key_type</name></decl></parameter>,
                         <parameter><decl><type><name>int32</name></type> <name>cur_key_type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                        <name>flush_bucket</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                       <name>ret</name>           <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32</name></type>                       <name>bucket</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>bucket_info</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename invalid handle:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d pre_key:%s cur_key:%s begin"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> 
        <name>seq_handle</name> <operator>!=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d store_handle:%d pre_key:%s store_key:%s not equal"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>bucket</name> <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* loop through the hash list */</comment>
    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>bucket_handle</name> <operator>!=</operator> <name>seq_handle</name> <operator>&amp;&amp;</operator> <name>bucket_handle</name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bucket_info</name>   <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <name>seq_handle</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* first element, remove seq from the bucket */</comment>
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>bucket_handle</name> <operator>==</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>flush_bucket</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d pre_key:%s is the first element of bucket:%d "</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>bucket_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d pre_key:%s is in the middle of bucket:%d "</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* should never happen */</comment>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d pre_key:%s not found"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flush_bucket</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeqHashBucket</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>bucket_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* use the new name */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name>cur_key_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_StoreAddSeqToHash</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqRename seq:%d pre_key:%s cur_key:%s done"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>, <argument><expr><name>pre_key</name></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>    
</block_content>}</block></function>

<comment type="block">/*
 * alter the sequence, the operation is not transactional.
 * no way to make the operation transactional. 
 */</comment>
<function><type><name>int32</name></type>
<name>GTM_StoreSeqAlter</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name>         <modifier>*</modifier></type><name>raw_seq</name></decl></parameter>,
                  <parameter><decl><type><name>GTMStorageHandle</name></type>     <name>seq_handle</name></decl></parameter>,
                  <parameter><decl><type><name>bool</name></type>                   <name>restart</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_SEQ_HANDLE</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqAlter invalid handle:%d"</literal></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* init seq info */</comment>
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block">/* Modify the data if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>!=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_cycle</name></name> <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>!=</operator>  <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_min_value</name></name> <operator>=</operator>  <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>!=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_max_value</name></name> <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>!=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_increment_by</name></name> <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Check start/restart processes.
     * Check first if restart is necessary and reset sequence in that case.
     * If not, check if a simple start is necessary and update sequence.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>restart</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Restart command has been used, reset the sequence */</comment>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name>   <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name>    <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_reserved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>!=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_init_value</name></name> <operator>=</operator> <name><name>raw_seq</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqAlter seq:%s seq:%d done"</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* sync the data into data files. */</comment>
    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Load a new sequence into memory from GTM store.
 */</comment>
<function><type><name>GTMStorageHandle</name></type> <name>GTM_StoreLoadSeq</name><parameter_list>(<parameter><decl><type><name>GTM_SeqInfo</name> <modifier>*</modifier></type><name>raw_seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>          <name>seq_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>         <modifier>*</modifier></type><name>seq_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    

    <comment type="block">/* create seq in GTM store */</comment>
    <expr_stmt><expr><name>seq_handle</name> <operator>=</operator> <call><name>GTM_StoreSeqHashSearch</name><argument_list>(<argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>seq_handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLoadSeq seq: %s not found in gtm store"</literal></expr></argument>, <argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* init seq info */</comment>
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_value</name></name>         <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_init_value</name></name>    <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_increment_by</name></name>  <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_min_value</name></name>     <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_max_value</name></name>     <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_cycle</name></name>           <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_called</name></name>        <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_called</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_reserved</name></name>      <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLoadSeq seq: %s found in store, seq:%d"</literal></expr></argument>, <argument><expr><name><name>raw_seq</name><operator>-&gt;</operator><name>gs_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>seq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>seq_handle</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Begin a prepare transaction in GTM STORE.
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreBeginPrepareTxn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>txn</name>             <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>store_txn_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gid</name> <operator>||</operator> <operator>!</operator><name>node_string</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreBeginPrepareTxn invalid null parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreBeginPrepareTxn gid:%s node_string:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Check whether the transaction already exist */</comment>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreBeginPrepareTxn gid:%s node_string:%s already exist"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreBeginPrepareTxn create new txn gid:%s node_string:%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreAllocTxn</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>store_txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_state</name></name>     <operator>=</operator> <name>GTM_TXN_PREPARED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <return>return <expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GTM_TransactionDebugInfo</name><modifier>*</modifier></type> <name>GTM_SearchLogEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>gti</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GetTxnDebugEntry</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>gti</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>GTMTxnEmpty</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>gti</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GetTxnDebugEntry</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>gti</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>GTMTxnEmpty</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>gti</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    
    
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>timebuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>log_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm_s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>tm_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"%02d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, 
             <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>tm_s</name><operator>.</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1900</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2000</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>tm_s</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1900</literal> <operator>-</operator> <literal type="number">2000</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><name><name>tm_s</name><operator>.</operator><name>tm_year</name></name></expr></else></ternary></expr></argument>, 
             <argument><expr><name><name>tm_s</name><operator>.</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm_s</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm_s</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>timebuf</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>GTMLogEntryEmpty</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>gti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>gti</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>GTMTxnEmpty</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>gti</name><operator>-&gt;</operator><name>entryType</name></name> <operator>==</operator> <name>GTMTypeTransaction</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>gti</name><operator>-&gt;</operator><name>entry_create_timestamp</name></name> <operator>&gt;</operator> <name>ENTRY_STALE_THRESHOLD</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_NodeDebugInfo</name> <modifier>*</modifier></type><name>nti</name> <init>= <expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>g_GTMDebugLogFile</name></expr></argument>, <argument><expr><literal type="string">"[%s] incomplete entry gxid %d gid %s nodestring %s node count %d isCommit %d "</literal>
                                          <literal type="string">"global prepare timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">" global commit timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, 
                <argument><expr><call><name>log_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>node_count</name></name></expr></argument>, 
                <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>isCommit</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>prepare_timestamp</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>commit_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>nti</name></expr>)</condition>
        <block>{<block_content>

            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>g_GTMDebugLogFile</name></expr></argument>, <argument><expr><literal type="string">"[%s] incomplete entry gxid %d gid %s node %s isCommit %d local prepare timestamp "</literal>
                                        <name>INT64_FORMAT</name> <literal type="string">" local commit timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, 
                <argument><expr><call><name>log_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>,  <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>isCommit</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>prepare_timestamp</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>commit_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>nti</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nti</name> <operator>=</operator> <name><name>nti</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>gti</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionDebugInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>GTM_TransactionDebugInfo</name><modifier>*</modifier></type> <name>GTM_SearchEmptyLogEntry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>gti</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GetTxnDebugEntry</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>GTMLogEntryEmpty</name><argument_list>(<argument><expr><name>gti</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <return>return <expr><name>gti</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GetTxnDebugEntry</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>GTMLogEntryEmpty</name><argument_list>(<argument><expr><name>gti</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>g_GTM_DebugHeader</name><operator>.</operator><name>m_txn_buffer_last</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <return>return <expr><name>gti</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GTM_PrintAndClearLogEntry</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>gti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_NodeDebugInfo</name> <modifier>*</modifier></type><name>nti</name> <init>= <expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

   <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>g_GTMDebugLogFile</name></expr></argument>, <argument><expr><literal type="string">"[%s] global entry gxid %d gid %s nodestring %s node count %d isCommit %d "</literal>
                                <literal type="string">"global prepare timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">" global commit timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, 
        <argument><expr><call><name>log_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>node_count</name></name></expr></argument>, 
        <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>isCommit</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>prepare_timestamp</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>commit_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>nti</name></expr>)</condition>
    <block>{<block_content>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>g_GTMDebugLogFile</name></expr></argument>, <argument><expr><literal type="string">"[%s] gxid %d gid %s node %s isCommit %d local prepare timestamp "</literal>
                                    <name>INT64_FORMAT</name> <literal type="string">" local commit timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, 
            <argument><expr><call><name>log_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gxid</name></name></expr></argument>, <argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>,  <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>isCommit</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>prepare_timestamp</name></name></expr></argument>, <argument><expr><name><name>nti</name><operator>-&gt;</operator><name>commit_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>nti</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nti</name> <operator>=</operator> <name><name>nti</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GTMTxnComplete</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>gti</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_TransactionDebugInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><name>int32</name></type> <name>GTM_StoreLogTransaction</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, 
                                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>, 
                                        <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>, 
                                        <parameter><decl><type><name>int</name></type> <name>isGlobal</name></decl></parameter>, 
                                        <parameter><decl><type><name>int</name></type> <name>isCommit</name></decl></parameter>, 
                                        <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl></parameter>, 
                                        <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_TransactionDebugInfo</name> <modifier>*</modifier></type><name>gti</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Store log transaction gxid %u gid %s node string %s node count %d isGlobal %d isCommit %d "</literal>
                <literal type="string">"prepare ts "</literal><name>INT64_FORMAT</name> <literal type="string">" commit ts "</literal><name>INT64_FORMAT</name></expr></argument>,
                <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><name>isGlobal</name></expr></argument>, <argument><expr><name>isCommit</name></expr></argument>, <argument><expr><name>prepare_ts</name></expr></argument>, <argument><expr><name>commit_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>isGlobal</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GTM_SearchLogEntry</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>gti</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"no entry found for gid %s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>complete_node_count</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name></name> <operator>=</operator> <name><name>gti</name><operator>-&gt;</operator><name>node_list_head</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_NodeDebugInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_NodeDebugInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name></name> <operator>=</operator> <name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>node_string</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>node_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>=</operator> <name>prepare_ts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>commit_timestamp</name></name> <operator>=</operator> <name>commit_ts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>isCommit</name></name> <operator>=</operator> <name>isCommit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_list_tail</name><operator>-&gt;</operator><name>gxid</name></name> <operator>=</operator> <name>gxid</name></expr>;</expr_stmt>
        
        <if_stmt><if>if<condition>(<expr><name><name>gti</name><operator>-&gt;</operator><name>complete_node_count</name></name> <operator>==</operator> <name><name>gti</name><operator>-&gt;</operator><name>node_count</name></name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><call><name>GTM_PrintAndClearLogEntry</name><argument_list>(<argument><expr><name>gti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GTM_SearchLogEntry</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>gti</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>isCommit</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"existing entry found for global commit gid %s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
            </block_content>}</block></if>
            <else>else <comment type="line">//abort condition </comment>
            <block>{<block_content>
                <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>isCommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GTM_PrintAndClearLogEntry</name><argument_list>(<argument><expr><name>gti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>gti</name> <operator>=</operator> <call><name>GTM_SearchEmptyLogEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>gti</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"no empty slot for gid %s"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>entryType</name></name> <operator>=</operator> <name>GTMTypeTransaction</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>entry_create_timestamp</name></name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>gti</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>node_string</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>gti</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>, <argument><expr><name>node_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>nodestring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>prepare_timestamp</name></name> <operator>=</operator> <name>prepare_ts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>commit_timestamp</name></name> <operator>=</operator> <name>commit_ts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>isCommit</name></name> <operator>=</operator> <name>isCommit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>node_count</name></name> <operator>=</operator> <name>node_count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>complete_node_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>gxid</name></name> <operator>=</operator> <name>gxid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gti</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GTMTxnInit</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32</name></type> <name>GTM_StoreLogScan</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                                <parameter><decl><type><name>GlobalTimestamp</name></type> <name>start_ts</name></decl></parameter>,
                                <parameter><decl><type><name>GlobalTimestamp</name></type> <name>local_start_ts</name></decl></parameter>,
                                <parameter><decl><type><name>GlobalTimestamp</name></type> <name>local_complete_ts</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                                 <parameter><decl><type><name>int64</name></type> <name>scan_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Store log scan gxid %u node string %s start_ts "</literal><name>INT64_FORMAT</name> 
        <literal type="string">" local start ts "</literal><name>INT64_FORMAT</name>
        <literal type="string">" local complete ts "</literal><name>INT64_FORMAT</name>
        <literal type="string">" scan_type %s rel_name %s scan number "</literal><name>INT64_FORMAT</name></expr></argument>,
                <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>start_ts</name></expr></argument>, <argument><expr><name>local_start_ts</name></expr></argument>, <argument><expr><name>local_complete_ts</name></expr></argument>, 
                <argument><expr><name><name>scan_type_tab</name><index>[<expr><name>scan_type</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Scan_Debug_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>g_GTMDebugScanLogFile</name></expr></argument>, <argument><expr><literal type="string">"[%s] scan entry gxid %d node %s start_ts "</literal><name>INT64_FORMAT</name>
                    <literal type="string">" local start ts "</literal><name>INT64_FORMAT</name>
                    <literal type="string">" local complete ts "</literal><name>INT64_FORMAT</name>
                    <literal type="string">" scantype %s rel_name %s scan number "</literal><name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, 
            <argument><expr><call><name>log_time</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>start_ts</name></expr></argument>, <argument><expr><name>local_start_ts</name></expr></argument>, <argument><expr><name>local_complete_ts</name></expr></argument>, 
                    <argument><expr><name><name>scan_type_tab</name><index>[<expr><name>scan_type</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Scan_Debug_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Retrive the GTM store to get the prepared transaction info. 
 */</comment>
<function><type><name>GTMStorageHandle</name></type> <name>GTM_StoreGetPreparedTxnInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>           <name>txn</name>             <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>store_txn_info</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* Check whether the transaction already exist */</comment>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>!=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>store_txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <name>GTM_TXN_IMPLICATE_PREPARED</name> <operator>==</operator> <name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_state</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                      <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expect transaction name is '%s' status is '%d', the stored one is '%s' status is '%d'"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>GTM_TXN_IMPLICATE_PREPARED</name></expr></argument>, <argument><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>, <argument><expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_state</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>gxid</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>nodestring</name> <operator>=</operator> <name><name>store_txn_info</name><operator>-&gt;</operator><name>nodestring</name></name></expr>;</expr_stmt>
        <return>return <expr><name><name>store_txn_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>INVALID_STORAGE_HANDLE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * write the store to disk. 
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreInitSync</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>  <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>  <name>ret</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data</name> <operator>-</operator> <name>g_GTMStoreMapAddr</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><name>g_GTMStoreMapAddr</name> <operator>||</operator> 
        <name>offset</name></expr></argument> &gt;</argument_list></name> <name>g_GTMStoreSize</name>  <operator>||</operator> 
        <operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>g_GTMStoreMapFile</name>  <operator>||</operator>
        <operator>(</operator><name>size</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;</operator> <name>g_GTMStoreSize</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* seek to the position */</comment>
    <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>!=</operator> <name>offset</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not seek map file for: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* write the data */</comment>
    <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>nbytes</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not write map for: %s, required bytes:%zu, return bytes:%d"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fsync</name><argument_list>(<argument><expr><name>g_GTMStoreMapFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not fsync map file for: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * write the store to xlog. 
 */</comment>
<function><type><name>int32</name></type> <name>GTM_StoreSync</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data</name> <operator>-</operator> <name>g_GTMStoreMapAddr</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>data</name> <argument_list type="generic">&lt; <argument><expr><name>g_GTMStoreMapAddr</name> <operator>||</operator> 
        <name>offset</name></expr></argument> &gt;</argument_list></name> <name>g_GTMStoreSize</name>  <operator>||</operator> 
        <operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>g_GTMStoreMapFile</name>  <operator>||</operator>
        <operator>(</operator><name>size</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&gt;</operator> <name>g_GTMStoreSize</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>register_buff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>GTM_STORE_SKIP</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>XLogRegisterRangeOverwrite</name><argument_list>(<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GTM_StoreCheckSeqCRC</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pg_crc32c</name></type>          <name>crc32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    
    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>seq</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>, <argument><expr><name>gs_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>crc32</name> <operator>==</operator> <name><name>seq</name><operator>-&gt;</operator><name>gs_crc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GTM_StoreCheckTxnCRC</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pg_crc32c</name></type>          <name>crc32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    
    <comment type="block">/* calculate CRC */</comment>
    <expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>,
                <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>txn</name></expr></argument>,
                <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>, <argument><expr><name>gti_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><name>crc32</name> <operator>==</operator> <name><name>txn</name><operator>-&gt;</operator><name>gti_crc</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>  <name>GTM_StoreSeqInFreelist</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>found</name>         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqInFreelist enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqInFreelist lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqInFreelist release lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>gti_store_handle</name></name> <operator>==</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqInFreelist release lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreSeqInFreelist done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>  <name>GTM_StoreTxnInFreelist</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>found</name>         <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>  <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnInFreelist enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnInFreelist lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnInFreelist release lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <if_stmt><if>if <condition>(<expr><name><name>txn</name><operator>-&gt;</operator><name>gti_store_handle</name></name> <operator>==</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnInFreelist release lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreTxnInFreelist done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Handle storage transfer command.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessStorageTransferCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>   <cpp:macro><name>MAX_PKG_PER_SEND</name></cpp:macro>  <cpp:value>2048</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>int32</name></type>          <name>loop_cnt</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>         <name>storage_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>           <name>offset</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>int32</name></type>           <name>snd_length</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessStorageTransferCommand begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block">/* Lock the storage, this will block some sequence opration and prepared stmt */</comment>    
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>g_GTM_Backup_Timer</name> <operator>!=</operator> <name>INVALID_TIMER_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"one standby is in basebackup;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>STORAGE_TRANSFER_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><call><name>GTM_StoreLock</name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"Error store lock fails"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_GTM_Backup_Timer</name> <operator>=</operator>  <call><name>GTM_AddTimer</name><argument_list>(<argument><expr><name>LockStoreStandbyCrashHandler</name></expr></argument>, <argument><expr><name>GTM_TIMER_TYPE_ONCE</name></expr></argument>, <argument><expr><name>LOCK_STORE_CRASH_HANDL_TIMEOUT</name></expr></argument>, <argument><expr><name>GetMyThreadInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>g_GTM_Backup_Timer</name> <operator>==</operator> <name>INVALID_TIMER_HANDLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to register lock store crash handler, will exit!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* send xlog replication relative data */</comment>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,<argument><expr><call><name>GetXLogFlushRecPtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* start pos */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,<argument><expr><call><name>GetCurrentTimeLineID</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* time line */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><name>storage_size</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator><name>g_GTMStoreSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>storage_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>storage_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt><expr><name>loop_cnt</name> <operator>=</operator> <call><name>ALIGN_UP</name><argument_list>(<argument><expr><name>storage_size</name></expr></argument>, <argument><expr><name>MAX_PKG_PER_SEND</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MAX_PKG_PER_SEND</name></expr>;</expr_stmt>        
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>loop_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>loop_cnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>loop_cnt</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>            
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>MAX_PKG_PER_SEND</name><operator>)</operator> <operator>&lt;=</operator> <name>storage_size</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>snd_length</name> <operator>=</operator> <name>MAX_PKG_PER_SEND</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>snd_length</name> <operator>=</operator> <name>storage_size</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>snd_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>snd_length</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>g_GTMStoreMapAddr</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>snd_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>snd_length</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>storage_size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"ProcessStorageTransferCommand fatal error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessSequenceListCommand() done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* release the lock */</comment>    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessStorageTransferCommand done, offset:%d"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Handle get gtm header command.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetGTMHeaderCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>           <name>ret</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>int32</name></type>          <name>used_seq</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>          <name>used_txn</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMControlHeader</name></type> <name>header</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessGetGTMHeaderCommand begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreGetHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ProcessGetGTMHeaderCommand GTM_StoreGetHeader failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>used_seq</name> <operator>=</operator> <call><name>GTM_StoreGetUsedSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>used_txn</name> <operator>=</operator> <call><name>GTM_StoreGetUsedTxn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_LIST_GTM_STORE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_major_version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_major_version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_minor_version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_minor_version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_gtm_status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_gtm_status</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_next_gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_global_xmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_global_xmin</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_next_gxid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_next_gxid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_seq_freelist</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_seq_freelist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_txn_freelist</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_txn_freelist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>m_crc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>m_crc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* used info */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>GTM_MAX_SEQ_NUMBER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>used_seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MAX_PREPARED_TXN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>used_txn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessGetGTMHeaderCommand done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreGetHeader</name><parameter_list>(<parameter><decl><type><name>GTMControlHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name>                                <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetHeader enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetHeader lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>g_GTM_Store_Header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetHeader release lock failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>GTM_STORE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetHeader done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreGetUsedSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>seq_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type> <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seq_info</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetUsedSeq enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>            
            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetUsedSeq done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>seq_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreGetUsedTxn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>txn_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type> <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txn_info</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetUsedTxn enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
            <expr_stmt><expr><name>txn_count</name><operator>++</operator></expr>;</expr_stmt>            
            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    
    
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetUsedTxn done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>txn_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GTM_StoreDropAllSeqInDatabase</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seq_database_key</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_maxcount</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>           <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropAllSeqInDatabase Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreDropAllSeqInDatabase enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name>seq_count</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seq_maxcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                 <name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name><index>[<expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>seq_count</name> <operator>&gt;=</operator> <name>seq_maxcount</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>                   <name>newcount</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>    <modifier>*</modifier></type><name>newlist</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>seq_maxcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newlist</name>  <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * If failed try to get less. It is unlikely to happen, but
                 * let's be safe.
                 */</comment>
                <while>while <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>newcount</name> <operator>=</operator> <name>seq_maxcount</name> <operator>+</operator> <operator>(</operator><name>newcount</name> <operator>-</operator> <name>seq_maxcount</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&lt;=</operator> <name>seq_maxcount</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/* give up */</comment>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not list all the sequences"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name></expr></argument>, <argument><expr><name>seq_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seq_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreDropAllSeqInDatabase drop %s"</literal></expr></argument>,<argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GTM_StoreDropSeq</name><argument_list>(<argument><expr><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gti_store_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StoreDropSeq fail"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreDropAllSeqInDatabase finish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return  <expr><name>GTM_STORE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessListStorageSequenceCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type>         <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>             <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_maxcount</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessListStorageSequenceCommand Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessListStorageSequenceCommand enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>seq_count</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seq_maxcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>seq_count</name> <operator>&gt;=</operator> <name>seq_maxcount</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>                   <name>newcount</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>    <modifier>*</modifier></type><name>newlist</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>seq_maxcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newlist</name>  <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * If failed try to get less. It is unlikely to happen, but
                 * let's be safe.
                 */</comment>
                <while>while <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>newcount</name> <operator>=</operator> <name>seq_maxcount</name> <operator>+</operator> <operator>(</operator><name>newcount</name> <operator>-</operator> <name>seq_maxcount</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&lt;=</operator> <name>seq_maxcount</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/* give up */</comment>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not list all the sequences"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name></expr></argument>, <argument><expr><name>seq_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_LIST_GTM_STORE_SEQ_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>seq_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send sequences from the array
     */</comment>            
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seq_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessListStorageSequenceCommand done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessListStorageTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type>         <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>             <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>txn_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>txn_maxcount</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>  <modifier>*</modifier></type><name>txn_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>  <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessListStorageSequenceCommand Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessListStorageTransactionCommand enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>txn_count</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_maxcount</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_list</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>txn_maxcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
        
        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>txn_count</name> <operator>&gt;=</operator> <name>txn_maxcount</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>             <name>newcount</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>   <modifier>*</modifier></type><name>newlist</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>txn_maxcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newlist</name>  <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * If failed try to get less. It is unlikely to happen, but
                 * let's be safe.
                 */</comment>
                <while>while <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>newcount</name> <operator>=</operator> <name>txn_maxcount</name> <operator>+</operator> <operator>(</operator><name>newcount</name> <operator>-</operator> <name>txn_maxcount</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&lt;=</operator> <name>txn_maxcount</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* give up */</comment>
                        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not list all the transactions"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>txn_maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>txn_list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name></expr></argument>, <argument><expr><name>txn_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><name>txn_count</name><operator>++</operator></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_LIST_GTM_TXN_STORE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send sequences from the array
     */</comment>            
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>txn_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessListStorageTransactionCommand done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RebuildSequenceList</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>ret</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RebuildSequenceList start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"AcquireSeqHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>INVALID_STORAGE_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_MAX_SEQ_NUMBER</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_status</name></name> <operator>==</operator> <name>GTM_STORE_SEQ_STATUS_NOT_USE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>bucket_handle</name>     <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><call><name>strnlen</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><name>GTM_MAX_SEQ_NUMBER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SetSeqHashBucket</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RebuildSequenceList done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>ProcessCheckStorageSequenceCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>need_fix</name>      <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>         <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageSequneceStatus</name>  <modifier>*</modifier></type><name>seq_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessCheckStorageSequenceCommand Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessCheckStorageSequenceCommand enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>need_fix</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>seq_count</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <operator>(</operator><name>GTMStorageSequneceStatus</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>GTM_MAX_CHECK_SEQ_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageSequneceStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_MAX_SEQ_NUMBER</name> <operator>&amp;&amp;</operator> <name>seq_count</name> <operator>&lt;</operator> <name>GTM_MAX_CHECK_SEQ_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type>  <name>crc_result</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>  <name>in_freelist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            
        
        <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crc_result</name> <operator>=</operator> <call><name>GTM_StoreCheckSeqCRC</name><argument_list>(<argument><expr><name>seq_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>crc_result</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_error</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>GTM_STORE_SEQ_STATUS_NOT_USE</name> <operator>==</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_status</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* should be in the free list*/</comment>
                <expr_stmt><expr><name>in_freelist</name> <operator>=</operator> <call><name>GTM_StoreSeqInFreelist</name><argument_list>(<argument><expr><name>seq_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_freelist</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_freelist_error</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
            </block_content>}</block></if>
            <else>else 
            <block>{<block_content>
                <comment type="block">/* should be in the hash table*/</comment>
                <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GTM_StoreSeqHashSearch</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_hashtab_error</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name><operator>.</operator><name>sequence</name></expr></argument>, <argument><expr><name>seq_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredSeqInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_CRC_error</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>need_fix</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GTM_StoreSyncSeq</name><argument_list>(<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_fixed</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_unchanged</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_freelist_error</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_freelist_unchanged</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_hashtab_error</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_hashtab_unchanged</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><name>need_fix</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>RebuildSequenceList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_CHECK_GTM_SEQ_STORE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>seq_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seq_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send sequences from the array
     */</comment>            
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seq_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>seq_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageSequneceStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessCheckStorageSequenceCommand done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RebuildTransactionList</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>ret</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name>         <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>  <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RebuildTransactionList start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>SetTxnHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>INVALID_STORAGE_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name> <operator>=</operator> <name>INVALID_STORAGE_HANDLE</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREPARED_TXN</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_state</name></name> <operator>==</operator> <name>GTM_TXN_INIT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>bucket_handle</name>     <operator>=</operator> <call><name>GTM_StoreGetHashBucket</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gs_next</name></name> <operator>=</operator> <call><name>GetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SetTxnHashBucket</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_StoreSyncHeader</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_StoreSyncTxnHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ReleaseTxnHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RebuildTransactionList done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessCheckStorageTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>need_fix</name>      <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>StringInfoData</name></type>        <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>txn_count</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageTransactionStatus</name>  <modifier>*</modifier></type><name>txn_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>i</name>              <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name>  <modifier>*</modifier></type><name>txn_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessCheckStorageTransactionCommand Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessCheckStorageTransactionCommand enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>need_fix</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>txn_count</name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_list</name> <operator>=</operator> <operator>(</operator><name>GTMStorageTransactionStatus</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>GTM_MAX_CHECK_TXN_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageTransactionStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREPARED_TXN</name> <operator>&amp;&amp;</operator> <name>txn_count</name> <operator>&lt;</operator> <name>GTM_MAX_CHECK_TXN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type>  <name>crc_result</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>  <name>in_freelist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            
        
        <expr_stmt><expr><name>txn_info</name> <operator>=</operator> <call><name>GetTxnStore</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crc_result</name> <operator>=</operator> <call><name>GTM_StoreCheckTxnCRC</name><argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>crc_result</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_error</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>GTM_STORE_SEQ_STATUS_NOT_USE</name> <operator>==</operator> <name><name>txn_info</name><operator>-&gt;</operator><name>gti_state</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* should be in the free list*/</comment>
                <expr_stmt><expr><name>in_freelist</name> <operator>=</operator> <call><name>GTM_StoreTxnInFreelist</name><argument_list>(<argument><expr><name>txn_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_freelist</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_freelist_error</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
            </block_content>}</block></if>
            <else>else 
            <block>{<block_content>
                <comment type="block">/* should be in the hash table*/</comment>
                <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GTM_StoreTxnHashSearch</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>bucket_handle</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>|=</operator> <name>GTMStorageStatus_hashtab_error</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name><operator>.</operator><name>txn</name></expr></argument>, <argument><expr><name>txn_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_StoredTransactionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
			<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_CRC_error</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>need_fix</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GTM_StoreSyncTxn</name><argument_list>(<argument><expr><name><name>txn_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_fixed</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_CRC_unchanged</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_freelist_error</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_freelist_unchanged</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&amp;</operator> <name>GTMStorageStatus_hashtab_error</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>txn_list</name><index>[<expr><name>txn_count</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>|=</operator> <name>GTMStorageStatus_hashtab_unchanged</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>txn_count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><name>need_fix</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>RebuildTransactionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_CHECK_GTM_SEQ_STORE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send a number of sequences */</comment>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send sequences from the array
     */</comment>         
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>txn_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>txn_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageTransactionStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProcessCheckStorageTransactionCommand done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Lock the gtm store, block any write request. */</comment>
<function><type><name>bool</name></type> <name>GTM_StoreLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>bret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>ii</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLock  GTM_RWLockAcquire g_GTM_store_lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>g_GTM_store_lock_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLock  GTM_RWLockAcquire GTMThreads-&gt;gt_lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>thr_lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_block_new_connection</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>g_GTM_store_lock_cnt</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"Store lock success %u"</literal></expr></argument>,<argument><expr><name>g_GTM_store_lock_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Lock the gtm store, block any write request. */</comment>
<function><type><name>bool</name></type> <name>GTM_StoreUnLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>bret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bfailed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>ii</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLock  GTM_RWLockAcquire g_GTM_store_lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>g_GTM_store_lock_cnt</name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>g_GTM_store_lock_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>bret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreLock GTM_RWLockAcquire GTMThreads-&gt;gt_lock failed:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name><operator>-&gt;</operator><name>thr_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_block_new_connection</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"Store unlock success %u"</literal></expr></argument>,<argument><expr><name>g_GTM_store_lock_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_store_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><name>bfailed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Timer handler for lock store stuck. To avoid stuck of master node.*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>LockStoreStandbyCrashHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>bool</name></type>    <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>thread_exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>ii</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>threadinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>threadinfo</name> <operator>=</operator> <operator>(</operator><name>GTM_ThreadInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>threadinfo</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Acquire the thread locks to check whether the thread is still running. */</comment>
    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>thread_exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>threadinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* still in the thread list , check whether it is still running. */</comment>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_kill</name><argument_list>(<argument><expr><name><name>threadinfo</name><operator>-&gt;</operator><name>thr_id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ESRCH</name> <operator>==</operator> <name>ret</name> <operator>||</operator> <name>EINVAL</name> <operator>==</operator> <name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>thread_exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>    
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* kill the still running thread, when it exit, it will clean up the locks. */</comment>
            <expr_stmt><expr><name>thread_exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_kill</name><argument_list>(<argument><expr><name><name>threadinfo</name><operator>-&gt;</operator><name>thr_id</name></name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ESRCH</name> <operator>==</operator> <name>ret</name> <operator>||</operator> <name>EINVAL</name> <operator>==</operator> <name>ret</name></expr>)</condition>
            <block>{<block_content>    
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler thread exits, kill backup thread failed, unlock the store."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>        
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler kill backup thread succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Should never happen: thread not running, we just unlock the store. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_exist</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler thread not exist, GTM_StoreUnLock done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>        
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>bool</name></type> <name>do_unlock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>g_GTM_Backup_Timer</name> <operator>!=</operator> <name>INVALID_TIMER_HANDLE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>do_unlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>g_GTM_Backup_Timer</name> <operator>=</operator> <name>INVALID_TIMER_HANDLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_GTM_Backup_Timer_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>do_unlock</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>GTM_StoreUnLock</name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler unlock store fails"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler do unlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"LockStoreStandbyCrashHandler GTM_StoreUnLock done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Get sysinfo including: identifier ,lsn, gts. */</comment>
<function><type><name>bool</name></type> <name>GTM_StoreGetSysInfo</name><parameter_list>(<parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>identifier</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>, <parameter><decl><type><name>GlobalTimestamp</name> <modifier>*</modifier></type><name>gts</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name>                     <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>fd</name>                      <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>nbytes</name>                  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMControlHeader</name>     <modifier>*</modifier></type><name>header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* for gtm master */</comment>
    <if_stmt><if>if <condition>(<expr><name>g_GTM_Store_Header</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetSysInfo lock store header failed for:%s."</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>identifier</name> <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_identifier</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>lsn</name>        <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_lsn</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>gts</name>        <operator>=</operator> <name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><name>g_GTM_Store_Head_Lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* for gtm standby */</comment>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetSysInfo open file:%s failed for:%s."</literal></expr></argument>, <argument><expr><name>GTM_MAP_FILE_NAME</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if>
        <else>else 
        <block>{<block_content>

            <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>GTMControlHeader</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 
            <block>{<block_content>        
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetSysInfo palloc failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            
            <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
            <if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetSysInfo read gtm store header failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>        
            
            <expr_stmt><expr><operator>*</operator><name>identifier</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>m_identifier</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>lsn</name>         <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>m_lsn</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>gts</name>        <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_PrintControlHeader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"gtm_header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_identifier = %lu"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_major_version = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_major_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_minor_version = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_gtm_status = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_gtm_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_global_xmin = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_global_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_next_gxid = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gxid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_next_gts = %lu"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_next_gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_seq_freelist = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_seq_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_txn_freelist = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_txn_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_lsn = %lu"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_last_update_time = %ld"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,<argument><expr><literal type="string">"m_crc = %d"</literal></expr></argument>,<argument><expr><name><name>g_GTM_Store_Header</name><operator>-&gt;</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>GTMStorageHandle</name> <modifier>*</modifier></type><name>GTM_StoreGetAllSeqInDatabase</name><parameter_list>(<parameter><decl><type><name>GTM_SequenceKey</name></type> <name>seq_database_key</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>seq_maxcount</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name>   <modifier>*</modifier></type><name>seq_list</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>bucket_handle</name> <init>= <expr><name>INVALID_STORAGE_HANDLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name>           <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>&lt;=</operator> <name>SEQ_KEY_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreGetAllSeqInDatabase enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name>seq_count</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <operator>(</operator><name>GTMStorageHandle</name><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seq_maxcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_STORED_HASH_TABLE_NBUCKET</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AcquireSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"AcquireTxnHashLock %d failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <call><name>GetSeqHashBucket</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>!=</operator> <name>bucket_handle</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>bucket_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>,<argument><expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			        <name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name><index>[<expr><name><name>seq_database_key</name><operator>-&gt;</operator><name>gsk_keylen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>seq_count</name> <operator>&gt;=</operator> <name>seq_maxcount</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>                  <name>newcount</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GTMStorageHandle</name>    <modifier>*</modifier></type><name>newlist</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>seq_maxcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newlist</name>  <operator>=</operator> <operator>(</operator><name>GTMStorageHandle</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * If failed try to get less. It is unlikely to happen, but
                 * let's be safe.
                 */</comment>
                <while>while <condition>(<expr><name>newlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>newcount</name> <operator>=</operator> <name>seq_maxcount</name> <operator>+</operator> <operator>(</operator><name>newcount</name> <operator>-</operator> <name>seq_maxcount</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&lt;=</operator> <name>seq_maxcount</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/* give up */</comment>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Can not list all the sequences"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>newlist</name> <operator>=</operator> <operator>(</operator><name>GTMStorageHandle</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GTMStorageHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>seq_maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>seq_list</name><index>[<expr><name>seq_count</name></expr>]</index></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_count</name><operator>++</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>bucket_handle</name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>ReleaseSeqHashLock</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    

    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_StoreDropAllSeqInDatabase finish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <name>seq_count</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>seq_count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seq_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seq_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return  <expr><name>seq_list</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>GTM_StoreGetSeqKey</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get seq create info
 */</comment>
<function><type><name>void</name></type> <name>GTM_StoreGetSeqCreateInfo</name><parameter_list>(<parameter><decl><type><name>GTMStorageHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>GTM_SeqCreateInfo</name> <modifier>*</modifier></type><name>create_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name>  <modifier>*</modifier></type><name>seq_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>seq_info</name> <operator>=</operator> <call><name>GetSeqStore</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>create_info</name><operator>-&gt;</operator><name>seqkey</name></name></expr></argument>, <argument><expr><name>SEQ_KEY_MAX_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>seq_info</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_info</name><operator>-&gt;</operator><name>increment_by</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_info</name><operator>-&gt;</operator><name>minval</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_info</name><operator>-&gt;</operator><name>maxval</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr>;</expr_stmt>
    <comment type="block">/* get gs_value as new sequence's startval */</comment>
    <expr_stmt><expr><name><name>create_info</name><operator>-&gt;</operator><name>startval</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>create_info</name><operator>-&gt;</operator><name>cycle</name></name> <operator>=</operator> <name><name>seq_info</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
