<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_snap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_snap.c
 *    Snapshot handling on GTM
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Get snapshot for the given transactions. If this is the first call in the
 * transaction, a fresh snapshot is taken and returned back. For a serializable
 * transaction, repeated calls to the function will return the same snapshot.
 * For a read-committed transaction, fresh snapshot is taken every time and
 * returned to the caller.
 *
 * The returned snapshot includes xmin (lowest still-running xact ID),
 * xmax (highest completed xact ID + 1), and a list of running xact IDs
 * in the range xmin &lt;= xid &lt; xmax.  It is used as follows:
 *        All xact IDs &lt; xmin are considered finished.
 *        All xact IDs &gt;= xmax are considered still running.
 *        For an xact ID xmin &lt;= xid &lt; xmax, consult list to see whether
 *        it is considered running or not.
 * This ensures that the set of transactions seen as "running" by the
 * current xact will not change after it takes the snapshot.
 *
 * All running top-level XIDs are included in the snapshot.
 *
 * We also update the following global variables:
 *        RecentGlobalXmin: the global xmin (oldest TransactionXmin across all
 *            running transactions
 *
 * Note: this function should probably not be called with an argument that's
 * not statically allocated (see xip allocation below).
 */</comment>
<function><type><name>GTM_Snapshot</name></type>
<name>GTM_GetTransactionSnapshot</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>handle</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xmax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>globalxmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Instead of allocating memory for a snapshot, we use the snapshot of the
     * first transaction in the given array. The same snapshot will later be
     * copied to other transaction info structures.
     */</comment>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>mygtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>snapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="block">/*
         * Even if the request does not contain a valid GXID, we still send
         * down a snapshot, but mark the status field acoordingly
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>handle</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>!=</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mygtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name><name>handle</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>status</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name>STATUS_NOT_FOUND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/*
         * If the transaction does not exist, just mark the status field with
         * a STATUS_ERROR code
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mygtm_txninfo</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>snapshot</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>snapshot</name> <operator>=</operator> <operator>&amp;</operator><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_current_snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * If no valid transaction exists in the array, we record the snapshot in a
     * thread-specific structure. This allows us to avoid repeated
     * allocation/freeing of the structure.
     *
     * Note that we must use a thread-specific variable and not a global
     * variable because a concurrent thread might compute a new snapshot and
     * overwrite the snapshot information while we are still sending this copy
     * to the client. Using a thread-specific storage avoids that problem.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>snapshot</name> <operator>=</operator> <operator>&amp;</operator><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>thr_snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snapshot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * This can only happen when using a snapshot from GTMTransactions, as the
     * thread-specific sn_xip array is allocated statically as part of GTM_ThreadInfo.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * First call for this snapshot
         */</comment>
        <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator>
            <call><name>palloc</name><argument_list>(<argument><expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * It is sufficient to get shared lock on ProcArrayLock, even if we are
     * going to set MyProc-&gt;xmin.
     */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* xmax is always latestCompletedXid + 1 */</comment>
    <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GlobalTransactionIdAdvance</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* initialize xmin calculation with xmax */</comment>
    <expr_stmt><expr><name>globalxmin</name> <operator>=</operator> <name>xmin</name> <operator>=</operator> <name>xmax</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Spin over transaction list checking xid, xmin, and subxids.  The goal is to
     * gather all active xids and find the lowest xmin
     */</comment>
    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>GTMTransactions.gt_open_transactions</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name></decl>;</decl_stmt>

        <comment type="block">/* Don't take into account LAZY VACUUMs */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_vacuum</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Update globalxmin to be the smallest valid xmin */</comment>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_xmin</name></name></expr>;</expr_stmt>        <comment type="block">/* fetch just once */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>globalxmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>globalxmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Fetch xid just once - see GetNewTransactionId */</comment>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr>;</expr_stmt>

        <comment type="block">/*
         * If the transaction has been assigned an xid &lt; xmax we add it to the
         * snapshot, and update xmin if necessary.    There's no need to store
         * XIDs &gt;= xmax, since we'll treat them as running anyway.  We don't
         * bother to examine their subxids either.
         *
         * We don't include our own XID (if any) in the snapshot, but we must
         * include it into xmin.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Unlike Postgres, we include the GXID of the current transaction
             * as well in the snapshot. This is necessary because the same
             * snapshot is shared by multiple backends through GTM proxy and
             * the GXID will vary for each backend.
             *
             * XXX We should confirm that this does not have any adverse effect
             * on the MVCC visibility and check if any changes are related to
             * the MVCC checks because of the change
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdFollowsOrEquals</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>xmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>xmin</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * Update globalxmin to include actual process xids.  This is a slightly
     * different way of computing it than GetOldestXmin uses, but should give
     * the same result.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdPrecedes</name><argument_list>(<argument><expr><name>xmin</name></expr></argument>, <argument><expr><name>globalxmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>globalxmin</name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name> <operator>=</operator> <name>xmax</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Now, before the proc array lock is released, set the xmin in the txninfo
     * structures of all the transactions.
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>mysnap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * We have already gone through all the transaction handles above and
         * marked the invalid handles with STATUS_ERROR
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>status</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>STATUS_ERROR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>status</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>==</operator> <name>STATUS_NOT_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>mygtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name><name>handle</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mysnap</name> <operator>=</operator> <operator>&amp;</operator><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_current_snapshot</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GTM_IsTransSerializable</name><argument_list>(<argument><expr><name>mygtm_txninfo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_snapshot_set</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>txn_count</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Grouped snapshot can only include first snapshot in Serializable transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_snapshot_set</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * For the first transaction in the array, the snapshot is
                 * already set.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>!=</operator> <name>mysnap</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/*
                         * First call for this snapshot
                         */</comment>
                        <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator>
                            <call><name>palloc</name><argument_list>(<argument><expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xmin</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xmax</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xcnt</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_snapshot_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>snapshot</name> <operator>!=</operator> <name>mysnap</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * First call for this snapshot
                 */</comment>
                <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator>
                    <call><name>palloc</name><argument_list>(<argument><expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xmin</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xmax</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xcnt</name></name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mysnap</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>,
                    <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mygtm_txninfo</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_xmin</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mygtm_txninfo</name><operator>-&gt;</operator><name>gti_xmin</name></name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"GTM_GetTransactionSnapshot: (%u:%u:%u)"</literal></expr></argument>,
            <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr></argument>,
            <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>snapshot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SNAPSHOT_GET command
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetSnapshotCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>get_gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>txn_count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><literal type="string">"Received transaction ID %d for snapshot obtention"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>get_gxid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>GTM_GetGlobalTransactionId</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>gxid</name> <operator>==</operator> <name>InvalidGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get a new transaction id"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Get a fresh snapshot
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>snapshot</name> <operator>=</operator> <call><name>GTM_GetTransactionSnapshot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get a snapshot"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>get_gxid</name></expr> ?</condition><then> <expr><name>SNAPSHOT_GXID_GET_RESULT</name></expr> </then><else>: <expr><name>SNAPSHOT_GET_RESULT</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>,
                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_SNAPSHOT_GET_MULTI command
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetSnapshotCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Get a fresh snapshot
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>snapshot</name> <operator>=</operator> <call><name>GTM_GetTransactionSnapshot</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get a snapshot"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>SNAPSHOT_GET_MULTI_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmin</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xmax</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>,
                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free the snapshot data. The snapshot itself is not freed though
 */</comment>
<function><type><name>void</name></type>
<name>GTM_FreeSnapshotData</name><parameter_list>(<parameter><decl><type><name>GTM_Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>sn_xip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
