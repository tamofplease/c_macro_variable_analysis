<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_stat.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_stat.c
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>int32</name></type>  <name>GTM_StoreGetUsedSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32</name></type>  <name>GTM_StoreGetUsedTxn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>GTM_Statistics</name></type> <name>GTMStatistics</name></decl>;</decl_stmt>

<comment type="block">/*
 * Init global gtm statistic handle
 */</comment>
<function><type><name>void</name></type>
<name>GTM_InitGtmStatistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>GTMStatistics</name><operator>.</operator><name>stat_start_time</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMStatistics</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Init the worker statistics's handle
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_InitStatisticsInfo</name><parameter_list>(<parameter><decl><type><name>GTM_WorkerStatistics</name> <modifier>*</modifier></type><name>stat_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>, <argument><expr><name>PG_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Reset the worker statistics's handle
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_ResetStatisticsInfo</name><parameter_list>(<parameter><decl><type><name>GTM_WorkerStatistics</name> <modifier>*</modifier></type><name>stat_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>, <argument><expr><name>PG_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Init the statistics item
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_InitStatisticsItemArray</name><parameter_list>(<parameter><decl><type><name>GTM_StatisticsItem</name> <modifier>*</modifier></type><name>cmd_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cmd_item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmd_item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>=</operator> <name>PG_UINT32_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Init worker thread's statistics handle
 * only worker thread need to call
 */</comment>
<function><type><name>void</name></type>
<name>GTM_InitStatisticsHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name> <init>= <expr><name>GetMyThreadInfo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_WorkerStatistics</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>ENOMEM</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_InitStatisticsInfo</name><argument_list>(<argument><expr><name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update statistics, when completing a command
 */</comment>
<function><type><name>void</name></type>
<name>GTM_UpdateStatistics</name><parameter_list>(<parameter><decl><type><name>GTM_WorkerStatistics</name><modifier>*</modifier></type> <name>stat_handle</name></decl></parameter>, <parameter><decl><type><name>GTM_MessageType</name></type> <name>mtype</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>costtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_StatisticsCmd</name></type> <name>mCmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StatisticsInfo</name><modifier>*</modifier></type> <name>stat_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mtype</name> <operator>==</operator> <name>MSG_GETGTS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>mCmd</name> <operator>=</operator> <name>CMD_GETGTS</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>mtype</name> <operator>==</operator> <name>MSG_SEQUENCE_GET_NEXT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>mCmd</name> <operator>=</operator> <name>CMD_SEQUENCE_GET_NEXT</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>mtype</name> <operator>==</operator> <name>MSG_TXN_START_PREPARED</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>mCmd</name> <operator>=</operator> <name>CMD_TXN_START_PREPARED</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>stat_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>mCmd</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_fetch_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>total_request_times</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_fetch_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>total_costtime</name></name></expr></argument>, <argument><expr><name>costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>costtime</name> <operator>&gt;</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>max_costtime</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>max_costtime</name></name></expr></argument>, <argument><expr><name>costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>costtime</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>min_costtime</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_info</name><operator>-&gt;</operator><name>min_costtime</name></name></expr></argument>, <argument><expr><name>costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Combine the statistics of each thread and calculate the result
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_GetMergeResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clear_flag</name></decl></parameter>, <parameter><decl><type><name>pg_time_t</name> <modifier>*</modifier></type><name>stat_start_time</name></decl></parameter>, <parameter><decl><type><name>pg_time_t</name> <modifier>*</modifier></type><name>stat_end_time</name></decl></parameter>, <parameter><decl><type><name>GTM_StatisticsItem</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_ThreadInfo</name> <modifier>*</modifier></type><name>thrinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_WorkerStatistics</name> <modifier>*</modifier></type><name>stat_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>max_costtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>min_costtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_InitStatisticsItemArray</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMStatistics</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Combine data from each thread */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>thrinfo</name> <operator>=</operator> <name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_threads</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>thrinfo</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"thread %d exits."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name>false</name> <operator>==</operator> <name><name>thrinfo</name><operator>-&gt;</operator><name>thr_epoll_ok</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>stat_handle</name> <operator>=</operator> <name><name>thrinfo</name><operator>-&gt;</operator><name>stat_handle</name></name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>+=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>+=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>total_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_costtime</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>min_costtime</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stat_handle</name><operator>-&gt;</operator><name>cmd_statistics</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>&lt;</operator> <name>max_costtime</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>=</operator> <name>max_costtime</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>&gt;</operator> <name>min_costtime</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>=</operator> <name>min_costtime</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>clear_flag</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_ResetStatisticsInfo</name><argument_list>(<argument><expr><name>stat_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>stat_start_time</name> <operator>=</operator> <name><name>GTMStatistics</name><operator>.</operator><name>stat_start_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>stat_end_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avg_costtime</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
                                 <expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>/</operator> <name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>clear_flag</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>GTMStatistics</name><operator>.</operator><name>stat_start_time</name></name> <operator>=</operator> <operator>*</operator><name>stat_end_time</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMThreads</name><operator>-&gt;</operator><name>gt_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMStatistics</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_GET_STATISTICS message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetStatisticsCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>used_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>used_txn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>clear_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type> <name>stat_start_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type> <name>stat_end_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StatisticsItem</name></type> <name><name>result_info</name><index>[<expr><name>CMD_STATISTICS_TYPE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>clear_flag</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_GetMergeResult</name><argument_list>(<argument><expr><name>clear_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_start_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_end_time</name></expr></argument>, <argument><expr><name>result_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>used_seq</name> <operator>=</operator> <call><name>GTM_StoreGetUsedSeq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>used_txn</name> <operator>=</operator> <call><name>GTM_StoreGetUsedTxn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MSG_GET_GTM_STATISTICS_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>stat_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>stat_end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>GTM_MAX_SEQ_NUMBER</name> <operator>-</operator> <name>used_seq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>MAX_PREPARED_TXN</name> <operator>-</operator> <name>used_txn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_STATISTICS_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>result_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>result_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avg_costtime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>result_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>result_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Don't flush to the backup because this does not change the internal status */</comment>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
