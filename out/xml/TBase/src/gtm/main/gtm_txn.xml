<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/gtm/main/gtm_txn.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm_txn.c
 *    Transaction handling
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      $PostgreSQL$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_txn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_xlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtm/gtm_xlog_internal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/standby_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>Backup_synchronously</name></decl>;</decl_stmt>

<comment type="block">/* Local functions */</comment>
<function_decl><type><specifier>static</specifier> <name>XidStatus</name></type> <name>GlobalTransactionIdGetStatus</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GTM_SetDoVacuum</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>         <name>max_wal_sender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>time_t</name></type>      <name>g_last_sync_gts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>extern</specifier> <name>s_lock_t</name></type>     <name>g_last_sync_gts_lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>GTMStartupGTSDelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GTMClusterReadOnly</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_GTM_TransactionInfo</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl></parameter>,
                                     <parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>,
                                     <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                                     <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>,
                                     <parameter><decl><type><name>GTMProxy_ConnID</name></type> <name>connid</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                                     <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>GTM_TransactionHandle</name></type> <name>GTM_GlobalSessionIDToHandle</name><parameter_list>(
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>ControlXid</name></decl>;</decl_stmt>  <comment type="block">/* last one written to control file */</comment>
<decl_stmt><decl><type><name>GTM_Transactions</name></type> <name>GTMTransactions</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type>
<name>GTM_InitTxnManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GTMTransactions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Transactions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_in_use</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * XXX When GTM is stopped and restarted, it must start assinging GXIDs
     * greater than the previously assgined values. If it was a clean shutdown,
     * the GTM can store the last assigned value at a known location on
     * permanent storage and read it back when it's restarted. It will get
     * trickier for GTM failures.
     *
     * TODO We skip this part for the prototype.
     */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_xid</name></name></expr></argument>, <argument><expr><name>FirstNormalGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_access_ts_seq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_access_ts_seq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * XXX The gt_oldestXid is the cluster level oldest Xid
     */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_oldestXid</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/*
     * XXX Compute various xid limits to avoid wrap-around related database
     * corruptions. Again, this is not implemented for the prototype
     */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidVacLimit</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWarnLimit</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidStopLimit</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWrapLimit</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/*
     * XXX Newest XID that is committed or aborted
     */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/* Initialise gt_recent_global_xmin */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_recent_global_xmin</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize the locks to protect various XID fields as well as the linked
     * list of transactions
     */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>GTM_MAX_THREADS</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>lock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <comment type="block">/*
     * Initialize the list
     */</comment>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name> <operator>=</operator> <name>gtm_NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_lastslot</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_gtm_state</name></name> <operator>=</operator> <name>GTM_STARTING</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ControlXid</name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the status of current or past transaction.
 */</comment>
<function><type><specifier>static</specifier> <name>XidStatus</name></type>
<name>GlobalTransactionIdGetStatus</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XidStatus</name></type>    <name>xidstatus</name> <init>= <expr><name>TRANSACTION_STATUS_IN_PROGRESS</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Also, check to see if the transaction ID is a permanent one.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsNormal</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>BootstrapGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TRANSACTION_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>FrozenGlobalTransactionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TRANSACTION_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>TRANSACTION_STATUS_ABORTED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * TODO To be implemented
     * This code is not completed yet and the latter code must not be reached.
     */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xidstatus</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given the GXID, find the corresponding transaction handle.
 */</comment>
<function><type><specifier>static</specifier> <name>GTM_TransactionHandle</name></type>
<name>GTM_GXIDToHandle_Internal</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>warn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>InvalidTransactionHandle</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>GTMTransactions.gt_open_transactions</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdEquals</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_handle</name></name></expr>;</return></block_content></block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>warn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"No transaction handle for gxid: %d"</literal></expr></argument>,
                                <argument><expr><name>gxid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>InvalidTransactionHandle</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>GTM_TransactionHandle</name></type>
<name>GTM_GXIDToHandle</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GTM_GXIDToHandle_Internal</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GTM_TransactionHandle</name></type>
<name>GTM_GlobalSessionIDToHandle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name>    <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>global_sessionid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>global_sessionid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>InvalidTransactionHandle</name></expr>;</return></block_content></block></if></if_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>GTMTransactions.gt_open_transactions</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name></name></expr></argument>, <argument><expr><name>global_sessionid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_handle</name></name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>InvalidTransactionHandle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>GTM_IsGXIDInProgress</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GTM_GXIDToHandle_Internal</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator>
            <name>InvalidTransactionHandle</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Given the GID (for a prepared transaction), find the corresponding
 * transaction handle.
 */</comment>
<function><type><name>GTM_TransactionHandle</name></type>
<name>GTM_GIDToHandle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>gtm_foreach</name><argument_list>(<argument>elem</argument>, <argument>GTMTransactions.gt_open_transactions</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <operator>(</operator><name>GTM_TransactionInfo</name> <operator>*</operator><operator>)</operator><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gid</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>gid</name></expr></argument>,<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_handle</name></name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>InvalidTransactionHandle</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Given the transaction handle, find the corresponding transaction info
 * structure
 *
 * Note: Since a transaction handle is just an index into the global array,
 * this function should be very quick. We should turn into an inline future for
 * fast path.
 */</comment>
<function><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type>
<name>GTM_HandleToTransactionInfo</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>handle</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>handle</name> <operator>&gt;=</operator> <name>GTM_MAX_GLOBAL_TRANSACTIONS</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid transaction handle: %d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>handle</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_in_use</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid transaction handle (%d), txn_info not in use"</literal></expr></argument>,
                                <argument><expr><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>gtm_txninfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove all transaction infos associated with the caller thread and the given
 * backend
 *
 * Also compute the latestCompletedXid.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_RemoveAllTransInfos</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backend_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the latest client identifier issued to the currently open transactions.
 * Remember this may not be the latest identifier issued by the old master, but
 * we won't acknowledge client identifiers larger than what we are about to
 * compute. Any such identifiers will be overwritten the new identifier issued
 * by the new master
 */</comment>
<function><type><name>uint32</name></type>
<name>GTMGetLastClientIdentifier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>gtm_ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>last_client_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Scan the global list of open transactions
     */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_list_head</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>cell</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><call><name>gtm_lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GTM_CLIENT_ID_GT</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_client_id</name></name></expr></argument>, <argument><expr><name>last_client_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>last_client_id</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_client_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>cell</name> <operator>=</operator> <call><name>gtm_lnext</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>last_client_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GlobalTransactionIdDidCommit
 *        True iff transaction associated with the identifier did commit.
 *
 * Note:
 *        Assumes transaction identifier is valid.
 */</comment>
<function><type><name>bool</name></type>                            <comment type="block">/* true if given transaction committed */</comment>
<name>GlobalTransactionIdDidCommit</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XidStatus</name></type>    <name>xidstatus</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xidstatus</name> <operator>=</operator> <call><name>GlobalTransactionIdGetStatus</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If it's marked committed, it's committed.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * It's not committed.
     */</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GlobalTransactionIdDidAbort
 *        True iff transaction associated with the identifier did abort.
 *
 * Note:
 *        Assumes transaction identifier is valid.
 */</comment>
<function><type><name>bool</name></type>                            <comment type="block">/* true if given transaction aborted */</comment>
<name>GlobalTransactionIdDidAbort</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XidStatus</name></type>    <name>xidstatus</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xidstatus</name> <operator>=</operator> <call><name>GlobalTransactionIdGetStatus</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If it's marked aborted, it's aborted.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * It's not aborted.
     */</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<comment type="block">/*
 * Set that the transaction is doing vacuum
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>GTM_SetDoVacuum</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid transaction handle"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_vacuum</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Allocate the next XID for my new transaction
 *
 * The new XID is also stored into the transaction info structure of the given
 * transaction before returning.
 */</comment>
<function><type><name>bool</name></type>
<name>GTM_GetGlobalTransactionIdMulti</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>handle</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>new_handle</name><index>[]</index></name></decl></parameter>,
        <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_txn_count</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM is running in STANDBY mode -- can not issue new transaction ids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_gtm_state</name></name> <operator>==</operator> <name>GTM_SHUTTING_DOWN</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM shutting down -- can not issue new transaction ids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>new_txn_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/*
     * Now advance the nextXid counter.  This must not happen until after we
     * have successfully completed ExtendCLOG() --- if that routine fails, we
     * want the next incoming transaction to try it again.    We cannot assign
     * more XIDs until there is CLOG space for them.
     */</comment>
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name><name>handle</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>gtm_txninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG6</name></expr></argument>, <argument><expr><literal type="string">"GTM_TransactionInfo has XID already assgined - %s:%d"</literal></expr></argument>,
                    <argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name></name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr>;</expr_stmt>

        <comment type="block">/*----------
         * Check to see if it's safe to assign another XID.  This protects against
         * catastrophic data loss due to XID wraparound.  The basic rules are:
         *
         * If we're past xidVacLimit, start trying to force autovacuum cycles.
         * If we're past xidWarnLimit, start issuing warnings.
         * If we're past xidStopLimit, refuse to execute transactions, unless
         * we are running in a standalone backend (which gives an escape hatch
         * to the DBA who somehow got past the earlier defenses).
         *
         * Test is coded to fall out as fast as possible during normal operation,
         * ie, when the vac limit is set and we haven't violated it.
         *----------
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdFollowsOrEquals</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidVacLimit</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidVacLimit</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdFollowsOrEquals</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidStopLimit</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"database is not accepting commands to avoid wraparound data loss in database "</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>GlobalTransactionIdFollowsOrEquals</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWarnLimit</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"database must be vacuumed within %u transactions"</literal></expr></argument>,
                        <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_xidWrapLimit</name></name> <operator>-</operator> <name>xid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GlobalTransactionIdAdvance</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Assigning new transaction ID = %s:%d"</literal></expr></argument>,
                <argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name></name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>new_handle</name><index>[<expr><operator>*</operator><name>new_txn_count</name></expr>]</index></name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_handle</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>new_txn_count</name> <operator>=</operator> <operator>*</operator><name>new_txn_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Periodically write the xid and sequence info out to the control file.
     * Try and handle wrapping, too.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>xid</name> <operator>-</operator> <name>ControlXid</name> <operator>&gt;</operator> <name>CONTROL_INTERVAL</name> <operator>||</operator> <name>xid</name> <operator>&lt;</operator> <name>ControlXid</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>GTM_StoreReserveXid</name><argument_list>(<argument><expr><name>CONTROL_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_GetGlobalTransactionIdMulti reserved gxid failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>ControlXid</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>    
    <if_stmt><if>if <condition>(<expr><call><name>GTM_NeedXidRestoreUpdate</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_SetNeedBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate the next XID for my new transaction
 *
 * The new XID is also stored into the transaction info structure of the given
 * transaction before returning.
 */</comment>
<function><type><name>GlobalTransactionId</name></type>
<name>GTM_GetGlobalTransactionId</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>new_handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>new_count</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_GetGlobalTransactionIdMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_handle</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>new_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>gxid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read nextXid but don't allocate it.
 */</comment>
<function><type><name>GlobalTransactionId</name></type>
<name>ReadNewGlobalTransactionId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xid</name></expr>;</return>    
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xid</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    

</block_content>}</block></function>

<comment type="block">/*
 * Set the nextXid.
 *
 * The GXID is usually read from a control file and set when the GTM is
 * started. When the GTM is finally shutdown, the next to-be-assigned GXID is
 * stroed in the control file.
 *
 * XXX We don't yet handle any crash recovery. So if the GTM is no shutdown normally...
 *
 * This is handled by gtm_backup.c.  Anyway, because this function is to be called by
 * GTM_RestoreTransactionId() and the backup will be performed afterwords,
 * we don't care the new value of GTMTransactions.gt_nextXid here.
 */</comment>
<function><type><name>void</name></type>
<name>SetNextGlobalTransactionId</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name> <operator>=</operator> <name>gxid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_gtm_state</name></name> <operator>=</operator> <name>GTM_RUNNING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_xid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>SetControlXid</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>ControlXid</name> <operator>=</operator> <name>gxid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Transaction Control */</comment>
<function><type><name>int</name></type>
<name>GTM_BeginTransactionMulti</name><parameter_list>(<parameter><decl><type><name>GTM_IsolationLevel</name></type> <name><name>isolevel</name><index>[]</index></name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name><name>readonly</name><index>[]</index></name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>global_sessionid</name><index>[]</index></name></decl></parameter>,
                     <parameter><decl><type><name>GTMProxy_ConnID</name></type> <name><name>connid</name><index>[]</index></name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>,
                     <parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txns</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name><name>gtm_txninfo</name><index>[<expr><name>txn_count</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>gtm_txninfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gtm_txninfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * XXX We should allocate the transaction info structure in the
     * top-most memory context instead of a thread context. This is
     * necessary because the transaction may outlive the thread which
     * started the transaction. Also, since the structures are stored in
     * the global array, it's dangerous to free the structures themselves
     * without removing the corresponding references from the global array
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>, <decl><type ref="prev"/><name>startslot</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>=
                <expr><call><name>GTM_GlobalSessionIDToHandle</name><argument_list>(<argument><expr><name><name>global_sessionid</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>!=</operator> <name>InvalidTransactionHandle</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Existing transaction found: %s:%d"</literal></expr></argument>,
                    <argument><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name><operator>-&gt;</operator><name>gti_global_session_id</name></expr></argument>,
                    <argument><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name><operator>-&gt;</operator><name>gti_gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>txns</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * We had no cached slots. Now find a free slot in the transation array
         * and store the transaction info structure there
         */</comment>
        <expr_stmt><expr><name>startslot</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_lastslot</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>startslot</name> <operator>&gt;=</operator> <name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>startslot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <name>startslot</name></expr><operator>,</operator> <expr><name>jj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
             <condition><expr><name>jj</name> <operator>&lt;</operator> <name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>;</condition>
             <incr><expr><name>ii</name> <operator>=</operator> <operator>(</operator><name>ii</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr><operator>,</operator> <expr><name>jj</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>gti_in_use</name> <operator>==</operator> <name>false</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_transactions_array</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ii</name> <operator>==</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_lastslot</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>ERANGE</name><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Max transaction limit reached"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>init_GTM_TransactionInfo</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><name><name>isolevel</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>,
                <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>connid</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>,
                <argument><expr><name><name>global_sessionid</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>,
                <argument><expr><name><name>readonly</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_lastslot</name></name> <operator>=</operator> <name>ii</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>txns</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>ii</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Add the structure to the global list of open transactions. We should
         * call add the element to the list in the context of TopMostMemoryContext
         * because the list is global and any memory allocation must outlive the
         * thread context
         */</comment>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name> <operator>=</operator> <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_open_transactions</name></name></expr></argument>, <argument><expr><name><name>gtm_txninfo</name><index>[<expr><name>kk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>txn_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Transaction Control */</comment>
<function><type><name>GTM_TransactionHandle</name></type>
<name>GTM_BeginTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name>connid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_BeginTransactionMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>isolevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readonly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_sessionid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>txn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_GTM_TransactionInfo</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl></parameter>,
                         <parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>,
                         <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                         <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>,
                         <parameter><decl><type><name>GTMProxy_ConnID</name></type> <name>connid</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_xmin</name></name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_state</name></name> <operator>=</operator> <name>GTM_TXN_STARTING</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_isolevel</name></name> <operator>=</operator> <name>isolevel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_readonly</name></name> <operator>=</operator> <name>readonly</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_in_use</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>global_sessionid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name></name></expr></argument>, <argument><expr><name>global_sessionid</name></expr></argument>,
                <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_handle</name></name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_vacuum</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/*
     * For every new transaction that gets created, we track two important
     * identifiers:
     *
     * gt_client_id: is the identifier assigned to the client connected to
     * GTM. Whenever a connection to GTM is dropped, we must clean up all
     * transactions opened by that client. Since we track all open transactions
     * in a global data structure, this identifier helps us to identify
     * client-specific transactions. Also, the identifier is issued and tracked
     * irrespective of whether the remote client is a GTM proxy or a PG
     * backend.
     *
     * gti_proxy_client_id: is the identifier assigned by the GTM proxy to its
     * client. Proxy sends us this identifier and we track it in the list of
     * open transactions. If a backend disconnects from the proxy, it sends us
     * a MSG_BACKEND_DISCONNECT message, along with the backend identifier. As
     * a response to that message, we clean up all the transactions opened by
     * the backend.
     */</comment> 
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_client_id</name></name> <operator>=</operator> <name>client_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_proxy_client_id</name></name> <operator>=</operator> <name>connid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_BkupBeginTransactionMulti</name><parameter_list>(<parameter><decl><type><name>GTM_IsolationLevel</name> <modifier>*</modifier></type><name>isolevel</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>readonly</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                              <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>,
                              <parameter><decl><type><name>GTMProxy_ConnID</name> <modifier>*</modifier></type><name>connid</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type>    <name>txn_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>GTM_BeginTransactionMulti</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><name>readonly</name></expr></argument>,
                                      <argument><expr><name>global_sessionid</name></expr></argument>, <argument><expr><name>connid</name></expr></argument>,
                                      <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>txn_count</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to start %d new transactions"</literal></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_BkupBeginTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                         <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name>connid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransactionMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>isolevel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readonly</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>global_sessionid</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>client_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Same as GTM_RollbackTransaction, but takes GXID as input
 */</comment>
<function><type><name>int</name></type>
<name>GTM_RollbackTransactionGXID</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GTM_RollbackTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rollback multiple transactions in one go.
 * In TBase, rollback transaction will not bother GTM.
 */</comment>
<function><type><name>int</name></type>
<name>GTM_RollbackTransactionMulti</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>status</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>txn_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rollback a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_RollbackTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GTM_RollbackTransactionMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Same as GTM_CommitTransaction but takes GXID as input
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CommitTransactionGXID</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GTM_CommitTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Commit multiple transactions in one go.
 * In TBase, commit transaction will not bother GTM.
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CommitTransactionMulti</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name><name>status</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>txn_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_PrepareTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Mark the transaction as prepared
     */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_lock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_state</name></name> <operator>=</operator> <name>GTM_TXN_PREPARED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Commit a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_CommitTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GTM_CommitTransactionMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_StartPreparedTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>,
                             <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                             <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int32</name></type>          <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>
    
    <comment type="block">/* Prepare the TXN in gtm store */</comment>    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreBeginPrepareTxn</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTM_StartPreparedTransaction Prepare transaction in GTM Store failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Log a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_LogTransaction</name><parameter_list>(    <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                             <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>,
                             <parameter><decl><type><name>int</name></type> <name>isGlobal</name></decl></parameter>,
                             <parameter><decl><type><name>int</name></type>  <name>isCommit</name></decl></parameter>,
                             <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl></parameter>,
                             <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreLogTransaction</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><name>isGlobal</name></expr></argument>, <argument><expr><name>isCommit</name></expr></argument>, <argument><expr><name>prepare_ts</name></expr></argument>, <argument><expr><name>commit_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_LogTransaction failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>            
    

    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Log a transaction
 */</comment>
<function><type><name>int</name></type>
<name>GTM_LogScan</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                 <parameter><decl><type><name>GlobalTimestamp</name></type> <name>start_ts</name></decl></parameter>,
                 <parameter><decl><type><name>GlobalTimestamp</name></type> <name>local_start_ts</name></decl></parameter>,
                 <parameter><decl><type><name>GlobalTimestamp</name></type> <name>local_complete_ts</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>scan_type</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                 <parameter><decl><type><name>int64</name></type> <name>scan_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreLogScan</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>start_ts</name></expr></argument>, <argument><expr><name>local_start_ts</name></expr></argument>, <argument><expr><name>local_complete_ts</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_LogScanTransaction failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>            
    

    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Same as GTM_PrepareTransaction but takes GXID as input
 */</comment>
<function><type><name>int</name></type>
<name>GTM_StartPreparedTransactionGXID</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                                 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GTM_StartPreparedTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GTM_GetGIDData</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>prepared_txn</name></decl></parameter>,
               <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>prepared_gxid</name></decl></parameter>,
               <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name>    <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldContext</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>prepared_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>gtm_txninfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>STATUS_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* then get the necessary Data */</comment>
    <expr_stmt><expr><operator>*</operator><name>prepared_gxid</name> <operator>=</operator> <name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>nodestring</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>nodestring</name></expr></argument>, <argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nodestring</name><operator>)</operator><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>nodestring</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get status of the given transaction
 */</comment>
<function><type><name>GTM_TransactionStates</name></type>
<name>GTM_GetStatus</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name> <init>= <expr><call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_state</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Same as GTM_GetStatus but takes GXID as input
 */</comment>
<function><type><name>GTM_TransactionStates</name></type>
<name>GTM_GetStatusGXID</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GTM_GetStatus</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_TXN_BEGIN message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBeginTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Start a new transaction
     */</comment>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_BeginTransaction</name><argument_list>(<argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>,
            <argument><expr><name>global_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to start a new transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* GXID has been received, now it's time to get a GTM timestamp */</comment>
    <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/* Backup first */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bkup_begin_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                <argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>,
                <argument><expr><name>global_sessionid</name></expr></argument>,
                <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>con_client_id</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Synch. with standby */</comment>
        <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Flush standby first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><name>void</name></type>
<name>ProcessBkupGlobalTimestamp</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetNextGlobalTimestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<comment type="block">/*
 * Process MSG_BKUP_TXN_BEGIN message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBkupBeginTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>client_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>client_id</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransaction</name><argument_list>(<argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>,
            <argument><expr><name>global_sessionid</name></expr></argument>,
            <argument><expr><name>client_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>GlobalTransactionId</name></type>
<name>GetNextGlobalTransactionId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>

    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>pg_atomic_fetch_add_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_xid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>gxid</name> <operator>&gt;=</operator> <name>FirstNormalGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>gxid</name></expr>;</return>

</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>GlobalTimestamp</name></type>
<name>GetNextGlobalTimestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl>, <decl><type ref="prev"/><name>now</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>tv_sec</name></decl>, <decl><type ref="prev"/><name>tv_nsec</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>AcquireWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>AcquireReadLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GTM_TimestampGetMonotonicRawPrecise</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv_nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"Get MonotonicRaw "</literal><name>INT64_FORMAT</name><literal type="string">" last cycle "</literal><name>INT64_FORMAT</name> <literal type="string">" global ts "</literal><name>INT64_FORMAT</name> <literal type="string">" last issue "</literal><name>INT64_FORMAT</name></expr></argument>, 
            <argument><expr><name>now</name></expr></argument>,  <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>delta</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gts</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64</name></type>    <name>last_access_seq</name> <init>=  <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_access_ts_seq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64</name></type>    <name>access_seq</name> <init>=  <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_access_ts_seq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>gts</name> <operator>&lt;</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name></expr>)</condition>
        <block>{<block_content>

            
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Issued global timestamp turns around last "</literal> <name>INT64_FORMAT</name>
                            <literal type="string">" last last cycle "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" last raw time "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" last base global timestamp "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" last tv secs "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" last tv nsecs "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" last access seq "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" gts "</literal> <name>INT64_FORMAT</name>
                            <literal type="string">" last cycle "</literal><name>INT64_FORMAT</name> 
                            <literal type="string">" raw ts "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" base global timestamp "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" tv secs "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" tv nsecs "</literal><name>INT64_FORMAT</name>
                            <literal type="string">" access seq "</literal><name>INT64_FORMAT</name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_last_cycle</name></name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_raw_timestamp</name></name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_global_timestamp</name></name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_tv_sec</name></name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_tv_nsec</name></name></expr></argument>,
                            <argument><expr><name>last_access_seq</name></expr></argument>,
                            <argument><expr><name>gts</name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>, 
                            <argument><expr><name>now</name></expr></argument>,
                            <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name></expr></argument>,
                            <argument><expr><name>tv_sec</name></expr></argument>,
                            <argument><expr><name>tv_nsec</name></expr></argument>,
                            <argument><expr><name>access_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ReleaseWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name> <operator>=</operator> <name>gts</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_last_cycle</name></name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_raw_timestamp</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_global_timestamp</name></name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_tv_sec</name></name> <operator>=</operator> <name>tv_sec</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_tv_nsec</name></name> <operator>=</operator> <name>tv_nsec</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_access_ts_seq</name></name></expr></argument>, <argument><expr><name>access_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>access_seq</name> <operator>=</operator> <call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_access_ts_seq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ReleaseWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ReleaseReadLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"get global timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">" last cycle "</literal> <name>INT64_FORMAT</name> <literal type="string">" now "</literal> <name>INT64_FORMAT</name></expr></argument>, 
                            <argument><expr><name>gts</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>gts</name></expr>;</return>

</block_content>}</block></function>
<function><type><name>void</name></type> <name>AcquireWriteLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_MAX_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <while>while<condition>(<expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <empty_stmt>;</empty_stmt></block_content></block></while>
    </block_content>}</block></for>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>ReleaseWriteLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GTM_MAX_THREADS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"thread %d lock should be locked when releasing write lock"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AcquireReadLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

    <while>while<condition>(<expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>ThreadId</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseReadLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <if_stmt><if>if<condition>(<expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>ThreadId</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"thread %d lock should be locked when releasing read lock"</literal></expr></argument>, <argument><expr><name>ThreadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ReleaseReadLockNoCheck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <expr_stmt><expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_in_locking</name><index>[<expr><name>ThreadId</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><name>GlobalTimestamp</name></type>
<name>SyncGlobalTimestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl>, <decl><type ref="prev"/><name>now</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>AcquireWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GTM_TimestampGetMonotonicRaw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Get MonotonicRaw "</literal><name>INT64_FORMAT</name><literal type="string">" last cycle "</literal><name>INT64_FORMAT</name> <literal type="string">" base global ts "</literal><name>INT64_FORMAT</name> 
                    <literal type="string">" last issue "</literal><name>INT64_FORMAT</name> 
                    <literal type="string">" last last cycle "</literal><name>INT64_FORMAT</name>
                    <literal type="string">" last raw time "</literal><name>INT64_FORMAT</name>
                    <literal type="string">" last base global timestamp "</literal><name>INT64_FORMAT</name></expr></argument>, 
                <argument><expr><name>now</name></expr></argument>,  
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>, 
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name></expr></argument>, 
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name></expr></argument>,
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_last_cycle</name></name></expr></argument>,
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_raw_timestamp</name></name></expr></argument>,
                <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_global_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>delta</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gts</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"syncing global timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">" last cycle "</literal> <name>INT64_FORMAT</name> <literal type="string">" now "</literal> <name>INT64_FORMAT</name></expr></argument>, 
                            <argument><expr><name>gts</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ReleaseWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    
    <return>return <expr><name>gts</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>SetNextGlobalTimestamp</name><parameter_list>(<parameter><decl><type><name>GlobalTimestamp</name></type> <name>gts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>AcquireWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_timestamp</name></name> <operator>=</operator> <name>gts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name> <operator>=</operator> <call><name>GTM_TimestampGetMonotonicRaw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_issue_timestamp</name></name> <operator>=</operator> <name>gts</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG8</name></expr></argument>, <argument><expr><literal type="string">"set next global timestamp "</literal><name>INT64_FORMAT</name> <literal type="string">" last cycle "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>gts</name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_last_cycle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add for global timestamp; Process MSG_GETGTS message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetGTSCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>time_t</name></type>        <name>now</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_CTL</name> <operator>&amp;&amp;</operator> <name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide global timestamp."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Get a GTM timestamp */</comment>
    <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>GetNextGlobalTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__XLOG__</name></cpp:ifdef>
    <expr_stmt><expr><name>now</name>       <operator>=</operator> <call><name>GTM_TimestampGetMonotonicRaw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>now</name> <operator>-</operator> <name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>last_sync_gts</name></name> <operator>&gt;</operator> <name>GTM_SYNC_TIME_LIMIT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_last_sync_gts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>last_sync_gts</name></name> <operator>=</operator> <name>g_last_sync_gts</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_last_sync_gts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 
         * check local last_sync_gts if updated ,if not ignore.
         */</comment>
        <if_stmt><if>if<condition>(<expr><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>last_sync_gts</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>-</operator> <name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>last_sync_gts</name></name> <operator>&gt;</operator> <name>GTM_SYNC_TIME_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><literal type="string">"sync time exceeded last:%lu now:%lu"</literal></expr></argument>,<argument><expr><name><name>GetMyThreadInfo</name><operator>-&gt;</operator><name>last_sync_gts</name></name></expr></argument>,<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_GETGTS_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>GTMClusterReadOnly</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add for global timestamp; Process MSG_GETGTS_MULTI message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetGTSCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gts_count</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_CTL</name> <operator>&amp;&amp;</operator> <name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide global timestamp."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>gts_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>gts_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Zero or less transaction count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Get a GTM timestamp */</comment>
    <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG7</name></expr></argument>, <argument><expr><literal type="string">"GTM processes timestamp.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_GETGTS_MULTI_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
    
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check gtm master and slave status by acquiring gts from both master and slave nodes.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCheckGTMCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>is_master</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type>  <name>master_timestamp</name>  <init>= <expr><name>InvalidGTS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>               <name>len</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>standby_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type>     <name>flush_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name><name>is_sync_mode</name><index>[<expr><name>max_wal_sender</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>           <name><name>slave_application_name</name><index>[<expr><name>max_wal_sender</name></expr>]</index><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type>     <name><name>slave_xlog_flush_pos</name><index>[<expr><name>max_wal_sender</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* read timeout message */</comment>
    <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_CTL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* standby node only handle GTS request from gtm_ctl*/</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check gtm command is supposed to be fired only by gtm or gtm_ctl!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block">/* Get a GTM timestamp */</comment>
    <expr_stmt><expr><name>master_timestamp</name> <operator>=</operator> <call><name>GetNextGlobalTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><name>is_master</name> <operator>=</operator> <call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_CHECK_GTM_STATUS_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>flush_ptr</name> <operator>=</operator> <call><name>GetCurrentXLogwrtResult</name><argument_list>()</argument_list></call><operator>.</operator><name>Flush</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>is_master</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>is_master</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>master_timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>flush_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>standby_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_wal_sender</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTM_MutexLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_use</name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_MutexLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>is_sync_mode</name><index>[<expr><name>standby_count</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_sync</name> <operator>==</operator> <name>true</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>slave_application_name</name><index>[<expr><name>standby_count</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>application_name</name></expr></argument>,<argument><expr><name>MAXFNAMELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>slave_xlog_flush_pos</name><index>[<expr><name>standby_count</name></expr>]</index></name> <operator>=</operator> <name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flush_ptr</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GTM_MutexLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_StandbyReplication</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>standby_count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>standby_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>standby_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name> <init>= <expr><name>master_timestamp</name> <operator>+</operator> <name>GTM_GTS_ONE_SECOND</name> <operator>*</operator> <name>GTMStartupGTSDelta</name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>slave_application_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>is_sync_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>slave_application_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>slave_xlog_flush_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Check gtm slave status by acquiring gts.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessStandbyPreCheckGTMCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>is_master</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type>  <name>master_timestamp</name>  <init>= <expr><name>InvalidGTS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>standby_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type>     <name>flush_ptr</name></decl>;</decl_stmt>

    <comment type="block">/* read timeout message */</comment>
    <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_CTL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* standby node only handle GTS request from gtm_ctl*/</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"check gtm command is supposed to be fired only by gtm or gtm_ctl!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get static gts from ControlData */</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlDataLock</name></expr></argument>,<argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>master_timestamp</name> <operator>=</operator> <name><name>ControlData</name><operator>-&gt;</operator><name>gts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlDataLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>flush_ptr</name> <operator>=</operator> <call><name>GetCurrentXLogwrtResult</name><argument_list>()</argument_list></call><operator>.</operator><name>Flush</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>is_master</name> <operator>=</operator> <call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_CHECK_GTM_STATUS_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>is_master</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>is_master</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>master_timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>flush_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>standby_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<comment type="block">/*
 * Process MSG_TXN_BEGIN_GETGXID message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBeginTransactionGetGXIDCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>global_sessionid_len</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* GXID has been received, now it's time to get a GTM timestamp */</comment>
    <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Start a new transaction
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    txn = GTM_BeginTransaction(txn_isolation_level, txn_read_only,
            global_sessionid);
    if (txn == InvalidTransactionHandle)
        ereport(ERROR,
                (EINVAL,
                 errmsg("Failed to start a new transaction")));

    gxid = GTM_GetGlobalTransactionId(txn);
    if (gxid == InvalidGlobalTransactionId)
        ereport(ERROR,
                (EINVAL,
                 errmsg("Failed to get a new transaction id")));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>GetNextGlobalTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG6</name></expr></argument>, <argument><expr><literal type="string">"Sending transaction id %u"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/* Backup first */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling begin_transaction() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
        <expr_stmt><expr><call><name>bkup_begin_transaction_gxid</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                    <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>,
                                    <argument><expr><name>txn_read_only</name></expr></argument>,
                                    <argument><expr><name>global_sessionid</name></expr></argument>,
                                    <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>con_client_id</name></expr></argument>,
                                    <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Sync */</comment>
        <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_GETGXID_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Flush standby */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <return>return;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_BkupBeginTransactionGetGXIDMulti</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
                                     <parameter><decl><type><name>GTM_IsolationLevel</name> <modifier>*</modifier></type><name>isolevel</name></decl></parameter>,
                                     <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>readonly</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                                     <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>client_id</name></decl></parameter>,
                                     <parameter><decl><type><name>GTMProxy_ConnID</name> <modifier>*</modifier></type><name>connid</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>txn_count</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>xid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>GTM_BeginTransactionMulti</name><argument_list>(<argument><expr><name>isolevel</name></expr></argument>, <argument><expr><name>readonly</name></expr></argument>, <argument><expr><name>global_sessionid</name></expr></argument>,
                                      <argument><expr><name>connid</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>txn_count</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to start %d new transactions"</literal></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"GTM_BkupBeginTransactionGetGXIDMulti - count %d"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//XCPTODO check oldContext = MemoryContextSwitchTo(TopMemoryContext);</comment>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_gxid</name></name> <operator>=</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_global_session_id</name></name></expr></argument>, <argument><expr><name><name>global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>,
                    <argument><expr><name>GTM_MAX_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"GTM_BkupBeginTransactionGetGXIDMulti: xid(%u), handle(%u)"</literal></expr></argument>,
                <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Advance next gxid -- because this is called at slave only, we don't care the restoration point
         * here.  Restoration point will be created at promotion.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdPrecedesOrEquals</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name> <operator>=</operator> <name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* Handle wrap around too */</comment>
            <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name> <operator>=</operator> <name>FirstNormalGlobalTransactionId</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Periodically write the xid and sequence info out to the control file.
     * Try and handle wrapping, too.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>xid</name> <operator>-</operator> <name>ControlXid</name> <operator>&gt;</operator> <name>CONTROL_INTERVAL</name> <operator>||</operator> <name>xid</name> <operator>&lt;</operator> <name>ControlXid</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator>  <call><name>GTM_StoreReserveXid</name><argument_list>(<argument><expr><name>CONTROL_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_GetGlobalTransactionIdMulti reserved gxid failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>ControlXid</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_TransArrayLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GTM_BkupBeginTransactionGetGXID</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                                <parameter><decl><type><name>GTM_IsolationLevel</name></type> <name>isolevel</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name></type> <name>readonly</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_sessionid</name></decl></parameter>,
                                <parameter><decl><type><name>uint32</name></type> <name>client_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name>connid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>            
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_sequence_debug</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"GTM_BkupBeginTransactionGetGXID gxid:%u."</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransactionGetGXIDMulti</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isolevel</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>readonly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_sessionid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<comment type="block">/*
 * Process MSG_BKUP_TXN_BEGIN_GETGXID message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBkupBeginTransactionGetGXIDCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>txn_client_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>txn_global_sessionid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txn_global_sessionid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_global_sessionid</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
            <argument><expr><name>txn_global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_client_id</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransactionGetGXID</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>,
            <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>txn_global_sessionid</name></expr></argument>, <argument><expr><name>txn_client_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<comment type="block">/*
 * Process MSG_BKUP_TXN_BEGIN_GETGXID_AUTOVACUUM message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBkupBeginTransactionGetGXIDAutovacuumCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>txn_client_id</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_client_id</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransactionGetGXID</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>txn_client_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_SetDoVacuum</name><argument_list>(<argument><expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Process MSG_TXN_BEGIN_GETGXID_AUTOVACUUM message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBeginTransactionGetGXIDAutovacuumCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name> <name>txn_read_only</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Start a new transaction
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    txn = GTM_BeginTransaction(txn_isolation_level, txn_read_only, NULL);
    if (txn == InvalidTransactionHandle)
        ereport(ERROR,
                (EINVAL,
                 errmsg("Failed to start a new transaction")));

    gxid = GTM_GetGlobalTransactionId(txn);
    if (gxid == InvalidGlobalTransactionId)
        ereport(ERROR,
                (EINVAL,
                 errmsg("Failed to get a new transaction id")));

    <comment type="block">/* Indicate that it is for autovacuum */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>GetNextGlobalTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//GTM_SetDoVacuum(txn);</comment>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/* Backup first */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>_gxid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling begin_transaction_autovacuum() for standby GTM %p."</literal></expr></argument>,
            <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label><name>retry</name>:</label>
        <expr_stmt><expr><name>_gxid</name> <operator>=</operator> <call><name>bkup_begin_transaction_autovacuum</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                                  <argument><expr><name>gxid</name></expr></argument>,
                                                  <argument><expr><name>txn_isolation_level</name></expr></argument>,
                                                  <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>con_client_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Sync */</comment>
        <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"begin_transaction_autovacuum() GXID=%d done."</literal></expr></argument>, <argument><expr><name>_gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_GETGXID_AUTOVACUUM_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Flush standby */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_TXN_BEGIN_GETGXID_MULTI message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBeginTransactionGetGXIDCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type> <name>txn_global_sessionid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>txn_gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>txn_read_only</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name><name>txn_isolation_level</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>txn_global_sessionid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name><name>txn_connid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name><name>txn_client_id</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>txn_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Zero or less transaction count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <expr_stmt><expr><name><name>txn_isolation_level</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_read_only</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txn_global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                <argument><expr><name>txn_global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_connid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTMProxy_ConnID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_client_id</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>con_client_id</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txn_global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>txn_global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTMProxy_ConnID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Start a new transaction
     *
     * XXX Port should contain Coordinator name - replace NULL with that
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    count = GTM_BeginTransactionMulti(txn_isolation_level, txn_read_only,
                                      txn_global_sessionid, txn_connid,
                                      txn_count, txn);
    if (count != txn_count)
        ereport(ERROR,
                (EINVAL,
                 errmsg("Failed to start %d new transactions", txn_count)));

    if (!GTM_GetGlobalTransactionIdMulti(txn, txn_count, txn_gxid, new_txn,
            &amp;new_txn_count))
        elog(ERROR, "Failed to get global transaction identifiers");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    
    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txn_gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GetNextGlobalTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* GXID has been received, now it's time to get a GTM timestamp */</comment>
    <expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>GTM_TimestampGetCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <comment type="block">/* Backup first */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling begin_transaction_multi() for standby GTM %p."</literal></expr></argument>,
             <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
        <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_begin_transaction_multi</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                           <argument><expr><name>txn_count</name></expr></argument>,
                                           <argument><expr><name>txn_gxid</name></expr></argument>,
                                           <argument><expr><name>txn_isolation_level</name></expr></argument>,
                                           <argument><expr><name>txn_read_only</name></expr></argument>,
                                           <argument><expr><name>txn_global_sessionid</name></expr></argument>,
                                           <argument><expr><name>txn_client_id</name></expr></argument>,
                                           <argument><expr><name>txn_connid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/* Sync */</comment>
        <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"begin_transaction_multi() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Respond to the client */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_BEGIN_GETGXID_MULTI_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>txn_gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>timestamp</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_Timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Flush standby */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
<comment type="block">/*
 * Process MSG_BKUP_BEGIN_TXN_GETGXID_MULTI message
 */</comment>
<function><type><name>void</name></type>
<name>ProcessBkupBeginTransactionGetGXIDCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name><name>txn_isolation_level</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>txn_read_only</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>txn_global_sessionid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>txn_global_sessionid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMProxy_ConnID</name></type> <name><name>txn_connid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name><name>txn_client_id</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Zero or less transaction count."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_isolation_level</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_read_only</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txn_global_sessionid_len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_global_sessionid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                <argument><expr><name>txn_global_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_client_id</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn_connid</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTMProxy_ConnID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GTM_BkupBeginTransactionGetGXIDMulti</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>txn_isolation_level</name></expr></argument>,
            <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>txn_global_sessionid</name></expr></argument>,
            <argument><expr><name>txn_client_id</name></expr></argument>, <argument><expr><name>txn_connid</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * Process MSG_TXN_COMMIT/MSG_BKUP_TXN_COMMIT message
 *
 * is_backup indicates the message is MSG_BKUP_TXN_COMMIT
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCommitTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>STATUS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>waited_xid_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>waited_xid_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>waited_xids</name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                <argument><expr><name>waited_xid_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the transaction
     */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GTM_CommitTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/*
         * If the transaction is successfully committed on the GTM master then
         * send a backup message to the GTM slave to redo the action locally
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>==</operator> <name>STATUS_OK</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Backup first
             */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling commit_transaction() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_commit_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"commit_transaction() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_COMMIT_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_TXN_COMMIT_PREPARED/MSG_BKUP_TXN_COMMIT_PREPARED message
 * Commit a prepared transaction
 * Here the GXID used for PREPARE and COMMIT PREPARED are both committed
 *
 * is_backup indicates the message is MSG_BKUP_TXN_COMMIT_PREPARED
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCommitPreparedTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>txn_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* PREPARE and COMMIT PREPARED gxid's */</comment>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>txn_count</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>txn_count</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>txn_count</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>waited_xid_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier><name>waited_xids</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessCommitTransactionCommandMulti: gxid(%u), handle(%u)"</literal></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>waited_xid_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>waited_xid_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>waited_xids</name> <operator>=</operator> <operator>(</operator><name>GlobalTransactionId</name> <operator>*</operator><operator>)</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                <argument><expr><name>waited_xid_count</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Committing: prepared id %u and commit prepared id %u "</literal></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the prepared transaction.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    GTM_CommitTransactionMulti(txn, txn_count, waited_xid_count,
            waited_xids, status);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/*
         * If we successfully committed the transaction on the GTM master, then
         * also send a backup message to the GTM slave to redo the action
         * locally
         *
         * GTM_CommitTransactionMulti() above is used to only commit the main
         * and the auxiliary GXID. Since we either commit or delay both of
         * these GXIDs together, its enough to just test for one of the GXIDs.
         * If the transaction commit is delayed, the backup message will be
         * sent when the GTM master receives COMMIT message again and
         * successfully commits the transaction
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>STATUS_OK</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Backup first */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling commit_prepared_transaction() for standby GTM %p."</literal></expr></argument>,
                 <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_commit_prepared_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                                   <argument><expr><name><name>gxid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> <comment type="block">/* prepared GXID */</comment>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"commit_prepared_transaction() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_COMMIT_PREPARED_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gxid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_GET_GID_DATA
 * This message is used after at the beginning of a COMMIT PREPARED
 * or a ROLLBACK PREPARED.
 * For a given GID the following info is returned:
 * - a fresh GXID,
 * - GXID of the transaction that made the prepare
 * - Datanode and Coordinator node list involved in the prepare
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetGIDDataTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>, <decl><type ref="prev"/><name>prepared_txn</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <comment type="block">/* Data to be sent back to client */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageHandle</name></type>    <name>store_txn_handle</name></decl>;</decl_stmt>        
    <decl_stmt><decl><type><name>int</name></type> <name>gidlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>txn_read_only</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <decl_stmt><decl><type><name>GTM_IsolationLevel</name></type> <name>txn_isolation_level</name></decl>;</decl_stmt>
    <comment type="block">/* take the isolation level and read_only instructions */</comment>
    <expr_stmt><expr><name>txn_isolation_level</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_IsolationLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* receive GID */</comment>
    <expr_stmt><expr><name>gidlen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>gidlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gid</name><index>[<expr><name>gidlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the prepared Transaction for given GID */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide 2PC transaction to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*We refuse finish gid command when sync commit is on and standby is not connected. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>enable_sync_commit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SyncReady</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"synchronous commit is on, synchronous standby is not ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>store_txn_handle</name> <operator>=</operator> <call><name>GTM_StoreGetPreparedTxnInfo</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prepared_gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>INVALID_STORAGE_HANDLE</name> <operator>==</operator> <name>store_txn_handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to get prepared transaction '%s' info from GTM store"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt><expr><name>txn_read_only</name> <operator>=</operator> <name>txn_read_only</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>prepared_txn</name> <operator>=</operator> <call><name>GTM_GIDToHandle</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prepared_txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get GID Data for prepared transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* First get the GXID for the new transaction */</comment>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_BeginTransaction</name><argument_list>(<argument><expr><name>txn_isolation_level</name></expr></argument>, <argument><expr><name>txn_read_only</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get the information of prepared transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>GTM_GetGlobalTransactionId</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>gxid</name> <operator>==</operator> <name>InvalidGlobalTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get a new transaction id"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Make the internal process, get the prepared information from GID.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GTM_GetGIDData</name><argument_list>(<argument><expr><name>prepared_txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prepared_gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodestring</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get the information of prepared transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_Timestamp</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling bkup_begin_transaction_gxid() for auxiliary transaction for standby GTM %p."</literal></expr></argument>,
            <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
        <comment type="block">/*
         * The main XID was already backed up on the standby when it was
         * started. Now also backup the new GXID we obtained above for running
         * COMMIT/ROLLBACK PREPARED statements. This is necessary because GTM
         * will later receive a COMMIT/ABORT message for this XID and the
         * standby must be prepared to handle those messages as well
         *
         * Note: We use the same routine used to backup a new transaction
         * instead of writing a routine specific to MSG_TXN_GET_GID_DATA
         * message
         */</comment> 
        <expr_stmt><expr><call><name>bkup_begin_transaction_gxid</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                   <argument><expr><name>gxid</name></expr></argument>,
                   <argument><expr><name>txn_isolation_level</name></expr></argument>,
                   <argument><expr><name>false</name></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                   <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*
     * Send a SUCCESS message back to the client
     */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_GET_GID_DATA_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send the two GXIDs */</comment>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prepared_gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Node string list */</comment>
    <if_stmt><if>if <condition>(<expr><name>nodestring</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* End of message */</comment>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* No backup to the standby because this does not change internal status */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Process MSG_TXN_GXID_LIST
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGXIDListCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>estlen</name></decl>, <decl><type ref="prev"/><name>actlen</name></decl>;</decl_stmt> <comment type="block">/* estimated length and actual length */</comment>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><name>EPERM</name><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Operation not permitted under the standby mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Do something here.
     */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>estlen</name> <operator>=</operator> <call><name>gtm_get_transactions_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GTMTransactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>estlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>actlen</name> <operator>=</operator> <call><name>gtm_serialize_transactions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GTMTransactions</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>estlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"gtm_serialize_transactions: estlen=%ld, actlen=%ld"</literal></expr></argument>, <argument><expr><name>estlen</name></expr></argument>, <argument><expr><name>actlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*
     * Send a SUCCESS message back to the client
     */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_GXID_LIST_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>actlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* size of serialized GTM_Transactions */</comment>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>actlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block">/* serialized GTM_Transactions */</comment>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* No backup to the standby because this does not change internal state */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"pq_flush()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessGXIDListCommand() ok. %ld bytes sent. len=%d"</literal></expr></argument>, <argument><expr><name>actlen</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_ROLLBACK/MSG_BKUP_TXN_ROLLBACK message
 *
 * is_backup indicates the message is MSG_BKUP_TXN_ROLLBACK
 */</comment>
<function><type><name>void</name></type>
<name>ProcessRollbackTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name>STATUS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Cancelling transaction id %u"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the transaction
     */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GTM_RollbackTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling abort_transaction() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><call><name>bkup_abort_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"abort_transaction() GXID=%d done."</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_ROLLBACK_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush standby first */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_COMMIT_MULTI/MSG_BKUP_TXN_COMMIT_MULTI message
 *
 * is_backup indicates the message is MSG_BKUP_TXN_COMMIT_MULTI
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCommitTransactionCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessCommitTransactionCommandMulti: gxid(%u), handle(%u)"</literal></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the transaction
     */</comment>
    <expr_stmt><expr><call><name>GTM_CommitTransactionMulti</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Backup first */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling commit_transaction_multi() for standby GTM %p."</literal></expr></argument>,
                 <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator>
                <call><name>bkup_commit_transaction_multi</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                        <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"commit_transaction_multi() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_COMMIT_MULTI_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_TXN_ROLLBACK_MULTI/MSG_BKUP_TXN_ROLLBACK_MULTI message
 *
 * is_backup indicates the message is MSG_BKUP_TXN_ROLLBACK_MULTI
 */</comment>
<function><type><name>void</name></type>
<name>ProcessRollbackTransactionCommandMulti</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name><name>txn</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name><name>gxid</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>status</name><index>[<expr><name>GTM_MAX_GLOBAL_TRANSACTIONS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>txn_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>txn_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>txn_count</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"ProcessRollbackTransactionCommandMulti: gxid(%u), handle(%u)"</literal></expr></argument>, <argument><expr><name><name>gxid</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>txn</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the transaction
     */</comment>
    <expr_stmt><expr><call><name>GTM_RollbackTransactionMulti</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling abort_transaction_multi() for standby GTM %p."</literal></expr></argument>,
                 <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>bkup_abort_transaction_multi</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name>txn_count</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator><operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"abort_transaction_multi() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_ROLLBACK_MULTI_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn_count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>txn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process MSG_TXN_START_PREPARED/MSG_BKUP_TXN_START_PREPARED message
 *
 */</comment>
<function><type><name>void</name></type>
<name>ProcessStartPreparedTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StrLen</name></type> <name>gidlen</name></decl>, <decl><type ref="prev"/><name>nodelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nodestring</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <name>txn</name></expr>;</expr_stmt>

    <comment type="block">/* We refuse prepare transaction command when sync commit is on and standby is not connected. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>enable_sync_commit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SyncReady</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"synchronous commit is on, synchronous standby is not ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide 2PC transaction to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* get GID */</comment>
    <expr_stmt><expr><name>gidlen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>gidlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gid</name><index>[<expr><name>gidlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* get node string list */</comment>
    <expr_stmt><expr><name>nodelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodestring</name><index>[<expr><name>nodelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare the transaction
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GTM_StartPreparedTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to prepare the transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/*
         * Backup first
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>_rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling start_prepared_transaction() for standby GTM %p."</literal></expr></argument>,
                <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><name>_rc</name> <operator>=</operator> <call><name>backup_start_prepared_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>,
                                                    <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>,
                                                    <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"start_prepared_transaction() rc=%d done."</literal></expr></argument>, <argument><expr><name>_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>     
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_START_PREPARED_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ProcessLogTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_global</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StrLen</name></type> <name>gidlen</name></decl>, <decl><type ref="prev"/><name>nodelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nodestring</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>prepare_ts</name></decl>, <decl><type ref="prev"/><name>commit_ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>node_count</name></decl>, <decl><type ref="prev"/><name>isCommit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <comment type="block">/* get GID */</comment>
    <expr_stmt><expr><name>gidlen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>gidlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gid</name><index>[<expr><name>gidlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* get node string list */</comment>
    <expr_stmt><expr><name>nodelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>nodelen</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>nodestring</name><index>[<expr><name>nodelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>node_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isCommit</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid prepare timestamp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prepare_ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>prepare_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid commit timestamp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commit_ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>commit_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare the transaction
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>GTM_LogTransaction</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><name>is_global</name></expr></argument>, <argument><expr><name>isCommit</name></expr></argument>, <argument><expr><name>prepare_ts</name></expr></argument>, <argument><expr><name>commit_ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to log the transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
    
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_LOG_TRANSACTION_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> 
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>ProcessLogScanCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StrLen</name></type> <name>relnamelen</name></decl>, <decl><type ref="prev"/><name>nodelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nodestring</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTimestamp</name></type> <name>start_ts</name></decl>, <decl><type ref="prev"/><name>local_start_ts</name></decl>, <decl><type ref="prev"/><name>local_complete_ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>scan_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>scan_number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <comment type="block">/* get node string */</comment>
    <expr_stmt><expr><name>nodelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nodestring</name><index>[<expr><name>nodelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid start timestamp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>start_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid local start timestamp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_start_ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>local_start_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTimestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid local complete timestamp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_complete_ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>local_complete_ts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>scan_type</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>scan_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>relnamelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rel_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>relnamelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>relnamelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>relnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel_name</name><index>[<expr><name>relnamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid scan number"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_number</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>scan_number</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare the transaction
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>enable_gtm_debug</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>GTM_LogScan</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>, <argument><expr><name>start_ts</name></expr></argument>, <argument><expr><name>local_start_ts</name></expr></argument>, <argument><expr><name>local_complete_ts</name></expr></argument>, <argument><expr><name>scan_type</name></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>, <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATUS_OK</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to log the scan transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_LOG_SCAN_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_PREPARE/MSG_BKUP_TXN_PREPARE message
 *
 * is_backup indicates the message is MSG_BKUP_TXN_PREPARE
 */</comment>
<function><type><name>void</name></type>
<name>ProcessPrepareTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMostMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Commit the transaction
     */</comment>
    <expr_stmt><expr><call><name>GTM_PrepareTransaction</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Preparing transaction id %u"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_backup</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <comment type="block">/* Backup first */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling prepare_transaction() for standby GTM %p."</literal></expr></argument>, <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label><name>retry</name>:</label>
            <expr_stmt><expr><call><name>bkup_prepare_transaction</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* Sync */</comment>
            <if_stmt><if>if <condition>(<expr><name>Backup_synchronously</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtm_sync_standby</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"prepare_transaction() GXID=%d done."</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Respond to the client */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_PREPARE_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
            <comment type="block">/* Flush the standby */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>gtmpqFlush</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_GET_GXID message
 *
 * Notice: we don't have corresponding functions in gtm_client.c which
 * generates a command for this function.
 *
 * Because of this, GTM-standby extension is not included in this function.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetGXIDTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"Inside ProcessGetGXIDTransactionCommand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid Transaction Handle"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Get the transaction id for the given global transaction
     */</comment>
    <expr_stmt><expr><name>gxid</name> <operator>=</operator> <call><name>GTM_GetGlobalTransactionId</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EINVAL</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to get the transaction id"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"Sending transaction id %d"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_GET_GXID_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>txn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Process MSG_TXN_GET_NEXT_GXID message
 *
 * This does not need backup to the standby because no internal state changes.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessGetNextGXIDTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>next_gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"Inside ProcessGetNextGXIDTransactionCommand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Get the next gxid.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    GTM_RWLockAcquire(&amp;GTMTransactions.gt_XidGenLock, GTM_LOCKMODE_WRITE);
    next_gxid = GTMTransactions.gt_nextXid;

    GTM_RWLockRelease(&amp;GTMTransactions.gt_XidGenLock);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>next_gxid</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_global_xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"Sending next gxid %d"</literal></expr></argument>, <argument><expr><name>next_gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_GET_NEXT_GXID_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>next_gxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ProcessReportXminCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_backup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StrLen</name></type> <name>nodelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>node_name</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type>    <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type>    <name>global_xmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Message does not contain valid GXID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gxid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read Node Type */</comment>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_PGXCNodeType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get node name */</comment>
    <expr_stmt><expr><name>nodelen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node_name</name><index>[<expr><name>nodelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>global_xmin</name> <operator>=</operator> <call><name>GTM_HandleGlobalXmin</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        
        <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
        <comment type="block">/*
         * Send a SUCCESS message back to the client
         */</comment>
        <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>REPORT_XMIN_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>global_xmin</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GlobalTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>errcode</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>errcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Mark GTM as shutting down. This point onwards no new GXID are issued to
 * ensure that the last GXID recorded in the control file remains sane
 */</comment>
<function><type><name>void</name></type>
<name>GTM_SetShuttingDown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GTM_RWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>, <argument><expr><name>GTM_LOCKMODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_gtm_state</name></name> <operator>=</operator> <name>GTM_SHUTTING_DOWN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GTM_RWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GTMTransactions</name><operator>.</operator><name>gt_XidGenLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GTM_NeedXidRestoreUpdate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator><call><name>GlobalTransactionIdPrecedesOrEquals</name><argument_list>(<argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_backedUpXid</name></name></expr></argument>, <argument><expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_nextXid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>GlobalTransactionId</name></type>
<name>GTM_GetLatestCompletedXID</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>GTMTransactions</name><operator>.</operator><name>gt_latestCompletedXid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_ForgetCreatedSequence</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_created_seqs</name></name> <operator>=</operator>
        <call><name>gtm_list_delete</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_created_seqs</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remember sequence created by transaction 'gxid'.
 *
 * This should be removed from the global data structure if the transaction
 * aborts (see GTM_SeqRemoveCreated). If the sequence is later dropped in the
 * same transaction, we remove it from the global structure as well as forget
 * tracking (see GTM_ForgetCreatedSequence). If the transaction commits, just
 * forget about this tracked sequence.
 */</comment>
<function><type><name>void</name></type>
<name>GTM_RememberCreatedSequence</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_created_seqs</name></name> <operator>=</operator>
        <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_created_seqs</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_RememberDroppedSequence</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_dropped_seqs</name></name> <operator>=</operator>
        <call><name>gtm_lappend</name><argument_list>(<argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_dropped_seqs</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GTM_RememberAlteredSequence</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_TransactionInfo</name> <modifier>*</modifier></type><name>gtm_txninfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_TransactionHandle</name></type> <name>txn</name> <init>= <expr><call><name>GTM_GXIDToHandle</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <if_stmt><if>if <condition>(<expr><name>txn</name> <operator>==</operator> <name>InvalidTransactionHandle</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>gtm_txninfo</name> <operator>=</operator> <call><name>GTM_HandleToTransactionInfo</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_altered_seqs</name></name> <operator>=</operator> <call><name>gtm_lcons</name><argument_list>(<argument><expr><name>seq</name></expr></argument>,
            <argument><expr><name><name>gtm_txninfo</name><operator>-&gt;</operator><name>gti_altered_seqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TODO
 */</comment>
<function_decl><type><name>int</name></type> <name>GTM_GetAllTransactions</name><parameter_list>(<parameter><decl><type><name>GTM_TransactionInfo</name></type> <name><name>txninfo</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>txncnt</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * TODO
 */</comment>
<function_decl><type><name>uint32</name></type> <name>GTM_GetAllPrepared</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name><name>gxids</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>gxidcnt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>ProcessFinishGIDTransactionCommand</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>myport</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>gidlen</name></decl>;</decl_stmt>

    <comment type="block">/*We refuse finish gid command when sync commit is on and standby is not connected. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>enable_sync_commit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>SyncReady</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"synchronous commit is on, synchronous standby is not ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>Recovery_IsStandby</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gtm standby can't provide 2PC transaction to datanodes or coordinators."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* receive GID */</comment>
    <expr_stmt><expr><name>gidlen</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_StrLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gid</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>gidlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gid</name><index>[<expr><name>gidlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the prepared Transaction for given GID */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GTM_StoreFinishTxn</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
    
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__XLOG__</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GTM_Conn</name> <modifier>*</modifier></type><name>oldconn</name> <init>= <expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"calling bkup_begin_transaction_gxid() for auxiliary transaction for standby GTM %p."</literal></expr></argument>,
                <argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label><name>retry</name>:</label>        
            <expr_stmt><expr><call><name>finish_gid_gtm</name><argument_list>(<argument><expr><call><name>GetMyConnection</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>standby</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>gtm_standby_check_communication_error</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>oldconn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>    
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>EPROTO</name><operator>,</operator>
                      <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to finish '%s' info from GTM store"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><call><name>BeforeReplyToClientXLogTrigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/*
     * Send a SUCCESS message back to the client
     */</comment>
    <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>TXN_FINISH_GID_RESULT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>==</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GTM_ProxyMsgHeader</name></type> <name>proxyhdr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>proxyhdr</name><operator>.</operator><name>ph_conid</name></name> <operator>=</operator> <name><name>myport</name><operator>-&gt;</operator><name>conn_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>proxyhdr</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GTM_ProxyMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Send the storage ret */</comment>
    <expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/* End of message */</comment>
    <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><name>myport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* No backup to the standby because this does not change internal status */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myport</name><operator>-&gt;</operator><name>remote_type</name></name> <operator>!=</operator> <name>GTM_NODE_GTM_PROXY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_flush</name><argument_list>(<argument><expr><name>myport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
