<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/bin/psql/large_obj.c"><comment type="block">/*
 * psql - the PostgreSQL interactive terminal
 *
 * Copyright (c) 2000-2017, PostgreSQL Global Development Group
 *
 * src/bin/psql/large_obj.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"large_obj.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"settings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_lo_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> pg_attribute_printf<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_lo_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type>        <name>ap</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>PRINT_HTML</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;p&gt;"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>PRINT_HTML</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/p&gt;\n"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Prepare to do a large-object operation.  We *must* be inside a transaction
 * block for all these operations, so start one if needed.
 *
 * Returns TRUE if okay, FALSE if failed.  *own_transaction is set to indicate
 * if we started our own transaction or not.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>start_lo_xact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>own_transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGTransactionStatusType</name></type> <name>tstatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>own_transaction</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>db</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: not connected to a database\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tstatus</name> <operator>=</operator> <call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>tstatus</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PQTRANS_IDLE</name></expr>:</case>
            <comment type="block">/* need to start our own xact */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>own_transaction</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PQTRANS_INTRANS</name></expr>:</case>
            <comment type="block">/* use the existing xact */</comment>
            <break>break;</break>
        <case>case <expr><name>PQTRANS_INERROR</name></expr>:</case>
            <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: current transaction is aborted\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: unknown transaction status\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up after a successful LO operation
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>finish_lo_xact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>own_transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>own_transaction</name> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>autocommit</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* close out our own xact */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up after a failed LO operation
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fail_lo_xact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>own_transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>own_transaction</name> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>autocommit</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* close out our own xact */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>                <comment type="block">/* always */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * do_lo_export()
 *
 * Write a large object to a file
 */</comment>
<function><type><name>bool</name></type>
<name>do_lo_export</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loid_arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>own_transaction</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_export"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>SetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lo_export</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>atooid</name><argument_list>(<argument><expr><name>loid_arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ResetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* of course this status is documented nowhere :( */</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>fail_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_export"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>finish_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_export"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>print_lo_result</name><argument_list>(<argument><expr><literal type="string">"lo_export"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * do_lo_import()
 *
 * Copy large object from file to database
 */</comment>
<function><type><name>bool</name></type>
<name>do_lo_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>loid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>oidbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>own_transaction</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_import"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>SetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>loid</name> <operator>=</operator> <call><name>lo_import</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>filename_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ResetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>loid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>fail_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_import"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* insert description if given */</comment>
    <if_stmt><if>if <condition>(<expr><name>comment_arg</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cmdbuf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>        <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>comment_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>cmdbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>slen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmdbuf</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>fail_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_import"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>, <argument><expr><literal type="string">"COMMENT ON LARGE OBJECT %u IS '"</literal></expr></argument>, <argument><expr><name>loid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufptr</name> <operator>=</operator> <name>cmdbuf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <call><name>PQescapeStringConn</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>comment_arg</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>fail_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_import"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>finish_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_import"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>print_lo_result</name><argument_list>(<argument><expr><literal type="string">"lo_import %u"</literal></expr></argument>, <argument><expr><name>loid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>oidbuf</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>loid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"LASTOID"</literal></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * do_lo_unlink()
 *
 * removes a large object out of the database
 */</comment>
<function><type><name>bool</name></type>
<name>do_lo_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loid_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>loid</name> <init>= <expr><call><name>atooid</name><argument_list>(<argument><expr><name>loid_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>own_transaction</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>start_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_unlink"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>SetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lo_unlink</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>loid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ResetCancelConn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>fail_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_unlink"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>finish_lo_xact</name><argument_list>(<argument><expr><literal type="string">"\\lo_unlink"</literal></expr></argument>, <argument><expr><name>own_transaction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>print_lo_result</name><argument_list>(<argument><expr><literal type="string">"lo_unlink %u"</literal></expr></argument>, <argument><expr><name>loid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * do_lo_list()
 *
 * Show all large objects in database with comments
 */</comment>
<function><type><name>bool</name></type>
<name>do_lo_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>printQueryOpt</name></type> <name>myopt</name> <init>= <expr><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">90000</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string">"SELECT oid as \"%s\",\n"</literal>
                 <literal type="string">"  pg_catalog.pg_get_userbyid(lomowner) as \"%s\",\n"</literal>
                 <literal type="string">"  pg_catalog.obj_description(oid, 'pg_largeobject') as \"%s\"\n"</literal>
                 <literal type="string">"  FROM pg_catalog.pg_largeobject_metadata "</literal>
                 <literal type="string">"  ORDER BY oid"</literal></expr></argument>,
                 <argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Owner"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Description"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string">"SELECT loid as \"%s\",\n"</literal>
                 <literal type="string">"  pg_catalog.obj_description(loid, 'pg_largeobject') as \"%s\"\n"</literal>
                 <literal type="string">"FROM (SELECT DISTINCT loid FROM pg_catalog.pg_largeobject) x\n"</literal>
                 <literal type="string">"ORDER BY 1"</literal></expr></argument>,
                 <argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"ID"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Description"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>nullPrint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>title</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Large objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>translate_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printQuery</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>myopt</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
