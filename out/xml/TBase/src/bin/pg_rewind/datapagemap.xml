<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/bin/pg_rewind/datapagemap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * datapagemap.c
 *      A data structure for keeping track of data pages that have changed.
 *
 * This is a fairly simple bitmap.
 *
 * Copyright (c) 2013-2017, PostgreSQL Global Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datapagemap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logging.h"</cpp:file></cpp:include>

<struct>struct <name>datapagemap_iterator</name>
<block>{
    <decl_stmt><decl><type><name>datapagemap_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>nextblkno</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/*****
 * Public functions
 */</comment>

<comment type="block">/*
 * Add a block to the bitmap.
 */</comment>
<function><type><name>void</name></type>
<name>datapagemap_add</name><parameter_list>(<parameter><decl><type><name>datapagemap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>bitno</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>blkno</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitno</name> <operator>=</operator> <name>blkno</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

    <comment type="block">/* enlarge or create bitmap if needed */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>bitmapsize</name></name> <operator>&lt;=</operator> <name>offset</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>oldsize</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>bitmapsize</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>newsize</name></decl>;</decl_stmt>

        <comment type="block">/*
         * The minimum to hold the new bit is offset + 1. But add some
         * headroom, so that we don't need to repeatedly enlarge the bitmap in
         * the common case that blocks are modified in order, from beginning
         * of a relation to the end.
         */</comment>
        <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>newsize</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* zero out the newly allocated region */</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>oldsize</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newsize</name> <operator>-</operator> <name>oldsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>bitmapsize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set the bit */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitno</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Start iterating through all entries in the page map.
 *
 * After datapagemap_iterate, call datapagemap_next to return the entries,
 * until it returns false. After you're done, use pg_free() to destroy the
 * iterator.
 */</comment>
<function><type><name>datapagemap_iterator_t</name> <modifier>*</modifier></type>
<name>datapagemap_iterate</name><parameter_list>(<parameter><decl><type><name>datapagemap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>datapagemap_iterator_t</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datapagemap_iterator_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextblkno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>datapagemap_next</name><parameter_list>(<parameter><decl><type><name>datapagemap_iterator_t</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>datapagemap_t</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BlockNumber</name></type> <name>blk</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>nextblkno</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>nextoff</name> <init>= <expr><name>blk</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>bitno</name> <init>= <expr><name>blk</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>nextoff</name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>bitmapsize</name></name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>nextblkno</name></name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>nextoff</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitno</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>blkno</name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* no more set bits in this bitmap. */</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A debugging aid. Prints out the contents of the page map.
 */</comment>
<function><type><name>void</name></type>
<name>datapagemap_print</name><parameter_list>(<parameter><decl><type><name>datapagemap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>datapagemap_iterator_t</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>blocknum</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>datapagemap_iterate</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>datapagemap_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocknum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"  block %u\n"</literal></expr></argument>, <argument><expr><name>blocknum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
