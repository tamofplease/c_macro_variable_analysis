<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/statistics/subset.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * subset.c
 *	  POSTGRES user defined column correlationship
 *
 * Portions Copyright (c) 2020-Present, TBase Development Team, Tencent
 *
 * IDENTIFICATION
 *	  src/backend/statistics/knowledge.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/extended_stats_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/statistics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>subset_is_compatible_clause</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>relid</name></decl></parameter>,
						<parameter><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>subset_implies_attribute</name><parameter_list>(<parameter><decl><type><name>MVDependency</name> <modifier>*</modifier></type><name>dependency</name></decl></parameter>,
						<parameter><decl><type><name>AttrNumber</name></type> <name>attnum</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Build subset dependencies between groups of columns
 */</comment>
<function><type><name>MVDependencies</name> <modifier>*</modifier></type>
<name>statext_subset_build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>

	<comment type="block">/* result */</comment>
	<decl_stmt><decl><type><name>MVDependencies</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MVDependency</name>   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

	<comment type="block">/* Currently, we only support subset defined with 2 columns */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize the list of dependencies */</comment>
	<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <operator>(</operator><name>MVDependencies</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MVDependencies</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dependencies</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>STATS_DEPS_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dependencies</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STATS_DEPS_TYPE_BASIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dependencies</name><operator>-&gt;</operator><name>ndeps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <operator>(</operator><name>MVDependencies</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>,
											   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MVDependencies</name></expr></argument>, <argument><expr><name>deps</name></expr></argument>)</argument_list></call>
											   <operator>+</operator> <name><name>dependencies</name><operator>-&gt;</operator><name>ndeps</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MVDependency</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>MVDependency</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MVDependency</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call>
								 <operator>+</operator> <name>k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>degree</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nattributes</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>list_nth_int</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>dependencies</name><operator>-&gt;</operator><name>deps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

	<return>return <expr><name>dependencies</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * statext_subset_load
 *		Load the subset dependency for the indicated pg_statistic_ext tuple
 */</comment>
<function><type><name>MVDependencies</name> <modifier>*</modifier></type>
<name>statext_subset_load</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>mvoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>deps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>mvoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for statistics object %u"</literal></expr></argument>, <argument><expr><name>mvoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>deps</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><name>htup</name></expr></argument>,
						   <argument><expr><name>Anum_pg_statistic_ext_stxsubset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reuse the functional dependencies deserialize function */</comment>
	<return>return <expr><call><name>statext_dependencies_deserialize</name><argument_list>(<argument><expr><call><name>DatumGetByteaP</name><argument_list>(<argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subset_is_compatible_clause
 *		Determines if the clause is compatible with subset dependencies
 *
 * When returning True attnum is set to the attribute number of the Var within
 * the supported clause. Comparing to dependencies compatibility check, subset
 * is less restrictive.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>subset_is_compatible_clause</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>rinfo</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <name>clause</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rinfo</name></expr></argument>, <argument><expr><name>RestrictInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Pseudoconstants are not really interesting here. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rinfo</name><operator>-&gt;</operator><name>pseudoconstant</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* clauses referencing multiple varnos are incompatible */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bms_membership</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause_relids</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BMS_SINGLETON</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_opclause</name><argument_list>(<argument><expr><name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpExpr</name>	   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name><name>rinfo</name><operator>-&gt;</operator><name>clause</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Var</name>		   <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>varonleft</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>ok</name></decl>;</decl_stmt>

		<comment type="block">/* Only expressions with two arguments are considered compatible. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* see if it actually has the right */</comment>
		<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><call><name>NumRelids</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><call><name>is_pseudo_constant_clause</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			 <operator>(</operator><name>varonleft</name> <operator>=</operator> <name>false</name><operator>,</operator>
			  <call><name>is_pseudo_constant_clause</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* unsupported structure (two variables or so) */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>var</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>varonleft</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

		<comment type="block">/* in case it's a T_RelableType */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>var</name> <operator>=</operator> <operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>var</name><operator>)</operator><operator>-&gt;</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* We only support plain Vars for now */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Ensure var is from the correct relation */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>!=</operator> <name>relid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* we also better ensure the Var is from the current level */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varlevelsup</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Also skip system attributes (we don't allow stats on those). */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AttrNumberIsForUserDefinedAttr</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>attnum</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subset_eliminate_attribute
 *		check that the attnum matches is implied by the subset dependency
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>subset_implies_attribute</name><parameter_list>(<parameter><decl><type><name>MVDependency</name> <modifier>*</modifier></type><name>dependency</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>attnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <name><name>dependency</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name><name>dependency</name><operator>-&gt;</operator><name>nattributes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * subset_clauselist_selectivity
 *		Return the estimated selectivity of the given clauses using
 *		functional dependency statistics, or 1.0 if no useful functional
 *		dependency statistic exists.
 *
 * 'estimatedclauses' is an output argument that gets a bit set corresponding
 * to the (zero-based) list index of clauses that are included in the
 * estimated selectivity.
 *
 * Given equality clauses on attributes (a,b) we find the strongest dependency
 * between them, i.e. either (a=&gt;b) or (b=&gt;a). Assuming (a=&gt;b) is the selected
 * dependency, we then combine the per-clause selectivities using the formula
 */</comment>
<function><type><name>Selectivity</name></type>
<name>subset_clauselist_selectivity</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>varRelid</name></decl></parameter>,
							  <parameter><decl><type><name>JoinType</name></type> <name>jointype</name></decl></parameter>,
							  <parameter><decl><type><name>SpecialJoinInfo</name> <modifier>*</modifier></type><name>sjinfo</name></decl></parameter>,
							  <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							  <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier><modifier>*</modifier></type><name>estimatedclauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Selectivity</name></type> <name>s1</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>clauses_attnums</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StatisticExtInfo</name> <modifier>*</modifier></type><name>stat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MVDependencies</name> <modifier>*</modifier></type><name>dependencies</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>list_attnums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>listidx</name></decl>;</decl_stmt>

	<comment type="block">/* check if there's any stats that might be useful for us. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_stats_of_kind</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>statlist</name></name></expr></argument>, <argument><expr><name>STATS_EXT_SUBSET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>list_attnums</name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
										 <call><name>list_length</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Pre-process the clauses list to extract the attnums seen in each item.
	 * We need to determine if there's any clauses which will be useful for
	 * subset selectivity elimination. Along the way we'll record all of
	 * the attnums for each clause in a list which we'll reference later so we
	 * don't need to repeat the same work again. We'll also keep track of all
	 * attnums seen.
	 */</comment>
	<expr_stmt><expr><name>listidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>clauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>clause</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>subset_is_compatible_clause</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attnum</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>list_attnums</name><index>[<expr><name>listidx</name></expr>]</index></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>clauses_attnums</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>clauses_attnums</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>list_attnums</name><index>[<expr><name>listidx</name></expr>]</index></name> <operator>=</operator> <name>InvalidAttrNumber</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>listidx</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * If there's not at least two distinct attnums then reject the whole list
	 * of clauses. We must return 1.0 so the calling function's selectivity is
	 * unaffected.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name>clauses_attnums</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>list_attnums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1.0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* find the best suited statistics object for these attnums */</comment>
	<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>choose_best_statistics</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>statlist</name></name></expr></argument>, <argument><expr><name>clauses_attnums</name></expr></argument>,
								  <argument><expr><name>STATS_EXT_SUBSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if no matching stats could be found then we've nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>list_attnums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1.0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Load the dependency items stored in the statistics object.
	 */</comment>
	<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <call><name>statext_subset_load</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>statOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Apply the dependencies recursively, starting with the widest/strongest
	 * ones, and proceeding to the smaller/weaker ones. At the end of each
	 * round we factor in the selectivity of clauses on the implied attribute,
	 * and remove the clauses from the list.
	 *
	 * Actually, for subset dependency, there should be only one dependency
	 * entry. But we still keep the while loop style align with normal
	 * dependency selectivity calculation does, to get better support for
	 * possible future enhancements.
	 */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>Selectivity</name></type> <name>s2</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MVDependency</name> <modifier>*</modifier></type><name>dependency</name></decl>;</decl_stmt>

		<comment type="block">/* There is only one dependency to indicate the subset relation */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dependencies</name><operator>-&gt;</operator><name>ndeps</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dependency</name> <operator>=</operator> <name><name>dependencies</name><operator>-&gt;</operator><name>deps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We found an applicable dependency, so find all the clauses on the
		 * implied attribute - with dependency (a,b =&gt; c) we look for clauses
		 * on 'c'.
		 */</comment>
		<expr_stmt><expr><name>listidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>clauses</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>clause</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>listidx</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * Skip incompatible clauses, and ones we've already estimated on.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>list_attnums</name><index>[<expr><name>listidx</name></expr>]</index></name> <operator>==</operator> <name>InvalidAttrNumber</name> <operator>||</operator>
				<call><name>bms_is_member</name><argument_list>(<argument><expr><name>listidx</name></expr></argument>, <argument><expr><operator>*</operator><name>estimatedclauses</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Technically we could find more than one clause for a given
			 * attnum. Since these clauses must be equality clauses, we choose
			 * to only take the selectivity estimate from the final clause in
			 * the list for this attnum. If the attnum happens to be compared
			 * to a different Const in another clause then no rows will match
			 * anyway. If it happens to be compared to the same Const, then
			 * ignoring the additional clause is just the thing to do.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>subset_implies_attribute</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>, <argument><expr><name><name>list_attnums</name><index>[<expr><name>listidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>clause</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>clause_selectivity</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>, <argument><expr><name>varRelid</name></expr></argument>, <argument><expr><name>jointype</name></expr></argument>,
										<argument><expr><name>sjinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* mark this one as done, so we don't touch it again. */</comment>
				<expr_stmt><expr><operator>*</operator><name>estimatedclauses</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><operator>*</operator><name>estimatedclauses</name></expr></argument>, <argument><expr><name>listidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Mark that we've got and used the dependency on this clause.
				 * We'll want to ignore this when looking for the next
				 * strongest dependency above.
				 */</comment>
				<expr_stmt><expr><name>clauses_attnums</name> <operator>=</operator> <call><name>bms_del_member</name><argument_list>(<argument><expr><name>clauses_attnums</name></expr></argument>,
												 <argument><expr><name><name>list_attnums</name><index>[<expr><name>listidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/*
		 * Now factor in the selectivity for all the "implied" clauses into
		 * the final one, using this formula:
		 *
		 * P(a,b) = P(a) * (f + (1-f) * P(b))
		 *
		 * where 'f' is the degree of validity of the dependency.
		 *
		 * Currently, the subset statistic can only eliminate the implied
		 * clause by forcing dependency degree to 1.0.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>degree</name></name> <operator>==</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>*=</operator> <operator>(</operator><name><name>dependency</name><operator>-&gt;</operator><name>degree</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>dependency</name><operator>-&gt;</operator><name>degree</name></name><operator>)</operator> <operator>*</operator> <name>s2</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>list_attnums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>s1</name></expr>;</return>
</block_content>}</block></function>
</unit>
