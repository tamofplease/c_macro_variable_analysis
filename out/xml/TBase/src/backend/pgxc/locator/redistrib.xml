<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/pgxc/locator/redistrib.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * redistrib.c
 *      Routines related to online data redistribution
 *
 * Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *      src/backend/pgxc/locator/redistrib.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/copyops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/execRemote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/redistrib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/remotecopy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsCommandTypePreUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == CATALOG_UPDATE_BEFORE || \
                                   x == CATALOG_UPDATE_BOTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsCommandTypePostUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == CATALOG_UPDATE_AFTER || \
                                    x == CATALOG_UPDATE_BOTH)</cpp:value></cpp:define>

<comment type="block">/* Functions used for the execution of redistribution commands */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_execute_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_temp</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_execute_command</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>RedistribCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_copy_to</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_copy_from</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_truncate</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_reindex</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>distrib_delete_hash</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Functions used to build the command list */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgxc_redist_build_entry</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgxc_redist_build_replicate</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgxc_redist_build_replicate_to_distrib</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                                <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgxc_redist_build_default</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgxc_redist_add_reindex</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * PGXCRedistribTable
 * Execute redistribution operations after catalog update
 */</comment>
<function><type><name>void</name></type>
<name>PGXCRedistribTable</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>RedistribCatalog</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if no redistribution operation */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>distribState</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Nothing to do if on remote node */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name> <operator>||</operator> <call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Execute each command if necessary */</comment>
    <macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>distribState-&gt;commands</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RedistribCommand</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><operator>(</operator><name>RedistribCommand</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Check if command can be run */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCommandTypePostUpdate</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>IsCommandTypePostUpdate</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>updateState</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCommandTypePreUpdate</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>IsCommandTypePreUpdate</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>updateState</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Now enter in execution list */</comment>
        <expr_stmt><expr><call><name>distrib_execute_command</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * PGXCRedistribCreateCommandList
 * Look for the list of necessary commands to perform table redistribution.
 */</comment>
<function><type><name>void</name></type>
<name>PGXCRedistribCreateCommandList</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldLocInfo</name> <operator>=</operator> <call><name>RelationGetLocInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Build redistribution command list */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_build_entry</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name>oldLocInfo</name></expr></argument>, <argument><expr><name>newLocInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgxc_redist_build_entry
 * Entry point for command list building
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgxc_redist_build_entry</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                        <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                        <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* If distribution has not changed at all, nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsLocatorInfoEqual</name><argument_list>(<argument><expr><name>oldLocInfo</name></expr></argument>, <argument><expr><name>newLocInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Evaluate cases for replicated tables */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_build_replicate</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name>oldLocInfo</name></expr></argument>, <argument><expr><name>newLocInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Evaluate cases for replicated to distributed tables */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_build_replicate_to_distrib</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name>oldLocInfo</name></expr></argument>, <argument><expr><name>newLocInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* PGXCTODO: perform more complex builds of command list */</comment>

    <comment type="block">/* Fallback to default */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_build_default</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgxc_redist_build_replicate_to_distrib
 * Build redistribution command list from replicated to distributed
 * table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgxc_redist_build_replicate_to_distrib</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                            <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                            <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>removedNodes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>newNodes</name></decl>;</decl_stmt>

    <comment type="block">/* If a command list has already been built, nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Redistribution is done from replication to distributed (with value) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsLocatorReplicated</name><argument_list>(<argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>IsLocatorDistributedByValue</name><argument_list>(<argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get the list of nodes that are added to the relation */</comment>
    <expr_stmt><expr><name>removedNodes</name> <operator>=</operator> <call><name>list_difference_int</name><argument_list>(<argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>, <argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the list of nodes that are removed from relation */</comment>
    <expr_stmt><expr><name>newNodes</name> <operator>=</operator> <call><name>list_difference_int</name><argument_list>(<argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>, <argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If some nodes are added, turn back to default, we need to fetch data
     * and then redistribute it properly.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>newNodes</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Nodes removed have to be truncated, so add a TRUNCATE commands to removed nodes */</comment>
    <if_stmt><if>if <condition>(<expr><name>removedNodes</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>execNodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>execNodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name>removedNodes</name></expr>;</expr_stmt>
        <comment type="block">/* Add TRUNCATE command */</comment>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_TRUNCATE</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_BEFORE</name></expr></argument>, <argument><expr><name>execNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If the table is redistributed to a single node, a TRUNCATE on removed nodes
     * is sufficient so leave here.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Add REINDEX command if necessary */</comment>
        <expr_stmt><expr><call><name>pgxc_redist_add_reindex</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If we are here we are sure that redistribution only requires to delete data on remote
     * nodes on the new subset of nodes. So launch to remote nodes a DELETE command that only
     * eliminates the data not verifying the new hashing condition.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>execNodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>execNodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_DELETE_HASH</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_AFTER</name></expr></argument>, <argument><expr><name>execNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_MODULO</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>execNodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>execNodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_DELETE_MODULO</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_AFTER</name></expr></argument>, <argument><expr><name>execNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Incorrect redistribution operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Add REINDEX command if necessary */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_add_reindex</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgxc_redist_build_replicate
 * Build redistribution command list for replicated tables
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgxc_redist_build_replicate</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>,
                            <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>oldLocInfo</name></decl></parameter>,
                            <parameter><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>newLocInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>removedNodes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>newNodes</name></decl>;</decl_stmt>

    <comment type="block">/* If a command list has already been built, nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Case of a replicated table whose set of nodes is changed */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsLocatorReplicated</name><argument_list>(<argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>IsLocatorReplicated</name><argument_list>(<argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>locatorType</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get the list of nodes that are added to the relation */</comment>
    <expr_stmt><expr><name>removedNodes</name> <operator>=</operator> <call><name>list_difference_int</name><argument_list>(<argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>, <argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the list of nodes that are removed from relation */</comment>
    <expr_stmt><expr><name>newNodes</name> <operator>=</operator> <call><name>list_difference_int</name><argument_list>(<argument><expr><name><name>newLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>, <argument><expr><name><name>oldLocInfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If nodes have to be added, we need to fetch data for redistribution first.
     * So add a COPY TO command to fetch data.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>newNodes</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Add COPY TO command */</comment>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_COPY_TO</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_BEFORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Nodes removed have to be truncated, so add a TRUNCATE commands to removed nodes */</comment>
    <if_stmt><if>if <condition>(<expr><name>removedNodes</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>execNodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>execNodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name>removedNodes</name></expr>;</expr_stmt>
        <comment type="block">/* Add TRUNCATE command */</comment>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_TRUNCATE</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_BEFORE</name></expr></argument>, <argument><expr><name>execNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If necessary, COPY the data obtained at first step to the new nodes. */</comment>
    <if_stmt><if>if <condition>(<expr><name>newNodes</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>execNodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>execNodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <name>newNodes</name></expr>;</expr_stmt>
        <comment type="block">/* Add COPY FROM command */</comment>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_COPY_FROM</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_AFTER</name></expr></argument>, <argument><expr><name>execNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Add REINDEX command if necessary */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_add_reindex</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgxc_redist_build_default
 * Build a default list consisting of
 * COPY TO -&gt; TRUNCATE -&gt; COPY FROM ( -&gt; REINDEX )
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgxc_redist_build_default</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* If a command list has already been built, nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* COPY TO command */</comment>
    <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_COPY_TO</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_BEFORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* TRUNCATE command */</comment>
    <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_TRUNCATE</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_BEFORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* COPY FROM command */</comment>
    <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
                     <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_COPY_FROM</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_AFTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* REINDEX command */</comment>
    <expr_stmt><expr><call><name>pgxc_redist_add_reindex</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgxc_redist_build_reindex
 * Add a reindex command if necessary
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgxc_redist_add_reindex</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Build REINDEX command if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RelationGetIndexList</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>distribState</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>,
             <argument><expr><call><name>makeRedistribCommand</name><argument_list>(<argument><expr><name>DISTRIB_REINDEX</name></expr></argument>, <argument><expr><name>CATALOG_UPDATE_AFTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * distrib_execute_command
 * Execute a redistribution operation
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_execute_command</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>RedistribCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type>        <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>        <name>start_t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>                <modifier>*</modifier></type><name>command_str</name> <init>= <expr><literal type="string">"unknown distrib_execute_command"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Execute redistribution command */</comment>
    <switch>switch <condition>(<expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DISTRIB_COPY_TO</name></expr>:</case>
            <expr_stmt><expr><call><name>distrib_copy_to</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command_str</name> <operator>=</operator> <literal type="string">"Redistribution step: fetch remote tuples"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTRIB_COPY_FROM</name></expr>:</case>
            <expr_stmt><expr><call><name>distrib_copy_from</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name><name>command</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command_str</name> <operator>=</operator> <literal type="string">"Redistribution step: distribute tuples"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTRIB_TRUNCATE</name></expr>:</case>
            <expr_stmt><expr><call><name>distrib_truncate</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name><name>command</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command_str</name> <operator>=</operator> <literal type="string">"Redistribution step: truncate relation"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTRIB_REINDEX</name></expr>:</case>
            <expr_stmt><expr><call><name>distrib_reindex</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name><name>command</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command_str</name> <operator>=</operator> <literal type="string">"Redistribution step: reindex relation"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTRIB_DELETE_HASH</name></expr>:</case>
        <case>case <expr><name>DISTRIB_DELETE_MODULO</name></expr>:</case>
            <expr_stmt><expr><call><name>distrib_delete_hash</name><argument_list>(<argument><expr><name>distribState</name></expr></argument>, <argument><expr><name><name>command</name><operator>-&gt;</operator><name>execNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>command_str</name> <operator>=</operator> <literal type="string">"Redistribution step: delete tuples"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DISTRIB_NONE</name></expr>:</case>
        <default>default:</default>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Should not happen */</comment>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><name>command_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * distrib_copy_to
 * Copy all the data of table to be distributed.
 * This data is saved in a tuplestore saved in distribution state.
 * a COPY FROM operation is always done on nodes determined by the locator data
 * in catalogs, explaining why this cannot be done on a subset of nodes. It also
 * insures that no read operations are done on nodes where data is not yet located.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_copy_to</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relOid</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RemoteCopyData</name> <modifier>*</modifier></type><name>copyState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt> <comment type="block">/* Storage of redistributed data */</comment>

    <comment type="block">/* Fetch necessary data to prepare for the table data acquisition */</comment>
    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>makeRemoteCopyOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* All the fields are separated by tabs in redistribution */</comment>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>COPYOPS_DELIMITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>copyState</name> <operator>=</operator> <operator>(</operator><name>RemoteCopyData</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteCopyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>copyState</name><operator>-&gt;</operator><name>is_from</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/* A sufficient lock level needs to be taken at a higher level */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoteCopy_GetRelationLoc</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoteCopy_BuildStatement</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Inform client of operation being done */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Copying data for relation \"%s.%s\""</literal></expr></argument>,
                    <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Begin the COPY process */</comment>
    <expr_stmt><expr><call><name>DataNodeCopyBegin</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Create tuplestore storage */</comment>
    <expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>tuplestore_begin_message</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tuplestore_collect_stat</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"Redistribute_TS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Then get rows and copy them to the tuplestore used for redistribution */</comment>
    <expr_stmt><expr><call><name>DataNodeCopyStore</name><argument_list>(
            <argument><expr><operator>(</operator><name>PGXCNodeHandle</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>getLocatorNodeMap</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>getLocatorNodeCount</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Do necessary clean-up */</comment>
    <expr_stmt><expr><call><name>FreeRemoteCopyOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Lock is maintained until transaction commits */</comment>
    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Save results */</comment>
    <expr_stmt><expr><name><name>distribState</name><operator>-&gt;</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PGXCDistribTableCopyFrom
 * Execute commands related to COPY FROM
 * Redistribute all the data of table with a COPY FROM from given tuplestore.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_copy_from</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type> <name>relOid</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>store</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RemoteCopyData</name> <modifier>*</modifier></type><name>copyState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
    <comment type="block">/* May be needed to decode partitioning value */</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>partIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FmgrInfo</name></type>     <name>in_function</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>         <name>typioparam</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>typmod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type>         <name>secPartIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FmgrInfo</name></type>     <name>in_function_for_sec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>         <name>typioparam_for_sec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>typmod_for_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Nothing to do if on remote node */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name> <operator>||</operator> <call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Fetch necessary data to prepare for the table data acquisition */</comment>
    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>makeRemoteCopyOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* All the fields are separated by tabs in redistribution */</comment>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>COPYOPS_DELIMITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>copyState</name> <operator>=</operator> <operator>(</operator><name>RemoteCopyData</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteCopyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>copyState</name><operator>-&gt;</operator><name>is_from</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <comment type="block">/* A sufficient lock level needs to be taken at a higher level */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoteCopy_GetRelationLoc</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoteCopy_BuildStatement</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Modify relation location as requested */</comment>
    <if_stmt><if>if <condition>(<expr><name>exec_nodes</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>exec_nodes</name><operator>-&gt;</operator><name>nodeList</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>rl_nodeList</name></name> <operator>=</operator> <name><name>exec_nodes</name><operator>-&gt;</operator><name>nodeList</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>partAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type> <name>in_func_oid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dropped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>partIdx</name> <operator>=</operator> <name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>partAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="block">/* prepare function to decode partitioning value */</comment>
        <expr_stmt><expr><call><name>getTypeInputInfo</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>dist_type</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name>in_func_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typioparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>in_func_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>typmod</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>partIdx</name></expr>]</index></name><operator>-&gt;</operator><name>atttypmod</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Make partIdx pointing to correct field of the datarow.
         * The data row does not contain data of dropped attributes, we should
         * decrement partIdx appropriately
         */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>partIdx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>dropped</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>partIdx</name> <operator>-=</operator> <name>dropped</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>secPartIdx</name> <operator>=</operator> <name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>secAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <comment type="block">/* prepare function to decode second partitioning value */</comment>
            <expr_stmt><expr><call><name>getTypeInputInfo</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>sec_dist_type</name></name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>in_func_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typioparam_for_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>in_func_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_function_for_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>typmod_for_sec</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>secPartIdx</name></expr>]</index></name><operator>-&gt;</operator><name>atttypmod</name></expr>;</expr_stmt>

            <comment type="block">/*
             * Make partIdx pointing to correct field of the datarow.
             * The data row does not contain data of dropped attributes, we should
             * decrement partIdx appropriately
             */</comment>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>secPartIdx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>dropped</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>secPartIdx</name> <operator>-=</operator> <name>dropped</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Inform client of operation being done */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Redistributing data for relation \"%s.%s\""</literal></expr></argument>,
                    <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DataNodeCopyBegin</name><argument_list>(<argument><expr><name>copyState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send each COPY message stored to remote nodes */</comment>
    <while>while <condition>(<expr><name>true</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>     <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>    <name>value</name> <init>= <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>    <name>is_null</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
        <decl_stmt><decl><type><name>Datum</name></type>   <name>secValue</name> <init>= <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>    <name>is_sec_null</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* 
         * Get message from the tuplestore
         *
         * The trailing \n is already removed while storing the message.
         */</comment>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>tuplestore_getmessage</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <comment type="block">/* Find value of distribution column if necessary */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>partAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            
            <comment type="block">/*
             * Split message on an array of fields.
             */</comment>
            <expr_stmt><expr><name>fields</name> <operator>=</operator> <call><name>CopyOps_RawDataToArrayField</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>partIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Determine partitioning value */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>partIdx</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_function</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>partIdx</name></expr>]</index></name></expr></argument>,
                                          <argument><expr><name>typioparam</name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>secPartIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>secValue</name> <operator>=</operator> <call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_function_for_sec</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>secPartIdx</name></expr>]</index></name></expr></argument>,
                                          <argument><expr><name>typioparam_for_sec</name></expr></argument>, <argument><expr><name>typmod_for_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>is_sec_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>tmpbuf</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>DataNodeCopyIn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                           <argument><expr><call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><name>secValue</name></expr></argument>, <argument><expr><name>is_sec_null</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                           <argument><expr><call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                           <argument><expr><operator>(</operator><name>PGXCNodeHandle</name><operator>*</operator><operator>*</operator><operator>)</operator>
                           <call><name>getLocatorResults</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>conn_count</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PGXCNodeHandle</name><modifier>*</modifier><modifier>*</modifier></type> <name>copy_connections</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringInfoData</name></type>   <name>sqldata</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringInfo</name></type>       <name>sql</name></decl>;</decl_stmt> 

            <expr_stmt><expr><name>sql</name> <operator>=</operator> <operator>&amp;</operator><name>sqldata</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
            <expr_stmt><expr><name>conn_count</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><name>secValue</name></expr></argument>, <argument><expr><name>is_sec_null</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><name>conn_count</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>copy_connections</name> <operator>=</operator> <operator>(</operator><name>PGXCNodeHandle</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>getLocatorResults</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>conn_count</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>copy_connections</name><index>[<expr><name>loop</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>handle</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s;"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Copy failed on a data node:%s"</literal></expr></argument>, <argument><expr><name><name>sql</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Clean up */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>DataNodeCopyFinish</name><argument_list>(<argument><expr><call><name>getLocatorNodeCount</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>(</operator><name>PGXCNodeHandle</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>getLocatorNodeMap</name><argument_list>(<argument><expr><name><name>copyState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Lock is maintained until transaction commits */</comment>
    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * distrib_truncate
 * Truncate all the data of specified table.
 * This is used as a second step of online data redistribution.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_truncate</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfo</name></type>    <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relOid</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if on remote node */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name> <operator>||</operator> <call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* A sufficient lock level needs to be taken at a higher level */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Inform client of operation being done */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Truncating data for relation \"%s.%s\""</literal></expr></argument>,
                    <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize buffer */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Build query to clean up table before redistribution */</comment>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE %s.%s"</literal></expr></argument>,
                     <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Lock is maintained until transaction commits,
     * relation needs also to be closed before effectively launching the query.
     */</comment>
    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Execute the query */</comment>
    <expr_stmt><expr><call><name>distrib_execute_query</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>IsTempTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exec_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clean buffers */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * distrib_reindex
 * Reindex the table that has been redistributed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_reindex</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfo</name></type>    <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relOid</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if on remote node */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name> <operator>||</operator> <call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* A sufficient lock level needs to be taken at a higher level */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Inform client of operation being done */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Reindexing relation \"%s.%s\""</literal></expr></argument>,
                    <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize buffer */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Generate the query */</comment>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"REINDEX TABLE %s.%s"</literal></expr></argument>,
                     <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Execute the query */</comment>
    <expr_stmt><expr><call><name>distrib_execute_query</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>IsTempTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exec_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clean buffers */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Lock is maintained until transaction commits */</comment>
    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * distrib_delete_hash
 * Perform a partial tuple deletion of remote tuples not checking the correct hash
 * condition. The new distribution condition is set up in exec_nodes when building
 * the command list.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_delete_hash</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>distribState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfo</name></type>    <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relOid</name> <init>= <expr><name><name>distribState</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if on remote node */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name> <operator>||</operator> <call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* A sufficient lock level needs to be taken at a higher level */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Inform client of operation being done */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Deleting necessary tuples \"%s.%s\""</literal></expr></argument>,
                    <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize buffer */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Build query to clean up table before redistribution */</comment>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM %s.%s"</literal></expr></argument>,
                     <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Launch the DELETE query to each node as the DELETE depends on
     * local conditions for each node.
     */</comment>
    <macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>exec_nodes-&gt;nodeList</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringInfo</name></type>    <name>buf2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>hashfuncname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>hashtype</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>locinfo</name> <init>= <expr><call><name>RelationGetLocInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>nodenum</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>nodepos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ExecNodes</name>  <modifier>*</modifier></type><name>local_exec_nodes</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecNodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupDesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Form_pg_attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>tupDesc</name><operator>-&gt;</operator><name>attrs</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item2</name></decl>;</decl_stmt>

        <comment type="block">/* Here the query is launched to a unique node */</comment>
        <expr_stmt><expr><name><name>local_exec_nodes</name><operator>-&gt;</operator><name>nodeList</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>nodenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the hash type of relation */</comment>
        <expr_stmt><expr><name>hashtype</name> <operator>=</operator> <name><name>attr</name><index>[<expr><name><name>locinfo</name><operator>-&gt;</operator><name>partAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>atttypid</name></expr>;</expr_stmt>

        <comment type="block">/* Get function hash name */</comment>
        <expr_stmt><expr><name>hashfuncname</name> <operator>=</operator> <call><name>get_compute_hash_function</name><argument_list>(<argument><expr><name>hashtype</name></expr></argument>, <argument><expr><name><name>locinfo</name><operator>-&gt;</operator><name>locatorType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get distribution column name */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>locinfo</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>GetRelationHashColumn</name><argument_list>(<argument><expr><name>locinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>locinfo</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_MODULO</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>GetRelationModuloColumn</name><argument_list>(<argument><expr><name>locinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Incorrect redistribution operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/*
         * Find the correct node position in node list of locator information.
         * So scan the node list and fetch the position of node.
         */</comment>
        <macro><name>foreach</name><argument_list>(<argument>item2</argument>, <argument>locinfo-&gt;rl_nodeList</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>loc</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>item2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>loc</name> <operator>==</operator> <name>nodenum</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nodepos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="block">/*
         * Then build the WHERE clause for deletion.
         * The condition that allows to keep the tuples on remote nodes
         * is of the type "RemoteNodeNumber != (hash_func(dis_col)) %
         * NumDatanodes".
         *
         * (Earlier we were using abs(hashvalue), but that does not render the
         * same result as (unsigned int) (signed value). So we must do a modulo
         * 2^32 computation.
         *
         * The remote Datanode has no knowledge of its position in cluster so this
         * number needs to be compiled locally on Coordinator.
         * Taking the absolute value is necessary as hash may return a negative value.
         * For hash distributions a condition with correct hash function is used.
         * For modulo distribution, well we might need a hash function call but not
         * all the time, this is determined implicitely by get_compute_hash_function.
         */</comment>
        <expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hashfuncname</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"%s WHERE ((2^32 + %s(%s))::bigint %% (2^32)::bigint) %% %d != %d"</literal></expr></argument>,
                             <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>hashfuncname</name></expr></argument>, <argument><expr><name>colname</name></expr></argument>,
                             <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>locinfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodepos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"%s WHERE ((2^32 + %s)::bigint %% (2^32)::bigint) %% %d != %d"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>colname</name></expr></argument>,
                             <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>locinfo</name><operator>-&gt;</operator><name>rl_nodeList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodepos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/* Then launch this single query */</comment>
        <expr_stmt><expr><call><name>distrib_execute_query</name><argument_list>(<argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>IsTempTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>local_exec_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FreeExecNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local_exec_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf2</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clean buffers */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * makeRedistribState
 * Build a distribution state operator
 */</comment>
<function><type><name>RedistribState</name> <modifier>*</modifier></type>
<name>makeRedistribState</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>RedistribState</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedistribState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>relid</name></name> <operator>=</operator> <name>relOid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>store</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FreeRedistribState
 * Free given distribution state
 */</comment>
<function><type><name>void</name></type>
<name>FreeRedistribState</name><parameter_list>(<parameter><decl><type><name>RedistribState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

    <comment type="block">/* Leave if nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>state-&gt;commands</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FreeRedistribCommand</name><argument_list>(<argument><expr><operator>(</operator><name>RedistribCommand</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>store</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tuplestore_end</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * makeRedistribCommand
 * Build a distribution command
 */</comment>
<function><type><name>RedistribCommand</name> <modifier>*</modifier></type>
<name>makeRedistribCommand</name><parameter_list>(<parameter><decl><type><name>RedistribOperation</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>RedistribCatalog</name></type> <name>updateState</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RedistribCommand</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>RedistribCommand</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RedistribCommand</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>updateState</name></name> <operator>=</operator> <name>updateState</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>execNodes</name></name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * FreeRedistribCommand
 * Free given distribution command
 */</comment>
<function><type><name>void</name></type>
<name>FreeRedistribCommand</name><parameter_list>(<parameter><decl><type><name>RedistribCommand</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
    <comment type="block">/* Leave if nothing to do */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>command</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nodes</name> <operator>=</operator> <name><name>command</name><operator>-&gt;</operator><name>execNodes</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodes</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FreeExecNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * distrib_execute_query
 * Execute single raw query on given list of nodes
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>distrib_execute_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_temp</name></decl></parameter>, <parameter><decl><type><name>ExecNodes</name> <modifier>*</modifier></type><name>exec_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RemoteQuery</name> <modifier>*</modifier></type><name>step</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RemoteQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>combine_type</name></name> <operator>=</operator> <name>COMBINE_TYPE_SAME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>exec_nodes</name></name> <operator>=</operator> <name>exec_nodes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>sql_statement</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>force_autocommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/* Redistribution operations only concern Datanodes */</comment>
    <expr_stmt><expr><name><name>step</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name>EXEC_ON_DATANODES</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ExecRemoteUtility</name><argument_list>(<argument><expr><name>step</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NON_PARALLEL_DDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ExecRemoteUtility</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>step</name><operator>-&gt;</operator><name>sql_statement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Be sure to advance the command counter after the last command */</comment>
    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
