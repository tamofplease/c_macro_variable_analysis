<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/pgxc/pool/poolcomm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * poolcomm.c
 *
 *      Communication functions between the pool manager and session
 *
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sun</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/poolcomm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/poolmgr.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>pool_recvbuf</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>pool_discardbytes</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOLER_UNIXSOCK_PATH</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>port</name></type></parameter>, <parameter><type><name>sockdir</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>snprintf(path, sizeof(path), "%s/.s.PGPOOL.%d", \
            ((sockdir) &amp;&amp; *(sockdir) != '\0') ? (sockdir) : \
            DEFAULT_PGSOCKET_DIR, \
            (port))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sock_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>StreamDoUnlink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>Lock_AF_UNIX</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unixSocketName</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Open server socket on specified port to accept connection from sessions
 */</comment>
<function><type><name>int</name></type>
<name>pool_listen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unixSocketName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>fd</name></decl>,
                <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>unix_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>maxconn</name></decl>;</decl_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>Lock_AF_UNIX</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>unixSocketName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* create a Unix domain stream socket */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* fill in socket address structure */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unix_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unix_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unix_addr</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_family</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>



    <comment type="block">/* bind the name to the descriptor */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>unix_addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Select appropriate accept-queue length limit.  PG_SOMAXCONN is only
     * intended to provide a clamp on the request on platforms where an
     * overly large request provokes a kernel error (are there any?).
     */</comment>
    <expr_stmt><expr><name>maxconn</name> <operator>=</operator> <name>MaxBackends</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>maxconn</name> <operator>&gt;</operator> <name>PG_SOMAXCONN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>maxconn</name> <operator>=</operator> <name>PG_SOMAXCONN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* tell kernel we're a server */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>maxconn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>



    <comment type="block">/* Arrange to unlink the socket file at exit */</comment>
    <expr_stmt><expr><call><name>on_proc_exit</name><argument_list>(<argument><expr><name>StreamDoUnlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>fd</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* TODO support for non-unix platform */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pool manager only supports UNIX socket"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* StreamDoUnlink()
 * Shutdown routine for pooler connection
 * If a Unix socket is used for communication, explicitly close it.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>StreamDoUnlink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sock_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* HAVE_UNIX_SOCKETS */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>Lock_AF_UNIX</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unixSocketName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>POOLER_UNIXSOCK_PATH</name><argument_list>(<argument><expr><name>sock_path</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>unixSocketName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CreateSocketLockFile</name><argument_list>(<argument><expr><name>sock_path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Connect to pooler listening on specified port
 */</comment>
<function><type><name>int</name></type>
<name>pool_connect</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unixSocketName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>fd</name></decl>,
                <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>unix_addr</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <comment type="block">/* create a Unix domain stream socket */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* fill socket address structure w/server's addr */</comment>
    <expr_stmt><expr><call><name>POOLER_UNIXSOCK_PATH</name><argument_list>(<argument><expr><name>sock_path</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>unixSocketName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unix_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unix_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unix_addr</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>sock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_family</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name><name>unix_addr</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>unix_addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <return>return <expr><name>fd</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* TODO support for non-unix platform */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pool manager only supports UNIX socket"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * Get one byte from the buffer, read data from the connection if buffer is empty
 */</comment>
<function><type><name>int</name></type>
<name>pool_getbyte</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>&gt;=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>pool_recvbuf</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* If nothing in buffer, then recv some */</comment>
            <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>            <comment type="block">/* Failed to recv data */</comment>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name><index>[<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Get one byte from the buffer if it is not empty
 */</comment>
<function><type><name>int</name></type>
<name>pool_pollbyte</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>&gt;=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>EOF</name></expr>;</return>                <comment type="block">/* Empty buffer */</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name><index>[<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Read pooler protocol message from the buffer.
 */</comment>
<function><type><name>int</name></type>
<name>pool_getmessage</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>        <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read message length word */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pool_getbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected EOF within message length word"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator>
        <operator>(</operator><name>maxlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name>maxlen</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid message length"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>                    <comment type="block">/* discount length itself */</comment>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Allocate space for message.    If we run out of room (ridiculously
         * large message), we will elog(ERROR)
         */</comment>
        <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pool_discardbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block>{<block_content>
                <comment type="line">//while(1);</comment>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"incomplete message from client"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* And grab the message */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>pool_getbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//while(1);</comment>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"incomplete message from client"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <comment type="block">/* Place a trailing null per StringInfo convention */</comment>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 * pool_getbytes - get a known number of bytes from connection
 *
 * returns 0 if OK, EOF if trouble
 * --------------------------------
 */</comment>
<function><type><name>int</name></type>
<name>pool_getbytes</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>amount</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <while>while <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>&gt;=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pool_recvbuf</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* If nothing in buffer, then recv
                                         * some */</comment>
                <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* Failed to recv data */</comment>
        </block_content>}</block></while>
        <expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>-</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>amount</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name></name> <operator>+</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 * pool_discardbytes - discard a known number of bytes from connection
 *
 * returns 0 if OK, EOF if trouble
 * --------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pool_discardbytes</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>amount</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <while>while <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>&gt;=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pool_recvbuf</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* If nothing in buffer, then recv
                                         * some */</comment>
                <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* Failed to recv data */</comment>
        </block_content>}</block></while>
        <expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>-</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>amount</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 * pool_recvbuf - load some bytes into the input buffer
 *
 * returns 0 if OK, EOF if trouble
 * --------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pool_recvbuf</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>&gt;</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* still some unread data, left-justify it in the buffer */</comment>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name></name> <operator>+</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr></argument>,
                    <argument><expr><name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>-</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>-=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Can fill buffer from PqRecvLength and upwards */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>r</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>RecvBuffer</name></name> <operator>+</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr></argument>,
                 <argument><expr><name>POOL_BUFFER_SIZE</name> <operator>-</operator> <name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>        <comment type="block">/* Ok if interrupted */</comment>

            <comment type="block">/*
             * Report broken connection
             */</comment>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * EOF detected.  We used to write a log message here, but it's
             * better to expect the ultimate caller to do that.
             */</comment>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* r contains number of bytes read, so just incr length */</comment>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>RecvLength</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * Put a known number of bytes into the connection buffer
 */</comment>
<function><type><name>int</name></type>
<name>pool_putbytes</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>amount</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* If buffer is full, then flush it out */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name> <operator>&gt;=</operator> <name>POOL_BUFFER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pool_flush</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>amount</name> <operator>=</operator> <name>POOL_BUFFER_SIZE</name> <operator>-</operator> <name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>amount</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>SendBuffer</name></name> <operator>+</operator> <name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>amount</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* --------------------------------
 *        pool_flush        - flush pending output
 *
 *        returns 0 if OK, EOF if trouble
 * --------------------------------
 */</comment>
<function><type><name>int</name></type>
<name>pool_flush</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>last_reported_send_errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>bufptr</name> <init>= <expr><name><name>port</name><operator>-&gt;</operator><name>SendBuffer</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>bufend</name> <init>= <expr><name><name>port</name><operator>-&gt;</operator><name>SendBuffer</name></name> <operator>+</operator> <name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>bufptr</name> <operator>&lt;</operator> <name>bufend</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>r</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>bufend</name> <operator>-</operator> <name>bufptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>        <comment type="block">/* Ok if we were interrupted */</comment>

            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>last_reported_send_errno</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>last_reported_send_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

                <comment type="block">/*
                 * Handle a seg fault that may later occur in proc array
                 * when this fails when we are already shutting down
                 * If shutting down already, do not call.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc_exit_inprogress</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * We drop the buffered data anyway so that processing can
             * continue, even though we'll probably quit soon.
             */</comment>
            <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>last_reported_send_errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* reset after any successful send */</comment>
        <expr_stmt><expr><name>bufptr</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>SendPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Put the pooler protocol message into the connection buffer
 */</comment>
<function><type><name>int</name></type>
<name>pool_putmessage</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* message code('f'), size(8), node_count, err_code */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_MSG_BUFFER_SIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<comment type="block">/* message code('s'), result */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_RES_BUFFER_SIZE</name></cpp:macro> <cpp:value>(9 + POOL_ERR_MSG_LEN)</cpp:value></cpp:define> <comment type="block">/* tag + length + err_code + err_msg */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_PID_BUFFER_SIZE</name></cpp:macro> <cpp:value>(5 + (MaxConnections - 1) * 4)</cpp:value></cpp:define>

<comment type="block">/* message code('s'), result , commandID*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_RES_BUFFER_HEDAER_SIZE</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>


<comment type="block">/*
 * Build up a message carrying file descriptors or process numbers and send them over specified
 * connection
 */</comment>
<function><type><name>int</name></type>
<name>pool_sendfds</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>  <name>r</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>  <name>err</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>error_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><name>SEND_MSG_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>controllen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* send error code */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>port</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>error_code</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>error_code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>error_code</name></name>  <operator>=</operator> <name>POOL_ERR_NONE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cmptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>controllen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>=</operator> <name>SOL_SOCKET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>=</operator> <name>SCM_RIGHTS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>=</operator> <name>controllen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator> <name>cmptr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>controllen</name></expr>;</expr_stmt>
        <comment type="block">/* the fd to pass */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>r</name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendmsg</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cmptr</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>            
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler pool_sendfds flush failed for:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler pool_sendfds flush failed for:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>SEND_MSG_BUFFER_SIZE</name> <operator>==</operator> <name>offset</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* send the rest data. */</comment>
                <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>SEND_MSG_BUFFER_SIZE</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>cmptr</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>            
                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler invalid send length:%d"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler invalid send length:%d"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><name>EOF</name></expr>;</return>
            </block_content>}</block></else></if_stmt>    
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>cmptr</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* send error message if error occured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PoolErrIsValid</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>         <name>size</name>   <init>= <expr><name>POOL_ERR_MSG_LEN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>         <name>sended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>ptr</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>port</name><operator>-&gt;</operator><name>err_msg</name></name></expr>;</expr_stmt>
        
        <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>sended</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>sended</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if>
                <else>else 
                <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                    <goto>goto <name>failure</name>;</goto>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
                <block>{<block_content>    
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if> 
                <else>else 
                <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                    <goto>goto <name>failure</name>;</goto>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
        
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    
<label><name>failure</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler pool_sendfds flush failed for:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler pool_sendfds flush failed for:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a message from the specified connection carrying file descriptors
 */</comment>
<function><type><name>int</name></type>
<name>pool_recvfds</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>r</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>err</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>error_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><name>SEND_MSG_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>err_msg</name><index>[<expr><name>POOL_ERR_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>controllen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>controllen</name> <operator>=</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvfds]cmptr == NULL, return EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Use recv buf to receive data. */</comment>
    <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <name>iov</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator> <name>cmptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <name>controllen</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * report broken connection
             */</comment>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>failure</name>;</goto>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>r</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            
            <comment type="line">//elog(LOG, "[pool_recvfds]r == 0, errmsg=%s", strerror(errno));</comment>
            <if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* if errno is not zero, it means connection pipe got error */</comment>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>SEND_MSG_BUFFER_SIZE</name> <operator>==</operator> <name>offset</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>SEND_MSG_BUFFER_SIZE</name></expr>)</condition>
            <block>{<block_content>                
                <comment type="block">/* only receive the left data, no more. */</comment>
                <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>SEND_MSG_BUFFER_SIZE</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
            </block_content>}</block></if>            
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid msg len:%d received from pooler."</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>            
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* Verify response */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'f'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected message code"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>failure</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n32</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid message size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>failure</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If connection count is 0 it means pool does not have connections
     * to  fulfill request. Otherwise number of returned connections
     * should be equal to requested count. If it not the case consider this
     * a protocol violation. (Probably connection went out of sync)
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* get error code */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* receive error message if error occured */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PoolErrIsValid</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>err_msg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>recved_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>POOL_ERR_MSG_LEN</name></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Report broken connection
                 */</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>error_no</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <goto>goto <name>receive_error</name>;</goto>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                    <expr_stmt><expr><name>error_no</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                    <goto>goto <name>receive_error</name>;</goto>
                </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>n32</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire connections"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>failure</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n32</name> <operator>!=</operator> <name>count</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected connection count"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>failure</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><call><name>CMSG_DATA</name><argument_list>(<argument><expr><call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvfds]success. fds=%p"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>failure</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PoolErrIsValid</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s, errno:%d, errmsg:%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvfds]failure, return EOF, errno:%d, errmsg:%s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>
<label><name>receive_error</name>:</label>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvfds]failure, fail to receive error message, err_msg %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error_no</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send result to specified connection
 */</comment>
<function><type><name>int</name></type>
<name>pool_sendres</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_log</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>       <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><name>SEND_RES_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name>SEND_RES_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Header */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
    <comment type="block">/* Result */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* send error code */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * send error message if error occured
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PoolErrIsValid</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>SEND_RES_BUFFER_SIZE</name> <operator>-</operator> <name>POOL_ERR_MSG_LEN</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_NONE</name></expr>;</expr_stmt>

    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>sended</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>sended</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if>
                <else>else<block type="pseudo"><block_content> 
                    <goto>goto <name>failure</name>;</goto></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sended</name> <operator>==</operator> <name>size</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>    
                <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"send size %d size %d."</literal></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt> 
            <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"send size %d size %d."</literal></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failure</name>:</label>
    <return>return <expr><name>EOF</name></expr>;</return>    
</block_content>}</block></function>

<comment type="block">/*
 * Send result and commandId to specified connection, used for 's' command.
 */</comment>
<function><type><name>int</name></type>
<name>pool_sendres_with_command_id</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>cmdID</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_log</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>       <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>n32</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>offset</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>send_buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>buf</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>sended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int32</name></type>       <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* protocol format: command + total_len + return_code + command_id + error_msg */</comment>
    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* error. */</comment>
        <expr_stmt><expr><name>send_buf_len</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* reserved space for '\0' */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* no error. */</comment>
        <expr_stmt><expr><name>send_buf_len</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendres_with_command_id ENTER, res:%d commandid:%u"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>send_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id out of memory size:%d"</literal></expr></argument>, <argument><expr><name>send_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id out of memory size:%d"</literal></expr></argument>, <argument><expr><name>send_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></else></if_stmt>        
        
        <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Header */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Total len */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>send_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    
    <comment type="block">/* Result */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <comment type="block">/* CommandID */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>send_buf_len</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>send_buf_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name>  <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>sended</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>sended</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if>
                <else>else 
                <block>{<block_content>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>need_log</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <goto>goto <name>failure</name>;</goto>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>            
            <if type="elseif">else if<condition>(<expr><operator>(</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sended</name> <operator>==</operator> <name>size</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendres_with_command_id EXIT, res:%d commandid:%u send succeed"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt> 

            
            <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">" pool_sendres_with_command_id EXIT, send data failed for %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block></else></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendres_with_command_id EXIT, res:%d commandid:%u send succeed"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
    </block_content>}</block></for>
    
    <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failure</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>need_log</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendres_with_command_id EXIT, res:%d commandid:%u send failed"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>    
</block_content>}</block></function>

<comment type="block">/*
 * Read result from specified connection.
 * Return 0 at success or EOF at error. Used for 's' command.
 */</comment>
<function><type><name>int</name></type>
<name>pool_recvres_with_commandID</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>CommandId</name> <modifier>*</modifier></type><name>cmdID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>offset</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>pooler_res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>result_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><name>SEND_RES_BUFFER_HEDAER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>recved_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>size</name> <init>= <expr><name>SEND_RES_BUFFER_HEDAER_SIZE</name></expr></init></decl>;</decl_stmt> <comment type="block">/* init the size to header size */</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* protocol format: command + total_len + return_code + command_id + error_msg */</comment>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Report broken connection
             */</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvres_with_commandID] ERROR recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"[pool_recvres_with_commandID]could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>failure</name>;</goto>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>            
            <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>result_len</name> <operator>&amp;&amp;</operator> <name>result_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvres_with_commandID]ERROR recv size %d size %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>SEND_RES_BUFFER_HEDAER_SIZE</name> <operator>==</operator> <name>recved_size</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Verify response */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"[pool_recvres_with_commandID] unexpected message code:%c"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>failure</name>;</goto>    
            </block_content>}</block></if></if_stmt>
            
            <comment type="block">/* Get result len. */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result_len</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name>     <operator>=</operator> <name>SEND_RES_BUFFER_HEDAER_SIZE</name></expr>;</expr_stmt>
            
            <comment type="block">/* Set the actual result len. */</comment>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <name>result_len</name></expr>;</expr_stmt>    
            <expr_stmt><expr><name>ptr</name>  <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>result_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ptr</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                           <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"[pool_recvres_with_commandID] out of memory, size%d"</literal></expr></argument>, <argument><expr><name>result_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SEND_RES_BUFFER_HEDAER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* result */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>pooler_res</name>    <operator>=</operator>  <name>n32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    
    <comment type="block">/* command ID */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><operator>*</operator><name>cmdID</name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <comment type="block">/* ERROR msg */</comment>
    <if_stmt><if>if <condition>(<expr><name>result_len</name> <operator>&gt;</operator> <name>offset</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pooler_res</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"MyPid %d SET Command:%s failed for %s"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvres_with_commandID] res=%d, cmdID=%u"</literal></expr></argument>, <argument><expr><name>pooler_res</name></expr></argument>, <argument><expr><operator>*</operator><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>pooler_res</name></expr>;</return>

<label><name>failure</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>cmdID</name> <operator>=</operator> <name>InvalidCommandId</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pool_recvres_with_commandID] ERROR failed res=%d, cmdID=%u"</literal></expr></argument>, <argument><expr><name>pooler_res</name></expr></argument>, <argument><expr><operator>*</operator><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Read result from specified connection.
 * Return 0 at success or EOF at error.
 */</comment>
<function><type><name>int</name></type>
<name>pool_recvres</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>		<name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>        <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>SEND_RES_BUFFER_SIZE</name> <operator>-</operator> <name>POOL_ERR_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>        <name><name>err_msg</name><index>[<expr><name>POOL_ERR_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>recved_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>SEND_RES_BUFFER_SIZE</name> <operator>-</operator> <name>POOL_ERR_MSG_LEN</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	
	<comment type="block">/* receive message header first */</comment>
	<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Report broken connection
			 */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>failure</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
				<goto>goto <name>failure</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

	</block_content>}</block></for>
	<comment type="block">/* Verify response */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected message code:%c"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n32</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>need_log</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pool_recvres return code:%d"</literal></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if has err_msg, receive error message */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PoolErrIsValid</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>err_msg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>POOL_ERR_MSG_LEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>recved_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Report broken connection
				 */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>failure</name>;</goto>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<goto>goto <name>failure</name>;</goto></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

		</block_content>}</block></for>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<return>return <expr><name>n32</name></expr>;</return>
	
<label><name>failure</name>:</label>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a message from the specified connection carrying pid numbers
 * of transactions interacting with pooler
 */</comment>
<function><type><name>int</name></type>
<name>pool_recvpids</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>pids</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>r</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>recved_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>          <name>size</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>SEND_PID_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pool_recvpids failed to alloc %d size memory."</literal></expr></argument>, <argument><expr><name>SEND_PID_BUFFER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <comment type="block">/*
     * Buffer size is upper bounded by the maximum number of connections,
     * as in the pooler each connection has one Pooler Agent.
     */</comment>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"recv %d size %d."</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Report broken connection
             */</comment>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m recved_size %d size %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>failure</name>;</goto>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
                <goto>goto <name>failure</name>;</goto>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        
    </block_content>}</block></for>

    <comment type="block">/* Verify response */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'p'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv code %c."</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected message code %c"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>failure</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n32</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"No transaction to abort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>n32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>recved_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>recved_size</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"recv %d size %d."</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>recved_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Report broken connection
             */</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive data from client: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>failure</name>;</goto>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <goto>goto <name>failure</name>;</goto></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>recved_size</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>recved_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>pids</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n32</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pids</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"recv size %d size %d n32 %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>n32</name></expr>;</return>
    
<label><name>failure</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"recvpids failure recv size %d size %d count %d."</literal></expr></argument>, <argument><expr><name>recved_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>n32</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send a message containing pid numbers to the specified connection
 */</comment>
<function><type><name>int</name></type>
<name>pool_sendpids</name><parameter_list>(<parameter><decl><type><name>PoolPort</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>i</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>err</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>buf</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type>        <name>n32</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>sended</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>r</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>ptr</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>SEND_PID_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, 
                 <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendpids malloc %d memory failed."</literal></expr></argument>, 
                 <argument><expr><name>SEND_PID_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>pids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="block">/* try to send data. */</comment>
    <expr_stmt><expr><name>sended</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>sended</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>sended</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <else>else<block type="pseudo"><block_content> 
                <goto>goto <name>failure</name>;</goto></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
            <block>{<block_content>    
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>errbuf</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"send size %d size %d count %d."</literal></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> 
            <else>else 
            <block>{<block_content>
                <goto>goto <name>failure</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>sended</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>sended</name> <operator>==</operator> <name>size</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>errbuf</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"send size %d size %d count %d."</literal></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<label><name>failure</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>errbuf</name> <operator>&amp;&amp;</operator> <name>buf_len</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_len</name><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, 
                <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendpids send data failed for %s. failure send size %d size %d count %d."</literal></expr></argument>, 
                <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool_sendpids send data failed for %s. failure send size %d size %d count %d."</literal></expr></argument>,
                <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sended</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>
</unit>
