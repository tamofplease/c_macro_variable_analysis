<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/pgxc/pool/poolmgr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * poolmgr.c
 *
 *      Connection pool manager handles connections to Datanodes
 *
 * The pooler runs as a separate process and is forked off from a
 * Coordinator postmaster. If the Coordinator needs a connection from a
 * Datanode, it asks for one from the pooler, which maintains separate
 * pools for each Datanode. A group of connections can be requested in
 * a single request, and the pooler returns a list of file descriptors
 * to use for the connections.
 *
 * Note the current implementation does not yet shrink the pool over time
 * as connections are idle.  Also, it does not queue requests; if a
 * connection is unavailable, it will simply fail. This should be implemented
 * one day, although there is a chance for deadlocks. For now, limiting
 * connections should be done between the application and Coordinator.
 * Still, this is useful to avoid having to re-establish connections to the
 * Datanodes all the time for multiple Coordinator backend sessions.
 *
 * The term "agent" here refers to a session manager, one for each backend
 * Coordinator connection to the pooler. It will contain a list of connections
 * allocated to a session, at most one per Datanode.
 *
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 * IDENTIFICATION
 *      $$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/poolmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/username.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/locator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/nodemgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/poolutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../interfaces/libpq/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../interfaces/libpq/libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>        <comment type="block">/* For Unix_socket_directories */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* the mini use conut of a connection */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>MINI_USE_COUNT</name></cpp:macro>    <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/* Configuration options */</comment>
<decl_stmt><decl><type><name>int</name></type>            <name>InitPoolSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>MinPoolSize</name>  <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>MaxPoolSize</name>  <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>MinFreeSize</name>  <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>            <name>PoolerPort</name>             <init>= <expr><literal type="number">6667</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolConnKeepAlive</name>      <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolMaintenanceTimeout</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolSizeCheckGap</name>       <init>= <expr><literal type="number">120</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* max check memory size gap, in seconds */</comment>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolConnMaxLifetime</name>    <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* max lifetime of a pooled connection, in seconds */</comment>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolMaxMemoryLimit</name>     <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolConnectTimeOut</name>     <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>            <name>PoolScaleFactor</name>        <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>         <name>PoolDNSetTimeout</name>       <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>         <name>PoolCheckSlotTimeout</name>   <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Pooler check slot. One slot can only in nodepool or agent at one time. */</comment>
<decl_stmt><decl><type><name>int</name></type>         <name>PoolPrintStatTimeout</name>   <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
<decl_stmt><decl><type><name>bool</name></type>        <name>PersistentConnections</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>g_PoolerWarmBufferInfo</name>  <init>= <expr><literal type="string">"postgres:postgres"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>g_unpooled_database</name>     <init>= <expr><literal type="string">"template1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>g_unpooled_user</name>         <init>= <expr><literal type="string">"mls_admin"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type>         <name>PoolConnectDebugPrint</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Pooler connect debug print */</comment>
<decl_stmt><decl><type><name>bool</name></type>         <name>PoolerStuckExit</name>         <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Pooler exit when stucked */</comment>
<decl_stmt><decl><type><name>bool</name></type>         <name>PoolSubThreadLogPrint</name>  <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Pooler sub thread log print */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>POOL_ASYN_WARM_PIPE_LEN</name></cpp:macro>      <cpp:value>32</cpp:value></cpp:define>   <comment type="block">/* length of asyn warm pipe */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>POOL_ASYN_WARN_NUM</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define>      <comment type="block">/* how many connections to warm once maintaince per node pool */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>POOL_SYN_CONNECTION_NUM</name></cpp:macro>      <cpp:value>512</cpp:value></cpp:define>   <comment type="block">/* original was 128. To avoid can't get pooled connection */</comment>     

<decl_stmt><decl><type><name>PGPipe</name>      <modifier>*</modifier></type><name>g_AsynUtilityPipeSender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* filled with connections */</comment>
<decl_stmt><decl><type><name>PGPipe</name>      <modifier>*</modifier></type><name>g_AsynUtilityPipeRcver</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* used for return warmed connections */</comment>
<decl_stmt><decl><type><name>ThreadSema</name></type>   <name>g_AsnyUtilitysem</name></decl>;</decl_stmt>                  <comment type="block">/* used for async warm thread */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>IS_ASYNC_PIPE_FULL</name><parameter_list>()</parameter_list></cpp:macro>   <cpp:value>(PipeIsFull(g_AsynUtilityPipeSender))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>MAX_FREE_CONNECTION_NUM</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>POOL_SYN_REQ_CONNECTION_NUM</name></cpp:macro>   <cpp:value>32</cpp:value></cpp:define>

<comment type="block">/*
 * Flags set by interrupt handlers for later service in the main loop.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_SIGHUP</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* used to track connection slot info */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type>    <name>g_Slot_Seqnum</name>                <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name></type>    <name>g_Connection_Acquire_Count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<typedef>typedef <type><struct>struct <name>PoolerStatistics</name>
<block>{
    <decl_stmt><decl><type><name>int32</name></type> <name>client_request_conn_total</name></decl>;</decl_stmt>            <comment type="block">/* total acquire connection num by client */</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>client_request_from_hashtab</name></decl>;</decl_stmt>            <comment type="block">/* client get all conn from hashtab */</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>client_request_from_thread</name></decl>;</decl_stmt>            <comment type="block">/* client get at least part of conn from thread */</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>acquire_conn_from_hashtab</name></decl>;</decl_stmt>    <comment type="block">/* immediate get conn from hashtab */</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>acquire_conn_from_hashtab_and_set</name></decl>;</decl_stmt> <comment type="block">/* get conn from hashtab, but need to set by sync thread */</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>acquire_conn_from_thread</name></decl>;</decl_stmt>        <comment type="block">/* can't get conn from hashtab, need to conn by sync thread */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>acquire_conn_time</name></decl>;</decl_stmt>    <comment type="block">/* time cost for all conn process by sync thread */</comment>
}</block></struct></type><name>PoolerStatistics</name>;</typedef>

<decl_stmt><decl><type><name>PoolerStatistics</name></type> <name>g_pooler_stat</name></decl>;</decl_stmt>

<comment type="block">/* global command statistics handle */</comment>
<decl_stmt><decl><type><name>PoolerCmdStatistics</name><modifier>*</modifier></type> <name>g_pooler_cmd_stat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>g_pooler_cmd</name><index>[<expr><name>POOLER_CMD_COUNT</name></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="char">'a'</literal></expr>,                    <comment type="block">/* ABORT */</comment>
    <expr><literal type="char">'b'</literal></expr>,                    <comment type="block">/* Fire transaction-block commands on given nodes */</comment>
    <expr><literal type="char">'c'</literal></expr>,                    <comment type="block">/* CONNECT */</comment>
    <expr><literal type="char">'d'</literal></expr>,                    <comment type="block">/* DISCONNECT */</comment>
    <expr><literal type="char">'f'</literal></expr>,                    <comment type="block">/* CLEAN CONNECTION */</comment>
    <expr><literal type="char">'g'</literal></expr>,                    <comment type="block">/* GET CONNECTIONS */</comment>
    <expr><literal type="char">'h'</literal></expr>,                    <comment type="block">/* Cancel SQL Command in progress on specified connections */</comment>
    <expr><literal type="char">'o'</literal></expr>,                    <comment type="block">/* Lock/unlock pooler */</comment>
    <expr><literal type="char">'p'</literal></expr>,                    <comment type="block">/* Reload connection info */</comment>
    <expr><literal type="char">'P'</literal></expr>,                    <comment type="block">/* Ping connection info */</comment>
    <expr><literal type="char">'q'</literal></expr>,                    <comment type="block">/* Check connection info consistency */</comment>
    <expr><literal type="char">'r'</literal></expr>,                    <comment type="block">/* RELEASE CONNECTIONS */</comment>
    <expr><literal type="char">'R'</literal></expr>,                    <comment type="block">/* Refresh connection info */</comment>
    <expr><literal type="char">'s'</literal></expr>,                    <comment type="block">/* Session-related COMMAND */</comment>
    <expr><literal type="char">'t'</literal></expr>,                    <comment type="block">/* Close pooler connections*/</comment>
    <expr><literal type="char">'x'</literal></expr>,                    <comment type="block">/* Get command statistics */</comment>
    <expr><literal type="char">'y'</literal></expr>,                    <comment type="block">/* Reset command statistics */</comment>
    <expr><literal type="char">'z'</literal></expr>                     <comment type="block">/* Get connection statistics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* a map used to change msgtype to id */</comment>
<decl_stmt><decl><type><name>uint8</name></type> <name><name>g_qtype2id</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Flag to tell if we are Postgres-XC pooler process */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>am_pgxc_pooler</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>COMMAND_CONNECTION_WARM</name>                   <init>= <expr><literal type="number">0</literal></expr></init></decl>, <comment type="block">/* warm connection */</comment>
    <decl><name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name>          <init>= <expr><literal type="number">1</literal></expr></init></decl>,    
    <decl><name>COMMAND_CONNECTION_NEED_CLOSE</name>               <init>= <expr><literal type="number">2</literal></expr></init></decl>, <comment type="block">/* we should close the connection */</comment>    
    <decl><name>COMMAND_CONNECTION_BUILD</name>                  <init>= <expr><literal type="number">3</literal></expr></init></decl>, <comment type="block">/* async connection build */</comment>
    <decl><name>COMMAND_CONNECTION_CLOSE</name>                  <init>= <expr><literal type="number">4</literal></expr></init></decl>, <comment type="block">/* async connection close */</comment>
    <decl><name>COMMAND_PING_NODE</name>                         <init>= <expr><literal type="number">5</literal></expr></init></decl>, <comment type="block">/* ping node */</comment>
    <decl><name>COMMAND_BUYYT</name></decl>
}</block></enum></type><name>PoolAsyncCmd</name>;</typedef>

<comment type="block">/* used for async warm a connection */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int32</name></type>              <name>cmd</name></decl>;</decl_stmt>        <comment type="block">/* PoolAsyncCmd */</comment>
    <decl_stmt><decl><type><name>int32</name></type>              <name>nodeindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>                <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabasePool</name>      <modifier>*</modifier></type><name>dbPool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>  <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>int32</name></type>              <name>size</name></decl>;</decl_stmt>       <comment type="block">/* session memory context size */</comment>
    <decl_stmt><decl><type><name>SendSetQueryStatus</name></type> <name>set_query_status</name></decl>;</decl_stmt>    <comment type="block">/* send set query status */</comment> 
    <decl_stmt><decl><type><name>NameData</name></type>           <name>nodename</name></decl>;</decl_stmt>   <comment type="block">/* used by async ping node */</comment>
    <decl_stmt><decl><type><name>NameData</name></type>           <name>nodehost</name></decl>;</decl_stmt>   <comment type="block">/* used by async ping node */</comment>
    <decl_stmt><decl><type><name>int</name></type>                   <name>nodeport</name></decl>;</decl_stmt>   <comment type="block">/* used by async ping node */</comment>
    <decl_stmt><decl><type><name>int</name></type>                <name>nodestatus</name></decl>;</decl_stmt> <comment type="block">/* used by async ping node, 0 means ok */</comment>
}</block></struct></type><name>PGXCAsyncWarmInfo</name>;</typedef>

<comment type="block">/* Concurrently connection build info */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int32</name></type>             <name>cmd</name></decl>;</decl_stmt>        <comment type="block">/* PoolAsyncCmd */</comment>
    <decl_stmt><decl><type><name>bool</name></type>              <name>bCoord</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabasePool</name>     <modifier>*</modifier></type><name>dbPool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>nodeindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>                  <name>nodeoid</name></decl>;</decl_stmt>      <comment type="block">/* Node Oid related to this pool */</comment>
    <decl_stmt><decl><type><name>char</name>                <modifier>*</modifier></type><name>connstr</name></decl>;</decl_stmt>    <comment type="block">/* palloc memory, need free */</comment>

	<decl_stmt><decl><type><name>time_t</name></type>            <name>m_version</name></decl>;</decl_stmt>  <comment type="block">/* version of node pool */</comment>
    <decl_stmt><decl><type><name>int32</name></type>             <name>size</name></decl>;</decl_stmt>        <comment type="block">/* total pool size */</comment>
    <decl_stmt><decl><type><name>int32</name></type>               <name>validSize</name></decl>;</decl_stmt>  <comment type="block">/* valid data element number */</comment>    
    <decl_stmt><decl><type><name>bool</name></type>              <name>failed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name></type>  <name><name>slot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* var length array */</comment>
}</block></struct></type> <name>PGXCPoolConnectReq</name>;</typedef>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>PoolAsyncStatus_idle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>PoolAsyncStatus_busy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,    
    <decl><name>PoolAsyncStatus_butty</name></decl>
}</block></enum></type><name>PoolAsyncStatus</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>MAX_SYNC_NETWORK_PIPE_LEN</name></cpp:macro>      <cpp:value>1024</cpp:value></cpp:define>    <comment type="block">/* length of SYNC network pipe */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>      <cpp:macro><name>MAX_SYNC_NETWORK_THREAD</name></cpp:macro>        <cpp:value>PoolScaleFactor</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct 
<block>{
    <decl_stmt><decl><type><name>PGPipe</name>     <modifier>*</modifier><modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>          <comment type="block">/* request pipe */</comment>
    <decl_stmt><decl><type><name>PGPipe</name>     <modifier>*</modifier><modifier>*</modifier></type><name>response</name></decl>;</decl_stmt>         <comment type="block">/* response pipe */</comment>
    <decl_stmt><decl><type><name>ThreadSema</name> <modifier>*</modifier></type><name>sem</name></decl>;</decl_stmt>               <comment type="block">/* response sem */</comment>
    
    <decl_stmt><decl><type><name>int32</name>      <modifier>*</modifier></type><name>nodeindex</name></decl>;</decl_stmt>        <comment type="block">/* nodeindex we are processing */</comment>
    <decl_stmt><decl><type><name>int32</name>      <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>            <comment type="block">/* worker thread status, busy or not */</comment>
    <decl_stmt><decl><type><name>pg_time_t</name>  <modifier>*</modifier></type><name>start_stamp</name></decl>;</decl_stmt>       <comment type="block">/* job start stamp */</comment>
    
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>remote_backend_pid</name></decl>;</decl_stmt>        <comment type="block">/* dn's backend pid */</comment>
    <decl_stmt><decl><type><name>Oid</name>           <modifier>*</modifier></type><name>remote_nodeoid</name></decl>;</decl_stmt>            <comment type="block">/* dn's node oid */</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier><modifier>*</modifier></type><name>remote_ip</name></decl>;</decl_stmt> <comment type="block">/* dn's ip */</comment>
    <decl_stmt><decl><type><name>int32</name>       <modifier>*</modifier></type><name>remote_port</name></decl>;</decl_stmt>            <comment type="block">/* dn's port */</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier><modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>                <comment type="block">/* you can put some note to print */</comment>
    <decl_stmt><decl><type><name>int</name>               <modifier>*</modifier></type><name>cmdtype</name></decl>;</decl_stmt>                <comment type="block">/* cmdtype current processing */</comment>
}</block></struct></type><name>PGXCPoolSyncNetWorkControl</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int32</name></type>   <name>threadIndex</name></decl>;</decl_stmt>
}</block></struct></type><name>PGXCPoolConnThreadParam</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PGXCPoolSyncNetWorkControl</name></type> <name>g_PoolConnControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PGXCPoolSyncNetWorkControl</name></type> <name>g_PoolSyncNetworkControl</name></decl>;</decl_stmt>

<comment type="block">/* Connection information cached */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>Oid</name></type>         <name>nodeoid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>port</name></decl>;</decl_stmt>
}</block></struct></type> <name>PGXCNodeConnectionInfo</name>;</typedef>

<comment type="block">/* Pooler set command desc */</comment>
<typedef>typedef <type><struct>struct <name>PoolerSetDesc</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type>   <name>tag_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>total_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>command</name></decl>;</decl_stmt>    
}</block></struct></type><name>PoolerSetDesc</name>;</typedef>

<comment type="block">/* The root memory context */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>PoolerMemoryContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Allocations of core objects: Datanode connections, upper level structures,
 * connection strings, etc.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>PoolerCoreContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Memory to store Agents
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>PoolerAgentContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Pool to all the databases (linked list) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type><name>databasePools</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* PoolAgents */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VERSION</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>uint32</name></type>  <name>m_nobject</name></decl>;</decl_stmt>   
    <decl_stmt><decl><type><name>uint64</name>  <modifier>*</modifier></type><name>m_fsm</name></decl>;</decl_stmt>      
    <decl_stmt><decl><type><name>uint32</name></type>  <name>m_fsmlen</name></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>uint32</name></type>  <name>m_version</name></decl>;</decl_stmt>
}</block></struct></type><name>BitmapMgr</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>                <name>agentCount</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>              <name>poolAgentSize</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type>           <name>mgrVersion</name>          <init>= <expr><name>INIT_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32</name>            <modifier>*</modifier></type><name>agentIndexes</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>              <name>usedAgentSize</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>BitmapMgr</name>        <modifier>*</modifier></type><name>poolAgentMgr</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PoolAgent</name>        <modifier>*</modifier><modifier>*</modifier></type><name>poolAgents</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PoolHandle</name>        <modifier>*</modifier></type><name>poolHandle</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>PGXCMapNode</name>
<block>{
    <decl_stmt><decl><type><name>Oid</name></type>            <name>nodeoid</name></decl>;</decl_stmt>    <comment type="block">/* Node Oid */</comment>
    <decl_stmt><decl><type><name>int32</name></type>       <name>nodeidx</name></decl>;</decl_stmt>    <comment type="block">/* Node index*/</comment>
    <decl_stmt><decl><type><name>char</name></type>        <name>node_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>node_name</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>PGXCMapNode</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>create_node_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>refresh_node_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>get_node_index_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>get_node_info_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_node_name_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>  <name>connection_need_pool</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* used to descibe sync task info */</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>PoolAyncCtlStaus_init</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>,    
    <decl><name>PoolAyncCtlStaus_dispatched</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>PoolAyncCtlStaus_done</name>         <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>PoolAyncCtlStaus_error</name>         <init>= <expr><literal type="number">3</literal></expr></init></decl>,
    <decl><name>PoolAyncCtlStaus_butty</name></decl>
}</block></enum></type><name>PoolAyncCtlStaus</name>;</typedef>


<comment type="block">/* status used to control parallel managment */</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>PoolResetStatus_reset</name>           <init>= <expr><literal type="number">0</literal></expr></init></decl>,    
    <decl><name>PoolResetStatus_destory</name>       <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>PoolResetStatus_error</name>           <init>= <expr><literal type="number">2</literal></expr></init></decl>,

    <decl><name>PoolLocalSetStatus_reset</name>      <init>= <expr><literal type="number">3</literal></expr></init></decl>,    
    <decl><name>PoolLocalSetStatus_destory</name>   <init>= <expr><literal type="number">4</literal></expr></init></decl>,
    <decl><name>PoolLocalSetStatus_error</name>      <init>= <expr><literal type="number">5</literal></expr></init></decl>,

    <decl><name>PoolCancelStatus_cancel</name>       <init>= <expr><literal type="number">6</literal></expr></init></decl>,
    <decl><name>PoolCancelStatus_end_query</name>   <init>= <expr><literal type="number">7</literal></expr></init></decl>,
    <decl><name>PoolCancelStatus_destory</name>      <init>= <expr><literal type="number">8</literal></expr></init></decl>,
    <decl><name>PoolCancelStatus_error</name>           <init>= <expr><literal type="number">9</literal></expr></init></decl>,
    
    <decl><name>PoolSetCommandStatus_set</name>      <init>= <expr><literal type="number">10</literal></expr></init></decl>,    
    <decl><name>PoolSetCommandStatus_destory</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
    <decl><name>PoolSetCommandStatus_error</name>      <init>= <expr><literal type="number">12</literal></expr></init></decl>,

    <decl><name>PoolConnectStaus_init</name>           <init>= <expr><literal type="number">13</literal></expr></init></decl>,    
    <decl><name>PoolConnectStaus_connected</name>      <init>= <expr><literal type="number">14</literal></expr></init></decl>,
    <decl><name>PoolConnectStaus_set_param</name>      <init>= <expr><literal type="number">15</literal></expr></init></decl>,
    <decl><name>PoolConnectStaus_done</name>             <init>= <expr><literal type="number">16</literal></expr></init></decl>,    
    <decl><name>PoolConnectStaus_destory</name>        <init>= <expr><literal type="number">17</literal></expr></init></decl>,
    <decl><name>PoolConnectStaus_error</name>             <init>= <expr><literal type="number">18</literal></expr></init></decl>,
    <decl><name>PoolSetCommandStatus_butty</name></decl>
}</block></enum></type><name>PoolStatusEnum</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>poolErrorMsg</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"No Error"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, pooler is locked"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, last request not finished yet"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, server overload"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, invalid arguments"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, out of memory when allocate memory for the conn structure"</literal></expr>,
                        <expr><literal type="string">"Fail to get connections, remote server maybe down or connection info is not correct"</literal></expr>,
                        <expr><literal type="string">"Fail to cancel query, last request not finished yet"</literal></expr>,
                        <expr><literal type="string">"Fail to cancel query, server overload"</literal></expr>,
                        <expr><literal type="string">"Fail to cancel query, fail to send cancel request to remote server"</literal></expr>,
                        <expr><literal type="string">"Number of pooler errors"</literal></expr>
                        }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name></type>             <name>cmd</name></decl>;</decl_stmt>  	      <comment type="block">/* refer to handle_agent_input command tag */</comment>
	<decl_stmt><decl><type><name>bool</name></type>              <name>bCoord</name></decl>;</decl_stmt>		  <comment type="block">/* coordinator or datanode*/</comment>
	<decl_stmt><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl>;</decl_stmt>	
	<decl_stmt><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodePool</name>      <modifier>*</modifier></type><name>nodepool</name></decl>;</decl_stmt>	  <comment type="block">/* node pool for current node */</comment>
	<decl_stmt><decl><type><name>PGXCNodePoolSlot</name>  <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>		  <comment type="block">/* connection slot , no need to free */</comment>
	<decl_stmt><decl><type><name>int32</name></type>             <name>current_status</name></decl>;</decl_stmt> <comment type="block">/* currrent connect status*/</comment>
	<decl_stmt><decl><type><name>int32</name></type>             <name>final_status</name></decl>;</decl_stmt>   <comment type="block">/* final status we are going to get to*/</comment>
	<decl_stmt><decl><type><name>int32</name></type>             <name>nodeindex</name></decl>;</decl_stmt>      <comment type="block">/* node index of the remote peer */</comment>
	<decl_stmt><decl><type><name>bool</name></type>			  <name>needfree</name></decl>;</decl_stmt>       <comment type="block">/* whether need to free taskControl, last thread set the flag */</comment>

	<decl_stmt><decl><type><name>int32</name></type>			  <name>req_seq</name></decl>;</decl_stmt>		  <comment type="block">/* req sequence number */</comment>
	<decl_stmt><decl><type><name>int32</name></type>             <name>pid</name></decl>;</decl_stmt>			  <comment type="block">/* pid that acquires the connection */</comment>
	<decl_stmt><decl><type><name>bool</name></type>              <name>needConnect</name></decl>;</decl_stmt>	  <comment type="block">/* check whether we need to build a new connection , we acquire new connections */</comment>	
	<decl_stmt><decl><type><name>bool</name></type>			  <name>error_flag</name></decl>;</decl_stmt>	  <comment type="block">/* set when error */</comment>
	<decl_stmt><decl><type><name>SendSetQueryStatus</name></type> <name>setquery_status</name></decl>;</decl_stmt>    <comment type="block">/* send set query status */</comment> 
	<decl_stmt><decl><type><name><name>struct</name>  <name>timeval</name></name></type>   <name>start_time</name></decl>;</decl_stmt>		<comment type="block">/* when acquire conn by sync thread, the time begin request */</comment>
	<decl_stmt><decl><type><name><name>struct</name>  <name>timeval</name></name></type>   <name>end_time</name></decl>;</decl_stmt>			<comment type="block">/* when acquire conn by sync thread, the time finish request */</comment>
	<decl_stmt><decl><type><name>char</name></type>              <name><name>errmsg</name><index>[<expr><name>POOLER_ERROR_MSG_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>         <name>cmd_start_time</name></decl>;</decl_stmt>   <comment type="block">/* command start time, including the processing time in the main process */</comment>
    <decl_stmt><decl><type><name>pg_time_t</name></type>         <name>cmd_end_time</name></decl>;</decl_stmt>     <comment type="block">/* command end time */</comment>
}</block></struct></type><name>PGXCPoolAsyncReq</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_subthread_write_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>__attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>5<operator>,</operator> 6</function_decl>)))<empty_stmt>;</empty_stmt>

<comment type="block">/* Use this macro when a sub thread needs to print logs */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pooler_thread_logger</name><parameter_list>(<parameter><type><name>elevel</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        pooler_subthread_write_log(elevel, __LINE__, __FILE__, PG_FUNCNAME_MACRO, __VA_ARGS__); \
    } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMATTED_TS_LEN</name></cpp:macro>                <cpp:value>(128)</cpp:value></cpp:define>                                          <comment type="block">/* format timestamp buf length */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOLER_WRITE_LOG_ONCE_LIMIT</name></cpp:macro>     <cpp:value>(5)</cpp:value></cpp:define>                                            <comment type="block">/* number of logs written at a time */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THREAD_LOG_PIPE_LEN</name></cpp:macro>         <cpp:value>(2 * 1024)</cpp:value></cpp:define>                                     <comment type="block">/* length of thread log pipe */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOG_BUF_LEN</name></cpp:macro>             <cpp:value>(1024)</cpp:value></cpp:define>                                         <comment type="block">/* length of thread log length */</comment>
<decl_stmt><decl><type><name>PGPipe</name>  <modifier>*</modifier></type><name>g_ThreadLogQueue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<decl_stmt><decl><type><name>bool</name></type> <name>g_allow_distri_query_on_standby_node</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RebuildAgentIndex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>PGXCASyncTaskCtl</name><modifier>*</modifier></type> <name>create_task_control</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>,    <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>fd_result</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>pid_result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_connection_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>PGXCNodePool</name>      <modifier>*</modifier></type><name>nodepool</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>status</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>finStatus</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>reqseq</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_reset_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                            <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                            <parameter><decl><type><name>int32</name></type>              <name>status</name></decl></parameter>,    <comment type="block">/* PoolResetStatus */</comment>
                                            <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_local_set_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_cancle_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type>                <name>signal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_set_command_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>finish_task_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>  <name>check_is_task_done</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>set_task_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>get_task_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>add_task_result</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>get_task_result</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>set_command_total</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>number</name></decl></parameter>)</parameter_list>;</function_decl>    
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>set_command_increase_succeed</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>  <name>get_command_success_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>acquire_command_increase_succeed</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>  <name>get_acquire_success_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>set_task_max_command_id</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>CommandId</name></type> <name>get_task_max_commandID</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>set_task_error_msg</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>  <name>pooler_is_async_task_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>  <name>pooler_wait_for_async_task_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>  <name>pooler_async_task_start</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeindex</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>cmdtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>     <name>pooler_async_task_done</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>pooler_async_task_pick_thread</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeindex</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name>     <modifier>*</modifier></type><name>g_nodemap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* used to map nodeOid to nodeindex */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>is_pool_locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>server_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int32</name></type> <name>is_pool_release</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>node_info_check</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_init</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_destroy</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_handle_input</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>agent_session_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>,                                    
                                  <parameter><decl><type><name>Oid</name>  <modifier>*</modifier></type><name>oids</name></decl></parameter>,
                                  <parameter><decl><type><name>int32</name></type> <name>oid_num</name></decl></parameter>,
                                  <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>agent_set_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>,                                    
                              <parameter><decl><type><name>Oid</name>  <modifier>*</modifier></type><name>oids</name></decl></parameter>,
                              <parameter><decl><type><name>int32</name></type> <name>oid_num</name></decl></parameter>,
                              <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>agent_temp_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PoolerSetDesc</name> <modifier>*</modifier></type><name>agent_compress_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>, <parameter><decl><type><name>PoolerSetDesc</name> <modifier>*</modifier></type><name>set_desc</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_free</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_handle_set_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>, <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type><name>create_database_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>insert_database_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reload_database_pools</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type><name>find_database_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>agent_acquire_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>raise_error</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>fd_result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>pid_result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>send_local_commands</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cancel_query_on_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>acquire_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier><modifier>*</modifier></type><name>pool</name></decl></parameter>,<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_release_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_destroy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>agent_return_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>agent_reset_session</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>release_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
                               <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_destroy</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_slot_ex</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>destroy_slot</name><parameter_list>(<parameter><type><name>nodeidx</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>destroy_slot_ex(nodeidx, node, slot, __FILE__, __LINE__)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>close_slot</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>PGXCNodePool</name> <modifier>*</modifier></type><name>grow_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_node_pool</name><parameter_list>(<parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>node_pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_node_pool_free_slots</name><parameter_list>(<parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>node_pool</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>preconnect_and_warm</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>connect_pools</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>check_pooler_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>do_check_pooler_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>check_single_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>print_pooler_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name>  <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>check_duplicate_allocated_conn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>check_agent_duplicate_conn</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>agent_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>node_index</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>check_hashtab_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>hashtab_check_single_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>HTAB</name>  <modifier>*</modifier></type><name>nodeHtb</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>outerPool</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reset_pooler_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_pooler_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>record_task_message</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name><modifier>*</modifier></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>record_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>end_time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PoolerLoop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>clean_connection</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node_discard</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>abort_pids</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>build_node_conn_str</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Signal handlers */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_die</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pools_maintenance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>shrink_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>pooler_pools_warm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_warm_database_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name>   <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_sync_connections_to_nodepool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_handle_sync_response_queue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_warm_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>nodePool</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_query_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name>  <modifier>*</modifier></type><name>pooler_async_utility_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>  <modifier>*</modifier></type><name>pooler_async_connection_management_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>  <modifier>*</modifier></type><name>pooler_sync_remote_operator_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>   <name>pooler_async_build_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>pool_version</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, 
                                            <parameter><decl><type><name>int32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connStr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BitmapMgr</name> <modifier>*</modifier></type><name>BmpMgrCreate</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>objnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>        <name>BmpMgrAlloc</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>BmpMgrFree</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type>       <name>BmpMgrGetVersion</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>           <name>BmpMgrGetUsed</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>indexes</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>indexlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>pooler_sig_hup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>       <name>BmpMgrHasIndexAndClear</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>agent_increase_ref_count</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>agent_decrease_ref_count</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>bool</name></type>  <name>agent_can_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>agent_pend_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>agent_set_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>bool</name></type>  <name>agent_pending</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>agent_handle_pending_agent</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>bool</name></type>  <name>agent_destory_task_control</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>void</name></type>  <name>pooler_init_sync_control</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>int32</name></type> <name>pooler_get_slot_seq_num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier>  <name>int32</name></type> <name>pooler_get_connection_acquire_num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>record_slot_info</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>  <name>is_slot_avail</name><parameter_list>(<parameter><decl><type><name>PGXCPoolAsyncReq</name><modifier>*</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TryPingUnhealthyNode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_abort</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_command_to_nodes</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_connect</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_clean_connection</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_get_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_query_cancel</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_session_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>refresh_database_pools</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_ping_node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>match_databasepool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>database</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>handle_close_pooled_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ConnectPoolManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reset_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>costtime</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_get_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_get_conn_statistics</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IncreaseSlotRefCount</name><parameter_list>(<parameter><type><name>slot</name></type></parameter>,<parameter><type><name>filename</name></type></parameter>,<parameter><type><name>linenumber</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do\
{\
    if (slot)\
    {\
        (slot-&gt;refcount)++;\
        if (slot-&gt;refcount &gt; 1)\
        {\
            elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid slot reference count:%d", filename, linenumber, slot-&gt;refcount);\
        }\
        slot-&gt;file     =    filename;\
        slot-&gt;lineno =  linenumber;\
    }\
}while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DecreaseSlotRefCount</name><parameter_list>(<parameter><type><name>slot</name></type></parameter>,<parameter><type><name>filename</name></type></parameter>,<parameter><type><name>linenumber</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do\
{\
    if (slot)\
    {\
        (slot-&gt;refcount)--;\
        if (slot-&gt;refcount &lt; 0)\
        {\
            elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid slot reference count:%d", filename, linenumber, slot-&gt;refcount);\
        }\
        slot-&gt;file     = filename;\
        slot-&gt;lineno = linenumber;\
    }\
}while(0)</cpp:value></cpp:define>

    

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DecreasePoolerSize</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do\
{\
    (nodepool-&gt;size)--;\
    if (nodepool-&gt;size &lt; 0)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (PoolConnectDebugPrint)\
    {\
        elog(LOG, POOL_MGR_PREFIX"[%s:%d] decrease node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
}while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DecreasePoolerSizeAsync</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>, <parameter><type><name>seqnum</name></type></parameter>, <parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do\
    {\
        (nodepool-&gt;size)--;\
        if (nodepool-&gt;size &lt; 0)\
        {\
            elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, seq_num:%d", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, seqnum);\
        }\
        if (PoolConnectDebugPrint)\
        {\
            elog(LOG, POOL_MGR_PREFIX"[%s:%d] decrease node pool size: %d, freesize:%d, nwarming:%d, node:%u, seq_num:%d", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, seqnum);\
        }\
        if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
        {\
            elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, seq_num:%d", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, seqnum);\
        }\
    }while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IncreasePoolerSize</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do\
    {\
        (nodepool-&gt;size)++;\
        if (PoolConnectDebugPrint)\
        {\
            elog(LOG, POOL_MGR_PREFIX"[%s:%d] increase node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
        }\
        if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
        {\
            elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
        }\
    }while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ValidatePoolerSize</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do\
{\
    if (nodepool-&gt;size &lt; 0)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
}while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DecreasePoolerFreesize</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do\
{\
    (nodepool-&gt;freeSize)--;\
    if (nodepool-&gt;freeSize &lt; 0)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (PoolConnectDebugPrint)\
    {\
        elog(LOG, POOL_MGR_PREFIX"[%s:%d] decrease freesize node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
}while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IncreasePoolerFreesize</name><parameter_list>(<parameter><type><name>nodepool</name></type></parameter>,<parameter><type><name>file</name></type></parameter>,<parameter><type><name>lineno</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do\
{\
    (nodepool-&gt;freeSize)++;\
    if (PoolConnectDebugPrint)\
    {\
        elog(LOG, POOL_MGR_PREFIX"[%s:%d] increase freesize node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
    if (nodepool-&gt;freeSize &gt; nodepool-&gt;size &amp;&amp; PoolConnectDebugPrint)\
    {\
        elog(PANIC, POOL_MGR_PREFIX"[%s:%d] invalid node pool size: %d, freesize:%d, nwarming:%d, node:%u, connstr:%s", file, lineno, nodepool-&gt;size, nodepool-&gt;freeSize, nodepool-&gt;nwarming, nodepool-&gt;nodeoid, nodepool-&gt;connstr);\
    }\
}while(0)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>PGXCPoolerProcessIam</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>am_pgxc_pooler</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>IsPGXCPoolerProcess</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>am_pgxc_pooler</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize internal structures
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler process is started: %d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set up memory contexts for the pooler objects
     */</comment>
    <expr_stmt><expr><name>PoolerMemoryContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
                                                <argument><expr><literal type="string">"PoolerMemoryContext"</literal></expr></argument>,
                                                <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                                                <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                                                <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>PoolerCoreContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>,
                                              <argument><expr><literal type="string">"PoolerCoreContext"</literal></expr></argument>,
                                              <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                                              <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                                              <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>PoolerAgentContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>,
                                               <argument><expr><literal type="string">"PoolerAgentContext"</literal></expr></argument>,
                                               <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                                               <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                                               <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ForgetLockFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/*
     * If possible, make this process a group leader, so that the postmaster
     * can signal any child processes too.    (pool manager probably never has any
     * child processes, but for consistency we make all postmaster child
     * processes do this.)
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SETSID</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>setsid</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"setsid() failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="line">//elog(FATAL, POOL_MGR_PREFIX"setsid() failed: %m");</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/*
     * Properly accept or ignore signals the postmaster might send us
     */</comment>
    <expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>,  <argument><expr><name>pooler_die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>pooler_die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>pooler_quickdie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>,  <argument><expr><name>pooler_sig_hup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO other signal handlers */</comment>

    <comment type="block">/* We allow SIGQUIT (quickdie) at all times */</comment>
    <expr_stmt><expr><call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BlockSig</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Unblock signals (they were blocked when the postmaster forked us)
     */</comment>
    <expr_stmt><expr><call><name>PG_SETMASK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnBlockSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate pooler structures in the Pooler context */</comment>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>poolAgentSize</name> <operator>=</operator> <call><name>ALIGN_UP</name><argument_list>(<argument><expr><name>MaxConnections</name></expr></argument>, <argument><expr><name>BITS_IN_LONGLONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>poolAgents</name> <operator>=</operator> <operator>(</operator><name>PoolAgent</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>poolAgentSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PoolAgent</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>poolAgents</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>poolAgentMgr</name> <operator>=</operator> <call><name>BmpMgrCreate</name><argument_list>(<argument><expr><name>poolAgentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>poolAgentMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agentIndexes</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>poolAgentSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>agentIndexes</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>MaxConnections</name> <operator>&gt;</operator> <name>MaxPoolSize</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"max_pool_size can't be smaller than max_connections"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PoolerLoop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Check connection info consistency with system catalogs
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>node_info_check</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DatabasePool</name>   <modifier>*</modifier></type><name>dbPool</name> <init>= <expr><name>databasePools</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>checked</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>res</name> <init>= <expr><name>POOL_CHECK_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>coOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>dnOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numDn</name></decl>;</decl_stmt>

    <comment type="block">/*
     * First check if agent's node information matches to current content of the
     * shared memory table.
     */</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>!=</operator> <name>numCo</name> <operator>||</operator>
            <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>!=</operator> <name>numDn</name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name></expr></argument>, <argument><expr><name>coOids</name></expr></argument>, <argument><expr><name>numCo</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name></expr></argument>, <argument><expr><name>dnOids</name></expr></argument>, <argument><expr><name>numDn</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>POOL_CHECK_FAILED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Release palloc'ed memory */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Iterate over all dbnode pools and check if connection strings
     * are matching node definitions.
     */</comment>
    <while>while <condition>(<expr><name>res</name> <operator>==</operator> <name>POOL_CHECK_SUCCESS</name> <operator>&amp;&amp;</operator> <name>dbPool</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>connstr_chk</name></decl>;</decl_stmt>

            <comment type="block">/* No need to check same Datanode twice */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>list_member_oid</name><argument_list>(<argument><expr><name>checked</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>checked</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>connstr_chk</name> <operator>=</operator> <call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>connstr_chk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Problem of constructing connection string */</comment>
                <expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>POOL_CHECK_FAILED</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* return error if there is difference */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>POOL_CHECK_FAILED</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>dbPool</name> <operator>=</operator> <name><name>dbPool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy internal structures
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerDestroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolerMemoryContext</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>PoolerMemoryContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Get handle to pool manager
 * Invoked from Postmaster's main loop just before forking off new session
 * Returned PoolHandle structure will be inherited by session process
 */</comment>
<function><type><name>PoolHandle</name> <modifier>*</modifier></type>
<name>GetPoolManagerHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PoolHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>fdsock</name></decl>;</decl_stmt>

    <comment type="block">/* Connect to the pooler */</comment>
    <expr_stmt><expr><name>fdsock</name> <operator>=</operator> <call><name>pool_connect</name><argument_list>(<argument><expr><name>PoolerPort</name></expr></argument>, <argument><expr><name>Unix_socket_directories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fdsock</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"failed to connect to pool manager: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Allocate handle */</comment>
    <comment type="block">/*
     * XXX we may change malloc here to palloc but first ensure
     * the CurrentMemoryContext is properly set.
     * The handle allocated just before new session is forked off and
     * inherited by the session process. It should remain valid for all
     * the session lifetime.
     */</comment>
    <expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>PoolHandle</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PoolHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>fdsock</name></name> <operator>=</operator> <name>fdsock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>RecvLength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>RecvPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>SendPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Close handle
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerCloseHandle</name><parameter_list>(<parameter><decl><type><name>PoolHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>Socket</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Create agent
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>new_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>         <name>agentindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolAgent</name>  <modifier>*</modifier></type><name>agent</name></decl>;</decl_stmt>    

    <expr_stmt><expr><name>agentindex</name> <operator>=</operator> <call><name>BmpMgrAlloc</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>agentindex</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of agent index"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerAgentContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Allocate agent */</comment>
    <expr_stmt><expr><name>agent</name> <operator>=</operator> <operator>(</operator><name>PoolAgent</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PoolAgent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>agent</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BmpMgrFree</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>, <argument><expr><name>agentindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>fdsock</name></name> <operator>=</operator> <name>new_fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>RecvLength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>RecvPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>SendPointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
                                        <argument><expr><literal type="string">"Agent"</literal></expr></argument>,
                                        <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                                        <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                                        <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>is_temp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>agentindex</name></name> <operator>=</operator> <name>agentindex</name></expr>;</expr_stmt>

    <comment type="block">/* Append new agent to the list */</comment>    
    <expr_stmt><expr><name><name>poolAgents</name><index>[<expr><name>agentindex</name></expr>]</index></name> <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>agentCount</name><operator>++</operator></expr>;</expr_stmt>    
    
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_create end, agentCount:%d, fd:%d"</literal></expr></argument>, <argument><expr><name>agentCount</name></expr></argument>, <argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * session_options
 * Returns the pgoptions string generated using a particular
 * list of parameters that are required to be propagated to Datanodes.
 * These parameters then become default values for the pooler sessions.
 * For e.g., a psql user sets PGDATESTYLE. This value should be set
 * as the default connection parameter in the pooler session that is
 * connected to the Datanodes. There are various parameters which need to
 * be analysed individually to determine whether these should be set on
 * Datanodes.
 *
 * Note: These parameters values are the default values of the particular
 * Coordinator backend session, and not the new values set by SET command.
 *
 */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>session_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                 <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name><name>pgoptions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"DateStyle"</literal></expr>, <expr><literal type="string">"timezone"</literal></expr>, <expr><literal type="string">"geqo"</literal></expr>, <expr><literal type="string">"intervalstyle"</literal></expr>, <expr><literal type="string">"lc_monetary"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>     <name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>value_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>        <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>        <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">" -c %s="</literal></expr></argument>, <argument><expr><name><name>pgoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>GetConfigOptionResetString</name><argument_list>(<argument><expr><name><name>pgoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* lc_monetary does not accept lower case values */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pgoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lc_monetary"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_list</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parse session options failed."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>value_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>lnext</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block></for>

    <return>return <expr><name><name>options</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Associate session with specified database and respective connection pool
 * Invoked from Session process
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerConnect</name><parameter_list>(<parameter><decl><type><name>PoolHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>,
                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'c'</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Save the handle */</comment>
    <expr_stmt><expr><name>poolHandle</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* PID number */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of Database string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send database name followed by \0 terminator */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of user name string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send user name followed by \0 terminator */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of pgoptions string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send pgoptions followed by \0 terminator */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block">/*
 * Reconnect to pool manager
 * It simply does a disconnection and a reconnection.
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerReconnect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PoolManagerDisconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
	<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PoolManagerSetCommand</name><parameter_list>(<parameter><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>connections</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>, 
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>oid_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CommandId</name></type> <name>cmdID</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'s'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerSetCommand]recv command_type=%d, count=%d set_command=%s"</literal></expr></argument>, <argument><expr><name>command_type</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>set_command</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* validate set command format */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>set_command</name></expr>;</expr_stmt>
        <while>while <condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>sep</name><operator>++</operator></expr>;</expr_stmt>
                <comment type="block">/* skip tab and space */</comment>
                <while>while <condition>(<expr><operator>*</operator><name>sep</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name> <argument_list>(<argument><expr><operator>*</operator><name>sep</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>sep</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sep</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* skip set command */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sep</name></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>                    
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                        <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sep</name></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>                    
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="block">/* skip select */</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name><name>sep</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>sep</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sep</name></expr>)</condition>
                            <block>{<block_content>
                                <break>break;</break>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>                    
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>    
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"ERROR SET query, set can not be followed by other query %s"</literal></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>poolHandle</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>poolHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If SET LOCAL is in use, flag current transaction as using
         * transaction-block related parameters with pooler agent.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>==</operator> <name>POOL_CMD_LOCAL_SET</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>SetCurrentLocalParamStatus</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Message type */</comment>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* total_Len = msg_len(4)+ oid_count(4)  + oid_length(oid_count * 4) + set_command */</comment>
        <if_stmt><if>if <condition>(<expr><name>POOL_SET_COMMAND_ALL</name> <operator>==</operator> <name>count</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>oid_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>oid_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        
        <comment type="block">/* Message length */</comment>
        <if_stmt><if>if <condition>(<expr><name>set_command</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>n32</name> <operator>=</operator>  <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>oid_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*  length + oid_length + type + string_length + '\0' = 4 + 4 + 4 + 1*/</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">12</literal> <operator>+</operator> <name>oid_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/*  length + oid_length+ type + string_length(0) = 4 + 4 + 4*/</comment>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* msg_len */</comment>

        <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* oid_count */</comment>

        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>POOL_SET_COMMAND_ALL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <name>POOL_SET_COMMAND_NONE</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>            
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"PoolManagerSetCommand send %s to node %s, pid:%d"</literal></expr></argument>, <argument><expr><name>set_command</name></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nodename</name></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>backend_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><literal type="char">'E'</literal> <operator>==</operator> <name><name>connections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>transaction_status</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>            
                <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* oids */</comment>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* LOCAL or SESSION parameter ? */</comment>
        <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>set_command</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Length of SET command string */</comment>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Send command string followed by \0 terminator */</comment>
            <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Send empty command */</comment>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Get result */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_recvres_with_commandID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdID</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerSetCommand] receive reponse of set command to pooler: %s, command_type=%d, res=%d, cmdID=%u"</literal></expr></argument>,
                    <argument><expr><name>set_command</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cmdID</name> <operator>!=</operator> <name>InvalidCommandId</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>cmdID</name> <operator>&gt;</operator> <call><name>GetReceivedCommandId</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>SetReceivedCommandId</name><argument_list>(<argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerSetCommand] set_local_command_id pooler: %s, command_type=%d, res=%d, cmdID=%u"</literal></expr></argument>,
                            <argument><expr><name>set_command</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>cmdID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerSetCommand] poolhandle is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send commands to alter the behavior of current transaction and update begin sent status
 */</comment>

<function><type><name>int</name></type>
<name>PoolManagerSendLocalCommand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dn_count</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dn_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co_count</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>co_list</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>n32</name></decl>;</decl_stmt>
    <comment type="block">/*
     * Buffer contains the list of both Coordinator and Datanodes, as well
     * as the number of connections
     */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>         <name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>dn_count</name> <operator>+</operator> <name>co_count</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dn_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>co_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dn_count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dn_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>co_count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>co_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Insert the list of Datanodes in buffer */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>dn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_count</name></expr>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>dn_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Insert the list of Coordinators in buffer */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>co_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>dn_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>

    <comment type="block">/* Not necessary to send to pooler a request if there is no Coordinator */</comment>
    <if_stmt><if>if <condition>(<expr><name>co_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dn_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <name>co_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition><incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>co_list</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>dn_count</name> <operator>+</operator> <name>co_count</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get result */</comment>
	<return>return <expr><call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Lock/unlock pool manager
 * During locking, the only operations not permitted are abort, connection and
 * connection obtention.
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerLock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'o'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>msglen</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Lock information */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>is_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get pooler command statistics
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerGetCmdStatistics</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>qtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>qtype</name> <operator>=</operator> <call><name>pool_getbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>qtype</name> <operator>!=</operator> <name>msgtype</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get command statistics error, qtype:%d"</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get all command statistics messages */</comment>
    <expr_stmt><expr><call><name>pool_getbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * reset command statistics
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerResetCmdStatistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'y'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get pooler connections statistics
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerGetConnStatistics</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>qtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'z'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>qtype</name> <operator>=</operator> <call><name>pool_getbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>qtype</name> <operator>!=</operator> <name>msgtype</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get conn statistics error, qtype:%d"</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get all the messages left */</comment>
    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Init PoolAgent
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_init</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <comment type="block">/* disconnect if we are still connected */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>agent_release_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get needed info and allocate memory */</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* find database */</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>find_database_pool</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create if not found */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>create_database_pool</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>query_count</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>destory_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>breconnecting</name></name>   <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy PoolAgent
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_destroy</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>   <name>bsync</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>  <name>agentindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>  <name>fd</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>agentindex</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>agentindex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fd</name>         <operator>=</operator> <call><name>Socket</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_destroy close fd:%d, pid:%d, num_dn_connections:%d, num_coord_connections:%d, "</literal>
                                <literal type="string">"session_params:%s, local_params:%s, is_temp:%d"</literal></expr></argument>, 
            <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, 
            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr></argument>,
            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>is_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* check whether we can destory the agent */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>agent_can_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Discard connections if any remaining */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Agent is being destroyed, so reset session parameters
             * before putting back connections to pool.
             */</comment>
            <comment type="line">//bsync = agent_reset_session(agent);</comment>
            
            <comment type="block">/*
             * Release them all.
             * Force disconnection if there are temporary objects on agent.
             */</comment>
            
            <if_stmt><if>if <condition>(<expr><name>bsync</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>agent_release_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>                    
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* if async, we leave the following resource for the async thread */</comment>
         <if_stmt><if>if <condition>(<expr><name>bsync</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>agent_pend_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Destory shadow */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>BmpMgrHasIndexAndClear</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>, <argument><expr><name>agentindex</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>agentCount</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>poolAgents</name><index>[<expr><name>agentindex</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_destroy end, agentCount:%d"</literal></expr></argument>, <argument><expr><name>agentCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_pend_agent</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>   <name>bsync</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_pend_agent enter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* check whether we can destory the agent */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>agent_can_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Discard connections if any remaining */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Agent is being destroyed, so reset session parameters
             * before putting back connections to pool.
             */</comment>
            <expr_stmt><expr><name>bsync</name> <operator>=</operator> <call><name>agent_reset_session</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/*
             * Release them all.
             * Force disconnection if there are temporary objects on agent.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>bsync</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>agent_release_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>                    
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* if async, we leave the following resource for the async thread */</comment>
         <if_stmt><if>if <condition>(<expr><name>bsync</name></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>agent_set_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>agent_destory_task_control</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_destory_task_control last time job is done!!pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_destory_task_control last time job is not done yet!!pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>done</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Release handle to pool manager
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerDisconnect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>poolHandle</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>poolHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PoolManagerCloseHandle</name><argument_list>(<argument><expr><name>poolHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>poolHandle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Get pooled connections
 */</comment>
<function><type><name>int</name> <modifier>*</modifier></type>
<name>PoolManagerGetConnections</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>raise_error</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>pids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>nodelist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>totlen</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>totsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>totlen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* sizeof nodes list + raise_error flag */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name><name>nodes</name><index>[<expr><name>totlen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>pool_recvpids_num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>pool_recvfds_ret</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>         <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<comment type="block">/*
	 * if it is the standby node of the main plane, the distributed query will be connected to
	 * the main data node, and the standby cn may generate the same global xid as the main cn,
	 * so disable the distributed query of the standby node on the main plane
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>g_allow_distri_query_on_standby_node</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>IS_PGXC_MAINCLUSTER_SLAVENODE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't do distributed query because it is the main plane standby node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/*
     * Prepare end send message to pool manager.
     * First with Datanode list.
     * This list can be NULL for a query that does not need
     * Datanode Connections (Sequence DDLs)
     */</comment>
    <expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Then with Coordinator list (can be nul) */</comment>
    <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Receive response */</comment>
    <expr_stmt><expr><name>fds</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fds</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>totsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nodes</name></expr></argument>, <argument><expr><name>totsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><index>[<expr><name>totsize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>raise_error</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>totsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"backend required %d connections, cn_count:%d, dn_count:%d pooler_fd %d, MyProcPid:%d"</literal></expr></argument>, 
                                <argument><expr><name>totlen</name></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>fdsock</name></name></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pool_recvfds_ret</name> <operator>=</operator> <call><name>pool_recvfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pool_recvfds_ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerGetConnections]pool_recvfds_ret=%d, failed to pool_recvfds. return NULL."</literal></expr></argument>, <argument><expr><name>pool_recvfds_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Disconnect off pooler. */</comment>
        <expr_stmt><expr><call><name>PoolManagerDisconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pool_recvpids_num</name> <operator>=</operator> <call><name>pool_recvpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pool_recvpids_num</name> <operator>!=</operator> <name>totlen</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>*</operator><name>pids</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>*</operator><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>pids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Disconnect off pooler. */</comment>
        <expr_stmt><expr><call><name>PoolManagerDisconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerGetConnections]pool_recvpids_num=%d, totlen=%d. failed to pool_recvpids. return NULL."</literal></expr></argument>, <argument><expr><name>pool_recvpids_num</name></expr></argument>, <argument><expr><name>totlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pool_recvpids_num</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[PoolManagerGetConnections] PoolManagerGetConnections cnt:%d Proc:%d get conns pid:%d"</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>pids</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fds</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Abort active transactions using pooler.
 * Take a lock forbidding access to Pooler for new transactions.
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerAbortTransactions</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>proc_pids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>num_proc_ids</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>n32</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name>msgtype</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>dblen</name> <init>= <expr><ternary><condition><expr><name>dbname</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>userlen</name> <init>= <expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>msglen</name> <operator>=</operator> <name>dblen</name> <operator>+</operator> <name>userlen</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of Database string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send database name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Length of Username string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send user name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>username</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Then Get back Pids from Pooler */</comment>
    <expr_stmt><expr><name>num_proc_ids</name> <operator>=</operator> <call><name>pool_recvpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>proc_pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>num_proc_ids</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Clean up Pooled connections
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerCleanConnection</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>totlen</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name><name>nodes</name><index>[<expr><name>totlen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>        <modifier>*</modifier></type><name>nodelist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>, <decl><type ref="prev"/><name>n32</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name>msgtype</name> <init>= <expr><literal type="char">'f'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>userlen</name> <init>= <expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>dblen</name> <init>= <expr><ternary><condition><expr><name>dbname</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Then with Coordinator list (can be nul) */</comment>
    <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>msglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>totlen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>dblen</name> <operator>+</operator> <name>userlen</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send list of nodes */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>totlen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of Database string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send database name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Length of Username string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send user name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>username</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Receive result message */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CLEAN_CONNECTION_COMPLETED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Clean connections not completed. HINT: cannot drop the currently open database"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Check connection information consistency cached in pooler with catalog information
 */</comment>
<function><type><name>bool</name></type>
<name>PoolManagerCheckConnectionInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <comment type="block">/*
     * New connection may be established to clean connections to
     * specified nodes and databases.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
	<expr_stmt><expr><call><name>PgxcNodeListAndCountWrapTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>POOL_CHECK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Reload connection data in pooler and drop all the existing connections of pooler
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerReloadConnectionInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>poolHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PgxcNodeListAndCountWrapTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get systime time, ms
 */</comment>
<function><type><specifier>static</specifier> <name>pg_time_t</name></type>
<name>get_system_time</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeb</name></name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ftime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1000</literal> <operator>*</operator> <name><name>t</name><operator>.</operator><name>time</name></name> <operator>+</operator> <name><name>t</name><operator>.</operator><name>millitm</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Handle messages to agent
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_handle_input</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>qtype</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qtype</name> <operator>=</operator> <call><name>pool_getbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * We can have multiple messages, so handle them all
     */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>res</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>=</operator> <call><name>get_system_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * During a pool cleaning, Abort, Connect and Get Connections messages
         * are not allowed on pooler side.
         * It avoids to have new backends taking connections
         * while remaining transactions are aborted during FORCE and then
         * Pools are being shrinked.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>is_pool_locked</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>qtype</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name>qtype</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>qtype</name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pool operation cannot run during pool lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get qtype=%c from backend pid:%d"</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name>qtype</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'a'</literal></expr>:</case>            <comment type="block">/* ABORT */</comment>
                <expr_stmt><expr><call><name>handle_abort</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'b'</literal></expr>:</case>            <comment type="block">/* Fire transaction-block commands on given nodes */</comment>
                <expr_stmt><expr><call><name>handle_command_to_nodes</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>            <comment type="block">/* CONNECT */</comment>
                <expr_stmt><expr><call><name>handle_connect</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'d'</literal></expr>:</case>            <comment type="block">/* DISCONNECT */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>agent_destroy</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'f'</literal></expr>:</case>            <comment type="block">/* CLEAN CONNECTION */</comment>
                <expr_stmt><expr><call><name>handle_clean_connection</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'g'</literal></expr>:</case>            <comment type="block">/* GET CONNECTIONS */</comment>
                <expr_stmt><expr><call><name>handle_get_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'h'</literal></expr>:</case>            <comment type="block">/* Cancel SQL Command in progress on specified connections */</comment>
                <expr_stmt><expr><call><name>handle_query_cancel</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'o'</literal></expr>:</case>            <comment type="block">/* Lock/unlock pooler */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is_pool_locked</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'p'</literal></expr>:</case>            <comment type="block">/* Reload connection info */</comment>
                <comment type="block">/*
                 * Connection information reloaded concerns all the database pools.
                 * A database pool is reloaded as follows for each remote node:
                 * - node pool is deleted if the node has been deleted from catalog.
                 *   Subsequently all its connections are dropped.
                 * - node pool is deleted if its port or host information is changed.
                 *   Subsequently all its connections are dropped.
                 * - node pool is kept unchanged with existing connection information
                 *   is not changed. However its index position in node pool is changed
                 *   according to the alphabetical order of the node name in new
                 *   cluster configuration.
                 * Backend sessions are responsible to reconnect to the pooler to update
                 * their agent with newest connection information.
                 * The session invocating connection information reload is reconnected
                 * and uploaded automatically after database pool reload.
                 * Other server sessions are signaled to reconnect to pooler and update
                 * their connection information separately.
                 * During reload process done internally on pooler, pooler is locked
                 * to forbid new connection requests.
                 */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* First update all the pools */</comment>
                <expr_stmt><expr><call><name>reload_database_pools</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'P'</literal></expr>:</case>            <comment type="block">/* Ping connection info */</comment>
                <comment type="block">/*
                 * Ping unhealthy nodes in the pools. If any of the
                 * nodes come up, update SHARED memory to
                 * indicate the same.
                 */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Ping all the pools */</comment>
                <comment type="line">// TODO: task should done in thread.</comment>
                <expr_stmt><expr><call><name>PoolPingNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
                
            <case>case <expr><literal type="char">'q'</literal></expr>:</case>            <comment type="block">/* Check connection info consistency */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Check cached info consistency */</comment>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>node_info_check</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Send result */</comment>
                <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'r'</literal></expr>:</case>            <comment type="block">/* RELEASE CONNECTIONS */</comment>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>destroy</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"receive command %c from agent:%d. destory=%d"</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>agent_release_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
                
            <case>case <expr><literal type="char">'R'</literal></expr>:</case>            <comment type="block">/* Refresh connection info */</comment>
                <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>refresh_database_pools</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>    
                
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>            <comment type="block">/* Session-related COMMAND */</comment>
                <expr_stmt><expr><call><name>handle_session_command</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'t'</literal></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>handle_close_pooled_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument> ,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Send result */</comment>
                <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'x'</literal></expr>:</case>          <comment type="block">/* get command statistics */</comment>
		        <expr_stmt><expr><call><name>handle_get_cmd_statistics</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <break>break;</break>

            <case>case <expr><literal type="char">'y'</literal></expr>:</case>          <comment type="block">/* reset command statistics */</comment>
                <expr_stmt><expr><call><name>reset_pooler_cmd_statistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><literal type="char">'z'</literal></expr>:</case>          <comment type="block">/* get connections statistics */</comment>
                <expr_stmt><expr><call><name>handle_get_conn_statistics</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>EOF</name></expr>:</case>            <comment type="block">/* EOF */</comment>
                <expr_stmt><expr><call><name>agent_destroy</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>    
            <default>default:</default>            <comment type="block">/* EOF or protocol violation */</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid request tag:%c"</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>agent_destroy</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
        </block_content>}</block></switch>

        <comment type="block">/* if cmd_start_time is not 0, means cmd handle in main loop sync, statistic here */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>update_pooler_cmd_statistics</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><call><name>get_system_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* avoid reading from connection */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>qtype</name> <operator>=</operator> <call><name>pool_pollbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Manage a session command for pooler
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>agent_session_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>,                                    
                      <parameter><decl><type><name>Oid</name>  <modifier>*</modifier></type><name>oids</name></decl></parameter>,
                      <parameter><decl><type><name>int32</name></type> <name>oid_num</name></decl></parameter>,
                      <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_session_command ENTER, pid:%d  async set command oid_num:%d command_type:%d command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    
    <switch>switch <condition>(<expr><name>command_type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>POOL_CMD_LOCAL_SET</name></expr>:</case>
        <case>case <expr><name>POOL_CMD_GLOBAL_SET</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>agent_set_command</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <case>case <expr><name>POOL_CMD_TEMP</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>agent_temp_command</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_session_command EXIT pid:%d  async set command oid_num:%d command_type:%d res:%d command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set agent flag that a temporary object is in use.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>agent_temp_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>is_temp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * compress set command
 */</comment>
<function><type><name>PoolerSetDesc</name> <modifier>*</modifier></type>
<name>agent_compress_command</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>, <parameter><decl><type><name>PoolerSetDesc</name> <modifier>*</modifier></type><name>set_desc</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>need_free</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINTER_ARRRY_LEN</name></cpp:macro>  <cpp:value>8</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>int</name></type>   <name>count</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>max_len</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolerSetDesc</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>set_command</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>max_len</name>    <operator>=</operator> <operator>*</operator><name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pointer</name>    <operator>=</operator> <name>set_desc</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>need_free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>        
        <comment type="block">/* set command format: set XXX to XXX;set XXX to XXX;set XXX to XXX; */</comment>
        <expr_stmt><expr><name>begin</name>  <operator>=</operator> <name>set_command</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>*</operator><name>begin</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name>              <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value_end</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>   <name>tag_len</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>   <name>total_len</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            
            <comment type="block">/* skip head space */</comment>
            <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>begin</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="block">/* skip "set" */</comment>                    
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>tag_len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>total_len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <comment type="block">/* skip a space */</comment>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tag_len</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_len</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            
            <comment type="block">/* compress out the space */</comment>
            <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            
            <while>while <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>total_len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>tag_len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="block">/* tag only includes the first two tokens */</comment>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
            <block>{<block_content>            
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if>    
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>                    
                <comment type="block">/* copy the value */</comment>
                <expr_stmt><expr><name>value_end</name>   <operator>=</operator> <name>q</name></expr>;</expr_stmt>
                <while>while <condition>(<expr><operator>*</operator><name>value_end</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>value_end</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>value_end</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

                <do>do
                <block>{<block_content>
                    <expr_stmt><expr><name>value_end</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block>while<condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>value_end</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
                
                <while>while <condition>(<expr><name>q</name> <operator>&lt;=</operator> <name>value_end</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>total_len</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

                <comment type="block">/* skip space */</comment>
                <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <comment type="block">/* q must be ";" */</comment>
                <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>max_len</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>set_desc</name> <operator>==</operator> <name>pointer</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>pointer</name> <operator>=</operator> <operator>(</operator><name>PoolerSetDesc</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PoolerSetDesc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>max_len</name> <operator>+</operator> <name>POINTER_ARRRY_LEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>set_desc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><operator>*</operator><name>need_free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>pointer</name> <operator>=</operator> <operator>(</operator><name>PoolerSetDesc</name><operator>*</operator><operator>)</operator><call><name>repalloc</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>,
                                               <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PoolerSetDesc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>max_len</name> <operator>+</operator> <name>POINTER_ARRRY_LEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>max_len</name> <operator>+</operator> <name>POINTER_ARRRY_LEN</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>pointer</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>command</name>     <operator>=</operator> <name>begin</name></expr>;</expr_stmt>    
            <expr_stmt><expr><name><name>pointer</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>tag_len</name>     <operator>=</operator> <name>tag_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pointer</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>total_len</name> <operator>=</operator> <name>total_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/*begin next statement */</comment>
            <expr_stmt><expr><name>begin</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    <return>return <expr><name>pointer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> 
<name>agent_handle_set_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>, <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GUC_ARRAY_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>bool</name></type>    <name>need_new_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>found</name>        <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>need_free</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>need_reform</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>     <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>guc_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>ListCell</name>          <modifier>*</modifier></type><name>guc_list_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name><modifier>*</modifier></type>             <name>guc_list</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>guc_str</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolerSetDesc</name>     <modifier>*</modifier></type><name>guc_desc</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolerSetDesc</name>     <modifier>*</modifier></type><name>guc_pointer</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolerSetDesc</name></type>     <name><name>guc_array</name><index>[<expr><name>DEFAULT_GUC_ARRAY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/*
     * special case handled here
     * if receive 'RESET SESSION AUTHORIZATION' command, we need to add this to guc_list,
     * and remove all 'SET SESSION AUTHORIZATION' commands from guc_list
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type>  <name>reset_command</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset_auth_command</name> <init>= <expr><literal type="string">"RESET SESSION AUTHORIZATION"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_auth_command1</name> <init>= <expr><literal type="string">"SET SESSION AUTHORIZATION"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_auth_command2</name> <init>= <expr><literal type="string">"SET SESSION_AUTHORIZATION"</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* to optimize the performance we use pre_allocated  array */</comment>
    <expr_stmt><expr><name>guc_num</name> <operator>=</operator> <name>DEFAULT_GUC_ARRAY_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>guc_pointer</name> <operator>=</operator> <call><name>agent_compress_command</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>, <argument><expr><name>guc_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_free</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guc_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>POOL_CMD_GLOBAL_SET</name> <operator>==</operator> <name>command_type</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><name>guc_list</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>session_params_list</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>POOL_CMD_LOCAL_SET</name> <operator>==</operator> <name>command_type</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>guc_list</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>local_params_list</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Set command process failed, pid;%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>need_reform</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>guc_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>need_new_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>found</name>        <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reset_command</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>reset_auth_command</name></expr></argument>, <argument><expr><name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>reset_auth_command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* receive 'RESET SESSION AUTHORIZATION' command */</comment>
            <expr_stmt><expr><name>reset_command</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<label><name>RECHECK</name>:</label>
        <macro><name>foreach</name><argument_list>(<argument>guc_list_item</argument>, <argument>guc_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>guc_desc</name> <operator>=</operator> <operator>(</operator><name>PoolerSetDesc</name><operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>guc_list_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>reset_command</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>set_auth_command1</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_auth_command1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                    <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>set_auth_command2</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>set_auth_command2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* remove 'SET SESSION AUTHORIZATION' command */</comment>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>guc_list</name> <operator>=</operator> <call><name>list_delete_ptr</name><argument_list>(<argument><expr><name>guc_list</name></expr></argument>, <argument><expr><name>guc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>RECHECK</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>guc_desc</name><operator>-&gt;</operator><name>tag_len</name></name> <operator>!=</operator> <name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag_len</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr></argument>, <argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>tag_len</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* we are the same command , then to check whether the command value are identical */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>guc_desc</name><operator>-&gt;</operator><name>total_len</name></name> <operator>!=</operator>  <name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_len</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>need_new_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* identical set command , nothing to do */</comment>
                        <expr_stmt><expr><name>need_new_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name>need_new_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>

        <comment type="block">/* we got an exist guc command, remove it and replace it with the new one */</comment>
        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>need_new_set</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* free the old one */</comment>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>guc_list</name>            <operator>=</operator> <call><name>list_delete_ptr</name><argument_list>(<argument><expr><name>guc_list</name></expr></argument>, <argument><expr><name>guc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>oldcontext</name>          <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name>   <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>guc_list</name>            <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>guc_list</name></expr></argument>, <argument><expr><name>guc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>need_reform</name> <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* add a new guc item */</comment>
            <decl_stmt><decl><type><name>PoolerSetDesc</name> <modifier>*</modifier></type><name>new_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>new_item</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PoolerSetDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>tag_len</name></name> <operator>=</operator> <name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>new_item</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>guc_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>guc_list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>guc_list</name></expr></argument>, <argument><expr><name>new_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>need_reform</name> <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>        

    <if_stmt><if>if <condition>(<expr><name>need_reform</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>total_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>offset</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>foreach</name><argument_list>(<argument>guc_list_item</argument>, <argument>guc_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>guc_desc</name> <operator>=</operator> <operator>(</operator><name>PoolerSetDesc</name><operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>guc_list_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_len</name> <operator>+=</operator> <name><name>guc_desc</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name>total_len</name> <operator>+=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>guc_list</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* ";" number */</comment>
        
        <comment type="block">/* free the old memory */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* form the new sql */</comment>
        <expr_stmt><expr><name>guc_str</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name><argument_list>(<argument>guc_list_item</argument>, <argument>guc_list</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>guc_desc</name> <operator>=</operator> <operator>(</operator><name>PoolerSetDesc</name><operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>guc_list_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>guc_str</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>total_len</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s;"</literal></expr></argument>, <argument><expr><name><name>guc_desc</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>POOL_CMD_GLOBAL_SET</name> <operator>==</operator> <name>command_type</name></expr>)</condition>
        <block>{<block_content>        
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params_list</name></name> <operator>=</operator> <name>guc_list</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name> <operator>=</operator> <name>guc_str</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>POOL_CMD_LOCAL_SET</name> <operator>==</operator> <name>command_type</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params_list</name></name> <operator>=</operator> <name>guc_list</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name>      <operator>=</operator> <name>guc_str</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Set command process failed, pid;%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* free the memory */</comment>
    <if_stmt><if>if <condition>(<expr><name>need_free</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>guc_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
    

<comment type="block">/*
 * Save a SET command and distribute it to the agent connections
 * already in use. Return the number of set command that have been sent out.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>agent_set_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_command</name></decl></parameter>,                                    
                  <parameter><decl><type><name>Oid</name>  <modifier>*</modifier></type><name>oids</name></decl></parameter>,
                  <parameter><decl><type><name>int32</name></type> <name>oid_num</name></decl></parameter>,
                  <parameter><decl><type><name>PoolCommandType</name></type> <name>command_type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>    <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>   <name>node_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>char</name></type>    <name>node_type</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>             <modifier>*</modifier></type><name>temp_command</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name> <modifier>*</modifier></type><name>asyncTaskCtl</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>command_type</name> <operator>==</operator> <name>POOL_CMD_LOCAL_SET</name> <operator>||</operator> <name>command_type</name> <operator>==</operator> <name>POOL_CMD_GLOBAL_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* we can get here is because we have error last time, so here just check whether we have done the job */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_set_command last request not finish yet pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FATAL_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>temp_command</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>agent_handle_set_command</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>temp_command</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"agent_set_command: session_params %s, local_params %s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* just remember the sql command , no need to do real set */</comment>
    <if_stmt><if>if <condition>(<expr><name>POOL_SET_COMMAND_NONE</name> <operator>==</operator> <name>oid_num</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d  async set command oid_num:%d , nothing to do!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <if_stmt><if>if <condition>(<expr><name>POOL_SET_COMMAND_ALL</name> <operator>==</operator> <name>oid_num</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d  async set command oid_num:%d , set all nodes!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/*
         * Launch the new command to all the connections already hold by the agent
         * It does not matter if command is local or global as this has explicitely been sent
         * by client. PostgreSQL backend also cannot send to its pooler agent SET LOCAL if current
         * transaction is not in a transaction block. This has also no effect on local Coordinator
         * session.
         */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_command</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
                
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                   <argument><expr><name>false</name></expr></argument>,
                                                   <argument><expr><name>agent</name></expr></argument>,
                                                   <argument><expr><name>i</name></expr></argument>,
                                                   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                <block>{<block_content>
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d oid_num:%d datanode node index:%d command:%s null connection nothing to do!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>node_index</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_command</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
                
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                   <argument><expr><name>true</name></expr></argument>,
                                                   <argument><expr><name>agent</name></expr></argument>,
                                                   <argument><expr><name>i</name></expr></argument>,
                                                   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                <block>{<block_content>
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>            
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d oid_num:%d coordinator node index:%d command:%s null connection nothing to do!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>node_index</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>    
    
        <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>set_command_total</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                               <argument><expr><name>false</name></expr></argument>,
                                               <argument><expr><name>agent</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <goto>goto <name>FATAL_ERROR</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oid_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>node_index</name> <operator>=</operator> <call><name>get_node_info_by_nodeoid</name><argument_list>(<argument><expr><name><name>oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>node_type</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>PGXC_NODE_DATANODE</name></expr>:</case>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node_index</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_command</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>                
                            
                            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                               <argument><expr><name>false</name></expr></argument>,
                                                               <argument><expr><name>agent</name></expr></argument>,
                                                               <argument><expr><name>node_index</name></expr></argument>,
                                                               <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                            <block>{<block_content>
                                <goto>goto <name>FATAL_ERROR</name>;</goto>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></if>                        
                        <else>else
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d oid_num:%d datanode node index:%d command:%s null connection nothing to do!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>node_index</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                    
                <case>case <expr><name>PGXC_NODE_COORDINATOR</name></expr>:</case>                
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_command</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>                
                            
                            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                               <argument><expr><name>true</name></expr></argument>,
                                                               <argument><expr><name>agent</name></expr></argument>,
                                                               <argument><expr><name>node_index</name></expr></argument>,
                                                               <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                            <block>{<block_content>
                                <goto>goto <name>FATAL_ERROR</name>;</goto>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d oid_num:%d coordinator node index:%d command:%s null connection nothing to do!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_num</name></expr></argument>, <argument><expr><name>node_index</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break;</break>
                    
                    <break>break;</break>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_set_command invalid node type:%c"</literal></expr></argument>, <argument><expr><name>node_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                    
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>set_command_total</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_set_command_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                               <argument><expr><name>false</name></expr></argument>,
                                               <argument><expr><name>agent</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <goto>goto <name>FATAL_ERROR</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></else></if_stmt>    
    
<label><name>FATAL_ERROR</name>:</label>
    <comment type="block">/* record the task control, in case of memory leak */</comment>
    <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>asyncTaskCtl</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_set_command failed pid:%d, command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * acquire connection
 * return -1: error happen
 * return 0 : when fd_result and pid_result set to NULL, async acquire connection will be done in parallel threads
 * return 0 : when fd_result and pid_result is not NULL, acquire connection is done(acquire from freeslot in pool).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> 
<name>agent_acquire_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>raise_error</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>fd_result</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>pid_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>              <name>i</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>acquire_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                  <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>acquire_succeed_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>acquire_failed_num</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>set_request_num</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>connect_num</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>              <name>succeed</name>      <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>     <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>         <modifier>*</modifier></type><name>nodelist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name> <modifier>*</modifier></type><name>asyncTaskCtl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>acquire_seq</name> <operator>=</operator> <call><name>pooler_get_connection_acquire_num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_conn_total</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]agent pid=%d, NumCoords=%d, NumDataNodes=%d, "</literal>
                                 <literal type="string">"num_coord_connections=%d, num_dn_connections=%d, "</literal>
                                 <literal type="string">"datanodelist len=%d, coordlist len=%d"</literal></expr></argument>,
                                <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>NumCoords</name></expr></argument>, <argument><expr><name>NumDataNodes</name></expr></argument>, 
                                <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>,
                                <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* we have scaled out the nodes, fresh node info */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>&lt;</operator> <name>NumCoords</name> <operator>||</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>&lt;</operator> <name>NumDataNodes</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type>  <name>orig_cn_number</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>  <name>orig_dn_number</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier><modifier>*</modifier></type><name>orig_cn_connections</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier><modifier>*</modifier></type><name>orig_dn_connections</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]Pooler found node number extension pid:%d, acquire_seq:%d, refresh node info now"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>acquire_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* fix memleak */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
                <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
                <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* fix memleak */</comment>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* index of newly added nodes must be biggger, so memory copy can hanle node extension */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr></argument>, <argument><expr><name>orig_cn_connections</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>orig_cn_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr></argument>, <argument><expr><name>orig_dn_connections</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>orig_dn_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>orig_cn_connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>orig_dn_connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Check if pooler can accept those requests */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>||</operator>
            <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[agent_acquire_connections]agent_acquire_connections called with invalid arguments -"</literal>
                <literal type="string">"list_length(datanodelist) %d, num_dn_connections %d,"</literal>
                <literal type="string">"list_length(coordlist) %d, num_coord_connections %d"</literal></expr></argument>,
                <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>,
                <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_INVALID_ARGUMENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"agent_acquire_connections called with invalid arguments -"</literal>
                <literal type="string">"list_length(datanodelist) %d, num_dn_connections %d,"</literal>
                <literal type="string">"list_length(coordlist) %d, num_coord_connections %d"</literal></expr></argument>,
                <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>,
                <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Allocate memory
     * File descriptors of Datanodes and Coordinators are saved in the same array,
     * This array will be sent back to the postmaster.
     * It has a length equal to the length of the Datanode list
     * plus the length of the Coordinator list.
     * Datanode fds are saved first, then Coordinator fds are saved.
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>fd_result</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pid_result</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pid_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* we can get here is because we have error last time, so here just check whether we have done the job */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_TASK_NOT_DONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d last request not finish yet"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FATAL_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/*
     * There are possible memory allocations in the core pooler, we want
     * these allocations in the contect of the database pool
     */</comment>
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialize fd_result */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* Save in array fds of Datanodes first */</comment>
    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* valid check */</comment>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid node index:%d, num_dn_connections is %d, pid:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <comment type="block">/* Acquire from the pool if none */</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>acquire_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodePool</name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
                                      <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Handle failure */</comment>
            <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]acquire_connection can't get conn of node:%s from free slots"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* we have task control pending, can not proceed, wait for the pending job done */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr>)</condition>
                <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_TASK_NOT_DONE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] datanode node:%s nodeindex:%d, pid:%d , acquire_seq:%d last request still in progres"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>acquire_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>acquire_failed_num</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><operator>*</operator><name>fd_result</name></expr></argument>, <argument><expr><operator>*</operator><name>pid_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]going to acquire conn by sync thread for node:%s."</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
				<expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_missing_ok</name></name> <operator>=</operator> <operator>!</operator><name>raise_error</name></expr>;</expr_stmt>
                <comment type="block">/* dispatch build connection request */</comment>
                <expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>dispatch_connection_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                        <argument><expr><name>false</name></expr></argument>,
                                                        <argument><expr><name>agent</name></expr></argument>,
                                                        <argument><expr><name>nodePool</name></expr></argument>,
                                                        <argument><expr><name>PoolConnectStaus_init</name></expr></argument>, <comment type="block">/* we need to build a new connection*/</comment>
                                                        <argument><expr><ternary><condition><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr> ?</condition><then> <expr><name>PoolConnectStaus_set_param</name></expr> </then><else>: <expr><name>PoolConnectStaus_connected</name></expr></else></ternary></expr></argument>,
                                                        <argument><expr><name>node</name></expr></argument>,
                                                        <argument><expr><name>acquire_seq</name></expr></argument>,
                                                        <argument><expr><name>false</name></expr></argument><comment type="block">/* whether we are the last request */</comment>
                                                        )</argument_list></call></expr>;</expr_stmt> 
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>succeed</name></expr>)</condition>
                <block>{<block_content>
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_thread</name></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>acquire_succeed_num</name><operator>++</operator></expr>;</expr_stmt>    
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnMaxLifetime</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_acquire_connections acquired connection to "</literal>
						<literal type="string">"database:%s user:%s "</literal>
						<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
						<literal type="string">"nodepool size:%d freeSize:%d that should be destoried."</literal></expr></argument>,
						<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* double check, to ensure no double destory and multiple agents for one slot */</comment>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d get datanode connection nodeindex:%d nodename:%s backend_pid:%d slot_seq:%d from hash table"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>||</operator> <name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                            
                <comment type="block">/* Store in the descriptor */</comment>
                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr>)</condition>
                <block>{<block_content>                    
                    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] datanode node:%u nodeindex:%d pid:%d last request still in progres"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                    
                    <expr_stmt><expr><name>set_request_num</name><operator>++</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><operator>*</operator><name>fd_result</name></expr></argument>, <argument><expr><operator>*</operator><name>pid_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    
					<expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_missing_ok</name></name> <operator>=</operator> <operator>!</operator><name>raise_error</name></expr>;</expr_stmt>
                    <comment type="block">/* dispatch set param request */</comment>
                    <expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>dispatch_connection_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                            <argument><expr><name>false</name></expr></argument>,
                                                            <argument><expr><name>agent</name></expr></argument>,
                                                            <argument><expr><name>nodePool</name></expr></argument>,
                                                            <argument><expr><name>PoolConnectStaus_connected</name></expr></argument>, <comment type="block">/* we already had a connection*/</comment>
                                                            <argument><expr><name>PoolConnectStaus_set_param</name></expr></argument>,
                                                            <argument><expr><name>node</name></expr></argument>,
                                                            <argument><expr><name>acquire_seq</name></expr></argument>,
                                                            <argument><expr><name>false</name></expr></argument><comment type="block">/* whether we are the last request */</comment>
                                                            )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>succeed</name></expr>)</condition>
                    <block>{<block_content>
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                    
                    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab_and_set</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>            
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] datanode node:%s nodeindex:%d pid:%d already got a slot_seq:%d backend_pid:%d in agent"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <comment type="block">/* Save then in the array fds for Coordinators */</comment>
    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* valid check */</comment>
        <if_stmt><if>if <condition>(<expr><name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid node index:%d, num_coord_connections is %d, pid:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* Acquire from the pool if none */</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>acquire_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodePool</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Handle failure */</comment>
            <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>acquire_failed_num</name><operator>++</operator></expr>;</expr_stmt>
                <comment type="block">/* we have task control pending, can not proceed, wait for the pending job done */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr>)</condition>
                <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_TASK_NOT_DONE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] coord node:%s nodeindex:%d pid:%d last request still in progres"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>
                
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><operator>*</operator><name>fd_result</name></expr></argument>, <argument><expr><operator>*</operator><name>pid_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_missing_ok</name></name> <operator>=</operator> <operator>!</operator><name>raise_error</name></expr>;</expr_stmt>
                <comment type="block">/* dispatch build connection request */</comment>
                <expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>dispatch_connection_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                        <argument><expr><name>true</name></expr></argument>,
                                                        <argument><expr><name>agent</name></expr></argument>,
                                                        <argument><expr><name>nodePool</name></expr></argument>,
                                                        <argument><expr><name>PoolConnectStaus_init</name></expr></argument>, <comment type="block">/* we need to build a new connection*/</comment>
                                                        <argument><expr><ternary><condition><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr> ?</condition><then> <expr><name>PoolConnectStaus_set_param</name></expr> </then><else>: <expr><name>PoolConnectStaus_connected</name></expr></else></ternary></expr></argument>,
                                                        <argument><expr><name>node</name></expr></argument>,
                                                        <argument><expr><name>acquire_seq</name></expr></argument>,
                                                        <argument><expr><name>false</name></expr></argument><comment type="block">/* whether we are the last request */</comment>
                                                        )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>succeed</name></expr>)</condition>
                <block>{<block_content>
                    <goto>goto <name>FATAL_ERROR</name>;</goto>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_thread</name></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>                
                <expr_stmt><expr><name>acquire_succeed_num</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d get coord connection nodeindex:%d nodename:%s backend_pid:%d slot_seq:%d from hash table"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/* double check, to ensure no double destory and multiple agents for one slot */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>||</operator> <name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <comment type="block">/*
                  * Update newly-acquired slot with session parameters.
                 * Local parameters are fired only once BEGIN has been launched on
                 * remote nodes.
                */</comment>
                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>set_request_num</name><operator>++</operator></expr>;</expr_stmt>
                    <comment type="block">/* we have task control pending, can not proceed, wait for the pending job done */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name></expr>)</condition>
                    <block>{<block_content>                
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] coord node:%u nodeindex:%d pid:%d last request still in progres"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                    
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><operator>*</operator><name>fd_result</name></expr></argument>, <argument><expr><operator>*</operator><name>pid_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
					
					<expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_missing_ok</name></name> <operator>=</operator> <operator>!</operator><name>raise_error</name></expr>;</expr_stmt>
                    <comment type="block">/* dispatch set param request */</comment>
                    <expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>dispatch_connection_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                            <argument><expr><name>true</name></expr></argument>,
                                                            <argument><expr><name>agent</name></expr></argument>,
                                                            <argument><expr><name>nodePool</name></expr></argument>,
                                                            <argument><expr><name>PoolConnectStaus_connected</name></expr></argument>, <comment type="block">/* we already had a connection*/</comment>
                                                            <argument><expr><name>PoolConnectStaus_set_param</name></expr></argument>,
                                                            <argument><expr><name>node</name></expr></argument>,
                                                            <argument><expr><name>acquire_seq</name></expr></argument>,
                                                            <argument><expr><name>false</name></expr></argument><comment type="block">/* whether we are the last request */</comment>
                                                            )</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>succeed</name></expr>)</condition>
                    <block>{<block_content>
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab_and_set</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab</name></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>        
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] coordinator node:%s nodeindex:%d pid:%d already got a slot_seq:%d backend_pid:%d in agent"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>asyncTaskCtl</name></expr>)</condition>
    <block>{<block_content>    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>    
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>hostip</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hostip</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>hostport</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hostport</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>        
    
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d get all connections from hashtab"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
        <expr_stmt><expr><call><name>check_pooler_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_hashtab_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_duplicate_allocated_conn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="block">/* Save in array fds of Datanodes first */</comment>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fd_result</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pid_result</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>     <name>_POOLER_CHECK_</name></cpp:ifdef>    
            <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pghost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pgport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>connect_num</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="block">/* Save then in the array fds for Coordinators */</comment>
        <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fd_result</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pid_result</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>     <name>_POOLER_CHECK_</name></cpp:ifdef>    
            <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pghost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pgport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>connect_num</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>        
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>connect_num</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
            <block>{<block_content>                
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>connect_num</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pid_result</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pid_result</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>&amp;&amp;</operator> 
                        <name>i</name> <operator>!=</operator> <name>j</name>                                  <operator>&amp;&amp;</operator>
                        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hostip</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>     <operator>&amp;&amp;</operator>
                        <call><name>strcmp</name><argument_list>(<argument><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hostport</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>connect_num</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>hostip</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hostip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hostport</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hostport</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>        
        <comment type="block">/* set the number */</comment>
        <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>connect_num</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
        <expr_stmt><expr><call><name>check_pooler_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_hashtab_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_duplicate_allocated_conn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="block">/* use async thread to process the request, dispatch last request */</comment>
        <if_stmt><if>if <condition>(<expr><name>set_request_num</name> <operator>||</operator> <name>acquire_failed_num</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]send dispatch package. set_request_num=%d, acquire_failed_num=%d"</literal></expr></argument>, 
                                        <argument><expr><name>set_request_num</name></expr></argument>, <argument><expr><name>acquire_failed_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        
            <comment type="block">/* dispatch set param request */</comment>
            <expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>dispatch_connection_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                    <argument><expr><name>true</name></expr></argument>,
                                                    <argument><expr><name>agent</name></expr></argument>,
                                                    <argument><expr><name>nodePool</name></expr></argument>,
                                                    <argument><expr><name>PoolConnectStaus_destory</name></expr></argument>, <comment type="block">/* we already had a connection*/</comment>
                                                    <argument><expr><name>PoolConnectStaus_destory</name></expr></argument>,
                                                    <argument><expr><name>node</name></expr></argument>,
                                                    <argument><expr><name>acquire_seq</name></expr></argument>,
                                                    <argument><expr><name>true</name></expr></argument><comment type="block">/* we are the last request */</comment>
                                                    )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>succeed</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>FATAL_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>

        
        <comment type="block">/* just return NULL*/</comment>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>                
            <if_stmt><if>if <condition>(<expr><name>set_request_num</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d acquire_succeed_num:%d acquire_failed_num:%d set_request_num:%d use parallel thread to process set request"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>acquire_succeed_num</name></expr></argument>, <argument><expr><name>acquire_failed_num</name></expr></argument>, <argument><expr><name>set_request_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections] pid:%d can't get all connections from hashtab, acquire_succeed_num:%d acquire_failed_num:%d set_request_num:%d use parallel thread to process"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>acquire_succeed_num</name></expr></argument>, <argument><expr><name>acquire_failed_num</name></expr></argument>, <argument><expr><name>set_request_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>fd_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pid_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>        

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]return fd_result = NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[agent_acquire_connections]return fd_result NOT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    
<label><name>FATAL_ERROR</name>:</label>
    <comment type="block">/* error, just set the number */</comment>
    <comment type="block">/* record the task control, in case of memory leak */</comment>
    <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>asyncTaskCtl</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_acquire_connections pid:%d failed to get connections, acquire_succeed_num:%d acquire_failed_num:%d set_request_num:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>acquire_succeed_num</name></expr></argument>, <argument><expr><name>acquire_failed_num</name></expr></argument>, <argument><expr><name>set_request_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * send transaction local commands if any, set the begin sent status in any case
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>send_local_commands</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>res</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>            <modifier>*</modifier></type><name>nodelist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>    <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name>    <modifier>*</modifier></type><name>asyncTaskCtl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* we can get here is because we have error last time, so here just check whether we have done the job */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"send_local_commands last request not finish yet, pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FATAL_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><name>datanodelist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>(<expr><name>node</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>                
                    
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_local_set_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                       <argument><expr><name>false</name></expr></argument>,
                                                       <argument><expr><name>agent</name></expr></argument>,
                                                       <argument><expr><name>node</name></expr></argument>,
                                                       <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>coordlist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>(<expr><name>node</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_local_set_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                                       <argument><expr><name>true</name></expr></argument>,
                                                       <argument><expr><name>agent</name></expr></argument>,
                                                       <argument><expr><name>node</name></expr></argument>,
                                                       <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <goto>goto <name>FATAL_ERROR</name>;</goto>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* dispatch last request */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_local_set_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                           <argument><expr><name>true</name></expr></argument>,
                                           <argument><expr><name>agent</name></expr></argument>,
                                           <argument><expr><name>node</name></expr></argument>,
                                           <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>FATAL_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>

<label><name>FATAL_ERROR</name>:</label>
    <comment type="block">/* record the task control, in case of memory leak */</comment>
    <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>asyncTaskCtl</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"send_local_commands failed, pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cancel query
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cancel_query_on_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>               <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                  <name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>          <modifier>*</modifier></type><name>nodelist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                   <name>nCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name><modifier>*</modifier></type> <name>asyncTaskCtl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>nCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>agent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>nCount</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* we can get here is because we have error last time, so here just check whether we have done the job */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_CANCEL_TASK_NOT_DONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"cancel_query_on_connections pid:%d last request not finish yet"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FATAL_ERROR</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Send cancel on Datanodes first */</comment>
    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>datanodelist</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>node</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><name>nCount</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_cancle_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                            <argument><expr><name>false</name></expr></argument>,
                                            <argument><expr><name>agent</name></expr></argument>,
                                            <argument><expr><name>node</name></expr></argument>,
                                            <argument><expr><name>false</name></expr></argument>,
                                            <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <goto>goto <name>FATAL_ERROR</name>;</goto>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>    
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async CANCLE_QUERY datanode nodeindex:%d connection failed, no such connection"</literal></expr></argument>, 
                                                                                                            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <comment type="block">/* Send cancel to Coordinators too, e.g. if DDL was in progress */</comment>
    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>coordlist</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>node</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>node</name> <operator>&gt;=</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nCount</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asyncTaskCtl</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_cancle_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                            <argument><expr><name>true</name></expr></argument>,
                                            <argument><expr><name>agent</name></expr></argument>,
                                            <argument><expr><name>node</name></expr></argument>,
                                            <argument><expr><name>false</name></expr></argument>,
                                            <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <goto>goto <name>FATAL_ERROR</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>    
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async CANCLE_QUERY coordinator nodeindex:%d connection failed, no such connection"</literal></expr></argument>, 
                                                                                                            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>nCount</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_cancle_request</name><argument_list>(<argument><expr><name>asyncTaskCtl</name></expr></argument>,
                                        <argument><expr><name>true</name></expr></argument>,
                                        <argument><expr><name>agent</name></expr></argument>,
                                        <argument><expr><literal type="number">0</literal></expr></argument>,
                                        <argument><expr><name>true</name></expr></argument>,
                                        <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <goto>goto <name>FATAL_ERROR</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nCount</name></expr>;</return>
    
<label><name>FATAL_ERROR</name>:</label>
    <comment type="block">/* record the task control, in case of memory leak */</comment>
    <if_stmt><if>if <condition>(<expr><name>asyncTaskCtl</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>asyncTaskCtl</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"cancel_query_on_connections failed pid:%d "</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return connections back to the pool
 */</comment>
<function><type><name>void</name></type>
<name>PoolManagerReleaseConnections</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>msgtype</name> <init>= <expr><literal type="char">'r'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>msglen</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If disconnected from pooler all the connections already released */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>poolHandle</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Returning connections back to the pool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Lock information */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cancel Query
 */</comment>
<function><type><name>bool</name></type>
<name>PoolManagerCancelQuery</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dn_count</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dn_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co_count</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>co_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * Buffer contains the list of both Coordinator and Datanodes, as well
     * as the number of connections
     */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>         <name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>dn_count</name> <operator>+</operator> <name>co_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>poolHandle</name></expr>)</condition>    
    <block>{<block_content>    
        <expr_stmt><expr><call><name>PoolManagerReconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
        <comment type="block">/* After reconnect, recheck the handle. */</comment>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>poolHandle</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolManagerCancelQuery poolHandle is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dn_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>co_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolManagerCancelQuery no node speicfied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dn_count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dn_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolManagerCancelQuery invalid dn_count:%d, null dn_list"</literal></expr></argument>, <argument><expr><name>dn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>co_count</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>co_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolManagerCancelQuery invalid co_count:%d, null co_list"</literal></expr></argument>, <argument><expr><name>co_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>signal</name> <operator>&gt;</operator> <name>SIGNAL_SIGUSR2</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolManagerCancelQuery invalid signal:%d"</literal></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Insert the list of Datanodes in buffer */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>dn_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dn_count</name></expr>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>dn_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Insert the list of Coordinators in buffer */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>co_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>dn_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>

    <comment type="block">/* Not necessary to send to pooler a request if there is no Coordinator */</comment>
    <if_stmt><if>if <condition>(<expr><name>co_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dn_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <name>co_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition><incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>co_list</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>dn_count</name> <operator>+</operator> <name>co_count</name></expr>]</index></name> <operator>=</operator> <name>n32</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>dn_count</name> <operator>+</operator> <name>co_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <name>co_count</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Set to LOG to avoid regress test failure. */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"cancel query on remote nodes required:%d return:%d"</literal></expr></argument>, <argument><expr><name>dn_count</name> <operator>+</operator> <name>co_count</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name> <operator>==</operator> <operator>(</operator><name>dn_count</name> <operator>+</operator> <name>co_count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Release connections for Datanodes and Coordinators
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_release_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_destroy</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>              <name>i</name></decl>;</decl_stmt>
    
    <comment type="block">/* increase query count */</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>query_count</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If there are some session parameters or temporary objects,
     * do not put back connections to pool.
     * Disconnection will be made when session is cut for this user.
     * Local parameters are reset when transaction block is finished,
     * so don't do anything for them, but just reset their list.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name><operator>)</operator> <operator>||</operator> <name><name>agent</name><operator>-&gt;</operator><name>is_temp</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_destroy</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_release_connections agent will hold conn. pid:%d session_params:%s is_temp:%d ++++"</literal></expr></argument>,
                <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>is_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt><expr><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_release_connections pid:%d begin++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * There are possible memory allocations in the core pooler, we want
     * these allocations in the content of the database pool
     */</comment>
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Remaining connections are assumed to be clean.
     * First clean up for Datanodes
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Release connection.
         * If connection has temporary objects on it, destroy connection slot.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_release_connections pid:%d release slot_seq:%d nodename:%s backend_pid:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>force_destroy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <comment type="block">/* Then clean up for Coordinator connections */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Release connection.
         * If connection has temporary objects on it, destroy connection slot.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_release_connections pid:%d release slot_seq:%d nodename:%s backend_pid:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>force_destroy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_destroy</name> <operator>&amp;&amp;</operator> <name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
    <expr_stmt><expr><call><name>check_hashtab_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check_pooler_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check_duplicate_allocated_conn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_release_connections done++++, pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Return connections for Datanodes and Coordinators to node pool.
 * Here we have refreshed the connections, it is OK to reuse them.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>agent_return_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>              <name>i</name></decl>;</decl_stmt>
    
    <comment type="block">/* increase query count */</comment>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>query_count</name></name><operator>++</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_return_connections pid:%d begin++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * There are possible memory allocations in the core pooler, we want
     * these allocations in the content of the database pool
     */</comment>
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Remaining connections are assumed to be clean.
     * First clean up for Datanodes
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Release connection.
         * If connection has temporary objects on it, destroy connection slot.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_return_connections pid:%d release slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <comment type="block">/* Then clean up for Coordinator connections */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Release connection.
         * If connection has temporary objects on it, destroy connection slot.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_return_connections pid:%d release slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_return_connections done++++, pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reset session parameters for given connections in the agent.
 * This is done before putting back to pool connections that have been
 * modified by session parameters.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>agent_reset_session</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>                  <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>              <name>release</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>              <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>              <name>bsync</name>       <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>count</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name> <modifier>*</modifier></type><name>taskControl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>session_params</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>bsync</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>bsync</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session begin to async reset session pid:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if we have task control and failed to free it, we just release the connections rather than reset them */</comment>
    <expr_stmt><expr><name>release</name> <operator>=</operator> <operator>!</operator><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>release</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>taskControl</name> <operator>=</operator> <call><name>create_task_control</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Reset connection params */</comment>
    <comment type="block">/* Check agent slot for each Datanode */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Reset given slot with parameters */</comment>
            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session pid:%d release slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session async reset pid:%d slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_reset_request</name><argument_list>(<argument><expr><name>taskControl</name></expr></argument>,
                                                <argument><expr><name>false</name></expr></argument>,
                                                <argument><expr><name>agent</name></expr></argument>,
                                                <argument><expr><name>PoolResetStatus_reset</name></expr></argument>, <comment type="block">/* PoolResetStatus */</comment>
                                                <argument><expr><name>i</name></expr></argument>,
                                                <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
                    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Check agent slot for each Coordinator */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Reset given slot with parameters */</comment>
            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session pid:%d release slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session async reset pid:%d slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_reset_request</name><argument_list>(<argument><expr><name>taskControl</name></expr></argument>,
                                                    <argument><expr><name>true</name></expr></argument>,
                                                    <argument><expr><name>agent</name></expr></argument>,
                                                    <argument><expr><name>PoolResetStatus_reset</name></expr></argument>, <comment type="block">/* PoolResetStatus */</comment>
                                                    <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>release</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* we have async reset connections, so we have to handle them */</comment>
            <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* dispatch a fake request to finish all reset */</comment>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_reset_request</name><argument_list>(<argument><expr><name>taskControl</name></expr></argument>,
                                                <argument><expr><name>true</name></expr></argument>,
                                                <argument><expr><name>agent</name></expr></argument>,
                                                <argument><expr><name>PoolResetStatus_destory</name></expr></argument>,    
                                                <argument><expr><name>i</name></expr></argument>,
                                                <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* here we failed to send the last request, we have to make sure agent and task control will be properly handled */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>bsync</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>task_control</name></name> <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
                    
                    <comment type="block">/* set pend destory flag */</comment>
                    <expr_stmt><expr><call><name>agent_pend_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>bsync</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>bsync</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>taskControl</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>taskControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bsync</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++agent_reset_session finish async reset session pid:%d dispatch count:%d bsync:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>bsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>bsync</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Create new empty pool for a database.
 * By default Database Pools have a size null so as to avoid interactions
 * between PGXC nodes in the cluster (Co/Co, Dn/Dn and Co/Dn).
 * Pool is increased at the first GET_CONNECTION message received.
 * Returns POOL_OK if operation succeed POOL_FAIL in case of OutOfMemory
 * error and POOL_WEXIST if poll for this database already exist.
 */</comment>
<function><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type>
<name>create_database_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>NODE_POOL_NAME_LEN</name></cpp:macro>    <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>bool</name></type>             <name>need_pool</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>dbcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabasePool</name>   <modifier>*</modifier></type><name>databasePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASHCTL</name></type>            <name>hinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>hflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>hash_name</name><index>[<expr><name>NODE_POOL_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dbcontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>PoolerCoreContext</name></expr></argument>,
                                      <argument><expr><literal type="string">"DB Context"</literal></expr></argument>,
                                      <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                                      <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                                      <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>dbcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Allocate memory */</comment>
    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <operator>(</operator><name>DatabasePool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DatabasePool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* out of memory */</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>dbcontext</name></expr>;</expr_stmt>
     <comment type="block">/* Copy the database name */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="block">/* Copy the user name */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>user_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <comment type="block">/* Copy the pgoptions */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>pgoptions</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reset the oldest_idle value */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* out of memory */</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>databasePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Init next reference */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Init node hashtable */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_ELEM</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>dbcontext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_CONTEXT</name></expr>;</expr_stmt>    

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>oid_hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_FUNCTION</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>hash_name</name></expr></argument>, <argument><expr><name>NODE_POOL_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s_%s_Node_Pool"</literal></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><name>hash_name</name></expr></argument>, <argument><expr><name>TBASE_MAX_DATANODE_NUMBER</name> <operator>+</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>hinfo</name></expr></argument>, <argument><expr><name>hflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Insert into the list */</comment>
    <expr_stmt><expr><call><name>insert_database_pool</name><argument_list>(<argument><expr><name>databasePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>need_pool</name> <operator>=</operator> <call><name>connection_need_pool</name><argument_list>(<argument><expr><name>g_unpooled_database</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>need_pool</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>need_pool</name> <operator>=</operator>  <call><name>connection_need_pool</name><argument_list>(<argument><expr><name>g_unpooled_user</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Init no need for warm */</comment>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>bneed_warm</name></name>      <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>bneed_precreate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>bneed_pool</name></name>       <operator>=</operator> <name>need_pool</name></expr>;</expr_stmt>
    <return>return <expr><name>databasePool</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Insert new database pool to the list
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_database_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>databasePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Reference existing list or null the tail */</comment>
    <if_stmt><if>if <condition>(<expr><name>databasePools</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Update head pointer */</comment>
    <expr_stmt><expr><name>databasePools</name> <operator>=</operator> <name>databasePool</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Rebuild information of database pools
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reload_database_pools</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>          <name>bsucceed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl>;</decl_stmt>
    
    <comment type="block">/*
     * Release node connections if any held. It is not guaranteed client session
     * does the same so don't ever try to return them to pool and reuse
     */</comment>
    <expr_stmt><expr><call><name>agent_release_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* before destory nodepool, just wait for all async task is done */</comment>
    <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <call><name>pooler_wait_for_async_task_done</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsucceed</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async task not finish before reload all database pools"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* Forget previously allocated node info */</comment>
    <expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* and allocate new */</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Scan the list and destroy any altered pool. They will be recreated
     * upon subsequent connection acquisition.
     */</comment>
    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Update each database pool slot with new connection information */</comment>
        <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>connstr_chk</name> <init>= <expr><call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>databasePool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>connstr_chk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Node has been removed or altered */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>||</operator> <name>connstr_chk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"nodePool:%s has been changed, "</literal>
						<literal type="string">"size:%d, freeSize:%d, reload_database_pools: nodePools "</literal>
						<literal type="string">"of node (%u, %s) is removed."</literal></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>destroy_node_pool</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>,
                                <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>destroy_node_pool_free_slots</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* increase the node pool version */</comment>
					<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"nodePool:%s has been changed, "</literal>
						<literal type="string">"size:%d, freeSize:%d, reload_database_pools: nodePools "</literal>
						<literal type="string">"of node (%u, %s) has increased version %lu."</literal></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* fresh the connect string so that new coming connection will connect to the new node  */</comment>
                    <if_stmt><if>if <condition>(<expr><name>connstr_chk</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>connstr_chk</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>refresh_node_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Find pool for specified database and username in the list
 */</comment>
<function><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type>
<name>find_database_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl>;</decl_stmt>

    <comment type="block">/* Scan the list */</comment>
    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>strcmp</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>pgoptions</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>databasePool</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Acquire connection
 */</comment>
<function><type><specifier>static</specifier> <name>PGXCNodePoolSlot</name> <modifier>*</modifier></type>
<name>acquire_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier><modifier>*</modifier></type><name>pool</name></decl></parameter>,<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>              <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>       <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>   <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>,
                                            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * When a Coordinator pool is initialized by a Coordinator Postmaster,
     * it has a NULL size and is below minimum size that is 1
     * This is to avoid problems of connections between Coordinators
     * when creating or dropping Databases.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>nodePool</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>        
            <if_stmt><if>if <condition>(<expr><name>nodePool</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node:%u no free connection, nodeindex:%d, size:%d, freeSize:%d begin grow in async mode"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* here, we try to build entry of the hash table */</comment>
        <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <call><name>grow_pool</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    </block_content>}</block></if></if_stmt>


    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>    
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node:%u nodeidx:%d size:%d, freeSize:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* get the nodepool */</comment>
    <expr_stmt><expr><operator>*</operator><name>pool</name> <operator>=</operator> <name>nodePool</name></expr>;</expr_stmt>
         
    <expr_stmt><expr><name>slot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <comment type="block">/* Check available connections */</comment>
    <while>while <condition>(<expr><name>nodePool</name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>poll_result</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>loop</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DecreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"acquire_connection alloc a connection to node:%s backend_pid:%d nodeidx:%d nodepool size:%d freeSize:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
<label><name>retry</name>:</label>
        <comment type="block">/* only pick up the connections that matches the latest version */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Make sure connection is ok, destroy connection slot if there is a
                 * problem.
                 */</comment>
                <expr_stmt><expr><name>poll_result</name> <operator>=</operator> <call><name>pqReadReady</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>poll_result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* increase use count */</comment>
                    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>         <comment type="block">/* ok, no data */</comment>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>poll_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <goto>goto <name>retry</name>;</goto>
                     </block_content>}</block></if></if_stmt>


                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Error in checking connection, errno = %d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Unexpected data on connection, cleaning."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"connection to node %u contains invalid fd:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Decrement current max pool size */</comment>
        <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Ensure we are not below minimum size */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>slot</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>loop</name></expr>)</condition>
            <block>{<block_content>            
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"no more free connection to node:%u nodeidx:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"no valid free connection to node:%u nodeidx:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PgxcNodeUpdateHealth</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* prebuild connection before next acquire */</comment>
    <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <call><name>grow_pool</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IncreaseSlotRefCount</name><argument_list>(<argument><expr><name>slot</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * release connection from specified pool and slot
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
                   <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_destroy</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>        <name>now</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>,
                                            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * The node pool of connections may has been created just now and the size is
	 * initialized to 0. This situation needs to be excluded.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * The node may be altered or dropped.
         * In any case the slot is no longer valid.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection connection to "</literal>
				<literal type="string">"database:%s user:%s "</literal>
				<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
				<literal type="string">"size:%d freeSize:%d can not find nodepool, just destory it"</literal></expr></argument>,
				<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection connection to "</literal>
			<literal type="string">"database:%s user:%s "</literal>
			<literal type="string">"nodename:%s backend_pid:%d nodeidx:%d "</literal>
			<literal type="string">"size:%d freeSize:%d begin to release"</literal></expr></argument>,
			<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
			<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
			<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* force destroy the connection when pool not enabled */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_destroy</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_pool</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>force_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* destory the slot of former nodePool */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name> <operator>!=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection connection to "</literal>
				<literal type="string">"database:%s user:%s "</literal>
				<literal type="string">"node:%s backend_pid:%d nodeidx:%d agentCount:%d "</literal>
				<literal type="string">"size:%d freeSize:%d node version:%lu slot version:%lu not match"</literal></expr></argument>,
				<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>agentCount</name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_destroy</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_warm</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* warm a connection is a hard job, when release them, we need make sure it has worked long enough. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name></expr>)</condition>
            <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&gt;</operator> <name>MinFreeSize</name> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnMaxLifetime</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>force_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
							<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"warmed connection to "</literal>
							<literal type="string">"database:%s user:%s "</literal>
							<literal type="string">"node:%s backend_pid:%d nodeidx:%d lifetime expired, "</literal>
							<literal type="string">"closed it, size:%d freeSize:%d"</literal></expr></argument>,
							<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>                
            </block_content>}</block></if>
            <else>else 
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name> <operator>+</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name><operator>)</operator> <operator>&gt;</operator> <name>MinFreeSize</name><operator>)</operator> <operator>||</operator>                                         
					<operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PoolConnMaxLifetime</name><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>force_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
							<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"unwarmed connection to "</literal>
							<literal type="string">"database:%s user:%s "</literal>
							<literal type="string">"node:%s backend_pid:%d nodeidx:%d lifetime expired, "</literal>
							<literal type="string">"closed it, size:%d freeSize:%d"</literal></expr></argument>,
							<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>    
        <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name> <operator>+</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name><operator>)</operator> <operator>&gt;</operator> <name>MinFreeSize</name><operator>)</operator> <operator>||</operator>                                         
			<operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PoolConnMaxLifetime</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>force_destroy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"connection to "</literal>
					<literal type="string">"database:%s user:%s "</literal>
					<literal type="string">"node:%s backend_pid:%d nodeidx:%d lifetime expired, "</literal>
					<literal type="string">"closed it, size:%d freeSize:%d"</literal></expr></argument>,
					<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
					<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
					<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* return or discard */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_destroy</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* add the unwarmed slot to async thread */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_warm</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ASYNC_PIPE_FULL</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>DecreaseSlotRefCount</name><argument_list>(<argument><expr><name>slot</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pooler_async_warm_connection</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>nodePool</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>grow_pool</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>        
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>checked</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>  <name>PoolSizeCheckGap</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ASYNC_PIPE_FULL</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>                
                <comment type="block">/* increase the warm connection count */</comment>
                <expr_stmt><expr><call><name>DecreaseSlotRefCount</name><argument_list>(<argument><expr><name>slot</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pooler_async_query_connection</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>grow_pool</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Insert the slot into the array and increase pool free size */</comment>
                <expr_stmt><expr><call><name>DecreaseSlotRefCount</name><argument_list>(<argument><expr><name>slot</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>    
                <expr_stmt><expr><call><name>IncreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection return connection to "</literal>
						<literal type="string">"database:%s user:%s "</literal>
						<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
						<literal type="string">"nodepool size:%d freeSize:%d"</literal></expr></argument>,
						<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Cleaning up connection from pool %s, closing"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection destory connection to "</literal>
				<literal type="string">"database:%s user:%s "</literal>
				<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
				<literal type="string">"nodepool size:%d freeSize:%d"</literal></expr></argument>,
				<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Decrease pool size */</comment>
        <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Ensure we are not below minimum size, here we don't need sync build */</comment>            
        <comment type="block">/* only grow pool when pool needed. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_pool</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>grow_pool</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnMaxLifetime</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
			<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"release_connection has not destoried connection to "</literal>
			<literal type="string">"database:%s user:%s "</literal>
			<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
			<literal type="string">"nodepool size:%d freeSize:%d"</literal></expr></argument>,
			<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
			<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
			<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Increase database pool size, create new if does not exist
 */</comment>
<function><type><specifier>static</specifier> <name>PGXCNodePool</name> <modifier>*</modifier></type>
<name>grow_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name></decl>;</decl_stmt>    

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>build_node_conn_str</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"could not build connection string for node %u"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>MaxPoolSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name>      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>get_node_name_by_nodeoid</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>name_str</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get node %u name failed"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><literal type="string">"grow_pool: nodePools of node (%u, %s) is created."</literal></expr></argument>,
			<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <comment type="block">/* here, we move the connection build work to async threads */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>asyncInProgress</name></name> <operator>&amp;&amp;</operator> <name><name>dbPool</name><operator>-&gt;</operator><name>bneed_pool</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* async build connection to other nodes, at least keep 10 free connection in the pool */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>InitPoolSize</name> <operator>||</operator> <operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&lt;</operator> <name>MinFreeSize</name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>MaxPoolSize</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* total pool size CAN NOT be larger than agentCount too much, to avoid occupying idle connection slot of datanode */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>agentCount</name> <operator>+</operator> <name>MinFreeSize</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int32</name></type> <name>size</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int32</name></type> <name>initSize</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int32</name></type> <name>minFreeSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><name>initSize</name>    <operator>=</operator> <ternary><condition><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>InitPoolSize</name></expr> ?</condition><then> <expr><name>InitPoolSize</name> <operator>-</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>minFreeSize</name> <operator>=</operator> <ternary><condition><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&lt;</operator> <name>MinFreeSize</name></expr> ?</condition><then> <expr><name>MinFreeSize</name> <operator>-</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name>        <operator>=</operator> <ternary><condition><expr><name>minFreeSize</name> <operator>&gt;</operator> <name>initSize</name></expr> ?</condition><then> <expr><name>minFreeSize</name></expr> </then><else>: <expr><name>initSize</name></expr></else></ternary></expr>;</expr_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition>
                <block>{<block_content>
    				<if_stmt><if>if <condition>(<expr><call><name>pooler_async_build_connection</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
    					<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>asyncInProgress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>MaxPoolSize</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pool %s Size:%d exceed MaxPoolSize:%d"</literal></expr></argument>,
             <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>,
             <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
             <argument><expr><name>MaxPoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nodePool</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Destroy pool slot, including slot itself.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_slot_ex</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>                  <name>threadid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name></type>              <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnectReq</name> <modifier>*</modifier></type><name>connReq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>        <name>oldcontext</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>pg_conn</name></name><modifier>*</modifier></type>  <name>tmp_conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>    

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* should never happened */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* record last time destory position */</comment>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>file</name></name>   <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>||</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_slot invalid slot status, null pointer conn:%p xc_cancelConn:%p"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if no free pipe line avaliable, just do it sync */</comment>
    <expr_stmt><expr><name>threadid</name> <operator>=</operator> <call><name>pooler_async_task_pick_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>threadid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_slot_ex no pipeline avaliable, sync close connection node:%u nodeidx:%d usecount:%d slot_seq:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><call><name>PGXCNodeClose</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>connReq</name>            <operator>=</operator> <operator>(</operator><name>PGXCPoolConnectReq</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolConnectReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>cmd</name></name>       <operator>=</operator> <name>COMMAND_CONNECTION_CLOSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>nodeoid</name></name>   <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>validSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>nodeindex</name></name> <operator>=</operator> <name>nodeidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xc_cancelConn</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name>          <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seqnum</name>        <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bdestoryed</name>    <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>file</name>          <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lineno</name>        <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>tmp_conn</name> <operator>=</operator> <operator>(</operator>struct <name>pg_conn</name><operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_slot_ex close conn remote backendid:%d remoteip:%s %s pgport:%s dbname:%s dbuser:%s"</literal></expr></argument>, 
                    <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>be_pid</name></name></expr></argument>, <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>pghost</name></name></expr></argument>, <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr></argument>, <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>, 
                    <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
                    <argument><expr><name><name>tmp_conn</name><operator>-&gt;</operator><name>pguser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>connReq</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_slot_ex fail to async close connection node:%u for loops %lu"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    
    <comment type="block">/* signal thread to start build job */</comment>
    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolConnControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
         <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy_slot_ex async close connection node:%u nodeidx:%d threadid:%d usecount:%d slot_seq:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>threadid</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* set destroy flag */</comment>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Close pool slot, don't free the slot itself.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_slot</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>threadid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnectReq</name> <modifier>*</modifier></type><name>connReq</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>||</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"close_slot invalid slot status, null pointer conn:%p xc_cancelConn:%p"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* if no free pipe line avaliable, just do it sync */</comment>
    <expr_stmt><expr><name>threadid</name> <operator>=</operator> <call><name>pooler_async_task_pick_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>threadid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"no pipeline avaliable, sync close connection node:%u nodeidx:%d usecount:%d slot_seq:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><call><name>PGXCNodeClose</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    
    <expr_stmt><expr><name>connReq</name>            <operator>=</operator> <operator>(</operator><name>PGXCPoolConnectReq</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolConnectReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>cmd</name></name>       <operator>=</operator> <name>COMMAND_CONNECTION_CLOSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>nodeoid</name></name>   <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>validSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xc_cancelConn</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name>          <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>connReq</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>	
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async close connection node:%u for loops %lu"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    
    <comment type="block">/* signal thread to start build job */</comment>
    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolConnControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async close connection node:%u nodeidx:%d threadid:%d usecount:%d slot_seq:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name>threadid</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* set destroy flag */</comment>
    <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Destroy node pool
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_node_pool</name><parameter_list>(<parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>node_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node_pool</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * At this point all agents using connections from this pool should be already closed
     * If this not the connections to the Datanodes assigned to them remain open, this will
     * consume Datanode resources.
     */</comment>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"About to destroy node pool %s, current size is %d, %d connections are in use"</literal></expr></argument>,
         <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node_pool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>nodeidx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy free slot of the node pool
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_node_pool_free_slots</name><parameter_list>(<parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>node_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node_pool</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"About to destroy slots of node pool %s, node_pool version:%lu "</literal>
			<literal type="string">"agentCount is %d current size is %d, freeSize is %d, %d connections are in use"</literal></expr></argument>,
			<argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>,
			<argument><expr><name>agentCount</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>nodeidx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>            
            <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name>     <operator>-=</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</expr_stmt>        
		<expr_stmt><expr><name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * setup current log time
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_formatted_current_log_time</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>formatted_current_log_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pg_time_t</name></type>	<name>stamp_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>		<name><name>msbuf</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeval</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stamp_time</name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <name><name>timeval</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Note: we expect that guc.c will ensure that log_timezone is set up (at
     * least with a minimal GMT value) before Log_line_prefix can become
     * nonempty or CSV mode can be selected.
     */</comment>
    <expr_stmt><expr><call><name>pg_strftime</name><argument_list>(<argument><expr><name>formatted_current_log_time</name></expr></argument>, <argument><expr><name>FORMATTED_TS_LEN</name></expr></argument>,
            <comment type="block">/* leave room for milliseconds... */</comment>
                <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S     %Z"</literal></expr></argument>,
                <argument><expr><call><name>pg_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stamp_time</name></expr></argument>, <argument><expr><name>log_timezone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 'paste' milliseconds into place... */</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msbuf</name></expr></argument>, <argument><expr><literal type="string">".%03d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>timeval</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>formatted_current_log_time</name> <operator>+</operator> <literal type="number">19</literal></expr></argument>, <argument><expr><name>msbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * write pooler's subthread log into thread log queue
 * only call by pooler's subthread in elog
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pooler_subthread_write_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>formatted_current_log_time</name><index>[<expr><name>FORMATTED_TS_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PoolSubThreadLogPrint</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* not enable sun thread log print, return */</comment>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PipeIsFull</name><argument_list>(<argument><expr><name>g_ThreadLogQueue</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* use malloc in sub thread */</comment>
    <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>DEFAULT_LOG_BUF_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* no log */</comment>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* construction log, format: elevel | lineno | filename | funcname | log content */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>=</operator> <name>elevel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>elevel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * because the main thread writes the log of the sub thread asynchronously,
     * record the actual log writing time here
     */</comment>
    <expr_stmt><expr><call><name>setup_formatted_current_log_time</name><argument_list>(<argument><expr><name>formatted_current_log_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>formatted_current_log_time</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>formatted_current_log_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>formatted_current_log_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="block">/* Generate actual output --- have to use appendStringInfoVA */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>			<name>avail</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>			<name>nprinted</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>avail</name> <operator>=</operator> <name>buf_len</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nprinted</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>avail</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nprinted</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nprinted</name> <operator>&lt;</operator> <name>avail</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>nprinted</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>buf_len</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>MaxAllocSize</name><operator>)</operator></expr> ?</condition><then> <expr><name>MaxAllocSize</name></expr> </then><else>: <expr><name>buf_len</name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* no log */</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* put log into thread log queue, drop log if queue is full */</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name>g_ThreadLogQueue</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * write subthread log in main thread
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pooler_handle_subthread_log</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_pooler_exit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>write_log_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>elevel</name> <init>= <expr><name>LOG</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>funcname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log_content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>log_buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name>g_ThreadLogQueue</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* elevel | lineno | filename | funcname | log content */</comment>
        <expr_stmt><expr><name>elevel</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>log_buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>elevel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineno</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>log_buf</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>filename</name> <operator>=</operator> <name>log_buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>funcname</name> <operator>=</operator> <name>log_buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>log_content</name> <operator>=</operator> <name>log_buf</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

        <comment type="block">/* write log here */</comment>
        <expr_stmt><expr><call><name>elog_start</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MODULE_MSGIDS</name></cpp:ifdef>
                <argument><expr><name>PGXL_MSG_MODULE</name></expr></argument>, <argument><expr><name>PGXL_MSG_FILEID</name></expr></argument>, <argument><expr><name>__COUNTER__</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog_finish</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>log_content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>log_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * if the number of logs written at one time exceeds POOLER_WRITE_LOG_ONCE_LIMIT,
         * in order not to block the main thread, return here
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>write_log_cnt</name><operator>++</operator> <operator>&gt;=</operator> <name>POOLER_WRITE_LOG_ONCE_LIMIT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_pooler_exit</name></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Main handling loop
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PoolerLoop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>           <name>warm_inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>input_message</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>maxfd</name>       <init>= <expr><name>MaxConnections</name> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pool_fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>           <name>last_maintenance</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>               <name>timeout_val</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnThreadParam</name></type>     <name><name>connParam</name><index>[<expr><name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></decl>;</decl_stmt>    
    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>Unix_socket_directories</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>rawstring</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>elemlist</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>         <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Need a modifiable copy of Unix_socket_directories */</comment>
        <expr_stmt><expr><name>rawstring</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>Unix_socket_directories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Parse string into list of directories */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitDirectoriesString</name><argument_list>(<argument><expr><name>rawstring</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elemlist</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* syntax error in list */</comment>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid list syntax in parameter \"%s\""</literal></expr></argument>,
                            <argument><expr><literal type="string">"unix_socket_directories"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>elemlist</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>socketdir</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>         <name>saved_errno</name></decl>;</decl_stmt>

            <comment type="block">/* Connect to the pooler */</comment>
            <expr_stmt><expr><name>server_fd</name> <operator>=</operator> <call><name>pool_listen</name><argument_list>(<argument><expr><name>PoolerPort</name></expr></argument>, <argument><expr><name>socketdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>server_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>saved_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create Unix-domain socket in directory \"%s\", errno %d, server_fd %d"</literal></expr></argument>,
                                <argument><expr><name>socketdir</name></expr></argument>, <argument><expr><name>saved_errno</name></expr></argument>, <argument><expr><name>server_fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>success</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>elemlist</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to start listening on Unix-domain socket for pooler: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name>elemlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rawstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* create log queue */</comment>
    <expr_stmt><expr><name>g_ThreadLogQueue</name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>MAX_THREAD_LOG_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create utility thread */</comment>
    <expr_stmt><expr><name>g_AsynUtilityPipeSender</name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>POOL_ASYN_WARM_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ThreadSemaInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_AsnyUtilitysem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_AsynUtilityPipeRcver</name>  <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>POOL_ASYN_WARM_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>pooler_async_utility_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MT_THR_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:create utility thread failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Create concurrent connection pipes for build batch connection request and close connection request */</comment>
    <expr_stmt><expr><call><name>pooler_init_sync_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>request</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>response</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ThreadSemaInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolConnControl</name><operator>.</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>connParam</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>pooler_async_connection_management_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>connParam</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MT_THR_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:create connection manage thread failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    


    <comment type="block">/* Create sync network operation pipes for remote nodes */</comment>
    <expr_stmt><expr><call><name>pooler_init_sync_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>request</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>response</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CreatePipe</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_PIPE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ThreadSemaInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>connParam</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>pooler_sync_remote_operator_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>connParam</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MT_THR_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:create connection manage thread failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    
    
    <expr_stmt><expr><name>pool_fd</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>maxfd</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>server_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* log error */</comment>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"PoolerLoop begin server_fd:%d"</literal></expr></argument>, <argument><expr><name>server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pool_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>server_fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pool_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt> <comment type="line">//POLLRDNORM;</comment>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>pool_fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pool_fd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLPRI</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLRDBAND</name></expr>;</expr_stmt>
    </block_content>}</block></for>

	<expr_stmt><expr><call><name>reset_pooler_statistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init_pooler_cmd_statistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>got_SIGHUP</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>got_SIGHUP</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/*
         * Emergency bailout if postmaster has died.  This is to avoid the
         * necessity for manual cleanup of all postmaster children.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PostmasterIsAlive</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pooler_handle_subthread_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* watch for incoming messages */</comment>
        <expr_stmt><expr><call><name>RebuildAgentIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int32</name></type>      <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>        <name>sockfd</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name>index</name>  <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>agent</name>  <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
            
            <comment type="block">/* skip the agents in async deconstruct progress */</comment>
            <expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>Socket</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pool_fd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
            
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>shutdown_requested</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* 
             *  Just close the socket and exit. Linux will help to release the resouces.
              */</comment>        
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pooler_handle_subthread_log</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        

        <if_stmt><if>if <condition>(<expr><name>PoolMaintenanceTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>            
            <decl_stmt><decl><type><name>double</name></type>            <name>timediff</name></decl>;</decl_stmt>

            <comment type="block">/*
             * Decide the timeout value based on when the last
             * maintenance activity was carried out. If the last
             * maintenance was done quite a while ago schedule the select
             * with no timeout. It will serve any incoming activity
             * and if there's none it will cause the maintenance
             * to be scheduled as soon as possible
             */</comment>
            <expr_stmt><expr><name>timediff</name> <operator>=</operator> <call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>last_maintenance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>timediff</name> <operator>&gt;</operator> <name>PoolMaintenanceTimeout</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>timeout_val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>timeout_val</name> <operator>=</operator> <name>PoolMaintenanceTimeout</name> <operator>-</operator> <call><name>rint</name><argument_list>(<argument><expr><name>timediff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
    
            <comment type="block">/* wait for event */</comment>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pool_fd</name></expr></argument>, <argument><expr><name>agentCount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout_val</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pool_fd</name></expr></argument>, <argument><expr><name>agentCount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>        
        
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"poll returned with error %d"</literal></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* add warmed connection to node pool before agent acquiring new connection */</comment>
        <expr_stmt><expr><call><name>pooler_sync_connections_to_nodepool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pooler_handle_sync_response_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Agent may be removed from the array while processing
             * and trailing items are shifted, so scroll downward
             * to avoid problem
             */</comment>
            <decl_stmt><decl><type><name>int32</name></type>      <name>index</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>        <name>sockfd</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>agentCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>index</name>  <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>agent</name>  <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>            
                
                <expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>Socket</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockfd</name> <operator>==</operator> <name><name>pool_fd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pool_fd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>agent_handle_input</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name><name>pool_fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>new_fd</name> <init>= <expr><call><name>accept</name><argument_list>(<argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>new_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler manager failed to accept connection: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>saved_errno</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>agent_create</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* maintaince time out */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>timeout_val</name> <operator>&amp;&amp;</operator> <name>PoolMaintenanceTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* maintain the connection pool */</comment>
            <expr_stmt><expr><call><name>pools_maintenance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PoolAsyncPingNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_maintenance</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* create preload database pooler */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>warm_inited</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>connect_pools</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>warm_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pooler_pools_warm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
        <expr_stmt><expr><call><name>RebuildAgentIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>check_pooler_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_hashtab_slots</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check_duplicate_allocated_conn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>print_pooler_statistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* handle sub thread's log */</comment>
        <expr_stmt><expr><call><name>pooler_handle_subthread_log</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * Clean Connection in all Database Pools for given Datanode and Coordinator list
 */</comment>
<function><type><name>int</name></type>
<name>clean_connection</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node_discard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name> <init>= <expr><name>CLEAN_CONNECTION_COMPLETED</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>database</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                <operator>(</operator><name>user_name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* The pool does not match to request, skip */</comment>
            <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Clean each requested node pool
         */</comment>
        <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>node_discard</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Oid</name></type> <name>node</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>nodePool</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Check if connections are in use */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pool of Database %s is using Datanode %u connections, freeSize:%d, size:%d"</literal></expr></argument>,
                                <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>CLEAN_CONNECTION_NOT_COMPLETED</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Destroy connections currently in Node Pool */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int32</name></type> <name>nodeidx</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>

        <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Release lock on Pooler, to allow transactions to connect again. */</comment>
    <expr_stmt><expr><name>is_pool_locked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Take a Lock on Pooler.
 * Abort PIDs registered with the agents for the given database.
 * Send back to client list of PIDs signaled to watch them.
 */</comment>
<function><type><name>int</name> <modifier>*</modifier></type>
<name>abort_pids</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name>   <modifier>*</modifier></type><name>pids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>index</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_pool_locked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>agentCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>is_pool_locked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RebuildAgentIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>pids</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>agentCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send a SIGTERM signal to all processes of Pooler agents except this one */</comment>
    <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>count</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>database</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>user_name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"kill(%ld,%d) failed: %m"</literal></expr></argument>,
                        <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>pids</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pid</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

    <return>return <expr><name>pids</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pooler_die</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>pooler_sig_hup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>got_SIGHUP</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pooler_quickdie</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PG_SETMASK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BlockSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>IsPoolHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>poolHandle</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Given node identifier, dbname and user name build connection string.
 * Get node connection details from the shared memory node table
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>build_node_conn_str</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NodeDefinition</name> <modifier>*</modifier></type><name>nodeDef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>connstr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nodeDef</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodeDef</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No such definition, node is dropped? */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>connstr</name> <operator>=</operator> <call><name>PGXCNodeConnStr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodeport</name></name></expr></argument>,
                              <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>,
                              <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
                              <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>pgoptions</name></name></expr></argument>,
                              <argument><expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><literal type="string">"coordinator"</literal></expr> </then><else>: <expr><literal type="string">"datanode"</literal></expr></else></ternary></expr></argument>,
                              <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>connstr</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 * Check all pooled connections, and close which have been released more then
 * PooledConnKeepAlive seconds ago.
 * Return true if shrink operation closed all the connections and pool can be
 * ddestroyed, false if there are still connections or pool is in use.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>shrink_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>           <name>freeCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>             <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>nodeidx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>empty</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Negative PooledConnKeepAlive disables automatic connection cleanup */</comment>
    <if_stmt><if>if <condition>(<expr><name>PoolConnKeepAlive</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* 
         *    Go thru the free slots and destroy those that are free too long, free a long free connection.
         *  Use MAX_FREE_CONNECTION_NUM to control the loop number.
        */</comment>
        <expr_stmt><expr><name>freeCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&amp;&amp;</operator> <name>freeCount</name> <operator>&lt;</operator> <name>MAX_FREE_CONNECTION_NUM</name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>MinPoolSize</name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&gt;=</operator> <name>MinFreeSize</name></expr>;</condition> <incr/>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* no need to shrik warmed slot, only discard them when they use too much memroy */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnKeepAlive</name><operator>)</operator> <operator>||</operator> 
                                      <operator>(</operator><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PoolConnMaxLifetime</name><operator>)</operator><operator>)</operator></expr>)</condition>
                <block>{<block_content>                    
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
							<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"shrink_pool destroy a connection to "</literal>
							<literal type="string">"database:%s user:%s "</literal>
							<literal type="string">"node:%s backend_pid:%d nodeidx:%d "</literal>
							<literal type="string">"nodepool size:%d freeSize:%d"</literal></expr></argument>,
							<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <comment type="block">/* connection is idle for long, close it */</comment>                    
                    <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <comment type="block">/* reduce pool size and total number of connections */</comment>
                    <expr_stmt><expr><call><name>DecreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <comment type="block">/* move last connection in place, if not at last already */</comment>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name>                  <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>freeCount</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal> <operator>||</operator>
                            <call><name>difftime</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid NULL index %d node:%u, poolsize:%d, freeSize:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                                                          <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, 
                                                                                          <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, 
                                                                                          <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                <expr_stmt><expr><call><name>DecreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>freeCount</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"close %d long time free connections of "</literal>
						<literal type="string">"database:%s user:%s "</literal>
						<literal type="string">"node:%u, poolsize:%d, freeSize:%d"</literal></expr></argument>,
						<argument><expr><name>freeCount</name></expr></argument>,
						<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* only grow pool when pool needed. */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>bneed_pool</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>grow_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        
		<if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnMaxLifetime</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"shrink_pool found connection to "</literal>
						<literal type="string">"database:%s user:%s "</literal>
						<literal type="string">"nodename:%s nodeid:%d "</literal>
						<literal type="string">"nodepool size:%d freeSize:%d that should be destoried."</literal></expr></argument>,
						<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><literal type="string">"shrink_pool: nodePools of node (%u, %s) is removed."</literal></expr></argument>,
					<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>destroy_node_pool</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * Last check, if any active agent is referencing the pool do not allow to
     * destroy it, because there will be a problem if session wakes up and try
     * to get a connection from non existing pool.
     * If all such sessions will eventually disconnect the pool will be
     * destroyed during next maintenance procedure.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RebuildAgentIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name>pool</name> <operator>==</operator> <name>pool</name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>empty</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Scan connection pools and release connections which are idle for long.
 * If pool gets empty after releasing connections it is destroyed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pools_maintenance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>            <name>bresult</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <comment type="line">//DatabasePool   *prev = NULL;</comment>
    <decl_stmt><decl><type><name>DatabasePool</name>   <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>databasePools</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>            <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    

    <comment type="block">/* Iterate over the pools */</comment>
    <while>while <condition>(<expr><name>curr</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * If current pool has connections to close and it is emptied after
         * shrink remove the pool and free memory.
         * Otherwithe move to next pool.
         */</comment>
        <expr_stmt><expr><name>bresult</name> <operator>=</operator> <call><name>shrink_pool</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bresult</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
            MemoryContext mem = curr-&gt;mcxt;
            curr = curr-&gt;next;
            if (prev)
            {
                prev-&gt;next = curr;
            }
            else
            {
                databasePools = curr;
            }
            MemoryContextDelete(mem);
            count++;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* async warm the pool */</comment>
            <expr_stmt><expr><call><name>pooler_async_warm_database_pool</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//prev = curr;</comment>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pool maintenance, done in %f seconds, removed %d pools"</literal></expr></argument>,
            <argument><expr><call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Process async msg from async threads */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_handle_sync_response_queue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>              <name>addcount</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>threadIndex</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name>   <modifier>*</modifier></type><name>connRsp</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>PoolAgent</name>            <modifier>*</modifier></type><name>agent</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* sync new connection node into hash table */</comment>
    <expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>threadIndex</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>)</condition>
    <block>{<block_content>    
        <for>for <control>(<init><expr><name>addcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>addcount</name> <operator>&lt;</operator> <name>POOL_SYN_REQ_CONNECTION_NUM</name></expr>;</condition> <incr><expr><name>addcount</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>connRsp</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>connRsp</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* decrease agent ref count */</comment>
            <expr_stmt><expr><name>agent</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>agent_decrease_ref_count</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="char">'g'</literal></expr>:</case>    <comment type="block">/* acquire connection */</comment>
                <block>{<block_content>        
                    
                    <expr_stmt><expr><call><name>record_time</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <switch>switch <condition>(<expr><call><name>get_task_status</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>PoolAyncCtlStaus_init</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[pooler_handle_sync_response_queue] PoolAyncCtlStaus_init status match, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>PoolAyncCtlStaus_dispatched</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[pooler_handle_sync_response_queue] PoolAyncCtlStaus_dispatched status match, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>    
                        <case>case <expr><name>PoolAyncCtlStaus_butty</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[pooler_handle_sync_response_queue] PoolAyncCtlStaus_butty status match, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>    
                        <case>case <expr><name>PoolAyncCtlStaus_done</name></expr>:</case>
                        <block>{<block_content>                                    
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>needfree</name></name></expr>)</condition>
                            <block>{<block_content>            
                                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue last acquire request node:%u nodeindex:%d pid:%d req_seq:%d finish, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                                <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle acquire request node:%u nodeindex:%d pid:%d req_seq:%d finish, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>                                
                            </block_content>}</block></else></if_stmt>    
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>

                        <case>case <expr><name>PoolAyncCtlStaus_error</name></expr>:</case>
                        <block>{<block_content>
                            <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                            <block>{<block_content>                
                                <case>case <expr><name>PoolConnectStaus_connected</name></expr>:</case>
                                <case>case <expr><name>PoolConnectStaus_set_param</name></expr>:</case>
                                <case>case <expr><name>PoolConnectStaus_done</name></expr>:</case>
                                <case>case <expr><name>PoolConnectStaus_destory</name></expr>:</case>
                                <block>{<block_content>    
                                    <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>needfree</name></name></expr>)</condition>
                                    <block>{<block_content>            
                                        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue controller error last request node:%u nodeindex:%d pid:%d req_seq:%d finish, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                            
                                        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <comment type="block">/* no need to free slot */</comment>
                                    </block_content>}</block></if>                
                                    <else>else
                                    <block>{<block_content>
                                        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue controller error middle request node:%u nodeindex:%d pid:%d req_seq:%d finish, conn msg:%s"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>                                        
                                    </block_content>}</block></else></if_stmt>
                                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </block_content>}</block>

                                <case>case <expr><name>PoolConnectStaus_error</name></expr>:</case>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue node:%u nodeindex:%d  pid:%d parallel thread errmsg:%s req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    
                                    <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>needfree</name></name></expr>)</condition>
                                    <block>{<block_content>            
                                        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue last acquire request node:%u nodeindex:%d  pid:%d finish with ERROR_MSG:%s req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if>
                                    <else>else
                                    <block>{<block_content>
                                        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle acquire request node:%u nodeindex:%d  pid:%d finish with ERROR_MSG:%s req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></else></if_stmt>
                                    
                                    <comment type="block">/* free the slot */</comment>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue destory ERROR!! acquire request node:%u nodeindex:%d pid:%d finish with ERROR_MSG:%s req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <comment type="block">/* then destory the slot */</comment>
                                    <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>needConnect</name></name></expr>)</condition>
                                    <block>{<block_content>            
                                        <comment type="block">/* failed, decrease count */</comment>
                                        <expr_stmt><expr><call><name>DecreasePoolerSizeAsync</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
                                        <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
                                        <block>{<block_content>
                                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
                                            <block>{<block_content>                                        
                                                <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            </block_content>}</block></if>
                                            <else>else
                                            <block>{<block_content>
                                                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            </block_content>}</block></else></if_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></if>            
                                    <if type="elseif">else if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>final_status</name></name> <operator>!=</operator> <name>PoolConnectStaus_destory</name></expr>)</condition>
                                    <block>{<block_content>
                                        <comment type="block">/* Close the slot when connect error. */</comment>
                                        <decl_stmt><decl><type><name>Oid</name></type>               <name>nodeoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                                        <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name>slot</name>    <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                        </block_content>}</block></if>
                                        <else>else
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name>slot</name>    <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                        </block_content>}</block></else></if_stmt>
                            
                                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue force to close connection for timeout node:%u bCoord:%d nodeindex:%d pid:%d when acquire"</literal></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            
                                        <comment type="block">/* Force to close the connection. */</comment>
                                        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></if></if_stmt>
                                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </block_content>}</block>
                                <default>default:</default>
                                <block>{<block_content>
                                    <comment type="block">/* should never happen */</comment>
                                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block>
                            </block_content>}</block></switch>
                        </block_content>}</block>
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>        
                
                <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* Disconnect */</comment>
                    <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case  <expr><name>PoolResetStatus_reset</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue middle disconnect bCoord:%d nodeindex:%d pid:%d finish++++ "</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <comment type="block">/* Error occured, we close the connection now. */</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>Oid</name></type>               <name>nodeOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>slot</name>    <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>nodeOid</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                    
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>nodeOid</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>                                
                                
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue force to close connection for node:%u bCoord:%d nodeindex:%d pid:%d finish. setquery_status=%d"</literal></expr></argument>, <argument><expr><name>nodeOid</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <comment type="block">/* Force to close the connection. */</comment>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>nodeOid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue no necessary to force to close connection for node:%u bCoord:%d nodeindex:%d pid:%d finish. slot already closed."</literal></expr></argument>, 
                                                             <argument><expr><name>nodeOid</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case  <expr><name>PoolResetStatus_destory</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue last disconnect bCoord:%d nodeindex:%d pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            
                            <comment type="block">/* return connections to nodepool */</comment>
                            <expr_stmt><expr><call><name>agent_return_connections</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                            <comment type="block">/* Free memory. All connection slots are NULL at this point */</comment>
                            <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            

                            <expr_stmt><expr><call><name>agent_destory_task_control</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                            <comment type="block">/* agent has been destoryed, clear the pointer */</comment>
                            <expr_stmt><expr><name>agent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <default>default:</default>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'b'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* Fire transaction-block commands on given nodes */</comment>
                    <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>                        
                        <case>case <expr><name>PoolLocalSetStatus_reset</name></expr>:</case>    
                        <block>{<block_content>        
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue middle local set request bCoord:%d nodeindex:%d pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle local set request bCoord:%d nodeindex:%d pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <case>case <expr><name>PoolLocalSetStatus_destory</name></expr>:</case>
                        <block>{<block_content>                    
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue last local set request bCoord:%d nodeindex:%d pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle local set request bCoord:%d nodeindex:%d pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>                            
                            
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <default>default:</default>
                        <block>{<block_content>
                            <comment type="block">/* should never happens */</comment>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>                        
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'h'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* Cancel SQL Command in progress on specified connections */</comment>
                    <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>                        
                        <case>case <expr><name>PoolCancelStatus_cancel</name></expr>:</case>    
                        <case>case <expr><name>PoolCancelStatus_end_query</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>                                
                            
                            
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue middle CANCLE_QUERY bCoord:%d nodeindex:%d nodename:%s backend_pid:%d session_pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue CANCLE_QUERY bCoord:%d nodeindex:%d nodename:%s backend_pid:%d session_pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <case>case <expr><name>PoolCancelStatus_destory</name></expr>:</case>
                        <block>{<block_content>                    
                            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue last CANCLE_QUERY bCoord:%d nodeindex:%d nodename:%s backend_pid:%d session_pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue last CANCLE_QUERY bCoord:%d nodeindex:%d nodename:%s backend_pid:%d session_pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>                        
                            
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <default>default:</default>
                        <block>{<block_content>
                            <comment type="block">/* should never happens */</comment>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>    
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>
                
                <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* Session-related COMMAND */</comment>
                    <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case  <expr><name>PoolSetCommandStatus_set</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>Oid</name></type>               <name>nodeoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
                            
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue set command bCoord:%d nodeindex:%d pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>                                                        
                            
                            <comment type="block">/* Close the slot when connect error. */</comment>                                
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>slot</name>    <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>slot</name>    <operator>=</operator>  <name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            
                            <comment type="block">/* when set expired, close conn. If error, keep it */</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>&amp;&amp;</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name> <operator>==</operator> <name>SendSetQuery_EXPIRED</name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle set command request bCoord:%d nodeindex:%d node:%u pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue force to close connection for timeout node:%u bCoord:%d nodeindex:%d pid:%d when set"</literal></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    
                                <comment type="block">/* Force to close the connection. */</comment>
                                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if>
                            <if type="elseif">else if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <comment type="block">/* error happend when set. but we only close conn when set timeout */</comment>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue middle set command request bCoord:%d nodeindex:%d nodeoid:%u pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case  <expr><name>PoolSetCommandStatus_destory</name></expr>:</case>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++pooler_handle_sync_response_queue final set command bCoord:%d nodeindex:%d pid:%d finish++++"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>error_flag</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_handle_sync_response_queue final set command request bCoord:%d nodeindex:%d pid:%d ERROR!! ERROR_MSG:%s, setquery_status=%d"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            
                            <comment type="block">/* free memory */</comment>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <default>default:</default>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <comment type="block">/* should never happens */</comment>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>update_pooler_cmd_statistics</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>cmd_end_time</name></name> <operator>-</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <comment type="block">/* handle pending agent, if any */</comment>
            <expr_stmt><expr><call><name>agent_handle_pending_agent</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>threadIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_sync_connections_to_nodepool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>               <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>nodeidx</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>addcount</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>threadIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>connIndex</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int32</name></type>              <name>nClose</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>nReset</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>              <name>nWarm</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>               <name>nJudge</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    
    <decl_stmt><decl><type><name>PGXCNodePool</name>       <modifier>*</modifier></type><name>nodePool</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCAsyncWarmInfo</name>  <modifier>*</modifier></type><name>asyncInfo</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnectReq</name> <modifier>*</modifier></type><name>connRsp</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>   <modifier>*</modifier></type><name>slot</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>

    <comment type="block">/* sync async connection command from connection manage thread */</comment>
    <while>while <condition>(<expr><name>addcount</name> <operator>&lt;</operator> <name>POOL_SYN_CONNECTION_NUM</name></expr>)</condition>
    <block>{<block_content>        
        <expr_stmt><expr><name>asyncInfo</name> <operator>=</operator> <operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeRcver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>asyncInfo</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        
        <switch>switch <condition>(<expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>COMMAND_CONNECTION_NEED_CLOSE</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
                                    <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:no entry inside the hashtable of Oid:%u"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:connection of node:%u has %d MBytes, colse now"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler:warmed connection of node:%u has %d MBytes, colse now"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
                <comment type="block">/* time to close the connection */</comment>
                <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nodePool</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Decrement pool size */</comment>
                    <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nClose</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>

            <case>case <expr><name>COMMAND_CONNECTION_WARM</name></expr>:</case>
            <case>case <expr><name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name></expr>:</case>                
            <block>{<block_content>    
                <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>name_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                
                <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
                                    <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                <block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"The nodePool has not found when the slot is warmed up."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>dbPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"could not build connection string for node %u"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>MaxPoolSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name>      <operator>=</operator> <name>false</name></expr>;</expr_stmt> <comment type="block">/* in this case, only datanode */</comment>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>get_node_name_by_nodeoid</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>name_str</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get node %u name failed"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* time out when try to warm the connection, close it now */</comment>
                <if_stmt><if>if <condition>(<expr><name>COMMAND_CONNECTION_WARM</name> <operator>==</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name> <operator>&amp;&amp;</operator> <name>false</name> <operator>==</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <comment type="block">/* Decrease pool size */</comment>
                    <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                        
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destory connection to node:%u nodeidx:%d nodepool size:%d freeSize:%d for failed warm. set_query_status=%d"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>set_query_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                
                <comment type="block">/* fresh the touch timestamp */</comment>
                <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>released</name></name>  <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        

                <comment type="block">/* fresh the create timestamp to stop immediate check size */</comment>
                <if_stmt><if>if <condition>(<expr><name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name> <operator>==</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>checked</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>m_version</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Not Increase count of pool size, just the free size */</comment>
                    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>IncreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_sync_connections_to_nodepool return connection to node:%s backend_pid:%d nodeidx:%d nodepool size:%d freeSize:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>                    
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destory connection to node:%u "</literal>
							<literal type="string">"nodeidx:%d nodepool size:%d freeSize:%d for unmatch "</literal>
							<literal type="string">"version, slot-&gt;m_version:%lu, nodePool-&gt;m_version:%lu"</literal></expr></argument>,
							<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
							<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>,
							<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
                </block_content>}</block></else></if_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>COMMAND_CONNECTION_WARM</name> <operator>==</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
                <block>{<block_content>                    
                    <expr_stmt><expr><name>nWarm</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name> <operator>--</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async warm node:%u succeed, poolsize:%d, freeSize:%d, nwarming:%d, slot_seq:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name> <operator>==</operator> <name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
                <block>{<block_content>                    
                    <expr_stmt><expr><name>nJudge</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name> <operator>--</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async query node:%u succeed, poolsize:%d, freeSize:%d, nquery:%d, node:%u %d Mbytes, slot_seq:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>                

                <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node pool:%u invalid count nwarmin:%d nquery:%d "</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>

            <case>case <expr><name>COMMAND_PING_NODE</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Node (%s) back online!"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgxcNodeUpdateHealth</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not update health status of node (%s)"</literal></expr></argument>,
                         <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Health map updated to reflect HEALTHY node (%s)"</literal></expr></argument>,
                         <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <break>break;</break>


            <default>default:</default>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid async command %d"</literal></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>
        </block_content>}</block></switch>            
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>asyncInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name>addcount</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>addcount</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async connection process:Total:%d nClose:%d  nReset:%d nWarm:%d nJudge:%d"</literal></expr></argument>, <argument><expr><name>addcount</name></expr></argument>, <argument><expr><name>nClose</name></expr></argument>, <argument><expr><name>nReset</name></expr></argument>, <argument><expr><name>nWarm</name></expr></argument>, <argument><expr><name>nJudge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block">/* sync new connection node into hash table */</comment>
    <expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>threadIndex</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>)</condition>
    <block>{<block_content>    
        <decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>addcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>addcount</name> <operator>&lt;</operator> <name>POOL_SYN_REQ_CONNECTION_NUM</name></expr>;</condition> <incr><expr><name>addcount</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>connRsp</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolConnectReq</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>connRsp</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <switch>switch <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>COMMAND_CONNECTION_BUILD</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>name_str</name></decl>;</decl_stmt>
                    <comment type="block">/* search node pool hash to find the pool */</comment>
                    <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>dbPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler could not build connection string for node %u"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>MaxPoolSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name>      <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>bCoord</name></name></expr>;</expr_stmt> 
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                        <expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>get_node_name_by_nodeoid</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>name_str</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get node %u name failed"</literal></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
							<argument><expr><literal type="string">"pooler_sync_connections_to_nodepool: nodePools of "</literal>
							<literal type="string">"node (%u, %s) is created."</literal></expr></argument>,
							<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="block">/* add connection to hash table */</comment>
                    <for>for <control>(<init><expr><name>connIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>connIndex</name> <operator>&lt;</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr>;</condition> <incr><expr><name>connIndex</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                                     <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
                        <comment type="block">/* assign value to slot */</comment>
                        <expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>connIndex</name></expr>]</index></name></expr>;</expr_stmt>                
                        
                        <comment type="block">/* give the slot a seq number */</comment>
                        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name> <operator>=</operator> <call><name>pooler_get_slot_seq_num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name>      <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        
                        <comment type="block">/* store the connection info into node pool, if space is enough */</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>MaxPoolSize</name> <operator>&amp;&amp;</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>m_version</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name>   <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name>  <operator>=</operator> <name>now</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>checked</name></name>   <operator>=</operator> <name>now</name></expr>;</expr_stmt>    
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>                            
                            <expr_stmt><expr><call><name>IncreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>IncreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_sync_connections_to_nodepool add new connection to node:%s "</literal>
                                                         <literal type="string">"backend_pid:%d nodeidx:%d nodepool size:%d freeSize:%d connIndex:%d validSize:%d"</literal></expr></argument>, 
                                                            <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>,
                                                            <argument><expr><name>connIndex</name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="line">// print_pooler_slot(slot);</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                            <block>{<block_content>
								<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"destroy slot poolsize:%d, "</literal>
									<literal type="string">"freeSize:%d, node:%u, MaxPoolSize:%d, "</literal>
									<literal type="string">"connRsp-&gt;m_version:%lu, nodePool-&gt;m_version:%lu"</literal></expr></argument>,
                                                                                                                           <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, 
									<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>MaxPoolSize</name></expr></argument>,
									<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
                                    
                    </block_content>}</block></for>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>asyncInProgress</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async build succeed, poolsize:%d, freeSize:%d, node:%u"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, 
                                                                                            <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, 
                                                                                            <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    
                    <comment type="block">/* check if some node failed to connect, just release last socket */</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name> <operator>&lt;</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>connRsp</name><operator>-&gt;</operator><name>failed</name></name></expr>)</condition>
                    <block>{<block_content>                
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"failed to connect to Datanode:[%s], validSize:%d, size:%d, errmsg:%s"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, 
                                                                                                             <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr></argument>,
                                                                                                             <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
                                                                                                             <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr>]</index></name><operator>.</operator><name>conn</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PGXCNodeConnected</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <comment type="block">/* here, we need only close the connection */</comment>
                            <expr_stmt><expr><call><name>close_slot</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connRsp</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>connRsp</name><operator>-&gt;</operator><name>validSize</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>    
                    </block_content>}</block></if></if_stmt>
                    
                    <comment type="block">/* free the memory */</comment>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>connRsp</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><name>COMMAND_CONNECTION_CLOSE</name></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* just free the request */</comment>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>connRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>

                <default>default:</default>
                <block>{<block_content>
                    <comment type="block">/* should never happens */</comment>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></switch>
        </block_content>}</block></for>
        <expr_stmt><expr><name>threadIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/* async warm a conection */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_warm_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>nodePool</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCAsyncWarmInfo</name> <modifier>*</modifier></type><name>asyncInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>asyncInfo</name>                 <operator>=</operator> <operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCAsyncWarmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name>            <operator>=</operator> <name>COMMAND_CONNECTION_WARM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>dbPool</name></name>         <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name>           <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name>           <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeSender</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>asyncInfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async warm connection db:%s user:%s node:%u for loops %lu"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <comment type="block">/* increase warming count */</comment>
    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name><operator>++</operator></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_AsnyUtilitysem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async warm connection db:%s user:%s nwarming:%d node:%u slot_seq:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* async query the memrory usage of a conection */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_query_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCAsyncWarmInfo</name> <modifier>*</modifier></type><name>asyncInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>asyncInfo</name>                 <operator>=</operator> <operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCAsyncWarmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name>            <operator>=</operator> <name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>dbPool</name></name>         <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>slot</name></name>           <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodeindex</name></name>    <operator>=</operator> <name>nodeidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name>           <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeSender</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>asyncInfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async query connection db:%s user:%s node:%u for loops %lu"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_AsnyUtilitysem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async query connection db:%s user:%s node:%u"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* async ping a node */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_ping_node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCAsyncWarmInfo</name> <modifier>*</modifier></type><name>asyncInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeDefinition</name>       <modifier>*</modifier></type><name>nodeDef</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>nodeDef</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodeDef</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No such definition, node dropped? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Could not find node (%u) definition,"</literal>
             <literal type="string">" skipping health check"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodeishealthy</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* hmm, can this happen? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"node (%u) healthy!"</literal>
             <literal type="string">" skipping health check"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nodeDef</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"node (%s:%u) down! Trying ping"</literal></expr></argument>,
         <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>asyncInfo</name>                 <operator>=</operator> <operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCAsyncWarmInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>cmd</name></name>            <operator>=</operator> <name>COMMAND_PING_NODE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>node</name></name>           <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodeport</name></name>        <operator>=</operator> <name><name>nodeDef</name><operator>-&gt;</operator><name>nodeport</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async ping node, param: node=%u, nodehost=%s, nodeport=%d"</literal></expr></argument>, 
                    <argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>asyncInfo</name><operator>-&gt;</operator><name>nodeport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeSender</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>asyncInfo</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async ping node:%u for loops %lu"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_AsnyUtilitysem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async ping node:%u"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nodeDef</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></function>



<comment type="block">/* async batch connection build  */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>pooler_async_build_connection</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>pool_version</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeidx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connStr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bCoord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>threadid</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnectReq</name> <modifier>*</modifier></type><name>connReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>    

	<comment type="block">/* if no free pipe line avaliable, do nothing */</comment>
	<expr_stmt><expr><name>threadid</name> <operator>=</operator> <call><name>pooler_async_task_pick_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>threadid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"no pipeline avaliable, pooler_async_build_connection node:%u nodeidx:%d"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nodeidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connReq</name>  <operator>=</operator> <operator>(</operator><name>PGXCPoolConnectReq</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolConnectReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>cmd</name></name>       <operator>=</operator> <name>COMMAND_CONNECTION_BUILD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>connstr</name></name>   <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>connStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>nodeindex</name></name> <operator>=</operator> <name>nodeidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>nodeoid</name></name>   <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>dbPool</name></name>    <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>bCoord</name></name>    <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>size</name></name>      <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>validSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <name>pool_version</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadid</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>connReq</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>		
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async build connection db:%s user:%s node:%u size:%d for loops %lu"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    
    <comment type="block">/* signal thread to start build job */</comment>
	<expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolConnControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async build connection db:%s user:%s node:%u size:%d"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* aync acquire connection */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>dispatch_async_network_operation</name><parameter_list>(<parameter><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>threadid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>   <name>node</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>pipeput_loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* choose a thread to handle the msg */</comment>
    <expr_stmt><expr><name>threadid</name> <operator>=</operator> <call><name>pooler_async_task_pick_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* failed to pick up a thread */</comment>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>threadid</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>    
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d fail to pick a thread for operation coord:%d node:%u nodeindex:%d current_status:%d final_status:%d req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* remember how many request we have dispatched */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* dispatch the msg to the handling thread */</comment>
    <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>pipeput_loops</name><operator>++</operator></expr>;</expr_stmt>		
    </block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pipeput_loops</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to async network operation pid:%d bCoord:%d nodeindex:%d current_status:%d final_status:%d thread:%d req_seq:%d for loops %lu"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name>threadid</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>, <argument><expr><name>pipeput_loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <comment type="block">/* increase agent ref count */</comment>
    <expr_stmt><expr><call><name>agent_increase_ref_count</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* signal thread to start build job */</comment>
    <expr_stmt><expr><call><name>ThreadSemaUp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadid</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"async network operation pid:%d bCoord:%d nodeindex:%d succeed current_status:%d final_status:%d thread:%d req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name>threadid</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>req_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* async warm a database pool */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pooler_async_warm_database_pool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>             <name>i</name></decl>;</decl_stmt>
    
    <comment type="block">/* no need warm */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>bneed_warm</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* skip coordinator */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Go thru the free slots and find the unwarmed ones, one nodePool can only warm one each time. */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name> <operator>&lt;</operator> <name>POOL_ASYN_WARN_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name></expr>)</condition>
            <block>{<block_content>                
                <comment type="block">/* pipe is full, no need to continue */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>IS_ASYNC_PIPE_FULL</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>        

                <comment type="block">/* not reduce pool size and total number of connections, for the connection is still logically in pooler */</comment>
                <expr_stmt><expr><call><name>DecreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_warm_database_pool warm a connection to node:%s backend_pid:%d nodepool size:%d freeSize:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* async warm the node connection */</comment>
                <expr_stmt><expr><call><name>pooler_async_warm_connection</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>nodePool</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <comment type="block">/* move last connection in place, if not at last already */</comment>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>            
        </block_content>}</block></for>
    </block_content>}</block></while>

    <return>return;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pooler_pools_warm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DatabasePool</name>   <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>databasePools</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Iterate over the pools */</comment>
    <while>while <condition>(<expr><name>curr</name></expr>)</condition>
    <block>{<block_content>        
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>preconnect_and_warm</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* all init done, return true */</comment>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>connect_pools</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>g_PoolerWarmBufferInfo</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* format "database:user, database:user" */</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELEMENT_SEP</name></cpp:macro> <cpp:value>":"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SEP</name></cpp:macro>    <cpp:value>","</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_PATH_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
        <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>sep</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>db</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>p</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>    <name><name>str</name><index>[<expr><name>TEMP_PATH_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TEMP_PATH_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>g_PoolerWarmBufferInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>            
            <expr_stmt><expr><name>db</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ELEMENT_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>user</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>user</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>user</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>DATA_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator>  <literal type="char">'\0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* warm db pool */</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: db:%s user:%s need precreate and warm "</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dbpool</name> <operator>=</operator> <call><name>find_database_pool</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><call><name>session_options</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbpool</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: no database_pool entry found for db:%s user:%s, create a new one "</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dbpool</name> <operator>=</operator> <call><name>create_database_pool</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><call><name>session_options</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dbpool</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: create database_pool entry for db:%s user:%s failed "</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: set database_pool entry flag for db:%s user:%s "</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dbpool</name><operator>-&gt;</operator><name>bneed_warm</name></name>      <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dbpool</name><operator>-&gt;</operator><name>bneed_precreate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sep</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>preconnect_and_warm</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>dbPool</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>             <modifier>*</modifier></type><name>dnOids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>num_dns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>success</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_precreate</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* enter only once */</comment>
    <expr_stmt><expr><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_precreate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnOids</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_dns</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>num_dns</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>success</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_str</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dbPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"could not build connection string for node %u"</literal></expr></argument>, <argument><expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>MaxPoolSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>coord</name></name>    <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nwarming</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nquery</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>name_str</name> <operator>=</operator> <call><name>get_node_name_by_nodeoid</name><argument_list>(<argument><expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>name_str</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"get node %u name failed"</literal></expr></argument>, <argument><expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><literal type="string">"preconnect_and_warm: nodePools of node (%u, %s) is created."</literal></expr></argument>,
				<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <while>while <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>MinPoolSize</name> <operator>||</operator> <operator>(</operator><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name> <operator>&lt;</operator> <name>MinFreeSize</name> <operator>&amp;&amp;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>MaxPoolSize</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int32</name></type>             <name>nodeidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Allocate new slot */</comment>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* If connection fails, be sure that slot is destroyed cleanly */</comment>
            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <comment type="block">/* Establish connection */</comment>
            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>PGXCNodeConnect</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PGXCNodeConnected</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"failed to connect to Datanode:[%s],errmsg[%s]"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nodeidx</name> <operator>=</operator> <call><name>get_node_index_by_nodeoid</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>destroy_slot</name><argument_list>(<argument><expr><name>nodeidx</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <operator>(</operator><name>NODE_CANCEL</name> <operator>*</operator><operator>)</operator> <call><name>PQgetCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SetSockKeepAlive</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="block">/* Increase count of pool size */</comment>			
			<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
			
			<comment type="block">/* Insert at the end of the pool */</comment>
			<expr_stmt><expr><call><name>IncreasePoolerSize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>IncreasePoolerFreesize</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>checked</name></name>  <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name>  <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>dbPool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>dbPool</name><operator>-&gt;</operator><name>oldest_idle</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"preconnect_and_warm add new connection to node:%s backend_pid:%d nodepool size:%d freeSize:%d"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: init and warm pool size to %d for pool %s "</literal></expr></argument>,
                 <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
                 <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
            
        </block_content>}</block></while>
        
        <if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MinPoolSize</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: pool %s size is %d, MinPoolSize:%d"</literal></expr></argument>,
                 <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>,
                 <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>MinPoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>success</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    
    <if_stmt><if>if <condition>(<expr><name>dnOids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block">/* disable precreate after the connection has been created */</comment>
    <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>success</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbPool</name><operator>-&gt;</operator><name>bneed_precreate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pooler: db:%s user:%s precreate and warm connection success"</literal></expr></argument>,                   
                  <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>,
                  <argument><expr><name><name>dbPool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Thread that will build connection async
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>pooler_async_connection_management_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>               <name>i</name>           <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>threadIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolConnectReq</name>  <modifier>*</modifier></type><name>request</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    

	<expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGXCPoolConnThreadParam</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>threadIndex</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* wait for signal */</comment>
		<expr_stmt><expr><call><name>ThreadSemaDown</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolConnControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		
		<comment type="block">/* create connect as needed */</comment>
		<expr_stmt><expr><name>request</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolConnectReq</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>request</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* record status of the task */</comment>
			<expr_stmt><expr><call><name>pooler_async_task_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>COMMAND_CONNECTION_BUILD</name></expr>:</case>
				<block>{<block_content>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>request</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>request</name><operator>-&gt;</operator><name>validSize</name></name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>			
						<expr_stmt><expr><name>slot</name> <operator>=</operator>  <operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
						<comment type="block">/* If connection fails, be sure that slot is destroyed cleanly */</comment>
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

						<comment type="block">/* Establish connection */</comment>
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>PGXCNodeConnectBarely</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PGXCNodeConnected</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>		
							<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>		
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <operator>(</operator><name>NODE_CANCEL</name> <operator>*</operator><operator>)</operator> <call><name>PQgetCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>SetSockKeepAlive</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>					
					<break>break;</break>
				</block_content>}</block>

				<case>case <expr><name>COMMAND_CONNECTION_CLOSE</name></expr>:</case>
				<block>{<block_content>					
					<expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator><name><name>request</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xc_cancelConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
					<expr_stmt><expr><call><name>PGXCNodeClose</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>slot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>	
				</block_content>}</block>

				<default>default:</default>
				<block>{<block_content>
					<comment type="block">/* should never happen */</comment>
					<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
			</block_content>}</block></switch>

            <comment type="block">/* clear the work status */</comment>
            <expr_stmt><expr><call><name>pooler_async_task_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolConnControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            
            <comment type="block">/* return the request to main thread, so that the memory can be freed */</comment>
            <while>while<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>             
                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Thread that will handle sync network operation
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>pooler_sync_remote_operator_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>                <name>bsucceed</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                  <name>ret</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>               <name>res</name>            <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>threadIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name>    <modifier>*</modifier></type><name>request</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>Oid</name></type>                 <name>nodeoid</name>        <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot2</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    
    <expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGXCPoolConnThreadParam</name><operator>*</operator><operator>)</operator><name>arg</name><operator>)</operator><operator>-&gt;</operator><name>threadIndex</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* wait for signal */</comment>
        <expr_stmt><expr><call><name>ThreadSemaDown</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>sem</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        

        <expr_stmt><expr><name>nodeoid</name>        <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>slot2</name>        <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        
        <comment type="block">/* create connect as needed */</comment>
        <expr_stmt><expr><name>request</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>request</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>request</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Only few circumstances, we can get the nodeoid and slot */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>is_slot_avail</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* get nodeoid and slot */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>slot2</name>    <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>slot2</name>    <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
                
            <comment type="block">/* set task status */</comment>
            <expr_stmt><expr><call><name>pooler_async_task_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>, <argument><expr><name>slot2</name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="char">'b'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* Fire transaction-block commands on given nodes */</comment>                    
                    <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>PoolLocalSetStatus_reset</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>CommandId</name></type> <name>commandId</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
                            
                            <comment type="block">/* get slot first */</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>            
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        
                            <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>local_params</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            
                            <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>add_task_result</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>PoolLocalSetStatus_destory</name></expr>:</case>
                        <block>{<block_content>
                            <comment type="block">/* last request */</comment>                            
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                            <comment type="block">/* wait for others to finish their job */</comment>
                            <while>while <condition>(<expr><operator>!</operator><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></while>

                            <comment type="block">/* send response to session */</comment>
                            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_task_result</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            
                            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            
                            <comment type="block">/* all job done, just set all status */</comment>
                            <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolLocalSetStatus_destory</name></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                    </block_content>}</block></switch>                                        
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <block>{<block_content>        
                    <comment type="block">/* Disconnect */</comment>
                    <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>PoolResetStatus_reset</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>CommandId</name></type> <name>commandId</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            
                            <comment type="block">/* reset connection */</comment>
                            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"DISCARD ALL;"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>

                        </block_content>}</block>
                        <case>case <expr><name>PoolResetStatus_destory</name></expr>:</case>
                        <block>{<block_content>
                            <comment type="block">/* set self status */</comment>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block">/* wait for others */</comment>
                            <while>while <condition>(<expr><operator>!</operator><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></while>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <default>default:</default>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                    </block_content>}</block></switch>                    
                    <break>break;</break>    
                </block_content>}</block>

                <case>case <expr><literal type="char">'f'</literal></expr>:</case>
                <block>{<block_content>
                    <comment type="block">/* CLEAN CONNECTION */</comment>                    
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'g'</literal></expr>:</case>            
                <block>{<block_content>
                    <comment type="block">/* GET CONNECTIONS */</comment>
                    <decl_stmt><decl><type><name>int32</name></type>             <name>node_number</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ListCell</name>         <modifier>*</modifier></type><name>nodelist_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                    
                    <while>while <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>&lt;=</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
                    <block>{<block_content>                        
                        <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>PoolConnectStaus_init</name></expr>:</case>
                            <block>{<block_content>                
                                <comment type="block">/* task error, do nothing; just tell controller I am done */</comment>
                                <if_stmt><if>if <condition>(<expr><name>PoolAyncCtlStaus_error</name> <operator>==</operator> <call><name>get_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content>
                                    <comment type="block">/* jump to the last status */</comment>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>    
                                </block_content>}</block></if></if_stmt>

                                <comment type="block">/* record message */</comment>
                                <expr_stmt><expr><call><name>record_task_message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                
                                <expr_stmt><expr><name>slot</name>                 <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>                
                                
                                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>PGXCNodeConnect</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                        
                                <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"connect node:[%s] failed"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                                    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_OOM</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s, connection info [%s]"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name>POOL_ERR_GET_CONNECTIONS_OOM</name></expr>]</index></name></expr></argument>,
                                        <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                    <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </block_content>}</block></if></if_stmt>

                                <comment type="block">/* Error, free the memory */</comment>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PGXCNodeConnected</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content>                                    
                                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"connection not connect for node:[%s] failed errmsg: %s"</literal></expr></argument>, 
                                        <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>,
                                        <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
                                    <block>{<block_content>                                        
                                        <expr_stmt><expr><call><name>PGXCNodeClose</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
									
									<expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									
									<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_missing_ok</name></name></expr>)</condition>
									<block>{<block_content>
										<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_done</name></expr>;</expr_stmt>
										<break>break;</break>
									</block_content>}</block></if>
									<else>else
									<block>{<block_content>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                                        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_CONNECTION_BAD</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s, connection info [%s]"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name>POOL_ERR_GET_CONNECTIONS_CONNECTION_BAD</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                        <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
                                        <expr_stmt><expr><call><name>pooler_thread_logger</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"connection not connect for node:[%s] failed errno %d"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <break>break;</break>
								    </block_content>}</block></else></if_stmt>				
								</block_content>}</block></if></if_stmt>				

								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <operator>(</operator><name>NODE_CANCEL</name> <operator>*</operator><operator>)</operator> <call><name>PQgetCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>SetSockKeepAlive</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								
								<comment type="block">/* set the time flags */</comment>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>checked</name></name>  <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name>  <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr>;</expr_stmt>
								
								<comment type="block">/* increase usecount */</comment>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name><operator>++</operator></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
								<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
								<block>{<block_content>
									<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
								</block_content>}</block></if>
								<else>else
								<block>{<block_content>
									<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> 	  <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
								</block_content>}</block></else></if_stmt>
								<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_connected</name></expr>;</expr_stmt>	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>								
								<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"parallel connect thread build connection to node:%s backend_pid:%d nodeidx:%d succeed"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                <continue>continue;</continue>
                            </block_content>}</block>
                            
                            <case>case <expr><name>PoolConnectStaus_connected</name></expr>:</case>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>PoolConnectStaus_connected</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
                                <block>{<block_content>
								    <comment type="block">/* Increase success count first and then finish count */</comment>
                                    <expr_stmt><expr><call><name>acquire_command_increase_succeed</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_done</name></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_set_param</name></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                
                                <continue>continue;</continue>
                            </block_content>}</block>
                            
                            <case>case <expr><name>PoolConnectStaus_set_param</name></expr>:</case>
                            <block>{<block_content>                        
                                <decl_stmt><decl><type><name>CommandId</name></type> <name>commandId</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>PoolConnectStaus_set_param</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr>)</condition>
                                    <block>{<block_content>
                                        <comment type="block">/* 
                                         * sepcial case in 'g', othes set in front of pooler_sync_remote_operator_thread
                                         * by call pooler_async_task_start
                                         */</comment>
                                        
                                        <comment type="block">/* get nodeoid and slot */</comment>
                                        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name>slot2</name>    <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                        </block_content>}</block></if>
                                        <else>else
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>nodeoid</name> <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                            <expr_stmt><expr><name>slot2</name>    <operator>=</operator>  <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                        </block_content>}</block></else></if_stmt> 
                                        <expr_stmt><expr><call><name>record_slot_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>, <argument><expr><name>slot2</name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <comment type="block">/* record message */</comment>
                                        <expr_stmt><expr><call><name>record_task_message</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        
                                        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if>
                                        <else>else
                                        <block>{<block_content>
                                            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>session_params</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></else></if_stmt>
                                    </block_content>}</block></if></if_stmt>

                                    <comment type="block">/* Error, free the connection here only when we build the connection here */</comment>
                                    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
                                    <block>{<block_content>
                                        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>needConnect</name></name></expr>)</condition>
                                        <block>{<block_content>
                                            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                                            <block>{<block_content>
                                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></if>
                                            <else>else
                                            <block>{<block_content>
                                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></else></if_stmt>

                                            <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>)</condition>
                                            <block>{<block_content>
                                                <expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                                                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></if></if_stmt>

                                            <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
                                            <block>{<block_content>                                        
                                                <expr_stmt><expr><call><name>PGXCNodeClose</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></if></if_stmt>
                                        </block_content>}</block></if></if_stmt>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt><comment type="block">/* PoolConnectStaus_error will break the loop */</comment>
                                        <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if>
                                    <else>else
                                    <block>{<block_content>
                                        <comment type="block">/* job succeed */</comment>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_done</name></expr>;</expr_stmt>
                                        <comment type="block">/* Increase success count first and then finish count */</comment>
                                        <expr_stmt><expr><call><name>acquire_command_increase_succeed</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></else></if_stmt>
                                </block_content>}</block></if></if_stmt>                                                            
                                <continue>continue;</continue>
                            </block_content>}</block>
                            
                            <case>case <expr><name>PoolConnectStaus_done</name></expr>:</case>
                            <block>{<block_content>                
                                <comment type="block">/* here we finish the job, just break */</comment>                    
                                <break>break;</break>
                            </block_content>}</block>

                            <case>case <expr><name>PoolConnectStaus_destory</name></expr>:</case>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>int32</name></type>                <name>ret2</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                                                
                                <comment type="block">/* Increase success count first and then finish count */</comment>
                                <expr_stmt><expr><call><name>acquire_command_increase_succeed</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="block">/* set myself finish count */</comment>
                                <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                
                                <comment type="block">/* wait for others to finish */</comment>    
                                <while>while <condition>(<expr><operator>!</operator><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></while>

                                <comment type="block">/* Only when we reach the PoolAyncCtlStaus_dispatched and we succeed doing all things, we are able to return the result. */</comment>
                                <if_stmt><if>if <condition>(<expr><name>PoolAyncCtlStaus_dispatched</name> <operator>==</operator> <call><name>get_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>get_acquire_success_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content>        
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>    
                                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                                    
                                    <expr_stmt><expr><name>hostip</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>hostip</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hostip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                                    <expr_stmt><expr><name>hostport</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>hostport</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_datanodelist</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_coordlist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    
                                
                                    <comment type="block">/* handle response */</comment>
                                    <expr_stmt><expr><name>node_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                    
                                    <comment type="block">/* Save in array fds of Datanodes first */</comment>
                                    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>request-&gt;taskControl-&gt;m_datanodelist</argument>)</argument_list></macro>
                                    <block>{<block_content>
                                        <decl_stmt><decl><type><name>int</name></type>            <name>node</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>     <name>_POOLER_CHECK_</name></cpp:ifdef>    
                                            <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pghost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pgport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                            <expr_stmt><expr><name>node_number</name><operator>++</operator></expr>;</expr_stmt>
                                        </block_content>}</block></if>
										<if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_missing_ok</name></name></expr>)</condition>
										<block>{<block_content>
											<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
											<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
											<expr_stmt><expr><name>node_number</name><operator>++</operator></expr>;</expr_stmt>
										</block_content>}</block></if></if_stmt>
                                    </block_content>}</block>

                                    <comment type="block">/* Save then in the array fds for Coordinators */</comment>
                                    <macro><name>foreach</name><argument_list>(<argument>nodelist_item</argument>, <argument>request-&gt;taskControl-&gt;m_coordlist</argument>)</argument_list></macro>
                                    <block>{<block_content>
                                        <decl_stmt><decl><type><name>int</name></type>            <name>node</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodelist_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr>;</expr_stmt>    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>     <name>_POOLER_CHECK_</name></cpp:ifdef>    
                                            <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pghost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>conn</name><operator>)</operator><operator>-&gt;</operator><name>pgport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                            <expr_stmt><expr><name>node_number</name><operator>++</operator></expr>;</expr_stmt>
                                        </block_content>}</block></if>
										<else>else
										<block>{<block_content>
											<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
											<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>node_number</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
											<expr_stmt><expr><name>node_number</name><operator>++</operator></expr>;</expr_stmt>
										</block_content>}</block></else></if_stmt>
                                    </block_content>}</block>                

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>     <name>_POOLER_CHECK_</name></cpp:ifdef>    
                                    <block>{<block_content>
                                        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                                        
                                        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_number</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
                                        <block>{<block_content>                
                                            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>node_number</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
                                            <block>{<block_content>
                                                <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator>
                                                    <name>i</name> <operator>!=</operator> <name>j</name>                                  <operator>&amp;&amp;</operator>
                                                    <call><name>strcmp</name><argument_list>(<argument><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hostip</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>     <operator>&amp;&amp;</operator>
                                                    <call><name>strcmp</name><argument_list>(<argument><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hostport</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                                                <block>{<block_content>
                                                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                                </block_content>}</block></if></if_stmt>
                                            </block_content>}</block></for>
                                        </block_content>}</block></for>

                                        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_number</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
                                        <block>{<block_content>
                                            <if_stmt><if>if <condition>(<expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                                            <block>{<block_content>
                                                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                <expr_stmt><expr><name><name>hostip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></if></if_stmt>
                                            <if_stmt><if>if <condition>(<expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                                            <block>{<block_content>
                                                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                <expr_stmt><expr><name><name>hostport</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                            </block_content>}</block></if></if_stmt>
                                        </block_content>}</block></for>
                                        <if_stmt><if>if <condition>(<expr><name>hostip</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                            <expr_stmt><expr><name>hostip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                        <if_stmt><if>if <condition>(<expr><name>hostport</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name>hostport</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                                                                    
                                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pool_sendfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_result</name></name></expr></argument>, <argument><expr><name>node_number</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <comment type="block">/*
                                     * Also send the PIDs of the remote backend processes serving
                                     * these connections
                                     */</comment>
                                    <expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_pidresult</name></name></expr></argument>, <argument><expr><name>node_number</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    
                                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>||</operator> <name>ret2</name></expr>)</condition>
                                    <block>{<block_content>
                                        <comment type="block">/* error */</comment>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>needfree</name></name>       <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt>    
                                        <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if>
                                    <else>else
                                    <block>{<block_content>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>needfree</name></name>       <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_destory</name></expr>;</expr_stmt>    
                                        <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></else></if_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <comment type="block">/* failed to acquire connection */</comment>
                                    <expr_stmt><expr><call><name>pool_sendfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <comment type="block">/*
                                     * Also send the PIDs of the remote backend processes serving
                                     * these connections
                                     */</comment>
                                    <expr_stmt><expr><call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>needfree</name></name>       <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>=</operator> <name>PoolConnectStaus_error</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                <break>break;</break>
                            </block_content>}</block>    
                        </block_content>}</block></switch>

                        <comment type="block">/* finish the request here */</comment>
                        <if_stmt><if>if <condition>(<expr><name>PoolConnectStaus_done</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>current_status</name></name> <operator>||</operator> <name>PoolConnectStaus_destory</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>                        
                    </block_content>}</block></while>
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'h'</literal></expr>:</case>            
                <block>{<block_content>    
                    <comment type="block">/* Cancel SQL Command in progress on specified connections */</comment>
                    <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>PoolCancelStatus_cancel</name></expr>:</case>
                        <case>case <expr><name>PoolCancelStatus_end_query</name></expr>:</case>
                        <block>{<block_content>        
                            <comment type="block">/* get slot first */</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>            
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        
                            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr>)</condition>
                                <block>{<block_content>
                                    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>final_status</name></name> <operator>==</operator> <name>PoolCancelStatus_cancel</name></expr>)</condition>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <call><name>PQcancel</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if>
                                    <else>else
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <call><name>PQend_query</name><argument_list>(<argument><expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>xc_cancelConn</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></else></if_stmt>

                                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsucceed</name></expr>)</condition>
                                    <block>{<block_content>
                                        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>PQhost</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>PQport</name><argument_list>(<argument><expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_CANCEL_SEND_FAILED</name></expr>;</expr_stmt>
                                        <if_stmt><if>if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <name>port</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s, ip %s, port %s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name>POOL_ERR_CANCEL_SEND_FAILED</name></expr>]</index></name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if>
                                        <else>else
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name>POOL_ERR_CANCEL_SEND_FAILED</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></else></if_stmt>
                                        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"xc_cancelConn element of agent slot is null."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"slot element of agent is null."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            

                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsucceed</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name>bsucceed</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>add_task_result</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>PoolCancelStatus_destory</name></expr>:</case>
                        <block>{<block_content>                    
                            <comment type="block">/* the package is a fake one */</comment>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                            <comment type="block">/* wait for others to finish their job */</comment>
                            <while>while <condition>(<expr><operator>!</operator><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></while>
                            
                            <comment type="block">/* all job done, just set all status */</comment>
                            <expr_stmt><expr><call><name>set_task_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>PoolAyncCtlStaus_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block">/* send response to session */</comment>
                            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_task_result</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            
                            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                    </block_content>}</block></switch>                                        
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'r'</literal></expr>:</case>            
                <block>{<block_content>
                    <comment type="block">/* RELEASE CONNECTIONS */</comment>
                    <comment type="block">/* nothing to do */</comment>
                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><literal type="char">'s'</literal></expr>:</case>            
                <block>{<block_content>
                    <comment type="block">/* Session-related COMMAND */</comment>                        
                    <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>PoolSetCommandStatus_set</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>CommandId</name></type> <name>commandID</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>bCoord</name></name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name><name>request</name><operator>-&gt;</operator><name>nodeindex</name></name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            
                            <comment type="block">/* set connection command */</comment>
                            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setquery_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <comment type="block">/* on success, we increase successful counter. */</comment>
                            <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>set_task_error_msg</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>set_command_increase_succeed</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>set_task_max_command_id</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>, <argument><expr><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>PoolSetCommandStatus_destory</name></expr>:</case>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>CommandId</name></type> <name>commandID</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>
                            <comment type="block">/* set self status */</comment>
                            <expr_stmt><expr><call><name>finish_task_request</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            
                            <comment type="block">/* wait for others */</comment>
                            <while>while <condition>(<expr><operator>!</operator><call><name>check_is_task_done</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></while>

                            <comment type="block">/* get command status, and send response */</comment>
                            <expr_stmt><expr><name>res</name>       <operator>=</operator> <ternary><condition><expr><call><name>get_command_success_status</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
                            <expr_stmt><expr><name>commandID</name> <operator>=</operator> <call><name>get_task_max_commandID</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ret</name>       <operator>=</operator> <call><name>pool_sendres_with_command_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>commandID</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>errmsg</name></name></expr></argument>, <argument><expr><name>POOLER_ERROR_MSG_LEN</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>taskControl</name><operator>-&gt;</operator><name>m_error_msg</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>error_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                        
                        <default>default:</default>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                    </block_content>}</block></switch>                    
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <comment type="block">/* should never happen */</comment>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></switch>

            <comment type="block">/* record each conn request end time */</comment>
            <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="char">'g'</literal> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>cmd_end_time</name></name> <operator>=</operator> <call><name>get_system_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <comment type="block">/* clear task status */</comment>
            <expr_stmt><expr><call><name>pooler_async_task_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_PoolSyncNetworkControl</name></expr></argument>, <argument><expr><name>threadIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            
            <comment type="block">/* return the request to main thread, so that the memory can be freed */</comment>
            <while>while<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>             
                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Thread used to process async connection requeset
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>pooler_async_utility_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
    <decl_stmt><decl><type><name>int32</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCAsyncWarmInfo</name> <modifier>*</modifier></type><name>pWarmInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ThreadSemaDown</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_AsnyUtilitysem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pWarmInfo</name> <operator>=</operator> <operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><call><name>PipeGet</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeSender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pWarmInfo</name></expr>)</condition>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>COMMAND_CONNECTION_WARM</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>CommandId</name></type> <name>commandID</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(
						<argument><expr><operator>(</operator><name>NODE_CONNECTION</name> <operator>*</operator><operator>)</operator> <name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
						<argument><expr><literal type="string">"set warm_shared_buffer to true;"</literal></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>,
						<argument><expr><literal type="number">0</literal></expr></argument>,
						<argument><expr><operator>&amp;</operator><name><name>pWarmInfo</name><operator>-&gt;</operator><name>set_query_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/* only set warm flag when warm succeed */</comment>
                    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ret</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                    
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
                
                <case>case <expr><name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type>   <name>mbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>CommandId</name></type> <name>commandID</name> <init>= <expr><name>InvalidCommandId</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(
						<argument><expr><operator>(</operator><name>NODE_CONNECTION</name> <operator>*</operator><operator>)</operator> <name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
						<argument><expr><literal type="string">"set remotetype to application;"</literal></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>,
						<argument><expr><literal type="number">0</literal></expr></argument>,
						<argument><expr><operator>&amp;</operator><name><name>pWarmInfo</name><operator>-&gt;</operator><name>set_query_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>PGXCNodeSendShowQuery</name><argument_list>(
						<argument><expr><operator>(</operator><name>NODE_CONNECTION</name> <operator>*</operator><operator>)</operator> <name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
						<argument><expr><literal type="string">"show session_memory_size;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>COMMAND_JUDGE_CONNECTION_MEMSIZE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mbytes</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>PoolMaxMemoryLimit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mbytes</name> <operator>&gt;=</operator> <name>PoolMaxMemoryLimit</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>COMMAND_CONNECTION_NEED_CLOSE</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>mbytes</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(
							<argument><expr><operator>(</operator><name>NODE_CONNECTION</name> <operator>*</operator><operator>)</operator> <name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
							<argument><expr><literal type="string">"set remotetype to coordinator;"</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><operator>&amp;</operator><name><name>pWarmInfo</name><operator>-&gt;</operator><name>set_query_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PGXCNodeSendSetQuery</name><argument_list>(
							<argument><expr><operator>(</operator><name>NODE_CONNECTION</name> <operator>*</operator><operator>)</operator> <name><name>pWarmInfo</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
							<argument><expr><literal type="string">"set remotetype to datanode;"</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><operator>&amp;</operator><name><name>pWarmInfo</name><operator>-&gt;</operator><name>set_query_status</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break;</break>

                <case>case <expr><name>COMMAND_PING_NODE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name><name>connstr</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>nodeport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pWarmInfo</name><operator>-&gt;</operator><name>nodestatus</name></name> <operator>=</operator> <call><name>PGXCNodePing</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
                
                <default>default:</default>
                <block>{<block_content>
                    <comment type="block">/* should never happen */</comment>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>
            
            <comment type="block">/* loop and try to put the warmed connection back into queue */</comment>
            <while>while <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>PipePut</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeRcver</name></expr></argument>, <argument><expr><operator>(</operator><name>PGXCAsyncWarmInfo</name><operator>*</operator><operator>)</operator><name>pWarmInfo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
                
    </block_content>}</block></while>
    
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PGXCASyncTaskCtl</name><modifier>*</modifier></type> <name>create_task_control</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodelist</name></decl></parameter>,    <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coordlist</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>fd_result</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>pid_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXCASyncTaskCtl</name> <modifier>*</modifier></type><name>asyncTaskCtl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>asyncTaskCtl</name> <operator>=</operator> <operator>(</operator><name>PGXCASyncTaskCtl</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCASyncTaskCtl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    <comment type="block">/* init spinlock */</comment>
    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_status</name></name>         <operator>=</operator> <name>PoolAyncCtlStaus_init</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_mumber_total</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_number_done</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_datanodelist</name></name>   <operator>=</operator> <name>datanodelist</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_coordlist</name></name>      <operator>=</operator> <name>coordlist</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_result</name></name>           <operator>=</operator> <name>fd_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_pidresult</name></name>       <operator>=</operator> <name>pid_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_res</name></name>               <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_max_command_id</name></name> <operator>=</operator> <name>InvalidCommandId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asyncTaskCtl</name><operator>-&gt;</operator><name>m_error_offset</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"create task controller succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>asyncTaskCtl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_connection_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>PGXCNodePool</name>      <modifier>*</modifier></type><name>nodepool</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>status</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>finStatus</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>reqseq</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>
                                        
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>               <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectStaus_init</name> <operator>==</operator> <name>status</name> <operator>&amp;&amp;</operator> <name><name>nodepool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>MaxPoolSize</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"[dispatch_connection_request] nodepool size:%d equal or larger than MaxPoolSize:%d, "</literal>
                                 <literal type="string">"pid:%d node:%s nodeindex:%d req_seq:%d, freesize:%d"</literal></expr></argument>, 
                                 <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>MaxPoolSize</name></expr></argument>, 
                                 <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name>reqseq</name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* return failed */</comment>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolAsyncReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd</name></name>                          <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name>                      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name>                        <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name></name>               <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodepool</name></name>                  <operator>=</operator> <name>nodepool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>                <operator>=</operator> <name>finStatus</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name>                  <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needfree</name></name>                  <operator>=</operator> <name>dispatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>req_seq</name></name>                  <operator>=</operator> <name>reqseq</name></expr>;</expr_stmt>

    <comment type="block">/*record request begin time*/</comment>
    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* only init stauts need to alloc a slot */</comment>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectStaus_init</name> <operator>==</operator> <name>status</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MemoryContext</name></type>     <name>oldcontext</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* Allocate new slot */</comment>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePoolSlot</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCNodePoolSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
        <comment type="block">/* set seqnum */</comment>
        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name>     <operator>=</operator> <call><name>pooler_get_slot_seq_num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name>         <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>slot</name></name>        <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needConnect</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"dispatch async connection pid:%d node:%s nodeindex:%d connection current status:%d final status:%d slot_seq:%d req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>, <argument><expr><name>reqseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* set slot to null */</comment>
        <expr_stmt><expr><name><name>nodepool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>nodepool</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>IncreasePoolerSize</name><argument_list>(<argument><expr><name>nodepool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>IncreaseSlotRefCount</name><argument_list>(<argument><expr><name>slot</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* use version to tag every slot */</comment>
        <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <name><name>nodepool</name><operator>-&gt;</operator><name>m_version</name></name></expr>;</expr_stmt>    
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>checked</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <comment type="block">/* last request of the session */</comment>
    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name>     <operator>=</operator> <name>PoolAyncCtlStaus_dispatched</name></expr>;</expr_stmt>

		<comment type="block">/* also use this request to response to session*/</comment>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>         <operator>=</operator> <name>PoolConnectStaus_destory</name></expr>;</expr_stmt>

		<comment type="block">/* if last request, transfer cmd_start_time to req */</comment>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd_start_time</name></name>       <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"dispatch async connection pid:%d node:%s nodeindex:%d connection current status:%d final status:%d req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name>reqseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"dispatch last connection request!! pid:%d node:%s nodeindex:%d connection, current status:%d final status:%d request_num:%d req_seq:%d"</literal></expr></argument>,<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>, <argument><expr><name>reqseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_async_network_operation</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"dispatch connection request failed!! pid:%d node:%s nodeindex:%d connection, current status:%d final status:%d request_num:%d req_seq:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>nodepool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>, <argument><expr><name>reqseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
        <comment type="block">/* failed, decrease count */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>needConnect</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>DecreasePoolerSize</name><argument_list>(<argument><expr><name>nodepool</name></expr></argument>,<argument><expr><name>__FILE__</name></expr></argument>,<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_DISPATCH_FAILED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* dispatch success, clear cmd start time in agent */</comment>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_local_set_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>
                                        
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>              <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolAsyncReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd</name></name>                          <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name>                      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name>                        <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name></name>               <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodepool</name></name>                  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>PoolLocalSetStatus_reset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>             <operator>=</operator> <name>PoolLocalSetStatus_reset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name>                  <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needfree</name></name>                  <operator>=</operator> <name>dispatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>error_flag</name></name>                  <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>setquery_status</name></name>          <operator>=</operator> <name>SendSetQuery_OK</name></expr>;</expr_stmt>
    

    <comment type="block">/* last request of the session */</comment>
    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name>     <operator>=</operator> <name>PoolAyncCtlStaus_dispatched</name></expr>;</expr_stmt>

		<comment type="block">/* also use this request to response to session*/</comment>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>         <operator>=</operator> <name>PoolLocalSetStatus_destory</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>    	  <operator>=</operator> <name>PoolLocalSetStatus_destory</name></expr>;</expr_stmt>

        <comment type="block">/* if last request, transfer cmd_start_time to req */</comment>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd_start_time</name></name>       <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>	
	

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async local set nodeindex:%d connection, current status:%d final status:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch last local set request!! nodeindex:%d connection, current status:%d final status:%d request_num:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_async_network_operation</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async local set request failed!! nodeindex:%d connection, current status:%d final status:%d request_num:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* dispatch success, clear cmd start time in agent */</comment>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_set_command_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                                <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                                <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>
                                        
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>              <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bCoord</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
        
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolAsyncReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd</name></name>                          <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name>                      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name>                        <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name></name>               <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodepool</name></name>                  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>PoolSetCommandStatus_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>                <operator>=</operator> <name>PoolSetCommandStatus_set</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name>                  <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needfree</name></name>                  <operator>=</operator> <name>dispatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>error_flag</name></name>                  <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>setquery_status</name></name>          <operator>=</operator> <name>SendSetQuery_OK</name></expr>;</expr_stmt>

    <comment type="block">/* last request of the session */</comment>
    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name>     <operator>=</operator> <name>PoolAyncCtlStaus_dispatched</name></expr>;</expr_stmt>

		<comment type="block">/* also use this request to response to session*/</comment>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>         <operator>=</operator> <name>PoolSetCommandStatus_destory</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>       <operator>=</operator> <name>PoolSetCommandStatus_destory</name></expr>;</expr_stmt>

        <comment type="block">/* if last request, transfer cmd_start_time to req */</comment>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd_start_time</name></name>       <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>	

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async set command nodeindex:%d connection nodename:%s backend_pid:%d current status:%d final status:%d command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch last set command request!! nodeindex:%d connection nodename:%s backend_pid:%d current status:%d final status:%d request_num:%d command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>,  <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_async_network_operation</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async set command request failed!! nodeindex:%d connection nodename:%s backend_pid:%d current status:%d final status:%d request_num:%d command:%s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* dispatch success, clear cmd start time in agent */</comment>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d Pooler SetCommand: send to nodeindex:%d  slot-&gt;node_name:%s slot-&gt;backend_pid:%d with command %s"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_cancle_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                            <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                            <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type>                <name>signal</name></decl></parameter>)</parameter_list>
                                        
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>              <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolAsyncReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd</name></name>                          <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name>                      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name>                        <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name></name>               <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodepool</name></name>                  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>signal</name> <operator>==</operator> <name>SIGNAL_SIGUSR2</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>PoolCancelStatus_end_query</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>                <operator>=</operator> <name>PoolCancelStatus_end_query</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>PoolCancelStatus_cancel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>                <operator>=</operator> <name>PoolCancelStatus_cancel</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name>                  <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needfree</name></name>                  <operator>=</operator> <name>dispatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>error_flag</name></name>                  <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>setquery_status</name></name>          <operator>=</operator> <name>SendSetQuery_OK</name></expr>;</expr_stmt>

    <comment type="block">/* last request of the session */</comment>
    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name>     <operator>=</operator> <name>PoolAyncCtlStaus_dispatched</name></expr>;</expr_stmt>

		<comment type="block">/* use this request to response to session*/</comment>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>    	  <operator>=</operator> <name>PoolCancelStatus_destory</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name>      	  <operator>=</operator> <name>PoolCancelStatus_destory</name></expr>;</expr_stmt>

        <comment type="block">/* if last request, transfer cmd_start_time to req */</comment>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd_start_time</name></name>       <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>bCoord</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
		
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
							
	<if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async CANCLE_QUERY nodeindex:%d connection, nodename:%s backend_pid:%d current status:%d final status:%d"</literal></expr></argument>, 
																										    <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, 
																										    <argument><expr><name>nodeindex</name></expr></argument>, 
																										    <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, 
																										    <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, 
																										    <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, 
																										    <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch last CANCLE_QUERY request!! nodeindex:%d connection nodename:%s backend_pid:%d current status:%d final status:%d request_num:%d"</literal></expr></argument>, 
                                                                                                            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, 
                                                                                                            <argument><expr><name>nodeindex</name></expr></argument>, 
                                                                                                            <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_async_network_operation</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async CANCLE_QUERY failed!! nodeindex:%d connection nodename:%s backend_pid:%d current status:%d final status:%d request_num:%d"</literal></expr></argument>, 
                                                                                                            <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, 
                                                                                                            <argument><expr><name>nodeindex</name></expr></argument>, 
                                                                                                            <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, 
                                                                                                            <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_CANCEL_DISPATCH_FAILED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dispatched</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* dispatch success, clear cmd start time in agent */</comment>
            <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>cmd_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>dispatch_reset_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>bCoord</name></decl></parameter>,
                                            <parameter><decl><type><name>PoolAgent</name>         <modifier>*</modifier></type><name>agent</name></decl></parameter>,
                                            <parameter><decl><type><name>int32</name></type>              <name>status</name></decl></parameter>,    <comment type="block">/* PoolResetStatus */</comment>
                                            <parameter><decl><type><name>int32</name></type>              <name>nodeindex</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type>               <name>dispatched</name></decl></parameter>)</parameter_list>
                                        
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type>               <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>               <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCPoolAsyncReq</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>PGXCPoolAsyncReq</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGXCPoolAsyncReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cmd</name></name>                          <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>bCoord</name></name>                      <operator>=</operator> <name>bCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>agent</name></name>                        <operator>=</operator> <name>agent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>taskControl</name></name>               <operator>=</operator> <name>taskControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name>              <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>nodeindex</name></name>                  <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>needfree</name></name>                  <operator>=</operator> <name>dispatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>error_flag</name></name>                  <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>setquery_status</name></name>          <operator>=</operator> <name>SendSetQuery_OK</name></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async reset session bCoord:%d nodeindex:%d connection, current status:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dispatch_async_network_operation</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* we fail to reset the connection, just release it */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pid:%d dispatch async reset session request failed!! nodeindex:%d connection, current status:%d final status:%d request_num:%d;just free it"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>current_status</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>final_status</name></name></expr></argument>, <argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* when PoolResetStatus_destory, we don't have a slot to destory */</comment>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>PoolResetStatus_destory</name></expr>)</condition>
        <block>{<block_content>            
            <if_stmt><if>if <condition>(<expr><name>bCoord</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>nodeindex</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"++++dispatch_reset_request pid:%d release slot_seq:%d++++"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>release_connection</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>bCoord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>finish_task_request</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>    
    <comment type="block">/* remember how many request we have dispatched */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_number_done</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_task_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>status</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>        
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>get_task_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_status</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>check_is_task_done</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>    
    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* remember how many request we have dispatched */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>done</name> <operator>=</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_number_done</name></name> <operator>==</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_mumber_total</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>done</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_task_result</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>res</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>    
    <comment type="block">/* remember how many request we have dispatched */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_res</name></name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>get_task_result</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>    
    <return>return <expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_res</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_command_total</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>number</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>        
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_total</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_command_increase_succeed</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>        
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_succeed</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_command_success_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                        
<block>{<block_content>        
    <decl_stmt><decl><type><name>bool</name></type> <name>bsucceed</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_succeed</name></name> <operator>==</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_total</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bsucceed</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>acquire_command_increase_succeed</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>        
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_number_succeed</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>get_acquire_success_status</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                        
<block>{<block_content>        
    <decl_stmt><decl><type><name>bool</name></type> <name>bsucceed</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bsucceed</name> <operator>=</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_number_done</name></name> <operator>==</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_number_succeed</name></name> <operator>||</operator>
	           <name><name>taskControl</name><operator>-&gt;</operator><name>m_missing_ok</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bsucceed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_task_max_command_id</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>id</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>        
    <if_stmt><if>if <condition>(<expr><name>InvalidCommandId</name> <operator>==</operator> <name>id</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_max_command_id</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>InvalidCommandId</name> <operator>==</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_max_command_id</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>id</name> <operator>&gt;</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_max_command_id</name></name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_max_command_id</name></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_task_error_msg</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>                                        
<block>{<block_content>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_error_offset</name></name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_error_msg</name></name> <operator>+</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_error_offset</name></name></expr></argument>, <argument><expr><name>PGXC_POOL_ERROR_MSG_LEN</name> <operator>-</operator> <name><name>taskControl</name><operator>-&gt;</operator><name>m_error_offset</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskControl</name><operator>-&gt;</operator><name>m_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CommandId</name></type> <name>get_task_max_commandID</name><parameter_list>(<parameter><decl><type><name>PGXCASyncTaskCtl</name>  <modifier>*</modifier></type><name>taskControl</name></decl></parameter>)</parameter_list>                        
<block>{<block_content>            
    <return>return <expr><name><name>taskControl</name><operator>-&gt;</operator><name>m_max_command_id</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>create_node_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type>    <name>oldcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCMapNode</name>     <modifier>*</modifier></type><name>node</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeDefinition</name>  <modifier>*</modifier></type><name>node_def</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASHCTL</name></type>            <name>hinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>hflags</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>coOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>dnOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numDn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>nodeindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>PoolerMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Init node hashtable */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGXCMapNode</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_ELEM</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>PoolerMemoryContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_CONTEXT</name></expr>;</expr_stmt>    

    <expr_stmt><expr><name><name>hinfo</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>oid_hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hflags</name> <operator>|=</operator> <name>HASH_FUNCTION</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>g_nodemap</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Node Map Hash"</literal></expr></argument>, <argument><expr><name>TBASE_MAX_DATANODE_NUMBER</name> <operator>+</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>,
                                              <argument><expr><operator>&amp;</operator><name>hinfo</name></expr></argument>, <argument><expr><name>hflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>nodeindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nodeindex</name> <operator>&lt;</operator> <name>numCo</name></expr>;</condition> <incr><expr><name>nodeindex</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node:%u duplicate in hash table"</literal></expr></argument>, <argument><expr><name><name>coOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
        <block>{<block_content>            
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_COORDINATOR</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nodeidx</name></name> <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>node_def</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name><name>coOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>node_def</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    

    <for>for <control>(<init><expr><name>nodeindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nodeindex</name> <operator>&lt;</operator> <name>numDn</name></expr>;</condition> <incr><expr><name>nodeindex</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
 
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dnOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node:%u duplicate in hash table"</literal></expr></argument>, <argument><expr><name><name>dnOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_DATANODE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nodeidx</name></name> <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>node_def</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name><name>dnOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>node_def</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Release palloc'ed memory */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_node_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXCMapNode</name>     <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>            <modifier>*</modifier></type><name>coOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>            <modifier>*</modifier></type><name>dnOids</name></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>NodeDefinition</name>  <modifier>*</modifier></type><name>node_def</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>numDn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>nodeindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>bool</name></type>           <name>inited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_nodemap</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* init node map */</comment>
        <expr_stmt><expr><call><name>create_node_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
		<expr_stmt><expr><name>inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<comment type="block">/* reset hashtab */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inited</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>scan_status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGXCMapNode</name>  <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>g_nodemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>,
							<argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"node map hash table corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>nodeindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nodeindex</name> <operator>&lt;</operator> <name>numCo</name></expr>;</condition> <incr><expr><name>nodeindex</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>coOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nodeidx</name></name>   <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_COORDINATOR</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>node_def</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name><name>coOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>node_def</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    

    <for>for <control>(<init><expr><name>nodeindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nodeindex</name> <operator>&lt;</operator> <name>numDn</name></expr>;</condition> <incr><expr><name>nodeindex</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
 
        <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dnOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nodeidx</name></name> <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_DATANODE</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>node_def</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name><name>dnOids</name><index>[<expr><name>nodeindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>node_def</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>    

    <comment type="block">/* Release palloc'ed memory */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type> <name>get_node_index_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXCMapNode</name>     <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_nodemap</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* init node map */</comment>
        <expr_stmt><expr><call><name>create_node_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>nodeidx</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"query node type by oid:%u failed"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>get_node_name_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXCMapNode</name>     <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_nodemap</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* init node map */</comment>
        <expr_stmt><expr><call><name>create_node_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>node_name</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"query node name by oid:%u failed"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32</name></type> <name>get_node_info_by_nodeoid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGXCMapNode</name>     <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>bool</name></type>            <name>found</name>  <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_nodemap</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* init node map */</comment>
        <expr_stmt><expr><call><name>create_node_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PGXCMapNode</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>g_nodemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>node_type</name></name></expr>;</expr_stmt>
        <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>nodeidx</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"query node index by oid:%u failed"</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pooler_is_async_task_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>threadIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEmpty</name><argument_list>(<argument><expr><name>g_AsynUtilityPipeRcver</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>threadIndex</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEmpty</name><argument_list>(<argument><expr><name><name>g_PoolConnControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>threadIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>threadIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>threadIndex</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEmpty</name><argument_list>(<argument><expr><name><name>g_PoolSyncNetworkControl</name><operator>.</operator><name>response</name><index>[<expr><name>threadIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>threadIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>pooler_wait_for_async_task_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>  <name>bdone</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>loop_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* wait a little while */</comment>
    <do>do
    <block>{<block_content>    
        <expr_stmt><expr><name>bdone</name> <operator>=</operator> <call><name>pooler_is_async_task_done</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bdone</name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pooler_sync_connections_to_nodepool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pooler_handle_sync_response_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
        <expr_stmt><expr><name>loop_num</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>while <condition>(<expr><operator>!</operator><name>bdone</name> <operator>&amp;&amp;</operator> <name>loop_num</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition>;</do>
    
    <return>return <expr><name>bdone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pooler_async_task_start</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeindex</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>thread</name></expr>]</index></name>      <operator>=</operator> <name>PoolAsyncStatus_busy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>nodeindex</name><index>[<expr><name>thread</name></expr>]</index></name>     <operator>=</operator> <name>nodeindex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>start_stamp</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>cmdtype</name><index>[<expr><name>thread</name></expr>]</index></name>     <operator>=</operator> <name>cmdtype</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>record_slot_info</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pooler_async_task_done</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>thread</name></expr>]</index></name>      <operator>=</operator> <name>PoolAsyncStatus_idle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>nodeindex</name><index>[<expr><name>thread</name></expr>]</index></name>     <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>start_stamp</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_backend_pid</name><index>[<expr><name>thread</name></expr>]</index></name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_port</name><index>[<expr><name>thread</name></expr>]</index></name>         <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_nodeoid</name><index>[<expr><name>thread</name></expr>]</index></name>         <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>cmdtype</name><index>[<expr><name>thread</name></expr>]</index></name>             <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>pooler_async_task_pick_thread</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nodeindex</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>loop_count</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type> <name>gap</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type> <name>now</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_time_t</name></type> <name>stamp</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>thread_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>thread_index</name> <operator>=</operator> <name>nodeindex</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>;</expr_stmt>
    <comment type="block">/* find a avaliable thread */</comment>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>loop_count</name> <operator>&lt;</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>)</condition>
    <block>{<block_content>

        <comment type="block">/* for test */</comment>
        <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_task_pick_thread loop_count=%d, thread_index=%d, control-&gt;status[thread_index]=%d, nodeindex=%d, "</literal>
                                     <literal type="string">"request_pipelength=%d, response_pipelength=%d, "</literal>
                                     <literal type="string">"remote_ip:%s, remote_port:%d, remote_nodeoid:%d, remote_backend_pid:%d"</literal></expr></argument>,
                                              <argument><expr><name>loop_count</name></expr></argument>,    
                                             <argument><expr><name>thread_index</name></expr></argument>,
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>,
                                             <argument><expr><name>nodeindex</name></expr></argument>,
                                             <argument><expr><call><name>PipeLength</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>request</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>PipeLength</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>response</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>, 
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_port</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>, 
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_nodeoid</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>,
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_backend_pid</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    
        <comment type="block">/* pipe is not full and in idle status, OK to return */</comment>
        <if_stmt><if>if <condition>(<expr><name>PoolAsyncStatus_idle</name> <operator>==</operator> <name><name>control</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>thread_index</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>PipeIsFull</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>request</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_task_pick_thread use thread index:%d nodeindex:%d in idle status "</literal></expr></argument>, <argument><expr><name>thread_index</name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>thread_index</name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>stamp</name> <operator>=</operator> <name><name>control</name><operator>-&gt;</operator><name>start_stamp</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>gap</name>   <operator>=</operator> <ternary><condition><expr><name>stamp</name></expr> ?</condition><then> <expr><operator>(</operator><name>now</name> <operator>-</operator> <name>stamp</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>gap</name>  <operator>&gt;=</operator> <name>PoolConnectTimeOut</name></expr>)</condition>
            <block>{<block_content>                
                <comment type="block">/* nodeindex is stuck in the thread */</comment>
                <if_stmt><if>if <condition>(<expr><name>nodeindex</name> <operator>==</operator> <name><name>control</name><operator>-&gt;</operator><name>nodeindex</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_task_pick_thread thread index:%d nodeindex:%d got stuck for %ld seconds, cmdtype=%d, message=%s"</literal></expr></argument>, 
                                             <argument><expr><name>thread_index</name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>, <argument><expr><name><name>control</name><operator>-&gt;</operator><name>cmdtype</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_task_pick_thread stuck at remote_ip:%s, remote_port:%d, remote_nodeoid:%d, remote remote_backend_pid:%d"</literal></expr></argument>,
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>, 
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_port</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>, 
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_nodeoid</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>,
                                             <argument><expr><name><name>control</name><operator>-&gt;</operator><name>remote_backend_pid</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>PipeIsFull</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>request</name><index>[<expr><name>thread_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> 
            <block>{<block_content>
                <comment type="block">/* not stuck too long and the pipe has space, choose it */</comment>
                <if_stmt><if>if <condition>(<expr><name>gap</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"pooler_async_task_pick_thread use thread index:%d nodeindex:%d in busy status, duration:%ld"</literal></expr></argument>, <argument><expr><name>thread_index</name></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>, <argument><expr><name>gap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>thread_index</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>loop_count</name><operator>++</operator></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>thread_index</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>thread_index</name> <operator>=</operator> <name>thread_index</name> <operator>%</operator> <name>MAX_SYNC_NETWORK_THREAD</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <comment type="block">/* can't find a avaliable thread*/</comment>
    <if_stmt><if>if <condition>(<expr><name>PoolerStuckExit</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to pick a thread for operation nodeindex:%d, pooler exit"</literal></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"fail to pick a thread for operation nodeindex:%d"</literal></expr></argument>, <argument><expr><name>nodeindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>agent_increase_ref_count</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>ref_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>agent_decrease_ref_count</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>ref_count</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>agent_can_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <return>return <expr><literal type="number">0</literal> <operator>==</operator> <name><name>agent</name><operator>-&gt;</operator><name>ref_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>agent_pend_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"agent_pend_destory end, ref_count:%d, pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>destory_pending</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>agent_set_destory</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>destory_pending</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>agent_pending</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
     <return>return <expr><name><name>agent</name><operator>-&gt;</operator><name>destory_pending</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>agent_handle_pending_agent</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>agent</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>agent_pending</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>agent_can_destory</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>destroy_pend_agent</name><argument_list>(<argument><expr><name>agent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>pooler_init_sync_control</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>request</name></name>        <operator>=</operator> <operator>(</operator><name>PGPipe</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGPipe</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>response</name></name>       <operator>=</operator> <operator>(</operator><name>PGPipe</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGPipe</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>sem</name></name>            <operator>=</operator> <operator>(</operator><name>ThreadSema</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ThreadSema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>nodeindex</name></name>      <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>status</name></name>         <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>start_stamp</name></name>    <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_backend_pid</name></name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_nodeoid</name></name>        <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name></name>            <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_port</name></name>         <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>message</name></name>            <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>cmdtype</name></name>            <operator>=</operator> <operator>(</operator><name>int32</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>MAX_SYNC_NETWORK_THREAD</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* generate a sequence number for slot */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>pooler_get_slot_seq_num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>g_Slot_Seqnum</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* get connection acquire sequence number */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>pooler_get_connection_acquire_num</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>g_Connection_Acquire_Count</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* bitmap index occupytation management */</comment>
<function><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>BmpMgrCreate</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>objnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>mgr</name> <operator>=</operator> <operator>(</operator><name>BitmapMgr</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BitmapMgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name>  <operator>=</operator> <call><name>DIVIDE_UP</name><argument_list>(<argument><expr><name>objnum</name></expr></argument>, <argument><expr><name>BITS_IN_LONGLONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_nobject</name></name> <operator>=</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name> <operator>*</operator> <name>BITS_IN_LONGLONG</name></expr>;</expr_stmt>  <comment type="block">/* align the object number to 64 */</comment>   
    
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* zero the FSM memory */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name></name></expr></argument>, <argument><expr><literal type="number">0X00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
             
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_version</name></name>  <operator>=</operator> <name>INIT_VERSION</name></expr>;</expr_stmt>
    <return>return <expr><name>mgr</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<comment type="block">/* find an unused index and return it */</comment>
<function><type><name>int</name></type> <name>BmpMgrAlloc</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives     </comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>j</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>k</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>offset</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>uint8</name>   <modifier>*</modifier></type><name>ucaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name>  <modifier>*</modifier></type><name>uiaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* sequencial scan the FSM map */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>          
        <comment type="block">/* got free space */</comment> 
        <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>MAX_UINT64</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* first word has free space */</comment>
            <expr_stmt><expr><name>uiaddr</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>uiaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>MAX_UINT32</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ucaddr</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>uiaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* in second word */</comment>
                <expr_stmt><expr><name>ucaddr</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>uiaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>BITS_IN_WORD</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            
            <comment type="block">/* find free space */</comment>                    
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>ucaddr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>MAX_UINT8</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>BITS_IN_BYTE</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>BIT_CLEAR</name><argument_list>(<argument><expr><name><name>ucaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>SET_BIT</name><argument_list>(<argument><expr><name><name>ucaddr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                            <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_version</name></name><operator>++</operator></expr>;</expr_stmt>
                            <return>return <expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>BITS_IN_LONGLONG</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>BITS_IN_BYTE</name> <operator>+</operator> <name>k</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>               
    </block_content>}</block></for>
    
    <comment type="block">/* out of space */</comment>            
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* free index */</comment>
<function><type><name>void</name></type> <name>BmpMgrFree</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>fsmidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>  <modifier>*</modifier></type><name>pAddr</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>uint32</name><operator>)</operator><name>index</name> <operator>&gt;=</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_nobject</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid index:%d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>            

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name>BITS_IN_LONGLONG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsmidx</name> <operator>=</operator> <name>index</name> <operator>/</operator> <name>BITS_IN_LONGLONG</name></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>pAddr</name>  <operator>=</operator> <operator>(</operator><name>uint8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>fsmidx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>            
    <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>pAddr</name><index>[<expr><name>offset</name> <operator>/</operator> <name>BITS_IN_BYTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name> <operator>%</operator> <name>BITS_IN_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_version</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function> 

<function><type><name>bool</name></type> <name>BmpMgrHasIndexAndClear</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>fsmidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>  <modifier>*</modifier></type><name>pAddr</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>uint32</name><operator>)</operator><name>index</name> <operator>&gt;=</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_nobject</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid index:%d"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>            

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>index</name> <operator>%</operator> <name>BITS_IN_LONGLONG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsmidx</name> <operator>=</operator> <name>index</name> <operator>/</operator> <name>BITS_IN_LONGLONG</name></expr>;</expr_stmt>
     
    <expr_stmt><expr><name>pAddr</name>  <operator>=</operator> <operator>(</operator><name>uint8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>fsmidx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>            
    <if_stmt><if>if<condition>( <expr><call><name>BIT_SET</name><argument_list>(<argument><expr><name><name>pAddr</name><index>[<expr><name>offset</name> <operator>/</operator> <name>BITS_IN_BYTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name> <operator>%</operator> <name>BITS_IN_BYTE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CLEAR_BIT</name><argument_list>(<argument><expr><name><name>pAddr</name><index>[<expr><name>offset</name> <operator>/</operator> <name>BITS_IN_BYTE</name></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name> <operator>%</operator> <name>BITS_IN_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mgr</name><operator>-&gt;</operator><name>m_version</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function> 


<function><type><name>uint32</name></type> <name>BmpMgrGetVersion</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>mgr</name><operator>-&gt;</operator><name>m_version</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BmpMgrGetUsed</name><parameter_list>(<parameter><decl><type><name>BitmapMgr</name> <modifier>*</modifier></type><name>mgr</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>indexes</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>indexlen</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
    <decl_stmt><decl><type><name>uint32</name></type>   <name>u64num</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>   <name>u32num</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>   <name>u8num</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>   <name>ubitnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>    <name>number</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>   <modifier>*</modifier></type><name>ucaddr</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name>  <modifier>*</modifier></type><name>uiaddr</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>indexlen</name> <operator>!=</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_nobject</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
   
    <comment type="block">/* scan the array */</comment>
    <for>for <control>(<init><expr><name>u64num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u64num</name> <operator>&lt;</operator> <name><name>mgr</name><operator>-&gt;</operator><name>m_fsmlen</name></name></expr>;</condition> <incr><expr><name>u64num</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>u64num</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>uiaddr</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>mgr</name><operator>-&gt;</operator><name>m_fsm</name><index>[<expr><name>u64num</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>            
            <for>for <control>(<init><expr><name>u32num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u32num</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u32num</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>    
                <if_stmt><if>if <condition>(<expr><name><name>uiaddr</name><index>[<expr><name>u32num</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>ucaddr</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>uiaddr</name><index>[<expr><name>u32num</name></expr>]</index></name></expr>;</expr_stmt>                
                                        
                    <for>for <control>(<init><expr><name>u8num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u8num</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>u8num</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>ucaddr</name><index>[<expr><name>u8num</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content>
                            <for>for <control>(<init><expr><name>ubitnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ubitnum</name> <operator>&lt;</operator> <name>BITS_IN_BYTE</name></expr>;</condition> <incr><expr><name>ubitnum</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name>BIT_SET</name><argument_list>(<argument><expr><name><name>ucaddr</name><index>[<expr><name>u8num</name></expr>]</index></name></expr></argument>, <argument><expr><name>ubitnum</name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>number</name></expr>]</index></name> <operator>=</operator> <name>u64num</name> <operator>*</operator> <name>BITS_IN_LONGLONG</name> <operator>+</operator> <name>BITS_IN_WORD</name> <operator>*</operator> <name>u32num</name> <operator>+</operator> <name>u8num</name> <operator>*</operator> <name>BITS_IN_BYTE</name> <operator>+</operator> <name>ubitnum</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>number</name><operator>++</operator></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>               
    </block_content>}</block></for>
         
    <return>return <expr><name>number</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_slot_info</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name> <modifier>*</modifier></type><name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_conn</name></name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>control</name> <operator>||</operator> <name>thread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&amp;&amp;</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator>struct <name>pg_conn</name><operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_backend_pid</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>be_pid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_port</name><index>[<expr><name>thread</name></expr>]</index></name>        <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_nodeoid</name><index>[<expr><name>thread</name></expr>]</index></name>        <operator>=</operator> <name>nodeoid</name></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>remote_ip</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* 
 * Need to print slot info when conn is stucked. 
 * But we can not get the valid slot info under all circumstances.
 * So, we choose the circumstances which indeed use the slot and slot-&gt;conn to 
 * connect to and execute sql on remote cn/dn,  and return true.
 * other cases, return false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_slot_avail</name><parameter_list>(<parameter><decl><type><name>PGXCPoolAsyncReq</name><modifier>*</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>cmd</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>PoolLocalSetStatus_reset</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'d'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>PoolResetStatus_reset</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
            
        <case>case <expr><literal type="char">'g'</literal></expr>:</case>
            <comment type="block">/* should set inside pooler_sync_remote_operator_thread  */</comment>
            <break>break;</break>

        <case>case <expr><literal type="char">'h'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>PoolCancelStatus_cancel</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name> <operator>||</operator>
                <name>PoolCancelStatus_end_query</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>final_status</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'s'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>PoolSetCommandStatus_set</name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>current_status</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>
    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* When slot is obtained by agent, slot should not exists in nodepool */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_POOLER_CHECK_</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_pooler_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>do_check_pooler_slot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_check_pooler_slot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolAgent</name>              <modifier>*</modifier></type><name>agent</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>agent</name> <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>agent</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        
        

        <comment type="block">/* loop through all cn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>check_single_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* loop through all dn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>check_single_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            
        </block_content>}</block></for>
    </block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_agent_duplicate_conn</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>agent_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>node_index</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>index</name>                            <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolAgent</name>              <modifier>*</modifier></type><name>agent</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>agent</name> <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>agent</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>    
        

        <comment type="block">/* loop through all dn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>agent_index</name> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>node_index</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>coord</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>     
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name> <operator>==</operator> <name>pid</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>            
        </block_content>}</block></for>

        <comment type="block">/* loop through all cn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>agent_index</name> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>node_index</name> <operator>&amp;&amp;</operator> <name>coord</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>     
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name> <operator>==</operator> <name>pid</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block></function>    

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_duplicate_allocated_conn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>                 <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PoolAgent</name>              <modifier>*</modifier></type><name>agent</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>agentCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>agentIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>agent</name> <operator>=</operator> <name><name>poolAgents</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>agent</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        

        <comment type="block">/* loop through all dn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>dn_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>check_agent_duplicate_conn</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>            
        </block_content>}</block></for>

        <comment type="block">/* loop through all cn slots */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>agent</name><operator>-&gt;</operator><name>coord_connections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>check_agent_duplicate_conn</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>conn</name></name><operator>)</operator><operator>-&gt;</operator><name>be_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_single_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>DatabasePool</name> <modifier>*</modifier></type><name>db_pool</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type>     <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>         <modifier>*</modifier></type><name>nodePool</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>i</name>                     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot_in_nodepool</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>slot</name></expr>)</condition>
    <block>{<block_content>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>    
    <while>while <condition>(<expr><name>db_pool</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>db_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"non-empty slot found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            
                <expr_stmt><expr><name>slot_in_nodepool</name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* Invalid situation */</comment>
                <if_stmt><if>if <condition>(<expr><name>slot_in_nodepool</name> <operator>&amp;&amp;</operator> <name>slot</name> <operator>==</operator> <name>slot_in_nodepool</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>print_pooler_slot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/* should abort? */</comment>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></while>
        <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_pooler_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name>  <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_conn</name></name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type> <name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[error]empty slot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"slot=%p bwarmed=%d usecount=%d refcount=%d m_version=%lu pid=%d seqnum=%d "</literal>
                  <literal type="string">"bdestoryed=%d file=%s lineno=%d node_name=%s backend_pid=%d"</literal></expr></argument>,
                  <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>bwarmed</name></name></expr></argument>,
                  <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>usecount</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>seqnum</name></name></expr></argument>,
                  <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>bdestoryed</name></name></expr></argument>,<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
                  <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* print conn info */</comment>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator>struct <name>pg_conn</name><operator>*</operator><operator>)</operator><name><name>slot</name><operator>-&gt;</operator><name>conn</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghostaddr</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>pghost</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"slot=%p, remote_ip=%s, remote_port=%s, remote_backend_pid=%d"</literal></expr></argument>,
                      <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pgport</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>be_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_hashtab_slots</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DatabasePool</name>         <modifier>*</modifier></type><name>db_pool</name>            <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type>     <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>         <modifier>*</modifier></type><name>nodePool</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot_in_nodepool</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>    
    <while>while <condition>(<expr><name>db_pool</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>db_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Self check. */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>inter_slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>inter_slot</name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>inter_slot</name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>    
            </block_content>}</block></for>
            
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>                
                
                <expr_stmt><expr><name>slot_in_nodepool</name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hashtab_check_single_slot</name><argument_list>(<argument><expr><name>slot_in_nodepool</name></expr></argument>, <argument><expr><name><name>db_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></while>        
        <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hashtab_check_single_slot</name><parameter_list>(<parameter><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>HTAB</name>  <modifier>*</modifier></type><name>nodeHtb</name></decl></parameter>, <parameter><decl><type><name>PGXCNodePool</name> <modifier>*</modifier></type><name>outerPool</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DatabasePool</name>         <modifier>*</modifier></type><name>db_pool</name>                <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type>     <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>         <modifier>*</modifier></type><name>nodePool</name>             <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>i</name>                     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name>     <modifier>*</modifier></type><name>slot_in_nodepool</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


    <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>    
    <while>while <condition>(<expr><name>db_pool</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nodeHtb</name> <operator>==</operator> <name><name>db_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>db_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>            
            <if_stmt><if>if <condition>(<expr><name>outerPool</name> <operator>==</operator> <name>nodePool</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>            
                <expr_stmt><expr><name>slot_in_nodepool</name> <operator>=</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* Invalid situation */</comment>
                <if_stmt><if>if <condition>(<expr><name>slot_in_nodepool</name> <operator>&amp;&amp;</operator> <name>slot</name> <operator>==</operator> <name>slot_in_nodepool</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
            </block_content>}</block></for>
        </block_content>}</block></while>        
        <expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Ping an UNHEALTHY node and if it succeeds, update SHARED node
 * information
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TryPingUnhealthyNode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeDefinition</name> <modifier>*</modifier></type><name>nodeDef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>connstr</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nodeDef</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodeDef</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No such definition, node dropped? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Could not find node (%u) definition,"</literal>
             <literal type="string">" skipping health check"</literal></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodeishealthy</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* hmm, can this happen? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"node (%u) healthy!"</literal>
             <literal type="string">" skipping health check"</literal></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"node (%s:%u) down! Trying ping"</literal></expr></argument>,
         <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>,
            <argument><expr><literal type="string">"host=%s port=%d"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodeport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PGXCNodePing</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Node (%s) back online!"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgxcNodeUpdateHealth</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not update health status of node (%s)"</literal></expr></argument>,
             <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Health map updated to reflect HEALTHY node (%s)"</literal></expr></argument>,
             <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if a node is indeed down and if it is update its UNHEALTHY
 * status
 */</comment>
<function><type><name>void</name></type>
<name>PoolPingNodeRecheck</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>nodeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeDefinition</name> <modifier>*</modifier></type><name>nodeDef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>connstr</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>healthy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>get_user_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not get current username errmsg: %s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nodeDef</name> <operator>=</operator> <call><name>PgxcNodeGetDefinition</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodeDef</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* No such definition, node dropped? */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Could not find node (%u) definition,"</literal>
             <literal type="string">" skipping health check"</literal></expr></argument>, <argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>,
			<argument><expr><literal type="string">"host=%s port=%d user=%s dbname=%s"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodehost</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodeport</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PGXCNodePing</name><argument_list>(<argument><expr><name>connstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>healthy</name> <operator>=</operator> <operator>(</operator><name>status</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* if no change in health bit, return */</comment>
    <if_stmt><if>if <condition>(<expr><name>healthy</name> <operator>==</operator> <name><name>nodeDef</name><operator>-&gt;</operator><name>nodeishealthy</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgxcNodeUpdateHealth</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>, <argument><expr><name>healthy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not update health status of node (%s)"</literal></expr></argument>,
             <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Health map updated to reflect (%s) node (%s)"</literal></expr></argument>,
             <argument><expr><ternary><condition><expr><name>healthy</name></expr> ?</condition><then> <expr><literal type="string">"HEALTHY"</literal></expr> </then><else>: <expr><literal type="string">"UNHEALTHY"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeDef</name><operator>-&gt;</operator><name>nodename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodeDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PoolAsyncPingNodes</name><parameter_list>()</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name>                <modifier>*</modifier></type><name>coOids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>                <modifier>*</modifier></type><name>dnOids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>coHealthMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>dnHealthMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numDn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* pipe is full, no need to continue */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_ASYNC_PIPE_FULL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>	

    <expr_stmt><expr><name>coOids</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coOids</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for coOids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dnOids</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_DATANODE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dnOids</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for dnOids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>coHealthMap</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coHealthMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for coHealthMap"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dnHealthMap</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_DATANODE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dnHealthMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for dnHealthMap"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PgxcNodeGetHealthMap</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>, <argument><expr><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>,
                         <argument><expr><name>coHealthMap</name></expr></argument>, <argument><expr><name>dnHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Find unhealthy datanodes and try to re-ping them
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dnHealthMap</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type>     <name>nodeoid</name> <init>= <expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>pooler_async_ping_node</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/*
     * Find unhealthy coordinators and try to re-ping them
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coHealthMap</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type>     <name>nodeoid</name> <init>= <expr><name><name>coOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>pooler_async_ping_node</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>coOids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coOids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dnOids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dnOids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>coHealthMap</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coHealthMap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dnHealthMap</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dnHealthMap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Ping UNHEALTHY nodes as part of the maintenance window
 */</comment>
<function><type><name>void</name></type>
<name>PoolPingNodes</name><parameter_list>()</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name>                <modifier>*</modifier></type><name>coOids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>                <modifier>*</modifier></type><name>dnOids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>coHealthMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>dnHealthMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numDn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>coOids</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coOids</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for coOids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dnOids</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_DATANODE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dnOids</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for dnOids"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>coHealthMap</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_COORDINATOR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coHealthMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for coHealthMap"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dnHealthMap</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>TBASE_MAX_DATANODE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dnHealthMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory for dnHealthMap"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PgxcNodeGetHealthMap</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>, <argument><expr><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>,
                         <argument><expr><name>coHealthMap</name></expr></argument>, <argument><expr><name>dnHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Find unhealthy datanodes and try to re-ping them
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numDn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dnHealthMap</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type>     <name>nodeoid</name> <init>= <expr><name><name>dnOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TryPingUnhealthyNode</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/*
     * Find unhealthy coordinators and try to re-ping them
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coHealthMap</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type>     <name>nodeoid</name> <init>= <expr><name><name>coOids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TryPingUnhealthyNode</name><argument_list>(<argument><expr><name>nodeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>coOids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coOids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dnOids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dnOids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>coHealthMap</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>coHealthMap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dnHealthMap</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnHealthMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dnHealthMap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_abort</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>       <modifier>*</modifier></type><name>pids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pids</name> <operator>=</operator> <call><name>abort_pids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>pids</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>handle_command_to_nodes</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>datanodecount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>coordcount</name></decl>;</decl_stmt>
    <comment type="line">//List       *nodelist = NIL;</comment>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>datanodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>coordlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
    <comment type="block">/*
     * Length of message is caused by:
     * - Message header = 4bytes
     * - Number of Datanodes sent = 4bytes
     * - List of Datanodes = NumPoolDataNodes * 4bytes (max)
     * - Number of Coordinators sent = 4bytes
     * - List of Coordinators = NumPoolCoords * 4bytes (max)
     */</comment>
    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>datanodecount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>datanodecount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>datanodelist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <expr_stmt><expr><name>coordcount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* It is possible that no Coordinators are involved in the transaction */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coordcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>coordlist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Send local commands if any to the nodes involved in the transaction */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>send_local_commands</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* nothing to do, just send result */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_connect</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgoptions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>database</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgoptions</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Coordinator pool is not initialized.
     * With that it would be impossible to create a Database by default.
     */</comment>
    <expr_stmt><expr><call><name>agent_init</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_clean_connection</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>datanodecount</name></decl>, <decl><type ref="prev"/><name>coordcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>nodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* It is possible to clean up only datanode connections */</comment>
    <expr_stmt><expr><name>datanodecount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>datanodecount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="block">/* Translate index to Oid */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type> <name>node</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* It is possible to clean up only coordinator connections */</comment>
    <expr_stmt><expr><name>coordcount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coordcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="block">/* Translate index to Oid */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type> <name>node</name> <init>= <expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodelist</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clean up connections here */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>clean_connection</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send success result */</comment>
    <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_get_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>       <modifier>*</modifier></type><name>fds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name>    <modifier>*</modifier></type><name>pids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>datanodecount</name></decl>, <decl><type ref="prev"/><name>coordcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>   <modifier>*</modifier></type><name>datanodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>   <modifier>*</modifier></type><name>coordlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>connect_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>    <name>raise_error</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * Length of message is caused by:
     * - Message header = 4bytes
     * - List of Datanodes = NumPoolDataNodes * 4bytes (max)
     * - List of Coordinators = NumPoolCoords * 4bytes (max)
     * - Number of Datanodes sent = 4bytes
     * - Number of Coordinators sent = 4bytes
	 * - Raise error flag = 1byte
     * It is better to send in a same message the list of Co and Dn at the same
     * time, this permits to reduce interactions between postmaster and pooler
     */</comment>
	<expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>+</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>datanodecount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>datanodecount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>datanodelist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"backend required %d datanode connections, pid:%d"</literal></expr></argument>, <argument><expr><name>datanodecount</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>coordcount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* It is possible that no Coordinators are involved in the transaction */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coordcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>coordlist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"backend required %d coordinator connections, pid:%d"</literal></expr></argument>, <argument><expr><name>coordcount</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name>raise_error</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_pool_locked</name></expr>)</condition>
    <block>{<block_content>
        
        <comment type="block">/*
         * In case of error agent_acquire_connections will log
         * the error and return -1
         */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>agent_acquire_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>raise_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connect_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* async acquire connection will be done in parallel threads */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ret</name> <operator>&amp;&amp;</operator> <name>fds</name> <operator>&amp;&amp;</operator> <name>pids</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"return %d database connections pid:%d"</literal></expr></argument>, <argument><expr><name>connect_num</name></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>pool_sendfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fds</name></expr> ?</condition><then> <expr><name>connect_num</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fds</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * Also send the PIDs of the remote backend processes serving
             * these connections
             */</comment>
            <expr_stmt><expr><call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>pids</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pids</name></expr> ?</condition><then> <expr><name>connect_num</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_hashtab</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>ret</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"cannot get conn immediately. thread will do the work. pid:%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_thread</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fds</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fds</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>pids</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>pool_sendfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * Also send the PIDs of the remote backend processes serving
             * these connections
             */</comment>
            <expr_stmt><expr><call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"error happen when agent_acquire_connections. pid:%d, ret=%d"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* pooler is locked, just refuse the 'g' request */</comment>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,<argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"Pool connection get request cannot run during pool lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <comment type="block">/* set error message */</comment>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>POOL_ERR_GET_CONNECTIONS_POOLER_LOCKED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>err_msg</name></name></expr></argument>, <argument><expr><name>POOL_ERR_MSG_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>poolErrorMsg</name><index>[<expr><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>error_code</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>pool_sendfds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Also send the PIDs of the remote backend processes serving
         * these connections
         */</comment>
        <expr_stmt><expr><call><name>pool_sendpids</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_query_cancel</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>datanodecount</name></decl>, <decl><type ref="prev"/><name>coordcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>   <modifier>*</modifier></type><name>datanodelist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>   <modifier>*</modifier></type><name>coordlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>signal</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Length of message is caused by:
     * - Message header = 4bytes
     * - List of Datanodes = NumPoolDataNodes * 4bytes (max)
     * - List of Coordinators = NumPoolCoords * 4bytes (max)
     * - Number of Datanodes sent = 4bytes
     * - Number of Coordinators sent = 4bytes
     * - sent signal 4bytes
     */</comment>
    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>datanodecount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>datanodecount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>datanodelist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>coordcount</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* It is possible that no Coordinators are involved in the transaction */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coordcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>coordlist</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* get signal type */</comment>
    <expr_stmt><expr><name>signal</name> <operator>=</operator>  <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cancel_query_on_connections</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>datanodelist</name></expr></argument>, <argument><expr><name>coordlist</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>datanodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>coordlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/* just send result. when res &gt; 0, thread will exec pool_sendres. */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pool_sendres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>handle_session_command</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>PoolCommandType</name></type>     <name>command_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>set_command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>              <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>oid_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>                 <modifier>*</modifier></type><name>oids</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/* Get oid count */</comment>
    <expr_stmt><expr><name>oid_count</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d  async set command node_count:%d "</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>oid_count</name> <operator>!=</operator> <name>POOL_SET_COMMAND_NONE</name> <operator>&amp;&amp;</operator> <name>oid_count</name> <operator>!=</operator> <name>POOL_SET_COMMAND_ALL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>  <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* get oids */</comment>
        <expr_stmt><expr><name>oids</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof><operator>*</operator> <name>oid_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oid_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>PoolConnectDebugPrint</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d  async set command node_count:%d, node_index:%d node_oid:%u "</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>oid_count</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Determine if command is local or session */</comment>
    <expr_stmt><expr><name>command_type</name> <operator>=</operator> <operator>(</operator><name>PoolCommandType</name><operator>)</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Get the SET command if necessary */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>set_command</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Manage command depending on its type */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>agent_session_command</name><argument_list>(<argument><expr><name>agent</name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>oid_count</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send success result. in parallel process, we got positive number returned. */</comment>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_sendres_with_command_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>InvalidCommandId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"handle_session_command pid:%d async set command command:%s failed!"</literal></expr></argument>, <argument><expr><name><name>agent</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>set_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>oids</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * refresh_database_pools
 *        refresh information for all database pools
 *
 * Connection information refresh concerns all the database pools.
 * A database pool is refreshed as follows for each remote node:
 *
 * - node pool is deleted if its port or host information is changed.
 *   Subsequently all its connections are dropped.
 *
 * If any other type of activity is found, we error out.
 *
 * XXX I don't see any cases that would error out. Isn't the comment
 * simply obsolete?
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>refresh_database_pools</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>coOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>               <modifier>*</modifier></type><name>dnOids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numCo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                <name>numDn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>res</name> <init>= <expr><name>POOL_REFRESH_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Refreshing database pools"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * re-check if agent's node information matches current contents of the
     * shared memory table.
     */</comment>
    <expr_stmt><expr><call><name>PgxcNodeGetOids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numDn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agent</name><operator>-&gt;</operator><name>num_coord_connections</name></name> <operator>!=</operator> <name>numCo</name> <operator>||</operator>
            <name><name>agent</name><operator>-&gt;</operator><name>num_dn_connections</name></name> <operator>!=</operator> <name>numDn</name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>coord_conn_oids</name></name></expr></argument>, <argument><expr><name>coOids</name></expr></argument>, <argument><expr><name>numCo</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><name><name>agent</name><operator>-&gt;</operator><name>dn_conn_oids</name></name></expr></argument>, <argument><expr><name>dnOids</name></expr></argument>, <argument><expr><name>numDn</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>POOL_REFRESH_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Release palloc'ed memory */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dnOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Scan the list and destroy any altered pool. They will be recreated
     * upon subsequent connection acquisition.
     */</comment>
    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>res</name> <operator>==</operator> <name>POOL_REFRESH_SUCCESS</name> <operator>&amp;&amp;</operator> <name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>connstr_chk</name> <init>= <expr><call><name>build_node_conn_str</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name>databasePool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/*
             * Since we re-checked the numbers above, we should not get
             * the case of an ADDED or a DELETED node here..
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>connstr_chk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Found a deleted node (%u)"</literal></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>POOL_REFRESH_FAILED</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>)</condition>
                <block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><literal type="string">"refresh_database_pools: Found an altered node (%u %s) "</literal>
						<literal type="string">"size %d freesize %d is removed. "</literal>
						<literal type="string">"connstr_chk=%s, nodePool-&gt;connstr=%s"</literal></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>,
						<argument><expr><name>connstr_chk</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>destroy_node_pool</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>,
                            <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>destroy_node_pool_free_slots</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* increase the node pool version */</comment>
					<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						<argument><expr><literal type="string">"refresh_database_pools: Found an altered node (%u %s) "</literal>
						<literal type="string">"size %d freesize %d increased m_version %lu"</literal>
						<literal type="string">"connstr_chk=%s, nodePool-&gt;connstr=%s"</literal></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,
						<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name></expr></argument>,
						<argument><expr><name>connstr_chk</name></expr></argument>, <argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* fresh the connect string so that new coming connection will connect to the new node  */</comment>
					<if_stmt><if>if <condition>(<expr><name>connstr_chk</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>connstr</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>connstr_chk</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connstr_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>check_persistent_connections</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>&amp;&amp;</operator> <name>IS_PGXC_DATANODE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"persistent_datanode_connections = ON is currently not "</literal>
                <literal type="string">"supported on datanodes - ignoring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Refresh connection data in pooler and drop connections for those nodes
 * that have changed. Thus, this operation is less destructive as compared
 * to PoolManagerReloadConnectionInfo and should typically be called when
 * NODE ALTER has been performed
 */</comment>
<function><type><name>int</name></type>
<name>PoolManagerRefreshConnectionInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>poolHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PgxcNodeListAndCountWrapTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>POOL_CHECK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_pooler_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab_and_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_conn_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_hashtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_pooler_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>last_print_stat_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>           <name>now</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>           <name>timediff</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>last_print_stat_time</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>last_print_stat_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timediff</name> <operator>=</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>last_print_stat_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>timediff</name> <operator>&gt;=</operator> <name>PoolPrintStatTimeout</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>last_print_stat_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[pooler stat]client_request_conn_total=%d, client_request_from_hashtab=%d, "</literal>
                      <literal type="string">"client_request_from_thread=%d, acquire_conn_from_hashtab=%d, "</literal>
                        <literal type="string">"acquire_conn_from_hashtab_and_set=%d, acquire_conn_from_thread=%d, "</literal>
                        <literal type="string">"acquire_conn_time=%lu, "</literal>
                        <literal type="string">"each_client_conn_request_cost_time=%f us"</literal></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_conn_total</name></name></expr></argument>, 
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_hashtab</name></name></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_from_thread</name></name></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab</name></name></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_hashtab_and_set</name></name></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_from_thread</name></name></expr></argument>,
                  <argument><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_time</name></name></expr></argument>,
                  <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_time</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>g_pooler_stat</name><operator>.</operator><name>client_request_conn_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reset_pooler_statistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>


    
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>record_task_message</name><parameter_list>(<parameter><decl><type><name>PGXCPoolSyncNetWorkControl</name><modifier>*</modifier></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>control</name><operator>-&gt;</operator><name>message</name><index>[<expr><name>thread</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>record_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>end_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name>  <name>long</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>PoolPrintStatTimeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>start_time</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>start_time</name><operator>.</operator><name>tv_usec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    
    <expr_stmt><expr><name>diff</name> <operator>=</operator> <literal type="number">1000000</literal> <operator>*</operator> <operator>(</operator><name><name>end_time</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>+</operator> <name><name>end_time</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>start_time</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_stat</name><operator>.</operator><name>acquire_conn_time</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RebuildAgentIndex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mgrVersion</name> <operator>!=</operator> <call><name>BmpMgrGetVersion</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>usedAgentSize</name><operator>=</operator> <call><name>BmpMgrGetUsed</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>, <argument><expr><name>agentIndexes</name></expr></argument>, <argument><expr><name>poolAgentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>usedAgentSize</name> <operator>!=</operator> <name>agentCount</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><name>POOL_MGR_PREFIX</name><literal type="string">"invalid BmpMgr status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mgrVersion</name> <operator>=</operator> <call><name>BmpMgrGetVersion</name><argument_list>(<argument><expr><name>poolAgentMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>connection_need_pool</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* format "xxx:yyy" */</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_ELEMENT_SEP</name></cpp:macro> <cpp:value>","</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_PATH_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>token</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>next</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>str</name><index>[<expr><name>TEMP_PATH_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* no filter, need pool */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>filter</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* no name, no  need pool */</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>name</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TEMP_PATH_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name>  <operator>=</operator> <name>token</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>            
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>FILTER_ELEMENT_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>next</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* not pool if listed */</comment>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="block">/* not pool if listed */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while<condition>(<expr><operator>*</operator><name>next</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>;</do>
        
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* close pooled connection */</comment>
<function><type><name>int</name></type>
<name>PoolManagerClosePooledConnections</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>n32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>msglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>msgtype</name> <init>= <expr><literal type="char">'t'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>dblen</name> <init>= <expr><ternary><condition><expr><name>dbname</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>userlen</name> <init>= <expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>HOLD_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>poolHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><call><name>ConnectPoolManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Message length */</comment>
    <expr_stmt><expr><name>msglen</name> <operator>=</operator> <name>dblen</name> <operator>+</operator> <name>userlen</name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Length of Database string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send database name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Length of Username string */</comment>
    <expr_stmt><expr><name>n32</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Send user name, followed by \0 terminator if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>username</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>userlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Then Get back Pids from Pooler */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pool_recvres</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>poolHandle</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"PoolManagerClosePooledConnections res:%d"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RESUME_POOLER_RELOAD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>handle_close_pooled_connections</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type> <name>agent</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>                <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>database</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>user_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabasePool</name>     <modifier>*</modifier></type><name>databasePool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>res</name> <init>= <expr><name>POOL_CONN_RELEASE_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pool_getmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Scan the list and destroy any altered pool. They will be recreated
     * upon subsequent connection acquisition.
     */</comment>
    <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name>databasePools</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>databasePool</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Update each database pool slot with new connection information */</comment>
        <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hseq_status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PGXCNodePool</name>   <modifier>*</modifier></type><name>nodePool</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>match_databasepool</name><argument_list>(<argument><expr><name>databasePool</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>nodePool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>destroy_node_pool_free_slots</name><argument_list>(<argument><expr><name>nodePool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* increase the node pool version */</comment>
				<expr_stmt><expr><name><name>nodePool</name><operator>-&gt;</operator><name>m_version</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>databasePool</name> <operator>=</operator> <name><name>databasePool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>match_databasepool</name><parameter_list>(<parameter><decl><type><name>DatabasePool</name> <modifier>*</modifier></type><name>databasePool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>database</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>databasePool</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>user_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>database</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>user_name</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>database</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>databasePool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>    
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ConnectPoolManager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>need_abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PoolHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetPoolManagerHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsTransactionOrTransactionBlock</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>need_abort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PoolManagerConnect</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>GetClusterUserName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>session_options</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>need_abort</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AbortCurrentTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * init pooler command statistics
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_qtype2id</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g_qtype2id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* init type to id map */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POOLER_CMD_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_qtype2id</name><index>[<expr><name><name>g_pooler_cmd</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* init global statistics array */</comment>
    <expr_stmt><expr><name>g_pooler_cmd_stat</name> <operator>=</operator> <operator>(</operator><name>PoolerCmdStatistics</name><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>POOLER_CMD_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PoolerCmdStatistics</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POOLER_CMD_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>=</operator> <name>MAX_UINT64</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * reset pooler command statistics
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reset_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* reset global statistics array */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POOLER_CMD_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>=</operator> <name>MAX_UINT64</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * update pooler command statistics info
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_pooler_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>costtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type> <name>id</name> <init>= <expr><name><name>g_qtype2id</name><index>[<expr><name>qtype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>MAX_UINT8</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>total_request_times</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>total_costtime</name> <operator>+=</operator> <name>costtime</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>costtime</name> <operator>&gt;</operator> <name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>max_costtime</name> <operator>=</operator> <name>costtime</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>costtime</name> <operator>&lt;</operator> <name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>min_costtime</name> <operator>=</operator> <name>costtime</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * handle get command statistics
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_get_cmd_statistics</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>n64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>   <name>msgtype</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* response message type */</comment>
    <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgtype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* fixed length command statistics info */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>POOLER_CMD_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>n64</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_request_times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>n64</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>total_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>n64</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>n64</name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>g_pooler_cmd_stat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>min_costtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pool_putbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * handle get connections statistics
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_get_conn_statistics</name><parameter_list>(<parameter><decl><type><name>PoolAgent</name> <modifier>*</modifier></type><name>agent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DatabasePool</name>     <modifier>*</modifier></type><name>database_pool</name> <init>= <expr><name>databasePools</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type>  <name>hseq_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePool</name>     <modifier>*</modifier></type><name>node_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32</name></type>           <name>node_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* the nodes count use the same database and username */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>           <name>total_node_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* total nodes count */</comment>

    <comment type="block">/* var offset in buf */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>           <name>node_cnt_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>           <name>total_node_cnt_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32</name></type>           <name>exceed_keepalive_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>           <name>exceed_maxlifetime_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>              <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PGXCNodePoolSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>           <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type>   <name>buf</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* reserve a place for total_node_cnt, record the offset of total_node_cnt */</comment>
    <expr_stmt><expr><name>total_node_cnt_offset</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>total_node_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* total node count | database | username | node count in the same database and username | node pool conn statistics | ... | database | username | ... */</comment>
    <while>while <condition>(<expr><name>database_pool</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>database_pool</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>database_pool</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* reserve a place for node_cnt, record the offset of node_cnt */</comment>
        <expr_stmt><expr><name>node_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>node_cnt_offset</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>node_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* traverse all node_pool in hashtable */</comment>
        <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>, <argument><expr><name><name>database_pool</name><operator>-&gt;</operator><name>nodePools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>node_pool</name> <operator>=</operator> <operator>(</operator><name>PGXCNodePool</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hseq_status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>node_cnt</name><operator>++</operator></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nodeoid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>coord</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nwarming</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>node_pool</name><operator>-&gt;</operator><name>nquery</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* reset statistics count */</comment>
            <expr_stmt><expr><name>exceed_keepalive_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>exceed_maxlifetime_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <comment type="block">/* statistical connection life cycle */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>node_pool</name><operator>-&gt;</operator><name>slot</name></name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>freeSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>node_pool</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>released</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PoolConnKeepAlive</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>exceed_keepalive_cnt</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PoolConnMaxLifetime</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>exceed_maxlifetime_cnt</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>exceed_keepalive_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_sendint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>exceed_maxlifetime_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>


        <expr_stmt><expr><name>total_node_cnt</name> <operator>+=</operator> <name>node_cnt</name></expr>;</expr_stmt>

        <comment type="block">/* change the nodes count in message buff */</comment>
        <expr_stmt><expr><name>node_cnt</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>node_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pq_updatemsgbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>node_cnt_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>database_pool</name> <operator>=</operator> <name><name>database_pool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* change the total nodes count in message buff */</comment>
    <expr_stmt><expr><name>total_node_cnt</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>total_node_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pq_updatemsgbytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>total_node_cnt_offset</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>total_node_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* send messages */</comment>
    <expr_stmt><expr><call><name>pool_putmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pool_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agent</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
