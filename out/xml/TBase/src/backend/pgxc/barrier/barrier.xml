<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/pgxc/barrier/barrier.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * barrier.c
 *
 *	  Barrier handling for PITR
 *
 *
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 2010-2012 Postgres-XC Development Group
 *
 * IDENTIFICATION
 *	  $$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/barrier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/execRemote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/locator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxcnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/dest.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>generate_barrier_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>PrepareBarrier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ExecuteBarrier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EndBarrier</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>handles</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Prepare ourselves for an incoming BARRIER. We must disable all new 2PC
 * commits and let the ongoing commits to finish. We then remember the
 * barrier id (so that it can be matched with the final END message) and
 * tell the driving Coordinator to proceed with the next step.
 *
 * A simple way to implement this is to grab a lock in an exclusive mode
 * while all other backend starting a 2PC will grab the lock in shared
 * mode. So as long as we hold the exclusive lock, no other backend start a
 * new 2PC and there can not be any 2PC in-progress. This technique would
 * rely on assumption that an exclusive lock requester is not starved by
 * share lock requesters.
 *
 * Note: To ensure that the 2PC are not blocked for a long time, we should
 * set a timeout. The lock should be release after the timeout and the
 * barrier should be canceled.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCreateBarrierPrepare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_PGXC_REMOTE_COORDINATOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The CREATE BARRIER PREPARE message is expected to "</literal>
						<literal type="string">"arrive at a Coordinator from another Coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>BarrierLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TODO Start a timer to terminate the pending barrier after a specified
	 * timeout
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Mark the completion of an on-going barrier. We must have remembered the
 * barrier ID when we received the CREATE BARRIER PREPARE command
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCreateBarrierEnd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_PGXC_REMOTE_COORDINATOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The CREATE BARRIER END message is expected to "</literal>
						<literal type="string">"arrive at a Coordinator from another Coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>BarrierLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TODO Stop the timer
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Execute the CREATE BARRIER command. Write a BARRIER WAL record and flush the
 * WAL buffers to disk before returning to the caller. Writing the WAL record
 * does not guarantee successful completion of the barrier command.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCreateBarrierExecute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The CREATE BARRIER EXECUTE message is expected to "</literal>
						<literal type="string">"arrive from a Coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>recptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>recptr</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_BARRIER_ID</name></expr></argument>, <argument><expr><name>XLOG_BARRIER_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>generate_barrier_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>genid</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>ts</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the caller can passed a NULL value, generate an id which is
	 * guaranteed to be unique across the cluster. We use a combination of
	 * the Coordinator node id and current timestamp.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>
	   <return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>genid</name></expr></argument>, <argument><expr><literal type="string">"%s_"</literal><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>genid</name></expr></argument>, <argument><expr><literal type="string">"%s_%.0f"</literal></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>genid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PGXCNodeAllHandles</name> <modifier>*</modifier></type>
<name>SendBarrierPrepareRequest</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>coords</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>coord_handles</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>barrier_idlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>coord_handles</name> <operator>=</operator> <call><name>get_handles</name><argument_list>(<argument><expr><name>NIL</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>conn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>conn</name> <operator>&lt;</operator> <name><name>coord_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>;</condition> <incr><expr><name>conn</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>coord_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>conn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Invalid connection state, return error */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DN_CONNECTION_STATE_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to send CREATE BARRIER PREPARE request "</literal>
						 	<literal type="string">"to the node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>barrier_idlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* for the length itself */</comment>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* for barrier command itself */</comment>

		<comment type="block">/* msgType + msgLen */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ensure_out_buffer_capacity</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>msglen</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CREATE_BARRIER_PREPARE</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>barrier_idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PGXCNodeSetConnectionState</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>DN_CONNECTION_STATE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pgxc_node_flush</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>coord_handles</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckBarrierCommandStatus</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>conn_handles</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name> <operator>+</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>dn_conn_count</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Check CREATE BARRIER &lt;%s&gt; %s command status"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>conn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>conn</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>conn</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>&lt;</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>conn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>conn</name> <operator>-</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pgxc_node_receive</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to receive response from the remote side"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>handle_response</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RESPONSE_BARRIER_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CREATE BARRIER PREPARE command failed "</literal>
						 	<literal type="string">"with error %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Successfully completed CREATE BARRIER &lt;%s&gt; %s command on "</literal>
				 <literal type="string">"all nodes"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SendBarrierEndRequest</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>coord_handles</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>barrier_idlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Sending CREATE BARRIER &lt;%s&gt; END command to all Coordinators"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>conn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>conn</name> <operator>&lt;</operator> <name><name>coord_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>;</condition> <incr><expr><name>conn</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>coord_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>conn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Invalid connection state, return error */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DN_CONNECTION_STATE_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to send CREATE BARRIER PREPARE request "</literal>
						 	<literal type="string">"to the node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>barrier_idlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* for the length itself */</comment>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* for barrier command itself */</comment>

		<comment type="block">/* msgType + msgLen */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ensure_out_buffer_capacity</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>msglen</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CREATE_BARRIER_END</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>barrier_idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PGXCNodeSetConnectionState</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>DN_CONNECTION_STATE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgxc_node_flush</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

</block_content>}</block></function>

<comment type="block">/*
 * Prepare all Coordinators for barrier. During this step all the Coordinators
 * are informed to suspend any new 2PC transactions. The Coordinators should
 * disable new 2PC transactions and then wait for the existing transactions to
 * complete. Once all "in-flight" 2PC transactions are over, the Coordinators
 * respond back.
 *
 * That completes the first step in barrier generation
 *
 * Any errors will be reported via ereport.
 */</comment>
<function><type><specifier>static</specifier> <name>PGXCNodeAllHandles</name> <modifier>*</modifier></type>
<name>PrepareBarrier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>coord_handles</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Preparing Coordinators for BARRIER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Send a CREATE BARRIER PREPARE message to all the Coordinators. We should
	 * send an asynchronous request so that we can disable local commits and
	 * then wait for the remote Coordinators to finish the work
	 */</comment>
	<expr_stmt><expr><name>coord_handles</name> <operator>=</operator> <call><name>SendBarrierPrepareRequest</name><argument_list>(<argument><expr><call><name>GetAllCoordNodes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Disable local commits
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>BarrierLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Disabled 2PC commits originating at the driving Coordinator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TODO Start a timer to cancel the barrier request in case of a timeout
	 */</comment>

	<comment type="block">/*
	 * Local in-flight commits are now over. Check status of the remote
	 * Coordinators
	 */</comment>
	<expr_stmt><expr><call><name>CheckBarrierCommandStatus</name><argument_list>(<argument><expr><name>coord_handles</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"PREPARE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>coord_handles</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute the barrier command on all the components, including Datanodes and
 * Coordinators.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ExecuteBarrier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>barrierDataNodeList</name> <init>= <expr><call><name>GetAllDataNodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>barrierCoordList</name> <init>= <expr><call><name>GetAllCoordNodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>conn_handles</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>barrier_idlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>conn_handles</name> <operator>=</operator> <call><name>get_handles</name><argument_list>(<argument><expr><name>barrierDataNodeList</name></expr></argument>, <argument><expr><name>barrierCoordList</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Sending CREATE BARRIER &lt;%s&gt; EXECUTE message to "</literal>
				 <literal type="string">"Datanodes and Coordinator"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Send a CREATE BARRIER request to all the Datanodes and the Coordinators
	 */</comment>
	<for>for <control>(<init><expr><name>conn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>conn</name> <operator>&lt;</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name> <operator>+</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>dn_conn_count</name></name></expr>;</condition> <incr><expr><name>conn</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGXCNodeHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>&lt;</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>coord_handles</name><index>[<expr><name>conn</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>datanode_handles</name><index>[<expr><name>conn</name> <operator>-</operator> <name><name>conn_handles</name><operator>-&gt;</operator><name>co_conn_count</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Invalid connection state, return error */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DN_CONNECTION_STATE_IDLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to send CREATE BARRIER EXECUTE request "</literal>
						 	<literal type="string">"to the node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>barrier_idlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* for the length itself */</comment>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* for barrier command itself */</comment>

		<comment type="block">/* msgType + msgLen */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ensure_out_buffer_capacity</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>msglen</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name><index>[<expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CREATE_BARRIER_EXECUTE</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>outBuffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>barrier_idlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>outEnd</name></name> <operator>+=</operator> <name>barrier_idlen</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PGXCNodeSetConnectionState</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>DN_CONNECTION_STATE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgxc_node_flush</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>CheckBarrierCommandStatus</name><argument_list>(<argument><expr><name>conn_handles</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>conn_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Also WAL log the BARRIER locally and flush the WAL buffers to disk
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>recptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>recptr</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_BARRIER_ID</name></expr></argument>, <argument><expr><name>XLOG_BARRIER_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Resume 2PC commits on the local as well as remote Coordinators.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EndBarrier</name><parameter_list>(<parameter><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>prepared_handles</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Resume 2PC locally */</comment>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>BarrierLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SendBarrierEndRequest</name><argument_list>(<argument><expr><name>prepared_handles</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CheckBarrierCommandStatus</name><argument_list>(<argument><expr><name>prepared_handles</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>RequestBarrier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGXCNodeAllHandles</name> <modifier>*</modifier></type><name>prepared_handles</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"CREATE BARRIER request received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Ensure that we are a Coordinator and the request is not from another
	 * coordinator
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_PGXC_COORDINATOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CREATE BARRIER command must be sent to a Coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CREATE BARRIER command is not expected from another Coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get a barrier id if the user has not supplied it
	 */</comment>
	<expr_stmt><expr><name>barrier_id</name> <operator>=</operator> <call><name>generate_barrier_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"CREATE BARRIER &lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Step One. Prepare all Coordinators for upcoming barrier request
	 */</comment>
	<expr_stmt><expr><name>prepared_handles</name> <operator>=</operator> <call><name>PrepareBarrier</name><argument_list>(<argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Step two. Issue BARRIER command to all involved components, including
	 * Coordinators and Datanodes
	 */</comment>
	<expr_stmt><expr><call><name>ExecuteBarrier</name><argument_list>(<argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Step three. Inform Coordinators about a successfully completed barrier
	 */</comment>
	<expr_stmt><expr><call><name>EndBarrier</name><argument_list>(<argument><expr><name>prepared_handles</name></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Finally report the barrier to GTM to backup its restart point */</comment>
	<expr_stmt><expr><call><name>ReportBarrierGTM</name><argument_list>(<argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Free the handles */</comment>
	<expr_stmt><expr><call><name>pfree_pgxc_all_handles</name><argument_list>(<argument><expr><name>prepared_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>completionTag</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>, <argument><expr><name>COMPLETION_TAG_BUFSIZE</name></expr></argument>, <argument><expr><literal type="string">"BARRIER %s"</literal></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>barrier_redo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do */</comment>
	<return>return;</return>
</block_content>}</block></function>
</unit>
