<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/pgxc/copy/remotecopy.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * remotecopy.c
 *        Implements an extension of COPY command for remote management
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2011, PostgreSQL Global Development Group
 * Portions Copyright (c) 2010-2012, Postgres-XC Development Group
 *
 *
 * IDENTIFICATION
 *        src/backend/pgxc/copy/remotecopy.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pgxcship.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxcnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/remotecopy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RemoteCopy_QuoteStr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * RemoteCopy_GetRelationLoc
 * Get relation node list based on COPY data involved. An empty list is
 * returned to caller if relation involved has no locator information
 * as it is the case of a system relation.
 */</comment>
<function><type><name>void</name></type>
<name>RemoteCopy_GetRelationLoc</name><parameter_list>(<parameter><decl><type><name>RemoteCopyData</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
                          <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
                          <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>attnums</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * If target table does not exists on nodes (e.g. system table)
     * the location info returned is NULL. This is the criteria, when
     * we need to run COPY on Coordinator
     */</comment>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name></name> <operator>=</operator> <call><name>GetRelationLocInfo</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name></name> <operator>&amp;&amp;</operator>
            <call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>partAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>pattr</name></decl>;</decl_stmt>
        <comment type="block">/* determine distribution column data type */</comment>
        <expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pattr</name> <operator>=</operator> <name><name>tdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>partAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dist_type</name></name> <operator>=</operator> <name><name>pattr</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pattr</name> <operator>=</operator> <name><name>tdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name><operator>-&gt;</operator><name>secAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sec_dist_type</name></name> <operator>=</operator> <name><name>pattr</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sec_dist_type</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dist_type</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sec_dist_type</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>locator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RemoteCopy_BuildStatement
 * Build a COPY query for remote management
 */</comment>
<function><type><name>void</name></type>
<name>RemoteCopy_BuildStatement</name><parameter_list>(<parameter><decl><type><name>RemoteCopyData</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
                          <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
                          <parameter><decl><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
                          <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>attnamelist</name></decl></parameter>,
                          <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>attnums</name></decl></parameter>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
                          <parameter><decl><type><specifier>const</specifier> <name>Bitmapset</name> <modifier>*</modifier></type><name>shards</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            )</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>attnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupDesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>relation_loc_info</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_locator_info</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/*
     * Build up query string for the Datanodes, it should match
     * to original string, but should have STDIN/STDOUT instead
     * of filename.
     */</comment>
    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">"COPY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The table name should be qualified, unless the table is a temporary table
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_backend</name></name> <operator>==</operator> <name>MyBackendId</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
                         <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
                         <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(
                                <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>attnamelist</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>attnamelist</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>,
                                   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="block">/*
         * For COPY FROM, we need to append unspecified attributes that have
         * default expressions associated.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>is_from</name></name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;=</operator> <name><name>tupDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="block">/* Don't let dropped attributes go into the column list */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>tupDesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_member_int</name><argument_list>(<argument><expr><name>attnums</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Append only if the default expression is not shippable. */</comment>
                    <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>defexpr</name> <init>= <expr><operator>(</operator><name>Expr</name><operator>*</operator><operator>)</operator> <call><name>build_column_default</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>defexpr</name> <operator>&amp;&amp;</operator>
                        <operator>!</operator><call><name>pgxc_is_expr_shippable</name><argument_list>(<argument><expr><call><name>expression_planner</name><argument_list>(<argument><expr><name>defexpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>,
                               <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>tupDesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                    <comment type="block">/* distributed column also need to be set as default column */</comment>
                    <if type="elseif">else if <condition>(<expr><name>defexpr</name> <operator>&amp;&amp;</operator> <call><name>IsDistributedColumn</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>relation_loc_info</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>,
                               <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>tupDesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><name>shards</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type> <name>tmp_bms</name> <init>= <expr><call><name>bms_copy</name><argument_list>(<argument><expr><name>shards</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>shardid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>isfirst</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" SHARDING ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <while>while<condition>(<expr><operator>(</operator><name>shardid</name> <operator>=</operator> <call><name>bms_first_member</name><argument_list>(<argument><expr><name>tmp_bms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>isfirst</name></expr>)</condition><block type="pseudo"><block_content>            
                <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>isfirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>shardid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>tmp_bms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>is_from</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" FROM STDIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" TO STDOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_binary</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" BINARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_oids</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" OIDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>rco_csv_mode</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator>
            <operator>||</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>rco_csv_mode</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" DELIMITER AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RemoteCopy_QuoteStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>rco_csv_mode</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call><operator>)</operator>
            <operator>||</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>rco_csv_mode</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" NULL AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RemoteCopy_QuoteStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_csv_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" CSV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_insert_into</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" ROWS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * It is not necessary to send the HEADER part to Datanodes.
     * Sending data is sufficient.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_quote</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_quote</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" QUOTE AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RemoteCopy_QuoteStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_quote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_escape</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_quote</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_escape</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>options</name><operator>-&gt;</operator><name>rco_quote</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" ESCAPE AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RemoteCopy_QuoteStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_escape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_quote</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" FORCE QUOTE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>options-&gt;rco_force_quote</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>,
                                   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_notnull</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">" FORCE NOT NULL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>options-&gt;rco_force_notnull</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>query_buf</name></name></expr></argument>,
                                   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Build a default set for RemoteCopyOptions
 */</comment>
<function><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type>
<name>makeRemoteCopyOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>RemoteCopyOptions</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteCopyOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_binary</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_oids</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_csv_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_delim</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_null_print</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_quote</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_escape</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_force_quote</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_force_notnull</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>rco_insert_into</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FreeRemoteCopyOptions
 * Free remote COPY options structure
 */</comment>
<function><type><name>void</name></type>
<name>FreeRemoteCopyOptions</name><parameter_list>(<parameter><decl><type><name>RemoteCopyOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <comment type="block">/* Leave if nothing */</comment>
    <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Free field by field */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_delim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_null_print</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_quote</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_quote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_escape</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_escape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_quote</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_quote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_notnull</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>rco_force_notnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Then finish the work */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FreeRemoteCopyData
 * Free remote COPY state data structure
 */</comment>
<function><type><name>void</name></type>
<name>FreeRemoteCopyData</name><parameter_list>(<parameter><decl><type><name>RemoteCopyData</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Leave if nothing */</comment>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>locator</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>freeLocator</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>query_buf</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>query_buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>FreeRelationLocInfo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>rel_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPENDSOFAR</name><parameter_list>(<parameter><type><name>query_buf</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>current</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (current &gt; start) \
        appendBinaryStringInfo(query_buf, start, current - start)</cpp:value></cpp:define>

<comment type="block">/*
 * RemoteCopy_QuoteStr
 * Append quoted value to the query buffer. Value is escaped if needed
 * When rewriting query to be sent down to nodes we should escape special
 * characters, that may present in the value. The characters are backslash(\)
 * and single quote ('). These characters are escaped by doubling. We do not
 * have to escape characters like \t, \v, \b, etc. because Datanode interprets
 * them properly.
 * We use E'...' syntax for literals containing backslashes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RemoteCopy_QuoteStr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>start</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>current</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>has_backslash</name> <init>= <expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>has_backslash</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>current</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>c</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
            <case>case <expr><literal type="char">'\''</literal></expr>:</case>
                <expr_stmt><expr><call><name>APPENDSOFAR</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Double current */</comment>
                <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* Second current will be appended next time */</comment>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
                <comment type="block">/* fallthru */</comment>
            <default>default:</default>
                <expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>APPENDSOFAR</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
