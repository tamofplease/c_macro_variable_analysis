<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/snowball/libstemmer/api.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>SN_create_env</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>S_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>I_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B_size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name> <init>= <expr><operator>(</operator>struct <name>SN_env</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SN_env</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>create_s</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>S_size</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>S</name></name> <operator>=</operator> <operator>(</operator><name>symbol</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>S_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>S</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>create_s</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>I_size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>I_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>I</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>B_size</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>B_size</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>B</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>z</name></expr>;</return>
<label><name>error</name>:</label>
    <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>S_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>SN_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>S_size</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>lose_s</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lose_s</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>SN_set_current</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>replace_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

</unit>
