<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/snowball/libstemmer/utilities.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unless</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(C))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>extern</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>create_s</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>mem</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>HEAD</name> <operator>+</operator> <operator>(</operator><name>CREATE_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>symbol</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>HEAD</name> <operator>+</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>mem</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CAPACITY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>CREATE_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>CREATE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>lose_s</name><parameter_list>(<parameter><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>-</operator> <name>HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
   new_p = skip_utf8(p, c, lb, l, n); skips n characters forwards from p + c
   if n +ve, or n characters backwards from p + c - 1 if n -ve. new_p is the new
   position, or 0 on failure.

   -- used to implement hop and next in the utf8 case.
*/</comment>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>skip_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1100 0000 */</comment>
                <while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal> <operator>||</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                    <comment type="block">/* break unless b is 10------ */</comment>
                    <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>lb</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>--</operator><name>c</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1000 0000 */</comment>
                <while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* 1100 0000 */</comment>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Code for character groupings: utf8 cases */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&lt;</operator> <literal type="number">0xC0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1100 0000 */</comment>
        <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <name>b0</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&lt;</operator> <literal type="number">0xE0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1110 0000 */</comment>
        <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <operator>(</operator><name>b1</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt> <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <operator>(</operator><name>b1</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt> <return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_b_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>slot</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>lb</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>--</operator><name>c</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>lb</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1000 0000 */</comment>
        <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <name>b0</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>--</operator><name>c</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>b1</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>lb</name></expr>)</condition> <block>{<block_content>   <comment type="block">/* 1100 0000 */</comment>
        <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <operator>(</operator><name>b1</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <operator>(</operator><name>b0</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt> <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator> <name>slot</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <operator>(</operator><name>b1</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <operator>(</operator><name>b0</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt> <return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>in_grouping_U</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>unless</name> <argument_list>(<argument>w</argument>)</argument_list></macro> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>-=</operator> <name>min</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0X1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0X7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>w</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>in_grouping_b_U</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_b_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>unless</name> <argument_list>(<argument>w</argument>)</argument_list></macro> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>-=</operator> <name>min</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0X1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0X7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>w</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>out_grouping_U</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>unless</name> <argument_list>(<argument>w</argument>)</argument_list></macro> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <macro><name>unless</name> <argument_list>(<argument>ch &gt; max || (ch -= min) &lt; <literal type="number">0</literal> || (s[ch &gt;&gt; <literal type="number">3</literal>] &amp; (<literal type="number">0X1</literal> &lt;&lt; (ch &amp; <literal type="number">0X7</literal>))) == <literal type="number">0</literal></argument>)</argument_list></macro>
        <return>return <expr><name>w</name></expr>;</return>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>out_grouping_b_U</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>get_b_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>unless</name> <argument_list>(<argument>w</argument>)</argument_list></macro> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <macro><name>unless</name> <argument_list>(<argument>ch &gt; max || (ch -= min) &lt; <literal type="number">0</literal> || (s[ch &gt;&gt; <literal type="number">3</literal>] &amp; (<literal type="number">0X1</literal> &lt;&lt; (ch &amp; <literal type="number">0X7</literal>))) == <literal type="number">0</literal></argument>)</argument_list></macro>
        <return>return <expr><name>w</name></expr>;</return>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Code for character groupings: non-utf8 cases */</comment>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>in_grouping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>-=</operator> <name>min</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0X1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0X7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>in_grouping_b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>-=</operator> <name>min</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0X1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0X7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>out_grouping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>unless</name> <argument_list>(<argument>ch &gt; max || (ch -= min) &lt; <literal type="number">0</literal> || (s[ch &gt;&gt; <literal type="number">3</literal>] &amp; (<literal type="number">0X1</literal> &lt;&lt; (ch &amp; <literal type="number">0X7</literal>))) == <literal type="number">0</literal></argument>)</argument_list></macro>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>out_grouping_b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>unless</name> <argument_list>(<argument>ch &gt; max || (ch -= min) &lt; <literal type="number">0</literal> || (s[ch &gt;&gt; <literal type="number">3</literal>] &amp; (<literal type="number">0X1</literal> &lt;&lt; (ch &amp; <literal type="number">0X7</literal>))) == <literal type="number">0</literal></argument>)</argument_list></macro>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>repeat</name></expr>)</condition>;</do>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>eq_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name>s_size</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>s_size</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>eq_s_b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>&lt;</operator> <name>s_size</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>s_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <name>s_size</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>eq_v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>eq_v_b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>find_among</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>among</name></name> <modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_size</name></decl></parameter>)</parameter_list> <block>{<block_content><comment type="line">// #lizard forgives</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>v_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>q</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>c</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>among</name></name> <modifier>*</modifier></type> <name>w</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>common_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>common_j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>first_key_inspected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>common</name> <init>= <expr><ternary><condition><expr><name>common_i</name> <operator>&lt;</operator> <name>common_j</name></expr> ?</condition><then> <expr><name>common_i</name></expr> </then><else>: <expr><name>common_j</name></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="block">/* smaller */</comment>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i2</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <name>common</name></expr>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>;</condition> <incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>+</operator> <name>common</name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>q</name><index>[<expr><name>common</name></expr>]</index></name> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>common</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>common_j</name> <operator>=</operator> <name>common</name></expr>;</expr_stmt> </block_content>}</block></if>
                 <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>common_i</name> <operator>=</operator> <name>common</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>-</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* v-&gt;s has been inspected */</comment>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* only one item in v */</comment>

            <comment type="block">/* - but now we need to go round once more to get
               v-&gt;s inspected. This looks messy, but is actually
               the optimal approach.  */</comment>

            <if_stmt><if>if <condition>(<expr><name>first_key_inspected</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>first_key_inspected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>common_i</name> <operator>&gt;=</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name> <operator>+</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>function</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>w</name><operator>-&gt;</operator><name>result</name></name></expr>;</return></block_content></block></if></if_stmt>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>w</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name> <operator>+</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>w</name><operator>-&gt;</operator><name>result</name></name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>substring_i</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* find_among_b is for backwards processing. Same comments apply */</comment>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>find_among_b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>among</name></name> <modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>v_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>q</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>among</name></name> <modifier>*</modifier></type> <name>w</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>common_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>common_j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>first_key_inspected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>common</name> <init>= <expr><ternary><condition><expr><name>common_i</name> <operator>&lt;</operator> <name>common_j</name></expr> ?</condition><then> <expr><name>common_i</name></expr> </then><else>: <expr><name>common_j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i2</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>i2</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>common</name></expr>;</init> <condition><expr><name>i2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i2</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>-</operator> <name>common</name> <operator>==</operator> <name>lb</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>q</name><index>[<expr><operator>-</operator> <name>common</name></expr>]</index></name> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>common</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>common_j</name> <operator>=</operator> <name>common</name></expr>;</expr_stmt> </block_content>}</block></if>
                 <else>else <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>common_i</name> <operator>=</operator> <name>common</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>-</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>first_key_inspected</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>first_key_inspected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>common_i</name> <operator>&gt;=</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>function</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>w</name><operator>-&gt;</operator><name>result</name></name></expr>;</return></block_content></block></if></if_stmt>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>w</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>s_size</name></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>w</name><operator>-&gt;</operator><name>result</name></name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>substring_i</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/* Increase the size of the buffer pointed to by p to at least n symbols.
 * If insufficient memory, returns NULL and frees the old buffer.
 */</comment>
<function><type><specifier>static</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>increase_size</name><parameter_list>(<parameter><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>mem</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>-</operator> <name>HEAD</name></expr></argument>,
                         <argument><expr><name>HEAD</name> <operator>+</operator> <operator>(</operator><name>new_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lose_s</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>symbol</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>HEAD</name> <operator>+</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CAPACITY</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
    <return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* to replace symbols between c_bra and c_ket in z-&gt;p by the
   s_size symbols at s.
   Returns 0 on success, -1 on error.
   Also, frees z-&gt;p (and sets it to NULL) on error.
*/</comment>
<function><type><specifier>extern</specifier> <name>int</name></type> <name>replace_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_bra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_ket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>adjptr</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>adjustment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>create_s</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>adjustment</name> <operator>=</operator> <name>s_size</name> <operator>-</operator> <operator>(</operator><name>c_ket</name> <operator>-</operator> <name>c_bra</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>adjustment</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>adjustment</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <call><name>CAPACITY</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>increase_size</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>adjustment</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>c_ket</name> <operator>+</operator> <name>adjustment</name></expr></argument>,
                <argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>c_ket</name></expr></argument>,
                <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name>c_ket</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_SIZE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>adjustment</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>c_ket</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else
            if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;</operator> <name>c_bra</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_bra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <macro><name>unless</name> <argument_list>(<argument>s_size == <literal type="number">0</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>c_bra</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>adjptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>adjptr</name> <operator>=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>&gt;</operator> <name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>||</operator>
        <name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>&gt;</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator>
        <name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>&gt;</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block">/* this line could be removed */</comment>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        fprintf(stderr, "faulty slice operation:\n");
        debug(z, -1, 0);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>slice_from_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>slice_check</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>replace_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>slice_from_v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>slice_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>insert_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>adjustment</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>replace_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>bra</name></expr></argument>, <argument><expr><name>ket</name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjustment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bra</name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>bra</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bra</name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>ket</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>insert_v</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>adjustment</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>replace_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>bra</name></expr></argument>, <argument><expr><name>ket</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjustment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bra</name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>bra</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bra</name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>ket</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>+=</operator> <name>adjustment</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>slice_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>slice_check</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lose_s</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>bra</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>CAPACITY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>increase_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>z</name><operator>-&gt;</operator><name>bra</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SET_SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>symbol</name> <modifier>*</modifier></type> <name>assign_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>symbol</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CAPACITY</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>increase_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_SIZE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
extern void debug(struct SN_env * z, int number, int line_count) {
    int i;
    int limit = SIZE(z-&gt;p);
    <comment type="block">/*if (number &gt;= 0) printf("%3d (line %4d): '", number, line_count);*/</comment>
    if (number &gt;= 0) printf("%3d (line %4d): [%d]'", number, line_count,limit);
    for (i = 0; i &lt;= limit; i++) {
        if (z-&gt;lb == i) printf("{");
        if (z-&gt;bra == i) printf("[");
        if (z-&gt;c == i) printf("|");
        if (z-&gt;ket == i) printf("]");
        if (z-&gt;l == i) printf("}");
        if (i &lt; limit)
        {   int ch = z-&gt;p[i];
            if (ch == 0) ch = '#';
            printf("%c", ch);
        }
    }
    printf("'\n");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
