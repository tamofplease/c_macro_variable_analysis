<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/lib/pairingheap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pairingheap.c
 *      A Pairing Heap implementation
 *
 * A pairing heap is a data structure that's useful for implementing
 * priority queues. It is simple to implement, and provides amortized O(1)
 * insert and find-min operations, and amortized O(log n) delete-min.
 *
 * The pairing heap was first described in this paper:
 *
 *    Michael L. Fredman, Robert Sedgewick, Daniel D. Sleator, and Robert E.
 *     Tarjan. 1986.
 *    The pairing heap: a new form of self-adjusting heap.
 *    Algorithmica 1, 1 (January 1986), pages 111-129. DOI: 10.1007/BF01840439
 *
 * Portions Copyright (c) 2012-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *      src/backend/lib/pairingheap.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/pairingheap.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type><name>merge</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
      <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type><name>merge_children</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>,
               <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>children</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * pairingheap_allocate
 *
 * Returns a pointer to a newly-allocated heap, with the heap property defined
 * by the given comparator function, which will be invoked with the additional
 * argument specified by 'arg'.
 */</comment>
<function><type><name>pairingheap</name> <modifier>*</modifier></type>
<name>pairingheap_allocate</name><parameter_list>(<parameter><decl><type><name>pairingheap_comparator</name></type> <name>compare</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>(</operator><name>pairingheap</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pairingheap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>heap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pairingheap_free
 *
 * Releases memory used by the given pairingheap.
 *
 * Note: The nodes in the heap are not freed!
 */</comment>
<function><type><name>void</name></type>
<name>pairingheap_free</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A helper function to merge two subheaps into one.
 *
 * The subheap with smaller value is put as a child of the other one (assuming
 * a max-heap).
 *
 * The next_sibling and prev_or_parent pointers of the input nodes are
 * ignored. On return, the returned node's next_sibling and prev_or_parent
 * pointers are garbage.
 */</comment>
<function><type><specifier>static</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type>
<name>merge</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* swap 'a' and 'b' so that 'a' is the one with larger value */</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>heap</name><operator>-&gt;</operator><name>ph_compare</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* and put 'b' as a child of 'a' */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>first_child</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>first_child</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>first_child</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>first_child</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

    <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pairingheap_add
 *
 * Adds the given node to the heap in O(1) time.
 */</comment>
<function><type><name>void</name></type>
<name>pairingheap_add</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>first_child</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Link the new node as a new tree */</comment>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pairingheap_first
 *
 * Returns a pointer to the first (root, topmost) node in the heap without
 * modifying the heap. The caller must ensure that this routine is not used on
 * an empty heap. Always O(1).
 */</comment>
<function><type><name>pairingheap_node</name> <modifier>*</modifier></type>
<name>pairingheap_first</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>pairingheap_is_empty</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pairingheap_remove_first
 *
 * Removes the first (root, topmost) node in the heap and returns a pointer to
 * it after rebalancing the heap. The caller must ensure that this routine is
 * not used on an empty heap. O(log n) amortized.
 */</comment>
<function><type><name>pairingheap_node</name> <modifier>*</modifier></type>
<name>pairingheap_remove_first</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>pairingheap_is_empty</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Remove the root, and form a new heap of its children. */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>children</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>first_child</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name> <operator>=</operator> <call><name>merge_children</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove 'node' from the heap. O(log n) amortized.
 */</comment>
<function><type><name>void</name></type>
<name>pairingheap_remove</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>replacement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>next_sibling</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_ptr</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If the removed node happens to be the root node, do it with
     * pairingheap_remove_first().
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pairingheap_remove_first</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Before we modify anything, remember the removed node's first_child and
     * next_sibling pointers.
     */</comment>
    <expr_stmt><expr><name>children</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>first_child</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next_sibling</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Also find the pointer to the removed node in its previous sibling, or
     * if this is the first child of its parent, in its parent.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name><operator>-&gt;</operator><name>first_child</name></name> <operator>==</operator> <name>node</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name><operator>-&gt;</operator><name>first_child</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>prev_ptr</name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If this node has children, make a new subheap of the children and link
     * the subheap in place of the removed node. Otherwise just unlink this
     * node.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>children</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>replacement</name> <operator>=</operator> <call><name>merge_children</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>replacement</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replacement</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>prev_ptr</name> <operator>=</operator> <name>replacement</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>next_sibling</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>next_sibling</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name>replacement</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>prev_ptr</name> <operator>=</operator> <name>next_sibling</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>next_sibling</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>next_sibling</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Merge a list of subheaps into a single heap.
 *
 * This implements the basic two-pass merging strategy, first forming pairs
 * from left to right, and then merging the pairs.
 */</comment>
<function><type><specifier>static</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type>
<name>merge_children</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>children</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>curr</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>pairs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>newroot</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>children</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>children</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>children</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Walk the subheaps from left to right, merging in pairs */</comment>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name>children</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pairs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* last odd node at the end of list */</comment>
            <expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name>pairs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pairs</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>

        <comment type="block">/* merge this and the next subheap, and add to 'pairs' list. */</comment>

        <expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name></name> <operator>=</operator> <name>pairs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pairs</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Merge all the pairs together to form a single heap.
     */</comment>
    <expr_stmt><expr><name>newroot</name> <operator>=</operator> <name>pairs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pairs</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>next</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>newroot</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>newroot</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>newroot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A debug function to dump the contents of the heap as a string.
 *
 * The 'dumpfunc' callback appends a string representation of a single node
 * to the StringInfo. 'opaque' can be used to pass more information to the
 * callback.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PAIRINGHEAP_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pairingheap_dump_recurse</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
                         <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                         <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dumpfunc</name>) <parameter_list>(<parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list></function_decl></parameter>,
                         <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,
                         <parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>prev_or_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><name>node</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>prev_or_parent</name></name> <operator>==</operator> <name>prev_or_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>depth</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dumpfunc</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>first_child</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pairingheap_dump_recurse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>first_child</name></name></expr></argument>, <argument><expr><name>dumpfunc</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>prev_or_parent</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next_sibling</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pairingheap_dump</name><parameter_list>(<parameter><decl><type><name>pairingheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>,
                 <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dumpfunc</name>) <parameter_list>(<parameter><decl><type><name>pairingheap_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list></function_decl></parameter>,
                 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"(empty)"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pairingheap_dump_recurse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>ph_root</name></name></expr></argument>, <argument><expr><name>dumpfunc</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
