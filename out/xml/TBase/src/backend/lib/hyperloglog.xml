<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/lib/hyperloglog.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hyperloglog.c
 *      HyperLogLog cardinality estimator
 *
 * Portions Copyright (c) 2014-2017, PostgreSQL Global Development Group
 *
 * Based on Hideaki Ohno's C++ implementation.  This is probably not ideally
 * suited to estimating the cardinality of very large sets;  in particular, we
 * have not attempted to further optimize the implementation as described in
 * the Heule, Nunkesser and Hall paper "HyperLogLog in Practice: Algorithmic
 * Engineering of a State of The Art Cardinality Estimation Algorithm".
 *
 * A sparse representation of HyperLogLog state is used, with fixed space
 * overhead.
 *
 * The copyright terms of Ohno's original version (the MIT license) follow.
 *
 * IDENTIFICATION
 *      src/backend/lib/hyperloglog.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * Copyright (c) 2013 Hideaki Ohno &lt;hide.o.j55{at}gmail.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/hyperloglog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POW_2_32</name></cpp:macro>            <cpp:value>(4294967296.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_POW_2_32</name></cpp:macro>        <cpp:value>(-4294967296.0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8</name></type> <name>rho</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize HyperLogLog track state, by bit width
 *
 * bwidth is bit width (so register size will be 2 to the power of bwidth).
 * Must be between 4 and 16 inclusive.
 */</comment>
<function><type><name>void</name></type>
<name>initHyperLogLog</name><parameter_list>(<parameter><decl><type><name>hyperLogLogState</name> <modifier>*</modifier></type><name>cState</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>bwidth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type>        <name>alpha</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>bwidth</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>bwidth</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bit width must be between 4 and 16 inclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>registerWidth</name></name> <operator>=</operator> <name>bwidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name> <operator>=</operator> <operator>(</operator><name>Size</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bwidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>arrSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize hashes array to zero, not negative infinity, per discussion
     * of the coupon collector problem in the HyperLogLog paper
     */</comment>
    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>cState</name><operator>-&gt;</operator><name>arrSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * "alpha" is a value that for each possible number of registers (m) is
     * used to correct a systematic multiplicative bias present in m ^ 2 Z (Z
     * is "the indicator function" through which we finally compute E,
     * estimated cardinality).
     */</comment>
    <switch>switch <condition>(<expr><name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">16</literal></expr>:</case>
            <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.673</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">32</literal></expr>:</case>
            <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.697</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">64</literal></expr>:</case>
            <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.709</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.7213</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <literal type="number">1.079</literal> <operator>/</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="block">/*
     * Precalculate alpha m ^ 2, later used to generate "raw" HyperLogLog
     * estimate E
     */</comment>
    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>alphaMM</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name> <operator>*</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize HyperLogLog track state, by error rate
 *
 * Instead of specifying bwidth (number of bits used for addressing the
 * register), this method allows sizing the counter for particular error
 * rate using a simple formula from the paper:
 *
 *     e = 1.04 / sqrt(m)
 *
 * where 'm' is the number of registers, i.e. (2^bwidth). The method
 * finds the lowest bwidth with 'e' below the requested error rate, and
 * then uses it to initialize the counter.
 *
 * As bwidth has to be between 4 and 16, the worst possible error rate
 * is between ~25% (bwidth=4) and 0.4% (bwidth=16).
 */</comment>
<function><type><name>void</name></type>
<name>initHyperLogLogError</name><parameter_list>(<parameter><decl><type><name>hyperLogLogState</name> <modifier>*</modifier></type><name>cState</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>bwidth</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>bwidth</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type>        <name>m</name> <init>= <expr><operator>(</operator><name>Size</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bwidth</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="number">1.04</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>error</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>bwidth</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>initHyperLogLog</name><argument_list>(<argument><expr><name>cState</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free HyperLogLog track state
 *
 * Releases allocated resources, but not the state itself (in case it's not
 * allocated by palloc).
 */</comment>
<function><type><name>void</name></type>
<name>freeHyperLogLog</name><parameter_list>(<parameter><decl><type><name>hyperLogLogState</name> <modifier>*</modifier></type><name>cState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Adds element to the estimator, from caller-supplied hash.
 *
 * It is critical that the hash value passed be an actual hash value, typically
 * generated using hash_any().  The algorithm relies on a specific bit-pattern
 * observable in conjunction with stochastic averaging.  There must be a
 * uniform distribution of bits in hash values for each distinct original value
 * observed.
 */</comment>
<function><type><name>void</name></type>
<name>addHyperLogLog</name><parameter_list>(<parameter><decl><type><name>hyperLogLogState</name> <modifier>*</modifier></type><name>cState</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>index</name></decl>;</decl_stmt>

    <comment type="block">/* Use the first "k" (registerWidth) bits as a zero based index */</comment>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <name>hash</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>BITS_PER_BYTE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>cState</name><operator>-&gt;</operator><name>registerWidth</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Compute the rank of the remaining 32 - "k" (registerWidth) bits */</comment>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>rho</name><argument_list>(<argument><expr><name>hash</name> <operator>&lt;&lt;</operator> <name><name>cState</name><operator>-&gt;</operator><name>registerWidth</name></name></expr></argument>,
                <argument><expr><name>BITS_PER_BYTE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>cState</name><operator>-&gt;</operator><name>registerWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Estimates cardinality, based on elements added so far
 */</comment>
<function><type><name>double</name></type>
<name>estimateHyperLogLog</name><parameter_list>(<parameter><decl><type><name>hyperLogLogState</name> <modifier>*</modifier></type><name>cState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* result set to "raw" HyperLogLog estimate (E in the HyperLogLog paper) */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>cState</name><operator>-&gt;</operator><name>alphaMM</name></name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">5.0</literal> <operator>/</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Small range correction */</comment>
        <decl_stmt><decl><type><name>int</name></type>            <name>zero_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cState</name><operator>-&gt;</operator><name>hashesArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>zero_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>zero_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>cState</name><operator>-&gt;</operator><name>nRegisters</name></name> <operator>/</operator>
                                              <name>zero_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>result</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">30.0</literal><operator>)</operator> <operator>*</operator> <name>POW_2_32</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Large range correction */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>NEG_POW_2_32</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>result</name> <operator>/</operator> <name>POW_2_32</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Worker for addHyperLogLog().
 *
 * Calculates the position of the first set bit in first b bits of x argument
 * starting from the first, reading from most significant to least significant
 * bits.
 *
 * Example (when considering fist 10 bits of x):
 *
 * rho(x = 0b1000000000)   returns 1
 * rho(x = 0b0010000000)   returns 3
 * rho(x = 0b0000000000)   returns b + 1
 *
 * "The binary address determined by the first b bits of x"
 *
 * Return value "j" used to index bit pattern to watch.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8</name></type>
<name>rho</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>
</unit>
