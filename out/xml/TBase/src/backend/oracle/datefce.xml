<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/oracle/datefce.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/nabstime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_INTERNATIONALIZED_WEEKDAY</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_INTERNATIONALIZED_WEEKDAY</name></cpp:ifdef>

<typedef>typedef <type><struct>struct <name>WeekDays</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>encoding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>WeekDays</name>;</typedef>

<comment type="block">/*
 * { encoding, { "sun", "mon", "tue", "wed", "thu", "fri", "sat" } },
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WeekDays</name></type> <name><name>WEEKDAYS</name><index>[]</index></name> <init>=
<expr><block>{
    <comment type="block">/* Japanese, UTF8 */</comment>
    <expr><block>{ <expr><name>PG_UTF8</name></expr>, <expr><block>{ <expr><literal type="string">"\346\227\245"</literal></expr>, <expr><literal type="string">"\346\234\210"</literal></expr>, <expr><literal type="string">"\347\201\253"</literal></expr>, <expr><literal type="string">"\346\260\264"</literal></expr>, <expr><literal type="string">"\346\234\250"</literal></expr>, <expr><literal type="string">"\351\207\221"</literal></expr>, <expr><literal type="string">"\345\234\237"</literal></expr> }</block></expr> }</block></expr>,
    <comment type="block">/* Japanese, EUC_JP */</comment>
    <expr><block>{ <expr><name>PG_EUC_JP</name></expr>, <expr><block>{ <expr><literal type="string">"\306\374"</literal></expr>, <expr><literal type="string">"\267\356"</literal></expr>, <expr><literal type="string">"\262\320"</literal></expr>, <expr><literal type="string">"\277\345"</literal></expr>, <expr><literal type="string">"\314\332"</literal></expr>, <expr><literal type="string">"\266\342"</literal></expr>, <expr><literal type="string">"\305\332"</literal></expr> }</block></expr> }</block></expr>,
    <comment type="block">/* Japanese, EUC_JIS_2004 (same as EUC_JP) */</comment>
    <expr><block>{ <expr><name>PG_EUC_JIS_2004</name></expr>, <expr><block>{ <expr><literal type="string">"\306\374"</literal></expr>, <expr><literal type="string">"\267\356"</literal></expr>, <expr><literal type="string">"\262\320"</literal></expr>, <expr><literal type="string">"\277\345"</literal></expr>, <expr><literal type="string">"\314\332"</literal></expr>, <expr><literal type="string">"\266\342"</literal></expr>, <expr><literal type="string">"\305\332"</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WeekDays</name> <modifier>*</modifier></type><name>mru_weekdays</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>weekday_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WeekDays</name> <modifier>*</modifier></type><name>weekdays</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>    <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>weekdays</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>    <comment type="block">/* too short */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>weekdays</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>    <comment type="block">/* not found */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    <comment type="block">/* ENABLE_INTERNATIONALIZED_WEEKDAY */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_YYYY</name></cpp:macro>    <cpp:value>case 0: case 1: case 2: case 3: case 4: case 5: case 6:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_IYYY</name></cpp:macro>    <cpp:value>case 7: case 8: case 9: case 10:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CASE_fmt_Q</name></cpp:macro>    <cpp:value>case 11:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CASE_fmt_WW</name></cpp:macro>    <cpp:value>case 12:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_IW</name></cpp:macro>    <cpp:value>case 13:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CASE_fmt_W</name></cpp:macro>    <cpp:value>case 14:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_DAY</name></cpp:macro>    <cpp:value>case 15: case 16: case 17:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_MON</name></cpp:macro>    <cpp:value>case 18: case 19: case 20: case 21:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_CC</name></cpp:macro>    <cpp:value>case 22: case 23:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_DDD</name></cpp:macro>    <cpp:value>case 24: case 25: case 26:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_HH</name></cpp:macro>    <cpp:value>case 27: case 28: case 29:</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_fmt_MI</name></cpp:macro>    <cpp:value>case 30:</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>date_fmt</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"Yy"</literal></expr>, <expr><literal type="string">"Yyy"</literal></expr>, <expr><literal type="string">"Yyyy"</literal></expr>, <expr><literal type="string">"Year"</literal></expr>, <expr><literal type="string">"Syyyy"</literal></expr>, <expr><literal type="string">"syear"</literal></expr>,
    <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"Iy"</literal></expr>, <expr><literal type="string">"Iyy"</literal></expr>, <expr><literal type="string">"Iyyy"</literal></expr>,
    <expr><literal type="string">"Q"</literal></expr>, <expr><literal type="string">"Ww"</literal></expr>, <expr><literal type="string">"Iw"</literal></expr>, <expr><literal type="string">"W"</literal></expr>,
    <expr><literal type="string">"Day"</literal></expr>, <expr><literal type="string">"Dy"</literal></expr>, <expr><literal type="string">"D"</literal></expr>,
    <expr><literal type="string">"Month"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Mm"</literal></expr>, <expr><literal type="string">"Rm"</literal></expr>,
    <expr><literal type="string">"Cc"</literal></expr>, <expr><literal type="string">"Scc"</literal></expr>,
    <expr><literal type="string">"Ddd"</literal></expr>, <expr><literal type="string">"Dd"</literal></expr>, <expr><literal type="string">"J"</literal></expr>,
    <expr><literal type="string">"Hh"</literal></expr>, <expr><literal type="string">"Hh12"</literal></expr>, <expr><literal type="string">"Hh24"</literal></expr>,
    <expr><literal type="string">"Mi"</literal></expr>,
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>orcl_days</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>,
<expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SEQ_SEARCH</name><parameter_list>(<parameter><type><name>_l</name></type></parameter>, <parameter><type><name>_s</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
    if ((_l) &lt; 0) { \
        ereport(ERROR, \
                (errcode(ERRCODE_INVALID_DATETIME_FORMAT), \
                 errmsg("invalid value for %s", (_s)))); \
    } \
} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Search const value in char array
 *
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>orcl_seq_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>max</name> <operator>&amp;&amp;</operator>
            <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>    <comment type="block">/* not found */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>orcl_seq_prefix_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>    <comment type="block">/* not found */</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * next_day
 *
 * Syntax:
 *
 * date next_day(date value, text weekday)
 *
 * Purpose:
 *
 * Returns the first weekday that is greater than a date value.
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_next_day</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>day_txt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>day_txt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_INTERNATIONALIZED_WEEKDAY</name></cpp:ifdef>
    <comment type="block">/* Check mru_weekdays first for performance. */</comment>
    <if_stmt><if>if <condition>(<expr><name>mru_weekdays</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>weekday_search</name><argument_list>(<argument><expr><name>mru_weekdays</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>found</name>;</goto></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>mru_weekdays</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Oracle uses only 3 heading characters of the input.
     * Ignore all trailing characters.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>d</name> <operator>=</operator> <call><name>orcl_seq_prefix_search</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>orcl_days</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_INTERNATIONALIZED_WEEKDAY</name></cpp:ifdef>
    <do>do
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>        <name>encoding</name> <init>= <expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>WEEKDAYS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>WEEKDAYS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>weekday_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>WEEKDAYS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>mru_weekdays</name> <operator>=</operator> <operator>&amp;</operator><name><name>WEEKDAYS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <goto>goto <name>found</name>;</goto>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"DAY/Day/day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>found</name>:</label>
    <expr_stmt><expr><name>off</name> <operator>=</operator> <name>d</name> <operator>-</operator> <call><name>j2day</name><argument_list>(<argument><expr><name>day</name><operator>+</operator><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>day</name><operator>+</operator><name>off</name><operator>+</operator><literal type="number">7</literal></expr> </then><else>: <expr><name>day</name> <operator>+</operator> <name>off</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* next_day(date, integer) is not documented in Oracle manual, but ... */</comment>
<function><type><name>Datum</name></type>
<name>orcl_next_day_by_index</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>idx</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>off</name></decl>;</decl_stmt>

    <comment type="block">/*
     * off is 1..7 (Sun..Sat).
     *
     * TODO: It should be affected by NLS_TERRITORY. For example,
     * 1..7 should be interpreted as Mon..Sun in GERMAN.
     */</comment>
    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <literal type="number">7</literal> <operator>&lt;</operator> <name>idx</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"DAY/Day/day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* j2day returns 0..6 as Sun..Sat */</comment>
    <expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>j2day</name><argument_list>(<argument><expr><name>day</name><operator>+</operator><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>day</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>day</name> <operator>+</operator> <name>off</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * last_day
 *
 * Syntax:
 *
 * date last_day(date value)
 *
 * Purpose:
 *
 * Returns last day of the month based on a date value
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_last_day</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>POSTGRES_EPOCH_JDATE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><name>result</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>month_days</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>days_of_month</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>    <name>days</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <literal type="number">12</literal> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"date out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>days</name> <operator>=</operator> <name><name>month_days</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>days</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>    <comment type="block">/* February 29 in leap year */</comment>
    <return>return <expr><name>days</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * months_between
 *
 * Syntax:
 *
 * float8 months_between(date date1, date date2)
 *
 * Purpose:
 *
 * Returns the number of months between date1 and date2. If
 *      a fractional month is calculated, the months_between  function
 *      calculates the fraction based on a 31-day month.
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_months_between</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>date1</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>date2</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float8</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>date1</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>date2</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Ignore day components for last days, or based on a 31-day month. */</comment>
    <if_stmt><if>if <condition>(<expr><name>d1</name> <operator>==</operator> <call><name>days_of_month</name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <call><name>days_of_month</name><argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <operator>(</operator><name>m1</name> <operator>-</operator> <name>m2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <operator>(</operator><name>m1</name> <operator>-</operator> <name>m2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>d1</name> <operator>-</operator> <name>d2</name><operator>)</operator> <operator>/</operator> <literal type="number">31.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NUMERIC</name><argument_list>(
        <argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>, <argument><expr><call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * add_months
 *
 * Syntax:
 *
 * date add_months(date day, int val)
 *
 * Purpose:
 *
 * Returns a date plus n months.
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_add_months</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>days</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>div_t</name></type>    <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>last_day</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_day</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>==</operator> <call><name>days_of_month</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>quot</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>    <comment type="block">/* offset because of year 0 */</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>rem</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>days</name> <operator>=</operator> <call><name>days_of_month</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>last_day</name> <operator>||</operator> <name>d</name> <operator>&gt;</operator> <name>days</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <name>days</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>POSTGRES_EPOCH_JDATE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name> <argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ISO year
 *
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE2J</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(date2j((y),(m),(d)) - POSTGRES_EPOCH_JDATE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>J2DAY</name><parameter_list>(<parameter><type><name>date</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(j2day(date + POSTGRES_EPOCH_JDATE))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>DateADT</name></type>
<name>iso_year</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>result2</name></decl>, <decl><type ref="prev"/><name>day</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>day</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <call><name>J2DAY</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>+=</operator> <name>off</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator> <literal type="number">3</literal></expr></then><else>: <expr><operator>+</operator> <literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* to monday */</comment>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <name>day</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <call><name>J2DAY</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <name>off</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator> <literal type="number">3</literal></expr></then><else>: <expr><operator>+</operator> <literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* to monday */</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>day</name> <operator>-</operator> <name>result</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">52</literal></expr>)</condition>
    <block>{<block_content>
    <expr_stmt><expr><name>result2</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <call><name>J2DAY</name><argument_list>(<argument><expr><name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result2</name> <operator>+=</operator> <name>off</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator> <literal type="number">3</literal></expr></then><else>: <expr><operator>+</operator> <literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* to monday */</comment>

    <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&gt;=</operator> <name>result2</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>result2</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DateADT</name></type>
<name>_orcl_date_trunc</name><parameter_list>(<parameter><decl><type><name>DateADT</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>f</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>CASE_fmt_CC</name></macro>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><literal type="number">99</literal> <operator>-</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_YYYY</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_IYYY</name></type>
            <name>result</name> <init>= <expr><call><name>iso_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_MON</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_WW</name></type>
            <name>result</name> <init>= <expr><name>day</name> <operator>-</operator> <operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_IW</name></type>
            <name>result</name> <init>= <expr><name>day</name> <operator>-</operator> <operator>(</operator><name>day</name> <operator>-</operator> <call><name>iso_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_W</name></type>
            <name>result</name> <init>= <expr><name>day</name> <operator>-</operator> <operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_DAY</name></type>
            <name>result</name> <init>= <expr><name>day</name> <operator>-</operator> <call><name>J2DAY</name><argument_list>(<argument><expr><name>day</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_Q</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>m</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DateADT</name></type>
<name>_orcl_date_round</name><parameter_list>(<parameter><decl><type><name>DateADT</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>f</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>CASE_fmt_CC</name></macro>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><name>day</name> <operator>&lt;</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>+</operator><literal type="number">50</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">101</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><name>day</name> <operator>&lt;</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">100</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>-</operator><literal type="number">50</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then><expr><operator>-</operator><literal type="number">99</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_YYYY</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>day</name><operator>&lt;</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <macro><name>CASE_fmt_IYYY</name></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>iso_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>DateADT</name></type> <name>iy1</name> <init>= <expr><call><name>iso_year</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>iy1</name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">52</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>bool</name></type> <name>overl</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>date2j</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>date2j</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">366</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>isSaturday</name> <init>= <expr><operator>(</operator><call><name>J2DAY</name><argument_list>(<argument><expr><name>day</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>DateADT</name></type> <name>iy2</name> <init>= <expr><call><name>iso_year</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DateADT</name></type> <name>day1</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="block">/* exception saturdays */</comment>
                    <if_stmt><if>if <condition>(<expr><name>iy1</name> <operator>&gt;=</operator> <operator>(</operator><name>day1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>day</name> <operator>&gt;=</operator> <name>day1</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>isSaturday</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><name>overl</name></expr>?</condition><then><expr><name>iy2</name></expr></then><else>:<expr><name>iy1</name></expr></else></ternary></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="block">/* iso year stars in last year and day &gt;= iso year */</comment>
                    <if type="elseif">else if <condition>(<expr><name>iy1</name> <operator>&lt;=</operator> <operator>(</operator><name>day1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>day</name> <operator>&gt;=</operator> <name>iy1</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>DateADT</name></type> <name>cmp</name> <init>= <expr><name>iy1</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>iy1</name> <operator>&lt;</operator> <name>day1</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>J2DAY</name><argument_list>(<argument><expr><name>day1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <comment type="block">/* some exceptions */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>day</name> <operator>&gt;=</operator> <name>cmp</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>d</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>overl</name><operator>)</operator><operator>)</operator></expr>)</condition>
                        <block>{<block_content>
                            <comment type="block">/* if year don't starts in thursday */</comment>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>J2DAY</name><argument_list>(<argument><expr><name>day</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isSaturday</name><operator>)</operator>
                                <operator>||</operator><operator>(</operator><name>d</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>isSaturday</name> <operator>&amp;&amp;</operator> <name>overl</name><operator>)</operator></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>iy2</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <decl_stmt><decl><type><name>CASE_fmt_MON</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>day</name><operator>&lt;</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_WW</name></type>
            <name>z</name> <init>= <expr><operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name> <operator>-</operator> <name>z</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <macro><name>CASE_fmt_IW</name></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>day</name> <operator>-</operator> <call><name>iso_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name> <operator>-</operator> <name>z</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">52</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* only for last iso week */</comment>
                <decl_stmt><decl><type><name>DateADT</name></type> <name>isoyear</name> <init>= <expr><call><name>iso_year</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>isoyear</name> <operator>&gt;</operator> <operator>(</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&gt;</operator> <name>isoyear</name> <operator>-</operator> <literal type="number">7</literal></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>J2DAY</name><argument_list>(<argument><expr><name>day</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>result</name> <operator>-=</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>d</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>?</condition><then><expr><literal type="number">7</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <decl_stmt><decl><type><name>CASE_fmt_W</name></type>
            <name>z</name> <init>= <expr><operator>(</operator><name>day</name> <operator>-</operator> <call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name> <operator>-</operator> <name>z</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_DAY</name></type>
            <name>z</name> <init>= <expr><call><name>J2DAY</name><argument_list>(<argument><expr><name>day</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name> <operator>-</operator> <name>z</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name> <operator>+</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>z</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><ternary><condition><expr><name>z</name><operator>&gt;</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>z</name></expr></then><else>:<expr><name>z</name><operator>+</operator><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_Q</name></type>
            <name>result</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>m</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><name>day</name><operator>&lt;</operator><operator>(</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><name>m</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * orcl_date_trunc|orcl_timestamptz_trunc .. trunc
 *
 * Syntax:
 *
 * date trunc(date date1, text format)
 *
 * Purpose:
 *
 * Returns d with the time portion of the day truncated to the unit
 * specified by the format fmt.
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_date_trunc</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>orcl_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>date_fmt</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"round/trunc format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_orcl_date_trunc</name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Workaround for access to session_timezone on WIN32,
 * 
 * session timezone isn't accessed directly, but taken by show_timezone,
 * and reparsed. For better performance, the result is cached in fn_extra.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>pg_tz</name> <modifier>*</modifier></type>
<name>get_session_timezone</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>pg_tz</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>pg_tz</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzn</name> <init>= <expr><call><name>show_timezone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_timezone</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tzn</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>, <argument><expr><name>PGC_S_CLIENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot to parse timezone \"%s\""</literal></expr></argument>, <argument><expr><name>tzn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>pg_tz</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>extra</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

        <comment type="block">/*
         * check_timezone allocates small block of pg_tz * size. This block
         * should be released by free(extra), but I cannot release memory
         * allocated by application in library on MS platform. So I have to
         * accept small memory leak - elsewhere exception - broken heap :(
         *
         *
         * cannot be called
            free( extra );
         */</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>session_timezone</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * redotz is used only for timestamp with time zone
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tm_trunc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>redotz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>orcl_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>date_fmt</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"round/trunc format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>f</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CASE_fmt_IYYY</name>
        <name>CASE_fmt_WW</name>
        <name>CASE_fmt_W</name>
        <name>CASE_fmt_IW</name>
        <name>CASE_fmt_DAY</name>
        <name>CASE_fmt_CC</name></type>
            <name>j2date</name><argument_list>(<argument><expr><call><name>_orcl_date_trunc</name><argument_list>(<argument><expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>redotz</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_YYYY</name></type>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CASE_fmt_Q</name></type>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <init>= <expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><operator>(</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CASE_fmt_MON</name></type>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CASE_fmt_DDD</name></type>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>*</operator><name>redotz</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="block">/* for all cases &gt;= DAY */</comment>
        <decl_stmt><decl><type><name>CASE_fmt_HH</name></type>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamptz_trunc</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TimestampTz</name></type> <name>timestamp</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TimestampTz</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fsec_t</name></type> <name>fsec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type> <name>tt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>redotz</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tm_trunc</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>redotz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>redotz</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>DetermineTimeZoneOffset</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><call><name>get_session_timezone</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>    , <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************************************************************
 *
 * orcl_date_round|orcl_timestamptz_round .. round
 *
 * Syntax:
 *
 * date round(date date1, text format)
 *
 * Purpose:
 *
 * Returns d with the time portion of the day roundeded to the unit
 * specified by the format fmt.
 *
 ********************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>orcl_date_round</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DateADT</name></type> <name>result</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>orcl_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>date_fmt</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"round/trunc format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_orcl_date_round</name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_ROUND_MDAY</name><parameter_list>(<parameter><type><name>_p_</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { if (_p_) rounded = false; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_MDAY</name><parameter_list>(<parameter><type><name>_tm_</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { if (rounded) _tm_-&gt;tm_mday += _tm_-&gt;tm_hour &gt;= 12?1:0; } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tm_round</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>redotz</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>     <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>rounded</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>orcl_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>date_fmt</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"round/trunc format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set rounding rule */</comment>
    <switch>switch <condition>(<expr><name>f</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CASE_fmt_IYYY</name></type>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;=</operator> <literal type="number">28</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>DateADT</name></type> <name>isoyear</name> <init>= <expr><call><name>iso_year</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DateADT</name></type> <name>day0</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DateADT</name></type> <name>dayc</name> <init>= <expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isoyear</name> <operator>&lt;=</operator> <name>day0</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>day0</name> <operator>&lt;=</operator> <name>dayc</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>rounded</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_YYYY</name></type>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_MON</name></type>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_Q</name></type>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_WW</name>
        <name>CASE_fmt_IW</name></type>
            <comment type="block">/* last day in year */</comment>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
            <operator>(</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
            <break>break;</break>
        <decl_stmt><decl><type><name>CASE_fmt_W</name></type>
            <comment type="block">/* last day in month */</comment>
            <name>NOT_ROUND_MDAY</name><argument_list>(<argument><expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
            <operator>(</operator><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <switch>switch <condition>(<expr><name>f</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* easier convert to date */</comment>
        <decl_stmt><decl><type><name>CASE_fmt_IW</name>
        <name>CASE_fmt_DAY</name>
        <name>CASE_fmt_IYYY</name>
        <name>CASE_fmt_WW</name>
        <name>CASE_fmt_W</name>
        <name>CASE_fmt_CC</name>
        <name>CASE_fmt_MON</name>
        <name>CASE_fmt_YYYY</name>
        <name>CASE_fmt_Q</name></type>
            <name>ROUND_MDAY</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><call><name>_orcl_date_round</name><argument_list>(<argument><expr><call><name>DATE2J</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>
                   <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>redotz</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <expr_stmt><expr><name>CASE_fmt_DDD</name>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;=</operator> <literal type="number">12</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>redotz</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <expr_stmt><expr><name>CASE_fmt_MI</name>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&gt;=</operator> <literal type="number">30</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        <expr_stmt><expr><name>CASE_fmt_HH</name>
            <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&gt;=</operator> <literal type="number">30</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamptz_round</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TimestampTz</name></type> <name>timestamp</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TimestampTz</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fsec_t</name></type> <name>fsec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type> <name>tt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>redotz</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tm_round</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>redotz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>redotz</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>DetermineTimeZoneOffset</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><call><name>get_session_timezone</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamp_trunc</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Timestamp</name></type> <name>timestamp</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Timestamp</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fsec_t</name></type> <name>fsec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type> <name>tt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>redotz</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tm_trunc</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>redotz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamp_round</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Timestamp</name></type> <name>timestamp</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Timestamp</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fsec_t</name></type> <name>fsec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type> <name>tt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>redotz</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tm_round</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>redotz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Interval</name> <modifier>*</modifier></type>
<name>timezone_get_interval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lowzone</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pg_tz</name> <modifier>*</modifier></type><name>tzp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>resInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gmtoffset</name></decl>;</decl_stmt>

    <comment type="block">/* DecodeTimezoneAbbrev requires lowercase input */</comment>
    <expr_stmt><expr><name>lowzone</name> <operator>=</operator> <call><name>downcase_truncate_identifier</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>,
                                           <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>DecodeTimezoneAbbrev</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lowzone</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>TZ</name></expr>:</case>
        <case>case <expr><name>DTZ</name></expr>:</case>
            <expr_stmt><expr><name>gmtoffset</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>DYNTZ</name></expr>:</case>
            <block>{<block_content>
                <comment type="block">/* Determine the current meaning of the abbrev */</comment>
                <decl_stmt><decl><type><name>TimestampTz</name></type> <name>now</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>isdst</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GetCurrentTransactionStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>gmtoffset</name> <operator>=</operator> <operator>-</operator><call><name>DetermineTimeZoneAbbrevOffsetTS</name><argument_list>(<argument><expr><name>now</name></expr></argument>,
                                                             <argument><expr><name>tzname</name></expr></argument>,
                                                             <argument><expr><name>tzp</name></expr></argument>,
                                                             <argument><expr><operator>&amp;</operator><name>isdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        <default>default:</default>
            <block>{<block_content>
                <comment type="block">/* try it as a full zone name */</comment>
                <expr_stmt><expr><name>tzp</name> <operator>=</operator> <call><name>pg_tzset</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>tzp</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Apply the timezone change */</comment>
                    <decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type>     <name>tm</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>fsec_t</name></type>            <name>fsec</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type>             <name>tz</name></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><call><name>GetCurrentTransactionStartTimestamp</name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"timestamp out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>gmtoffset</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"time zone \"%s\" not recognized"</literal></expr></argument>, <argument><expr><name>tzname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pg_tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name>gmtoffset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resInterval</name> <operator>=</operator> <operator>(</operator><name>Interval</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tm2interval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>resInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>resInterval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_dbtimezone</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzval</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>tzval</name> <operator>=</operator> <call><name>GetConfigOptionResetString</name><argument_list>(<argument><expr><literal type="string">"TimeZone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tzval</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INTERVAL_P</name><argument_list>(<argument><expr><call><name>timezone_get_interval</name><argument_list>(<argument><expr><name>tzval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_sessiontimezone</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>tzn</name> <operator>=</operator> <call><name>pg_get_timezone_name</name><argument_list>(<argument><expr><name>session_timezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_INTERVAL_P</name><argument_list>(<argument><expr><call><name>timezone_get_interval</name><argument_list>(<argument><expr><name>tzn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>orcl_to_interval</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>old_IntervalStyle</name> <init>= <expr><name>IntervalStyle</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>IntervalStyle</name> <operator>=</operator> <name>INTSTYLE_SQL_STANDARD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>interval_in</name></expr></argument>,
                    <argument><expr><name>str</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><call><name>INTERVAL_TYPMOD</name><argument_list>(<argument><expr><name>INTERVAL_FULL_PRECISION</name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name>IntervalStyle</name> <operator>=</operator> <name>old_IntervalStyle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>IntervalStyle</name> <operator>=</operator> <name>old_IntervalStyle</name></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
orcl_interval_round_month(Interval * interval)
{
    if (interval != NULL)
    {
        interval-&gt;day += (interval-&gt;time + USECS_PER_DAY/2)/USECS_PER_DAY;
        interval-&gt;month += (interval-&gt;day + DAYS_PER_MONTH/2)/DAYS_PER_MONTH;
        interval-&gt;day = 0;
        interval-&gt;time = 0;
    }
}

static void
orcl_interval_round_day(Interval * interval)
{
    if (interval != NULL)
    {
        interval-&gt;day += (interval-&gt;time + USECS_PER_DAY/2)/USECS_PER_DAY;
        interval-&gt;time = 0;
    }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>Datum</name></type>
<name>orcl_numtoyminterval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>cnum</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>unit</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>cunit</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>cinterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"YEAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" YEAR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"MONTH"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" MONTH"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid interval unit for function \"numtoyminterval\": '%s'"</literal></expr></argument>, <argument><expr><name>cunit</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Valid interval unit can be 'YEAR' or 'MONTH', case-insensitive."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>interval_in</name></expr></argument>,
                                 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>cinterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                                 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>, 
                                 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_numtodsinterval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>cnum</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>unit</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>cunit</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>cinterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"DAY"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" DAY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"HOUR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" HOUR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"MINUTE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" MINUTE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cunit</name></expr></argument>, <argument><expr><literal type="string">"SECOND"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cinterval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>textcat</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>cnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">" SECOND"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid interval unit for function \"numtodsinterval\": '%s'"</literal></expr></argument>,<argument><expr><name>cunit</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Valid interval unit can be 'DAY', 'HOUR', 'MINUTE' or 'SECOND', case-insensitive."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>interval_in</name></expr></argument>, 
                                 <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>cinterval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_to_yminterval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>val</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>str</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>typmod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>typmod</name> <operator>=</operator> <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>orcl_to_interval</name><argument_list>(<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_to_dsinterval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name><modifier>*</modifier></type>        <name>val</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>str</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>typmod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>typmod</name> <operator>=</operator> <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>DAY</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>)</argument_list></call> <operator>|</operator>
             <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>INTERVAL_MASK</name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>orcl_to_interval</name><argument_list>(<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
