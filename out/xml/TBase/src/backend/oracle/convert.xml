<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/oracle/convert.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/int8.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oracle/oracle.h"</cpp:file></cpp:include>

<function><type><name>Datum</name></type>
<name>orcl_int4_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>        <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>int4_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_int8_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>        <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>int8_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_float4_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>        <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float4out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>float4_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_float8_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>float8_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_numeric_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_text_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamp_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nls_timestamp_format</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nls_timestamp_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nls_timestamp_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamp_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_timestamptz_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nls_timestamp_tz_format</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nls_timestamp_tz_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nls_timestamp_tz_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_interval_tochar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nls_timestamp_format</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nls_timestamp_format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>nls_timestamp_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>interval_to_char</name></expr></argument>,
                                <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * oracle function to_number(text, text)
 *         convert string to numeric
 */</comment>
<function><type><name>Datum</name></type>
<name>orcl_text_tonumber</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>txt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>txt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>txtstr</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>numeric_in</name></expr></argument>,
                                           <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>txtstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><literal type="number">0</literal></expr></argument>,
                                           <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>txtstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if> 
    <else>else
    <block>{<block_content>
        <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_to_number</name></expr></argument>,
                            <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_float4_tonumber</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float4_numeric</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>val</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float4out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>valtxt</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_to_number</name></expr></argument>,
                                    <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>valtxt</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_float8_tonumber</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP_IF_NULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_NULL_IF_EMPTY_TEXT</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> 
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>val</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8out</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>valtxt</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_to_number</name></expr></argument>,
                                    <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>valtxt</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* 3 is enough, but it is defined as 4 in backend code. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX_CONVERSION_GROWTH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONVERSION_GROWTH</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Convert a tilde (~) to ...
 *    1: a full width tilde. (same as JA16EUCTILDE in oracle)
 *    0: a full width overline. (same as JA16EUC in oracle)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JA_TO_FULL_WIDTH_TILDE</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name><name>TO_MULTI_BYTE_UTF8</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"\343\200\200"</literal></expr>,
    <expr><literal type="string">"\357\274\201"</literal></expr>,
    <expr><literal type="string">"\342\200\235"</literal></expr>,
    <expr><literal type="string">"\357\274\203"</literal></expr>,
    <expr><literal type="string">"\357\274\204"</literal></expr>,
    <expr><literal type="string">"\357\274\205"</literal></expr>,
    <expr><literal type="string">"\357\274\206"</literal></expr>,
    <expr><literal type="string">"\342\200\231"</literal></expr>,
    <expr><literal type="string">"\357\274\210"</literal></expr>,
    <expr><literal type="string">"\357\274\211"</literal></expr>,
    <expr><literal type="string">"\357\274\212"</literal></expr>,
    <expr><literal type="string">"\357\274\213"</literal></expr>,
    <expr><literal type="string">"\357\274\214"</literal></expr>,
    <expr><literal type="string">"\357\274\215"</literal></expr>,
    <expr><literal type="string">"\357\274\216"</literal></expr>,
    <expr><literal type="string">"\357\274\217"</literal></expr>,
    <expr><literal type="string">"\357\274\220"</literal></expr>,
    <expr><literal type="string">"\357\274\221"</literal></expr>,
    <expr><literal type="string">"\357\274\222"</literal></expr>,
    <expr><literal type="string">"\357\274\223"</literal></expr>,
    <expr><literal type="string">"\357\274\224"</literal></expr>,
    <expr><literal type="string">"\357\274\225"</literal></expr>,
    <expr><literal type="string">"\357\274\226"</literal></expr>,
    <expr><literal type="string">"\357\274\227"</literal></expr>,
    <expr><literal type="string">"\357\274\230"</literal></expr>,
    <expr><literal type="string">"\357\274\231"</literal></expr>,
    <expr><literal type="string">"\357\274\232"</literal></expr>,
    <expr><literal type="string">"\357\274\233"</literal></expr>,
    <expr><literal type="string">"\357\274\234"</literal></expr>,
    <expr><literal type="string">"\357\274\235"</literal></expr>,
    <expr><literal type="string">"\357\274\236"</literal></expr>,
    <expr><literal type="string">"\357\274\237"</literal></expr>,
    <expr><literal type="string">"\357\274\240"</literal></expr>,
    <expr><literal type="string">"\357\274\241"</literal></expr>,
    <expr><literal type="string">"\357\274\242"</literal></expr>,
    <expr><literal type="string">"\357\274\243"</literal></expr>,
    <expr><literal type="string">"\357\274\244"</literal></expr>,
    <expr><literal type="string">"\357\274\245"</literal></expr>,
    <expr><literal type="string">"\357\274\246"</literal></expr>,
    <expr><literal type="string">"\357\274\247"</literal></expr>,
    <expr><literal type="string">"\357\274\250"</literal></expr>,
    <expr><literal type="string">"\357\274\251"</literal></expr>,
    <expr><literal type="string">"\357\274\252"</literal></expr>,
    <expr><literal type="string">"\357\274\253"</literal></expr>,
    <expr><literal type="string">"\357\274\254"</literal></expr>,
    <expr><literal type="string">"\357\274\255"</literal></expr>,
    <expr><literal type="string">"\357\274\256"</literal></expr>,
    <expr><literal type="string">"\357\274\257"</literal></expr>,
    <expr><literal type="string">"\357\274\260"</literal></expr>,
    <expr><literal type="string">"\357\274\261"</literal></expr>,
    <expr><literal type="string">"\357\274\262"</literal></expr>,
    <expr><literal type="string">"\357\274\263"</literal></expr>,
    <expr><literal type="string">"\357\274\264"</literal></expr>,
    <expr><literal type="string">"\357\274\265"</literal></expr>,
    <expr><literal type="string">"\357\274\266"</literal></expr>,
    <expr><literal type="string">"\357\274\267"</literal></expr>,
    <expr><literal type="string">"\357\274\270"</literal></expr>,
    <expr><literal type="string">"\357\274\271"</literal></expr>,
    <expr><literal type="string">"\357\274\272"</literal></expr>,
    <expr><literal type="string">"\357\274\273"</literal></expr>,
    <expr><literal type="string">"\357\277\245"</literal></expr>,
    <expr><literal type="string">"\357\274\275"</literal></expr>,
    <expr><literal type="string">"\357\274\276"</literal></expr>,
    <expr><literal type="string">"\357\274\277"</literal></expr>,
    <expr><literal type="string">"\342\200\230"</literal></expr>,
    <expr><literal type="string">"\357\275\201"</literal></expr>,
    <expr><literal type="string">"\357\275\202"</literal></expr>,
    <expr><literal type="string">"\357\275\203"</literal></expr>,
    <expr><literal type="string">"\357\275\204"</literal></expr>,
    <expr><literal type="string">"\357\275\205"</literal></expr>,
    <expr><literal type="string">"\357\275\206"</literal></expr>,
    <expr><literal type="string">"\357\275\207"</literal></expr>,
    <expr><literal type="string">"\357\275\210"</literal></expr>,
    <expr><literal type="string">"\357\275\211"</literal></expr>,
    <expr><literal type="string">"\357\275\212"</literal></expr>,
    <expr><literal type="string">"\357\275\213"</literal></expr>,
    <expr><literal type="string">"\357\275\214"</literal></expr>,
    <expr><literal type="string">"\357\275\215"</literal></expr>,
    <expr><literal type="string">"\357\275\216"</literal></expr>,
    <expr><literal type="string">"\357\275\217"</literal></expr>,
    <expr><literal type="string">"\357\275\220"</literal></expr>,
    <expr><literal type="string">"\357\275\221"</literal></expr>,
    <expr><literal type="string">"\357\275\222"</literal></expr>,
    <expr><literal type="string">"\357\275\223"</literal></expr>,
    <expr><literal type="string">"\357\275\224"</literal></expr>,
    <expr><literal type="string">"\357\275\225"</literal></expr>,
    <expr><literal type="string">"\357\275\226"</literal></expr>,
    <expr><literal type="string">"\357\275\227"</literal></expr>,
    <expr><literal type="string">"\357\275\230"</literal></expr>,
    <expr><literal type="string">"\357\275\231"</literal></expr>,
    <expr><literal type="string">"\357\275\232"</literal></expr>,
    <expr><literal type="string">"\357\275\233"</literal></expr>,
    <expr><literal type="string">"\357\275\234"</literal></expr>,
    <expr><literal type="string">"\357\275\235"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JA_TO_FULL_WIDTH_TILDE</name></expr></cpp:if>
    <expr><literal type="string">"\357\275\236"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <literal type="string">"\357\277\243"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name><name>TO_MULTI_BYTE_EUCJP</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"\241\241"</literal></expr>,
    <expr><literal type="string">"\241\252"</literal></expr>,
    <expr><literal type="string">"\241\311"</literal></expr>,
    <expr><literal type="string">"\241\364"</literal></expr>,
    <expr><literal type="string">"\241\360"</literal></expr>,
    <expr><literal type="string">"\241\363"</literal></expr>,
    <expr><literal type="string">"\241\365"</literal></expr>,
    <expr><literal type="string">"\241\307"</literal></expr>,
    <expr><literal type="string">"\241\312"</literal></expr>,
    <expr><literal type="string">"\241\313"</literal></expr>,
    <expr><literal type="string">"\241\366"</literal></expr>,
    <expr><literal type="string">"\241\334"</literal></expr>,
    <expr><literal type="string">"\241\244"</literal></expr>,
    <expr><literal type="string">"\241\335"</literal></expr>,
    <expr><literal type="string">"\241\245"</literal></expr>,
    <expr><literal type="string">"\241\277"</literal></expr>,
    <expr><literal type="string">"\243\260"</literal></expr>,
    <expr><literal type="string">"\243\261"</literal></expr>,
    <expr><literal type="string">"\243\262"</literal></expr>,
    <expr><literal type="string">"\243\263"</literal></expr>,
    <expr><literal type="string">"\243\264"</literal></expr>,
    <expr><literal type="string">"\243\265"</literal></expr>,
    <expr><literal type="string">"\243\266"</literal></expr>,
    <expr><literal type="string">"\243\267"</literal></expr>,
    <expr><literal type="string">"\243\270"</literal></expr>,
    <expr><literal type="string">"\243\271"</literal></expr>,
    <expr><literal type="string">"\241\247"</literal></expr>,
    <expr><literal type="string">"\241\250"</literal></expr>,
    <expr><literal type="string">"\241\343"</literal></expr>,
    <expr><literal type="string">"\241\341"</literal></expr>,
    <expr><literal type="string">"\241\344"</literal></expr>,
    <expr><literal type="string">"\241\251"</literal></expr>,
    <expr><literal type="string">"\241\367"</literal></expr>,
    <expr><literal type="string">"\243\301"</literal></expr>,
    <expr><literal type="string">"\243\302"</literal></expr>,
    <expr><literal type="string">"\243\303"</literal></expr>,
    <expr><literal type="string">"\243\304"</literal></expr>,
    <expr><literal type="string">"\243\305"</literal></expr>,
    <expr><literal type="string">"\243\306"</literal></expr>,
    <expr><literal type="string">"\243\307"</literal></expr>,
    <expr><literal type="string">"\243\310"</literal></expr>,
    <expr><literal type="string">"\243\311"</literal></expr>,
    <expr><literal type="string">"\243\312"</literal></expr>,
    <expr><literal type="string">"\243\313"</literal></expr>,
    <expr><literal type="string">"\243\314"</literal></expr>,
    <expr><literal type="string">"\243\315"</literal></expr>,
    <expr><literal type="string">"\243\316"</literal></expr>,
    <expr><literal type="string">"\243\317"</literal></expr>,
    <expr><literal type="string">"\243\320"</literal></expr>,
    <expr><literal type="string">"\243\321"</literal></expr>,
    <expr><literal type="string">"\243\322"</literal></expr>,
    <expr><literal type="string">"\243\323"</literal></expr>,
    <expr><literal type="string">"\243\324"</literal></expr>,
    <expr><literal type="string">"\243\325"</literal></expr>,
    <expr><literal type="string">"\243\326"</literal></expr>,
    <expr><literal type="string">"\243\327"</literal></expr>,
    <expr><literal type="string">"\243\330"</literal></expr>,
    <expr><literal type="string">"\243\331"</literal></expr>,
    <expr><literal type="string">"\243\332"</literal></expr>,
    <expr><literal type="string">"\241\316"</literal></expr>,
    <expr><literal type="string">"\241\357"</literal></expr>,
    <expr><literal type="string">"\241\317"</literal></expr>,
    <expr><literal type="string">"\241\260"</literal></expr>,
    <expr><literal type="string">"\241\262"</literal></expr>,
    <expr><literal type="string">"\241\306"</literal></expr>,
    <expr><literal type="string">"\243\341"</literal></expr>,
    <expr><literal type="string">"\243\342"</literal></expr>,
    <expr><literal type="string">"\243\343"</literal></expr>,
    <expr><literal type="string">"\243\344"</literal></expr>,
    <expr><literal type="string">"\243\345"</literal></expr>,
    <expr><literal type="string">"\243\346"</literal></expr>,
    <expr><literal type="string">"\243\347"</literal></expr>,
    <expr><literal type="string">"\243\350"</literal></expr>,
    <expr><literal type="string">"\243\351"</literal></expr>,
    <expr><literal type="string">"\243\352"</literal></expr>,
    <expr><literal type="string">"\243\353"</literal></expr>,
    <expr><literal type="string">"\243\354"</literal></expr>,
    <expr><literal type="string">"\243\355"</literal></expr>,
    <expr><literal type="string">"\243\356"</literal></expr>,
    <expr><literal type="string">"\243\357"</literal></expr>,
    <expr><literal type="string">"\243\360"</literal></expr>,
    <expr><literal type="string">"\243\361"</literal></expr>,
    <expr><literal type="string">"\243\362"</literal></expr>,
    <expr><literal type="string">"\243\363"</literal></expr>,
    <expr><literal type="string">"\243\364"</literal></expr>,
    <expr><literal type="string">"\243\365"</literal></expr>,
    <expr><literal type="string">"\243\366"</literal></expr>,
    <expr><literal type="string">"\243\367"</literal></expr>,
    <expr><literal type="string">"\243\370"</literal></expr>,
    <expr><literal type="string">"\243\371"</literal></expr>,
    <expr><literal type="string">"\243\372"</literal></expr>,
    <expr><literal type="string">"\241\320"</literal></expr>,
    <expr><literal type="string">"\241\303"</literal></expr>,
    <expr><literal type="string">"\241\321"</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JA_TO_FULL_WIDTH_TILDE</name></expr></cpp:if>
    <expr><literal type="string">"\241\301"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <literal type="string">"\241\261"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Datum</name></type>
<name>orcl_to_multi_byte</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>srclen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>dstlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PG_UTF8</name></expr>:</case>
            <expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_UTF8</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_EUC_JP</name></expr>:</case>
        <case>case <expr><name>PG_EUC_JIS_2004</name></expr>:</case>
            <expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_EUCJP</name></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="block">/*
         * TODO: Add converter for encodings.
         */</comment>
        <default>default:</default>    <comment type="block">/* no need to convert */</comment>
            <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srclen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>srclen</name> <operator>*</operator> <name>MAX_CONVERSION_GROWTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srclen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>    <name>u</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>&lt;=</operator> <name>u</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>map</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">0x20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>*</operator><name>m</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>m</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>dstlen</name> <operator>=</operator> <name>d</name> <operator>-</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getindex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbchar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mblen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>        <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">95</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mbchar</name></expr></argument>, <argument><expr><name>mblen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orcl_to_single_byte</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>srclen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>dstlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PG_UTF8</name></expr>:</case>
            <expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_UTF8</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>PG_EUC_JP</name></expr>:</case>
        <case>case <expr><name>PG_EUC_JIS_2004</name></expr>:</case>
            <expr_stmt><expr><name>map</name> <operator>=</operator> <name>TO_MULTI_BYTE_EUCJP</name></expr>;</expr_stmt>
            <break>break;</break>
        <comment type="block">/*
         * TODO: Add converter for encodings.
         */</comment>
        <default>default:</default>    <comment type="block">/* no need to convert */</comment>
            <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srclen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* XXX - The output length should be &lt;= input length */</comment>
    <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>-</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>srclen</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>u</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>        <name>clen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>        <name>mapindex</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>u</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mapindex</name> <operator>=</operator> <call><name>getindex</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>m</name> <init>= <expr><literal type="number">0x20</literal> <operator>+</operator> <name>mapindex</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>dstlen</name> <operator>=</operator> <name>d</name> <operator>-</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
