<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/oracle/charpad.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*----------------------------------------------------------------------------
 *
 *  charpad.c
 *  LPAD and RPAD SQL functions for PostgreSQL.
 *
 *----------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oracle/oracle.h"</cpp:file></cpp:include>

<comment type="block">/* flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON</name></cpp:macro>    <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name></cpp:macro>    <cpp:value>false</cpp:value></cpp:define>

<comment type="block">/* Upper limit on total width of the padded output of *pad functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_MAX</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define>

<comment type="block">/*
 * orcl_lpad(string text, length int32 [, fill text])
 *
 * Fill up the string to length 'length' by prepending
 * the characters fill (a half-width space by default)
 */</comment>
<function><type><name>Datum</name></type>
<name>orcl_lpad</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>string1</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>    <name>output_width</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>string2</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>ptr1</name></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2start</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2end</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_ret</name></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>spc</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>mlen</name></decl>,
            <decl><type ref="prev"/><name>dsplen</name></decl>,
            <decl><type ref="prev"/><name>s1blen</name></decl>,
            <decl><type ref="prev"/><name>s2blen</name></decl>,
            <decl><type ref="prev"/><name>hslen</name></decl>,
            <decl><type ref="prev"/><name>total_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s1_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s2_add_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s1_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s2_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>s2_operate</name> <init>= <expr><name>ON</name></expr></init></decl>,
            <decl><type ref="prev"/><name>half_space</name> <init>= <expr><name>OFF</name></expr></init></decl>,
            <decl><type ref="prev"/><name>init_ptr</name> <init>= <expr><name>ON</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* validate output width (the 2nd argument) */</comment>
    <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&gt;</operator> <name>PAD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <name>PAD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* get byte-length of the 1st and 3rd argument strings */</comment>
    <expr_stmt><expr><name>s1blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s2blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* validate the lengths */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s1blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s2blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* if the filler length is zero disable filling */</comment>
    <if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>    <comment type="block">/* turn off string2 processing flag */</comment>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* same behavior as Oracle database */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* byte-length of half-width space */</comment>
    <expr_stmt><expr><name>hslen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Calculate the length of the portion of string1 to include in
     * the final output
     */</comment>
    <expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>s1blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* byte-length and display length per character of string1 */</comment>
        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* accumulate display length of string1 */</comment>
        <expr_stmt><expr><name>s1_width</name> <operator>+=</operator> <name>dsplen</name></expr>;</expr_stmt>

        <comment type="block">/*
         * if string1 is longer/wider than the requested output_width,
         * discard this character and prepend a half-width space instead
         */</comment>
        <if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>&gt;=</operator> <name>output_width</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>!=</operator> <name>output_width</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* secure bytes for a half-width space in the final output */</comment>
                <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else <comment type="block">/* exactly fits, so include this chracter */</comment>
            <block>{<block_content>
                <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/*
             * turn off string2 processing because string1 already
             * consumed output_width
             */</comment>
            <expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>

            <comment type="block">/* done with string1 */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* accumulate string1's portion of byte-length of the output */</comment>
        <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* advance one character within string1 */</comment>
        <expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s1blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Calculate the length of the portion composed of string2 to use for padding */</comment>
    <if_stmt><if>if <condition>(<expr><name>s2_operate</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* remaining part of output_width is composed of string2 */</comment>
        <expr_stmt><expr><name>s2_add_width</name> <operator>=</operator> <name>output_width</name> <operator>-</operator> <name>s1_width</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr2end</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <name>s2blen</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>s2_add_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*  byte-length and display length per character of string2 */</comment>
            <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * output_width can not fit this character of string2, so discard it and
             * prepend a half-width space instead
             */</comment>
            <if_stmt><if>if<condition>(<expr><name>dsplen</name> <operator>&gt;</operator> <name>s2_add_width</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

                <comment type="block">/* done with string2 */</comment>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* accumulate string2's portion of byte-length of the output */</comment>
            <expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

            <comment type="block">/* loop counter */</comment>
            <expr_stmt><expr><name>s2_add_width</name> <operator>-=</operator> <name>dsplen</name></expr>;</expr_stmt>

            <comment type="block">/* advance one character within string2 */</comment>
            <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

            <comment type="block">/* when get to the end of string2, reset ptr2 to the start */</comment>
            <if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* allocate enough space to contain output_width worth of characters */</comment>
    <expr_stmt><expr><name>total_blen</name> <operator>=</operator> <name>s1_add_blen</name> <operator>+</operator> <name>s2_add_blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>total_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr_ret</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * add a half-width space as a padding necessary to satisfy the required
     * output_width
     *
     * (memory already allocated as reserved by either s1_add_blen
     *  or s2_add_blen)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>half_space</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>hslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* prepend string2 padding */</comment>
    <while>while<condition>(<expr><name>s2_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* reset ptr2 to the string2 start */</comment>
        <if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>( <expr><name>s2_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s2_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* when get to the end of string2, reset ptr2 back to the start */</comment>
        <if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

    <comment type="block">/* string1 */</comment>
    <while>while<condition>(<expr><name>s1_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* reset ptr1 back to the start of string1 */</comment>
        <if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>s1_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s1_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr_ret</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * orcl_rpad(string text, length int32 [, fill text])
 *
 * Fill up the string to length 'length' by appending
 * the characters fill (a half-width space by default)
 */</comment>
<function><type><name>Datum</name></type>
<name>orcl_rpad</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <comment type="block">/*length related variables*/</comment>
    <decl_stmt><decl><type><name>int</name></type>        <name>mlen</name></decl>,
            <decl><type ref="prev"/><name>dsplen</name></decl>,
            <decl><type ref="prev"/><name>s1blen</name></decl>,
            <decl><type ref="prev"/><name>s2blen</name></decl>,
            <decl><type ref="prev"/><name>hslen</name></decl>,
            <decl><type ref="prev"/><name>total_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s1_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s2_add_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s1_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>s2_add_blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>string1</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>    <name>output_width</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>string2</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name>    <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>ptr1</name></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2start</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2end</name> <init>= <expr><name>NULL</name></expr></init></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_ret</name></decl>,
            <decl><type ref="prev"><modifier>*</modifier></type><name>spc</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

    
    <decl_stmt><decl><type><name>bool</name></type>    <name>s2_operate</name> <init>= <expr><name>ON</name></expr></init></decl>,
            <decl><type ref="prev"/><name>half_space</name> <init>= <expr><name>OFF</name></expr></init></decl>,
            <decl><type ref="prev"/><name>init_ptr</name> <init>= <expr><name>ON</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*    
    *validate output width (the 2nd argument) 
    */</comment>
    <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>&gt;</operator> <name>PAD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <name>PAD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* get byte-length of the 1st and 3rd argument strings */</comment>
    <expr_stmt><expr><name>s2blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1blen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* validate the lengths */</comment>
    <if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s2blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>s1blen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s1blen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* if the filler length is zero disable filling */</comment>
    <if_stmt><if>if <condition>(<expr><name>s2blen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>    <comment type="block">/* turn off string2 processing flag */</comment>
        <expr_stmt><expr><name>output_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* same behavior as Oracle database */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* byte-length of half-width space */</comment>
    <expr_stmt><expr><name>hslen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>spc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Calculate the length of the portion of string1 to include in
     * the final output
     */</comment>
    <expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>s1blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* byte-length and display length per character of string1 */</comment>
        <expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* accumulate display length of string1 */</comment>
        <expr_stmt><expr><name>s1_width</name> <operator>+=</operator> <name>dsplen</name></expr>;</expr_stmt>

        <comment type="block">/*
         * if string1 is longer/wider than the requested output_width,
         * discard this character and prepend a half-width space instead
         */</comment>
        <if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>&gt;=</operator> <name>output_width</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>s1_width</name> <operator>!=</operator> <name>output_width</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* secure bytes for a half-width space in the final output */</comment>
                <if_stmt><if>if <condition>(<expr><name>output_width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else <comment type="block">/* exactly fits, so include this chracter */</comment>
            <block>{<block_content>
                <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/*
             * turn off string2 processing because string1 already
             * consumed output_width
             */</comment>
            <expr_stmt><expr><name>s2_operate</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>

            <comment type="block">/* done with string1 */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* advance one character within string1 */</comment>
        <expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* accumulate string1's portion of byte-length of the output */</comment>
        <expr_stmt><expr><name>s1_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>


        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s1blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Calculate the length of the portion composed of string2 to use for padding */</comment>
    <if_stmt><if>if <condition>(<expr><name>s2_operate</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* remaining part of output_width is composed of string2 */</comment>
        <expr_stmt><expr><name>s2_add_width</name> <operator>=</operator> <name>output_width</name> <operator>-</operator> <name>s1_width</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr2end</name> <operator>=</operator> <name>ptr2</name> <operator>+</operator> <name>s2blen</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>s2_add_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*  byte-length and display length per character of string2 */</comment>
            <expr_stmt><expr><name>dsplen</name> <operator>=</operator> <call><name>pg_dsplen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * output_width can not fit this character of string2, so discard it and
             * prepend a half-width space instead
             */</comment>
            <if_stmt><if>if<condition>(<expr><name>dsplen</name> <operator>&gt;</operator> <name>s2_add_width</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>half_space</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>

                <comment type="block">/* done with string2 */</comment>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* loop counter */</comment>
            <expr_stmt><expr><name>s2_add_width</name> <operator>-=</operator> <name>dsplen</name></expr>;</expr_stmt>

            <comment type="block">/* accumulate string2's portion of byte-length of the output */</comment>
            <expr_stmt><expr><name>s2_add_blen</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>


            <comment type="block">/* advance one character within string2 */</comment>
            <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

            <comment type="block">/* when get to the end of string2, reset ptr2 to the start */</comment>
            <if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* allocate enough space to contain output_width worth of characters */</comment>
    <expr_stmt><expr><name>total_blen</name> <operator>=</operator> <name>s1_add_blen</name> <operator>+</operator> <name>s2_add_blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>total_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr_ret</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* string1 */</comment>
    <while>while<condition>(<expr><name>s1_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* reset ptr1 back to the start of string1 */</comment>
        <if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr1</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>string1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>s1_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s1_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>ON</name></expr>;</expr_stmt>

    <comment type="block">/* append string2 padding */</comment>
    <while>while<condition>(<expr><name>s2_add_blen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* reset ptr2 to the string2 start */</comment>
        <if_stmt><if>if<condition>(<expr><name>init_ptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>init_ptr</name> <operator>=</operator> <name>OFF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>( <expr><name>s2_add_blen</name> <operator>&lt;</operator> <name>mlen</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* loop counter */</comment>
        <expr_stmt><expr><name>s2_add_blen</name> <operator>-=</operator> <name>mlen</name></expr>;</expr_stmt>

        <comment type="block">/* when get to the end of string2, reset ptr2 back to the start */</comment>
        <if_stmt><if>if <condition>(<expr><name>ptr2</name> <operator>==</operator> <name>ptr2end</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr2start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * add a half-width space as a padding necessary to satisfy the required
     * output_width
     *
     * (memory already allocated as reserved by either s1_add_blen
     *  or s2_add_blen)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>half_space</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr_ret</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>hslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr_ret</name> <operator>+=</operator> <name>hslen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ptr_ret</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
