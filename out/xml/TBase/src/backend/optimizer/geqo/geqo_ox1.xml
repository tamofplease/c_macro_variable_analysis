<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/optimizer/geqo/geqo_ox1.c"><comment type="block">/*------------------------------------------------------------------------
*
* geqo_ox1.c
*
*     order crossover [OX] routines;
*     OX1 operator according to Davis
*     (Proc Int'l Joint Conf on AI)
*
* src/backend/optimizer/geqo/geqo_ox1.c
*
*-------------------------------------------------------------------------
*/</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch                 * Institute of Automatic Control       *
   =                             = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany                   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* the ox algorithm is adopted from Genitor : */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>
<comment type="block">/*                                                             */</comment>
<comment type="block">/*    Copyright (c) 1990                                         */</comment>
<comment type="block">/*    Darrell L. Whitley                                         */</comment>
<comment type="block">/*    Computer Science Department                                 */</comment>
<comment type="block">/*    Colorado State University                                 */</comment>
<comment type="block">/*                                                             */</comment>
<comment type="block">/*    Permission is hereby granted to copy all or any part of  */</comment>
<comment type="block">/*    this program for free distribution.   The author's name  */</comment>
<comment type="block">/*    and this copyright notice must be included in any copy.  */</comment>
<comment type="block">/*                                                             */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_recombination.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* ox1
 *
 *     position crossover
 */</comment>
<function><type><name>void</name></type>
<name>ox1</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour1</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour2</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>offspring</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>,
    <parameter><decl><type><name>City</name> <modifier>*</modifier></type> <name>city_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>left</name></decl>,
                <decl><type ref="prev"/><name>right</name></decl>,
                <decl><type ref="prev"/><name>k</name></decl>,
                <decl><type ref="prev"/><name>p</name></decl>,
                <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

    <comment type="block">/* initialize city table */</comment>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>city_table</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* select portion to copy from tour1 */</comment>
    <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>geqo_randint</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num_gene</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>geqo_randint</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num_gene</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* copy portion from tour1 to offspring */</comment>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>left</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>right</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>offspring</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>right</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_gene</name></expr>;</expr_stmt> <comment type="block">/* index into offspring */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>                        <comment type="block">/* index into tour2 */</comment>

    <comment type="block">/* copy stuff from tour2 to offspring */</comment>
    <while>while <condition>(<expr><name>k</name> <operator>!=</operator> <name>left</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour2</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>used</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>offspring</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>tour2</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_gene</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour2</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>num_gene</name></expr>;</expr_stmt> <comment type="block">/* increment tour2-index */</comment>
    </block_content>}</block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* defined(OX1) */</comment>
</unit>
