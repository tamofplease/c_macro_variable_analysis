<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/optimizer/prep/preptlist.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * preptlist.c
 *      Routines to preprocess the parse tree target list
 *
 * For INSERT and UPDATE queries, the targetlist must contain an entry for
 * each attribute of the target relation in the correct order.  For all query
 * types, we may need to add junk tlist entries for Vars used in the RETURNING
 * list and row ID information needed for SELECT FOR UPDATE locking and/or
 * EvalPlanQual checking.
 *
 * The rewriter's rewriteTargetListIU and rewriteTargetListUD routines
 * also do preprocessing of the targetlist.  The division of labor between
 * here and there is partially historical, but it's not entirely arbitrary.
 * In particular, consider an UPDATE across an inheritance tree.  What the
 * rewriter does need be done only once (because it depends only on the
 * properties of the parent relation).  What's done here has to be done over
 * again for each child relation, because it depends on the column list of
 * the child, which might have more columns and/or a different column order
 * than the parent.
 *
 * The fact that rewriteTargetListIU sorts non-resjunk tlist entries by column
 * position, which expand_targetlist depends on, violates the above comment
 * because the sorting is only valid for the parent relation.  In inherited
 * UPDATE cases, adjust_inherited_tlist runs in between to take care of fixing
 * the tlists for child tables to keep expand_targetlist happy.  We do it like
 * that because it's faster in typical non-inherited cases.
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/optimizer/prep/preptlist.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/prep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/tlist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_class.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_key_values.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>expand_targetlist</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command_type</name></decl></parameter>,
                  <parameter><decl><type><name>Index</name></type> <name>result_relation</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>range_table</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * preprocess_targetlist
 *      Driver for preprocessing the parse tree targetlist.
 *
 *      Returns the new targetlist.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>preprocess_targetlist</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Query</name>       <modifier>*</modifier></type><name>parse</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>result_relation</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>resultRelation</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>range_table</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>rtable</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CmdType</name></type>        <name>command_type</name> <init>= <expr><name><name>parse</name><operator>-&gt;</operator><name>commandType</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Sanity check: if there is a result relation, it'd better be a real
     * relation not a subquery.  Else parser or rewriter messed up.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>result_relation</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>rt_fetch</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>rte</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"subquery cannot be result relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <comment type="block">/* 
         * get group oid which base rel belongs to, and used later at end of planner.
         * local tables not included.
         */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>result_relation</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>rt_fetch</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>ret_loc_info</name> <init>= <expr><call><name>GetRelationLocInfo</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ret_loc_info</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Oid</name></type> <name>group</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>ret_loc_info</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name> <operator>||</operator>
                    <name><name>ret_loc_info</name><operator>-&gt;</operator><name>locatorType</name></name> <operator>==</operator> <name>LOCATOR_TYPE_REPLICATED</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>GetRelGroup</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>group</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name>groupOids</name> <operator>=</operator> <call><name>list_append_unique_oid</name><argument_list>(<argument><expr><name>groupOids</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>ret_loc_info</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>)</argument_list></call> 
                    <operator>||</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>ret_loc_info</name><operator>-&gt;</operator><name>coldGroupId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>!=</operator> <name>CMD_INSERT</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>range_table</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"table in cold-hot group or key-value group could not join with other tables."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * for heap_form_tuple to work, the targetlist must match the exact order
     * of the attributes. We also need to fill in any missing attributes. -ay
     * 10/94
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>==</operator> <name>CMD_INSERT</name> <operator>||</operator> <name>command_type</name> <operator>==</operator> <name>CMD_UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>expand_targetlist</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>command_type</name></expr></argument>,
                                  <argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
    <comment type="block">/*
     * If target relation is specified set distribution of the plan
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name> <operator>&amp;&amp;</operator> <name>result_relation</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>heap_open</name><argument_list>(<argument><expr><call><name>getrelid</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RelationLocInfo</name> <modifier>*</modifier></type><name>rel_loc_info</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_locator_info</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Is target table distributed ? */</comment>
        <if_stmt><if>if <condition>(<expr><name>rel_loc_info</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Distribution</name> <modifier>*</modifier></type><name>distribution</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Distribution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionType</name></name> <operator>=</operator> <name><name>rel_loc_info</name><operator>-&gt;</operator><name>locatorType</name></name></expr>;</expr_stmt>
            <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel_loc_info-&gt;rl_nodeList</argument>)</argument_list></macro>
                <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>,
                                                     <argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>restrictNodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>partAttrNum</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * For INSERT and UPDATE plan tlist is matching the target table
                 * layout
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>==</operator> <name>CMD_INSERT</name> <operator>||</operator> <name>command_type</name> <operator>==</operator> <name>CMD_UPDATE</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>keyTle</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>keyTle</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>,
                                              <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>partAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionExpr</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>keyTle</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>

                    <comment type="block">/*
                     * We can restrict the distribution if the expression
                     * is evaluated to a constant
                     */</comment>
                    <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>==</operator> <name>CMD_INSERT</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>Oid</name></type>     <name>keytype</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Const</name>  <modifier>*</modifier></type><name>constExpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                        <decl_stmt><decl><type><name>Oid</name></type>     <name>secDataType</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Const</name>  <modifier>*</modifier></type><name>secConstExpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type>    <name>secisnull</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Datum</name></type>   <name>secValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                        <expr_stmt><expr><name>keytype</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>constExpr</name> <operator>=</operator> <operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <call><name>eval_const_expressions</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                                <argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>constExpr</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                <name><name>constExpr</name><operator>-&gt;</operator><name>consttype</name></name> <operator>==</operator> <name>keytype</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>List</name>        <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>tmpset</name> <init>= <expr><call><name>bms_copy</name><argument_list>(<argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>restrictinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Locator</name>    <modifier>*</modifier></type><name>locator</name></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name>           <modifier>*</modifier></type><name>nodenums</name></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

                            <while>while<condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>bms_first_member</name><argument_list>(<argument><expr><name>tmpset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><name>nodeList</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
                            <expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>tmpset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                            <if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>int32</name></type>    <name>nGroup</name></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name>     <modifier>*</modifier></type><name>groups</name></decl>;</decl_stmt>
                                
                                <expr_stmt><expr><call><name>GetRelationSecondGroup</name><argument_list>(<argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt><if>if <condition>(<expr><name>nGroup</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>

                                <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>coldGroupId</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>nGroup</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>keyTle</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>,
                                              <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>secAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt><expr><name>secDataType</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>keyTle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

									<comment type="block">/* evaluate sql value function on coordinator */</comment>
									<expr_stmt><expr><name><name>keyTle</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>replace_eval_sql_value_function</name><argument_list>(
											<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>keyTle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

									<expr_stmt><expr><name>secConstExpr</name> <operator>=</operator> <operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <call><name>estimate_expression_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                                             <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>keyTle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

									<comment type="block">/* cold hot insert router must be on coordinator */</comment>
                                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>secConstExpr</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>||</operator>
                                                <name><name>secConstExpr</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>secDataType</name></expr>)</condition>
                                    <block>{<block_content>
										<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<goto>goto <name>END_restrict</name>;</goto>
                                    </block_content>}</block></if></if_stmt>

                                    <expr_stmt><expr><name>secisnull</name> <operator>=</operator> <name><name>secConstExpr</name><operator>-&gt;</operator><name>constisnull</name></name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>secValue</name> <operator>=</operator> <name><name>secConstExpr</name><operator>-&gt;</operator><name>constvalue</name></name></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <goto>goto <name>END_restrict</name>;</goto>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <expr_stmt><expr><name>secisnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>secValue</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
                            <expr_stmt><expr><name>locator</name> <operator>=</operator> <call><name>createLocator</name><argument_list>(<argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionType</name></name></expr></argument>,
                                                    <argument><expr><name>RELATION_ACCESS_INSERT</name></expr></argument>,
                                                    <argument><expr><name>keytype</name></expr></argument>,
                                                    <argument><expr><name>LOCATOR_LIST_LIST</name></expr></argument>,
                                                    <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>nodeList</name></expr></argument>,
                                                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nodenums</name></expr></argument>,
                                                    <argument><expr><name>false</name></expr></argument>,
                                                    <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>coldGroupId</name></name></expr></argument>,
                                                    <argument><expr><name>secDataType</name></expr></argument>, <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>secAttrNum</name></name></expr></argument>, 
                                                    <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><name>locator</name> <operator>=</operator> <call><name>createLocator</name><argument_list>(<argument><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionType</name></name></expr></argument>,
                                                    <argument><expr><name>RELATION_ACCESS_INSERT</name></expr></argument>,
                                                    <argument><expr><name>keytype</name></expr></argument>,
                                                    <argument><expr><name>LOCATOR_LIST_LIST</name></expr></argument>,
                                                    <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>nodeList</name></expr></argument>,
                                                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nodenums</name></expr></argument>,
                                                    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
                            <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name>locator</name></expr></argument>, <argument><expr><name><name>constExpr</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>,
                                          <argument><expr><name><name>constExpr</name><operator>-&gt;</operator><name>constisnull</name></name></expr></argument>, <argument><expr><name>secValue</name></expr></argument>, 
                                          <argument><expr><name>secisnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name>locator</name></expr></argument>, <argument><expr><name><name>constExpr</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>,
                                              <argument><expr><name><name>constExpr</name><operator>-&gt;</operator><name>constisnull</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                                <expr_stmt><expr><name>restrictinfo</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>restrictinfo</name></expr></argument>, <argument><expr><name><name>nodenums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                            <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>restrictNodes</name></name> <operator>=</operator> <name>restrictinfo</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>freeLocator</name><argument_list>(<argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
<label><name>END_restrict</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <comment type="block">/*
                 * For delete we need to add the partitioning key of the target
                 * table to the tlist, so distribution can be correctly handled
                 * trough all the planning process.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>command_type</name> <operator>==</operator> <name>CMD_DELETE</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att_tup</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Var</name>           <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

                    <expr_stmt><expr><name>att_tup</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>partAttrNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name><name>rel_loc_info</name><operator>-&gt;</operator><name>partAttrNum</name></name></expr></argument>,
                                  <argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
                                  <argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
                                          <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                          <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionExpr</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>distribution</name><operator>-&gt;</operator><name>distributionExpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>distribution</name></name> <operator>=</operator> <name>distribution</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>distribution</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Add necessary junk columns for rowmarked rels.  These values are needed
     * for locking of rels selected FOR UPDATE/SHARE, and to do EvalPlanQual
     * rechecking.  See comments for PlanRowMark in plannodes.h.
     */</comment>
    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>root-&gt;rowMarks</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PlanRowMark</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>(</operator><name>PlanRowMark</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Var</name>           <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>        <name><name>resname</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name></decl>;</decl_stmt>

        <comment type="block">/* child rels use the same junk attrs as their parents */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name> <operator>!=</operator> <name><name>rc</name><operator>-&gt;</operator><name>prti</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>allMarkTypes</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ROW_MARK_COPY</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Need to fetch TID */</comment>
            <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name></expr></argument>,
                          <argument><expr><name>SelfItemPointerAttributeNumber</name></expr></argument>,
                          <argument><expr><name>TIDOID</name></expr></argument>,
                          <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                          <argument><expr><name>InvalidOid</name></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ctid%u"</literal></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rowmarkId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
                                  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="block">/* Need to fetch another xc_node_id */</comment>
			<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name></expr></argument>,
			              <argument><expr><name>XC_NodeIdAttributeNumber</name></expr></argument>,
			              <argument><expr><name>INT4OID</name></expr></argument>,
			              <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
			              <argument><expr><name>InvalidOid</name></expr></argument>,
			              <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"xc_node_id%u"</literal></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rowmarkId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
			                      <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
			                      <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></call></expr></argument>,
			                      <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>allMarkTypes</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ROW_MARK_COPY</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Need the whole row as a junk var */</comment>
            <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeWholeRowVar</name><argument_list>(<argument><expr><call><name>rt_fetch</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"wholerow%u"</literal></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rowmarkId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
                                  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* If parent of inheritance tree, always fetch the tableoid too. */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>isParent</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name></expr></argument>,
                          <argument><expr><name>TableOidAttributeNumber</name></expr></argument>,
                          <argument><expr><name>OIDOID</name></expr></argument>,
                          <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                          <argument><expr><name>InvalidOid</name></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tableoid%u"</literal></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>rowmarkId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
                                  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * If the query has a RETURNING list, add resjunk entries for any Vars
     * used in RETURNING that belong to other relations.  We need to do this
     * to make these Vars available for the RETURNING calculation.  Vars that
     * belong to the result rel don't need to be added, because they will be
     * made to refer to the actual heap tuple.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>returningList</name></name> <operator>&amp;&amp;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>vars</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>vars</name> <operator>=</operator> <call><name>pull_var_clause</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>returningList</name></name></expr></argument>,
                               <argument><expr><name>PVC_RECURSE_AGGREGATES</name> <operator>|</operator>
                               <name>PVC_RECURSE_WINDOWFUNCS</name> <operator>|</operator>
                               <name>PVC_INCLUDE_PLACEHOLDERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>vars</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Var</name>           <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>==</operator> <name>result_relation</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>        <comment type="block">/* don't need it */</comment>

            <if_stmt><if>if <condition>(<expr><call><name>tlist_member</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>, <argument><expr><name>tlist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>        <comment type="block">/* already got it */</comment>

            <expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
                                  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>tlist</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * preprocess_onconflict_targetlist
 *      Process ON CONFLICT SET targetlist.
 *
 *      Returns the new targetlist.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>preprocess_onconflict_targetlist</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result_relation</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>range_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>expand_targetlist</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>CMD_UPDATE</name></expr></argument>, <argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*****************************************************************************
 *
 *        TARGETLIST EXPANSION
 *
 *****************************************************************************/</comment>

<comment type="block">/*
 * expand_targetlist
 *      Given a target list as generated by the parser and a result relation,
 *      add targetlist entries for any missing attributes, and ensure the
 *      non-junk attributes appear in proper field order.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>expand_targetlist</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command_type</name></decl></parameter>,
                  <parameter><decl><type><name>Index</name></type> <name>result_relation</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>range_table</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>new_tlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>tlist_item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>attrno</name></decl>,
                <decl><type ref="prev"/><name>numattrs</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>tlist_item</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The rewriter should have already ensured that the TLEs are in correct
     * order; but we have to insert TLEs for any missing attributes.
     *
     * Scan the tuple description in the relation's relcache entry to make
     * sure we have all the user attributes in the right order.  We assume
     * that the rewriter already acquired at least AccessShareLock on the
     * relation, so we need no lock here.
     */</comment>
    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><call><name>getrelid</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>range_table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numattrs</name> <operator>=</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>attrno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>attrno</name> <operator>&lt;=</operator> <name>numattrs</name></expr>;</condition> <incr><expr><name>attrno</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att_tup</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attrno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>new_tle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>tlist_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>old_tle</name> <init>= <expr><operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>tlist_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_tle</name><operator>-&gt;</operator><name>resjunk</name></name> <operator>&amp;&amp;</operator> <name><name>old_tle</name><operator>-&gt;</operator><name>resno</name></name> <operator>==</operator> <name>attrno</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>new_tle</name> <operator>=</operator> <name>old_tle</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tlist_item</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>tlist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>new_tle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Didn't find a matching tlist entry, so make one.
             *
             * For INSERT, generate a NULL constant.  (We assume the rewriter
             * would have inserted any available default value.) Also, if the
             * column isn't dropped, apply any domain constraints that might
             * exist --- this is to catch domain NOT NULL.
             *
             * For UPDATE, generate a Var reference to the existing value of
             * the attribute, so that it gets copied to the new tuple. But
             * generate a NULL for dropped columns (we want to drop any old
             * values).
             *
             * When generating a NULL constant for a dropped column, we label
             * it INT4 (any other guaranteed-to-exist datatype would do as
             * well). We can't label it with the dropped column's datatype
             * since that might not exist anymore.  It does not really matter
             * what we claim the type is, since NULL is NULL --- its
             * representation is datatype-independent.  This could perhaps
             * confuse code comparing the finished plan to the target
             * relation, however.
             */</comment>
            <decl_stmt><decl><type><name>Oid</name></type>            <name>atttype</name> <init>= <expr><name><name>att_tup</name><operator>-&gt;</operator><name>atttypid</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32</name></type>        <name>atttypmod</name> <init>= <expr><name><name>att_tup</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Oid</name></type>            <name>attcollation</name> <init>= <expr><name><name>att_tup</name><operator>-&gt;</operator><name>attcollation</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name>       <modifier>*</modifier></type><name>new_expr</name></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>command_type</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>CMD_INSERT</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>att_tup</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name>atttype</name></expr></argument>,
                                                      <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                      <argument><expr><name>attcollation</name></expr></argument>,
                                                      <argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
                                                      <argument><expr><name>true</name></expr></argument>, <comment type="block">/* isnull */</comment>
                                                      <argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <call><name>coerce_to_domain</name><argument_list>(<argument><expr><name>new_expr</name></expr></argument>,
                                                    <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                    <argument><expr><name>atttype</name></expr></argument>,
                                                    <argument><expr><name>COERCE_IMPLICIT_CAST</name></expr></argument>,
                                                    <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                    <argument><expr><name>false</name></expr></argument>,
                                                    <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="block">/* Insert NULL for dropped column */</comment>
                        <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name>INT4OID</name></expr></argument>,
                                                      <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                      <argument><expr><name>InvalidOid</name></expr></argument>,
                                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
                                                      <argument><expr><name>true</name></expr></argument>, <comment type="block">/* isnull */</comment>
                                                      <argument><expr><name>true</name></expr></argument> <comment type="block">/* byval */</comment> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>CMD_UPDATE</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>att_tup</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name>result_relation</name></expr></argument>,
                                                    <argument><expr><name>attrno</name></expr></argument>,
                                                    <argument><expr><name>atttype</name></expr></argument>,
                                                    <argument><expr><name>atttypmod</name></expr></argument>,
                                                    <argument><expr><name>attcollation</name></expr></argument>,
                                                    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="block">/* Insert NULL for dropped column */</comment>
                        <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name>INT4OID</name></expr></argument>,
                                                      <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                      <argument><expr><name>InvalidOid</name></expr></argument>,
                                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
                                                      <argument><expr><name>true</name></expr></argument>, <comment type="block">/* isnull */</comment>
                                                      <argument><expr><name>true</name></expr></argument> <comment type="block">/* byval */</comment> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized command_type: %d"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>command_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>new_expr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>    <comment type="block">/* keep compiler quiet */</comment>
                    <break>break;</break>
            </block_content>}</block></switch>

            <expr_stmt><expr><name>new_tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>new_expr</name></expr></argument>,
                                      <argument><expr><name>attrno</name></expr></argument>,
                                      <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>att_tup</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>new_tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>new_tlist</name></expr></argument>, <argument><expr><name>new_tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * The remaining tlist entries should be resjunk; append them all to the
     * end of the new tlist, making sure they have resnos higher than the last
     * real attribute.  (Note: although the rewriter already did such
     * renumbering, we have to do it again here in case we are doing an UPDATE
     * in a table with dropped columns, or an inheritance child table with
     * extra columns.)
     */</comment>
    <while>while <condition>(<expr><name>tlist_item</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>old_tle</name> <init>= <expr><operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>tlist_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_tle</name><operator>-&gt;</operator><name>resjunk</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"targetlist is not sorted correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* Get the resno right, but don't copy unnecessarily */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>old_tle</name><operator>-&gt;</operator><name>resno</name></name> <operator>!=</operator> <name>attrno</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>old_tle</name> <operator>=</operator> <call><name>flatCopyTargetEntry</name><argument_list>(<argument><expr><name>old_tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>old_tle</name><operator>-&gt;</operator><name>resno</name></name> <operator>=</operator> <name>attrno</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>new_tlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>new_tlist</name></expr></argument>, <argument><expr><name>old_tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrno</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>tlist_item</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>tlist_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>new_tlist</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Locate PlanRowMark for given RT index, or return NULL if none
 *
 * This probably ought to be elsewhere, but there's no very good place
 */</comment>
<function><type><name>PlanRowMark</name> <modifier>*</modifier></type>
<name>get_plan_rowmark</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rowmarks</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rtindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>rowmarks</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PlanRowMark</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>(</operator><name>PlanRowMark</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>rti</name></name> <operator>==</operator> <name>rtindex</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
