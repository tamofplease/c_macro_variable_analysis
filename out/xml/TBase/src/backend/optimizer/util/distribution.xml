<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/optimizer/util/distribution.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * distribution.c
 *	  Routines related to adjust path distribution
 *
 * Copyright (c) 2020-Present TBase development team, Tencent
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/util/distribution.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/bitmapset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/distribution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>

<comment type="block">/*
 * equal_distributions
 * 	Check that two distributions are equal.
 *
 * Distributions are considered equal if they are of the same type, on the
 * same set of nodes, and if the distribution expressions are known to be equal
 * (either the same expressions or members of the same equivalence class).
 */</comment>
<function><type><name>bool</name></type>
<name>equal_distributions</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Distribution</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>,
					<parameter><decl><type><name>Distribution</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* fast path */</comment>
	<if_stmt><if>if <condition>(<expr><name>dst1</name> <operator>==</operator> <name>dst2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dst2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* conditions easier to check go first */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dst1</name><operator>-&gt;</operator><name>distributionType</name></name> <operator>!=</operator> <name><name>dst2</name><operator>-&gt;</operator><name>distributionType</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_equal</name><argument_list>(<argument><expr><name><name>dst1</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>dst2</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name><name>dst1</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>, <argument><expr><name><name>dst2</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * For more thorough expression check we need to ensure they both are
	 * defined
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dst1</name><operator>-&gt;</operator><name>distributionExpr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dst2</name><operator>-&gt;</operator><name>distributionExpr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * More thorough check, but allows some important cases, like if
	 * distribution column is not updated (implicit set distcol=distcol) or
	 * set distcol = CONST, ... WHERE distcol = CONST - pattern used by many
	 * applications.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exprs_known_equal</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>dst1</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>, <argument><expr><name><name>dst2</name><operator>-&gt;</operator><name>distributionExpr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* The restrictNodes field does not matter for distribution equality */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the location of DML result relation if it appears in either subpath
 */</comment>
<function><type><name>ResultRelLocation</name></type>
<name>getResultRelLocation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resultRel</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>inner</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>outer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResultRelLocation</name></type> <name>location</name> <init>= <expr><name>RESULT_REL_NONE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>resultRel</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>location</name> <operator>=</operator> <name>RESULT_REL_INNER</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>resultRel</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>location</name> <operator>=</operator> <name>RESULT_REL_OUTER</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>location</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the path distribution satisfy the result relation distribution.
 */</comment>
<function><type><name>bool</name></type>
<name>SatisfyResultRelDist</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannerInfo</name>    <modifier>*</modifier></type><name>top_root</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>equal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get top root */</comment>
	<while>while<condition>(<expr><name><name>top_root</name><operator>-&gt;</operator><name>parent_root</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>top_root</name> <operator>=</operator> <name><name>top_root</name><operator>-&gt;</operator><name>parent_root</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Check the UPDATE/DELETE command, make sure the path distribution equals the
	 * result relation distribution.
	 * We only invalidate the check if the result relation appears in one of
	 * the left/right subpath.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>top_root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_UPDATE</name> <operator>||</operator>
		 <name><name>top_root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_DELETE</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<name><name>path</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>resultRelLoc</name></name> <operator>!=</operator> <name>RESULT_REL_NONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>equal</name> <operator>=</operator> <call><name>equal_distributions</name><argument_list>(<argument><expr><name>top_root</name></expr></argument>,
									<argument><expr><name><name>top_root</name><operator>-&gt;</operator><name>distribution</name></name></expr></argument>,
									<argument><expr><name><name>path</name><operator>-&gt;</operator><name>distribution</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equal</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
