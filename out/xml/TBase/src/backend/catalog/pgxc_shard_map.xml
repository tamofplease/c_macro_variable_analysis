<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/catalog/pgxc_shard_map.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_shard_map.h"</cpp:file></cpp:include>


<function><type><name>bool</name></type> <name>is_group_sharding_inited</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>oldtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>sharrel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>         <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name>skey</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sharrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>,
                <argument><expr><name>Anum_pgxc_shard_map_nodegroup</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, 
                <argument><expr><name>F_OIDEQ</name></expr></argument>,
                <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt><expr><name>scan</name>    <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sharrel</name></expr></argument>,
                                  <argument><expr><name>PgxcShardMapGroupIndexId</name></expr></argument>, 
                                  <argument><expr><name>true</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, 
                                  <argument><expr><literal type="number">1</literal></expr></argument>, 
                                  <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                              

    <expr_stmt><expr><name>oldtup</name>  <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name>  <operator>=</operator> <call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sharrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* called when the first table created */</comment>
<function><type><name>void</name></type> <name>InitShardMap</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>nShardGroup</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nNodes</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>extend</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>shardmaprel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>htup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>Natts_pgxc_shard_map</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>Natts_pgxc_shard_map</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>iShard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>iAttr</name></decl>;</decl_stmt>
    <comment type="line">//int        shards_of_dn;</comment>

    <if_stmt><if>if<condition>(<expr><call><name>is_group_sharding_inited</name><argument_list>(<argument><expr><name>nodeGroup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    

    <if_stmt><if>if<condition>(<expr><name>nNodes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Cannot initiate shard map when cluster has not any datanode"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//shards_of_dn = (nShardGroup + nNodes - 1) / nNodes;</comment>
    
    <comment type="block">/*make and insert shard map record*/</comment>
    <for>for<control>(<init><expr><name>iAttr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iAttr</name> <operator>&lt;</operator> <name>Natts_pgxc_shard_map</name></expr>;</condition> <incr><expr><name>iAttr</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>iAttr</name></expr>]</index></name>    <operator>=</operator>    <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>iAttr</name></expr>]</index></name>    <operator>=</operator>    <operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_nodegroup</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>            <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>nodeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_ncopy</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>             <operator>=</operator> <call><name>UInt16GetDatum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_copy1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>                <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_copy2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>                <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_primarystatus</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>        <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name>SHARD_MAP_STATUS_USING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_status1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>            <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name>SHARD_MAP_STATUS_UNDEFINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_status2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>            <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name>SHARD_MAP_STATUS_UNDEFINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_extend</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>             <operator>=</operator> <call><name>UInt16GetDatum</name><argument_list>(<argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>shardmaprel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><expr><name>iShard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iShard</name> <operator>&lt;</operator> <name>nShardGroup</name></expr>;</condition> <incr><expr><name>iShard</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_shardgroupid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>     <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name>iShard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <comment type="line">//values[Anum_pgxc_shard_map_primarycopy  - 1]    = ObjectIdGetDatum(nodes[iShard % nNodes]);</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_shard_map_primarycopy</name>  <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>    <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>iShard</name> <operator>%</operator> <name>nNodes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>shardmaprel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>shardmaprel</name></expr></argument>, <argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>shardmaprel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RegisterInvalidShmemShardMap</name><argument_list>(<argument><expr><name>nodeGroup</name></expr></argument>, <argument><expr><name>ShardOpType_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> 
<name>is_already_inited</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>  <name>oldtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>sharrel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sharrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>scan</name>    <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sharrel</name></expr></argument>,
                              <argument><expr><name>InvalidOid</name></expr></argument>, 
                              <argument><expr><name>false</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, 
                              <argument><expr><literal type="number">0</literal></expr></argument>, 
                              <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name>  <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name>  <operator>=</operator> <call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sharrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>NodeHasShard</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>shardmapRel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>oldtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name>skey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>shardmapRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>,
                    <argument><expr><name>Anum_pgxc_shard_map_primarycopy</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,
                                <argument><expr><name>PgxcShardMapNodeIndexId</name></expr></argument>,<argument><expr><name>true</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UpdateRelationShardMap</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>from_node</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>to_node</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>shardgroup_num</name></decl></parameter>,    <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>shardgroups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>shardmapRel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>oldtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>newtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>Datum</name></type>        <name><name>new_record</name><index>[<expr><name>Natts_pgxc_shard_map</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name><name>new_record_nulls</name><index>[<expr><name>Natts_pgxc_shard_map</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name><name>new_record_repl</name><index>[<expr><name>Natts_pgxc_shard_map</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>shardmapRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record_nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>new_record_repl</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_record_repl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>new_record_repl</name><index>[<expr><name>Anum_pgxc_shard_map_primarycopy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shardgroup_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>shardgroups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>shardgroups</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><literal type="string">"MOVE DATA: sharding group array is not sorted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name>Anum_pgxc_shard_map_nodegroup</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name>Anum_pgxc_shard_map_shardgroupid</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                    <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>shardgroups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,
                                    <argument><expr><name>PgxcShardMapShardIndexId</name></expr></argument>,<argument><expr><name>true</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><literal type="string">"update shard map failed: shardgroup id[%d] is not exist."</literal></expr></argument>, <argument><expr><name><name>shardgroups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block">/* just need to update primarycopy*/</comment>
        <expr_stmt><expr><name><name>new_record</name><index>[<expr><name>Anum_pgxc_shard_map_primarycopy</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>    <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>to_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>new_record</name></expr></argument>,
                                       <argument><expr><name>new_record_nulls</name></expr></argument>, <argument><expr><name>new_record_repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="line">//RegisterInvalidShmemShardMap(group);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DropShardMap_Node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>shardmapRel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>oldtup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_shard_map</name></type> <name>shard_map</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>shardmapRel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcShardMapRelationId</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,
                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                <argument><expr><name>false</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <while>while<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>shard_map</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_shard_map</name><operator>)</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>shard_map</name><operator>-&gt;</operator><name>disgroup</name></name> <operator>==</operator> <name>group</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>    

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>shardmapRel</name></expr></argument>,<argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RegisterInvalidShmemShardMap</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>ShardOpType_drop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
