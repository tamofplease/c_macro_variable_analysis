<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/catalog/storage.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * storage.c
 *      code to create and destroy physical storage for relations
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/catalog/storage.c
 *
 * NOTES
 *      Some of this code used to be in storage/smgr/smgr.c, and the
 *      function names still reflect that.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/visibilitymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xloginsert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_xlog.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/extentmapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgwriter.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/freespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcryptmap.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We keep a list of all relations (represented as RelFileNode values)
 * that have been created or deleted in the current transaction.  When
 * a relation is created, we create the physical file immediately, but
 * remember it so that we can delete the file again if the current
 * transaction is aborted.  Conversely, a deletion request is NOT
 * executed immediately, but is just entered in the list.  When and if
 * the transaction commits, we can delete the physical file.
 *
 * To handle subtransactions, every entry is marked with its transaction
 * nesting level.  At subtransaction commit, we reassign the subtransaction's
 * entries to the parent nesting level.  At subtransaction abort, we can
 * immediately execute the abort-time actions for all entries of the current
 * nesting level.
 *
 * NOTE: the list is kept in TopMemoryContext to be sure it won't disappear
 * unbetimes.  It'd probably be OK to keep it in TopTransactionContext,
 * but I'm being paranoid.
 */</comment>

<typedef>typedef <type><struct>struct <name>PendingRelDelete</name>
<block>{
    <decl_stmt><decl><type><name>RelFileNode</name></type> <name>relnode</name></decl>;</decl_stmt>        <comment type="block">/* relation that may need to be deleted */</comment>
    <decl_stmt><decl><type><name>BackendId</name></type>    <name>backend</name></decl>;</decl_stmt>        <comment type="block">/* InvalidBackendId if not a temp rel */</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>atCommit</name></decl>;</decl_stmt>        <comment type="block">/* T=delete at commit; F=delete at abort */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>nestLevel</name></decl>;</decl_stmt>        <comment type="block">/* xact nesting level of request */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>PendingRelDelete</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>    <comment type="block">/* linked-list link */</comment>
}</block></struct></type> <name>PendingRelDelete</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PendingRelDelete</name> <modifier>*</modifier></type><name>pendingDeletes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* head of linked list */</comment>

<comment type="block">/*
 * RelationCreateStorage
 *        Create physical storage for a relation.
 *
 * Create the underlying disk file storage for the relation. This only
 * creates the main fork; additional forks are created lazily by the
 * modules that need them.
 *
 * This function is transactional. The creation is WAL-logged, and if the
 * transaction aborts later on, the storage will be destroyed.
 */</comment>
<function><type><name>void</name></type>
<name>RelationCreateStorage</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>relpersistence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>srel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BackendId</name></type>    <name>backend</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>needs_wal</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>relpersistence</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELPERSISTENCE_TEMP</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>MyCoordId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>backend</name> <operator>=</operator> <name>MyFirstBackendId</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>backend</name> <operator>=</operator> <call><name>BackendIdForTempRelations</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>needs_wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELPERSISTENCE_UNLOGGED</name></expr>:</case>
            <expr_stmt><expr><name>backend</name> <operator>=</operator> <name>InvalidBackendId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needs_wal</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELPERSISTENCE_PERMANENT</name></expr>:</case>
            <expr_stmt><expr><name>backend</name> <operator>=</operator> <name>InvalidBackendId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needs_wal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid relpersistence: %c"</literal></expr></argument>, <argument><expr><name>relpersistence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>                <comment type="block">/* placate compiler */</comment>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>srel</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name>rnode</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smgrcreate</name><argument_list>(<argument><expr><name>srel</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>needs_wal</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>log_smgrcreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srel</name><operator>-&gt;</operator><name>smgr_rnode</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Add the relation to the list of stuff to delete at abort */</comment>
    <expr_stmt><expr><name>pending</name> <operator>=</operator> <operator>(</operator><name>PendingRelDelete</name> <operator>*</operator><operator>)</operator>
        <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PendingRelDelete</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>relnode</name></name> <operator>=</operator> <name>rnode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>    <comment type="block">/* delete if abort */</comment>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>=</operator> <call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pendingDeletes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pendingDeletes</name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform XLogInsert of an XLOG_SMGR_CREATE record to WAL.
 */</comment>
<function><type><name>void</name></type>
<name>log_smgrcreate</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>rnode</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name></type> <name>forkNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_smgr_create</name></type> <name>xlrec</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Make an XLOG entry reporting the file creation.
     */</comment>
    <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <operator>*</operator><name>rnode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>forkNum</name></name> <operator>=</operator> <name>forkNum</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlrec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_SMGR_ID</name></expr></argument>, <argument><expr><name>XLOG_SMGR_CREATE</name> <operator>|</operator> <name>XLR_SPECIAL_REL_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
<function><type><name>void</name></type> <name>log_smgrdealloc</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>rnode</name></decl></parameter>, <parameter><decl><type><name>ExtentID</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_smgr_dealloc</name></type> <name>xlrec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type>    <name>lsn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <operator>*</operator><name>rnode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>eid</name></name> <operator>=</operator> <name>eid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlrec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_SMGR_ID</name></expr></argument>, <argument><expr><name>XLOG_SMGR_DEALLOC</name> <operator>|</operator> <name>XLR_SPECIAL_REL_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * RelationDropStorage
 *        Schedule unlinking of physical storage at transaction commit.
 */</comment>
<function><type><name>void</name></type>
<name>RelationDropStorage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>

    <comment type="block">/* Add the relation to the list of stuff to delete at commit */</comment>
    <expr_stmt><expr><name>pending</name> <operator>=</operator> <operator>(</operator><name>PendingRelDelete</name> <operator>*</operator><operator>)</operator>
        <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PendingRelDelete</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>relnode</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_node</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>backend</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_backend</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>    <comment type="block">/* delete if commit */</comment>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>=</operator> <call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pendingDeletes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pendingDeletes</name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>

    <comment type="block">/*
     * NOTE: if the relation was created in this transaction, it will now be
     * present in the pending-delete list twice, once with atCommit true and
     * once with atCommit false.  Hence, it will be physically deleted at end
     * of xact in either case (and the other entry will be ignored by
     * smgrDoPendingDeletes, so no error will occur).  We could instead remove
     * the existing list entry and delete the physical file immediately, but
     * for now I'll keep the logic simple.
     */</comment>

    <expr_stmt><expr><call><name>RelationCloseSmgr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RelationPreserveStorage
 *        Mark a relation as not to be deleted after all.
 *
 * We need this function because relation mapping changes are committed
 * separately from commit of the whole transaction, so it's still possible
 * for the transaction to abort after the mapping update is done.
 * When a new physical relation is installed in the map, it would be
 * scheduled for delete-on-abort, so we'd delete it, and be in trouble.
 * The relation mapper fixes this by telling us to not delete such relations
 * after all as part of its commit.
 *
 * We also use this to reuse an old build of an index during ALTER TABLE, this
 * time removing the delete-at-commit entry.
 *
 * No-op if the relation is not among those scheduled for deletion.
 */</comment>
<function><type><name>void</name></type>
<name>RelationPreserveStorage</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atCommit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>RelFileNodeEquals</name><argument_list>(<argument><expr><name>rnode</name></expr></argument>, <argument><expr><name><name>pending</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>atCommit</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* unlink and delete list entry */</comment>
            <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>pendingDeletes</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* prev does not change */</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* unrelated entry, don't touch it */</comment>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * RelationTruncate
 *        Physically truncate a relation to the specified number of blocks.
 *
 * This includes getting rid of any buffers for the blocks that are to be
 * dropped.
 */</comment>
<function><type><name>void</name></type>
<name>RelationTruncate</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>nblocks</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>fsm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>vm</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type>         <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Open it at the smgr level if not already done */</comment>
    <expr_stmt><expr><call><name>RelationOpenSmgr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Make sure smgr_targblock etc aren't pointing somewhere past new end
     */</comment>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name><operator>-&gt;</operator><name>smgr_targblock</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SMGR_TARGBLOCK_MAX_SHARDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">//InitShardTargBlock(&amp;rel-&gt;rd_smgr-&gt;smgr_shard_targblocks[i]);</comment>
        <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name><operator>-&gt;</operator><name>smgr_shard_targblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">//MemSet(rel-&gt;rd_smgr-&gt;smgr_shard_targblocks, 0, sizeof(rel-&gt;rd_smgr-&gt;smgr_shard_targblocks));</comment>

    <if_stmt><if>if<condition>(<expr><call><name>RelationHasExtent</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TruncateExtentMap</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name><operator>-&gt;</operator><name>smgr_fsm_nblocks</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name><operator>-&gt;</operator><name>smgr_vm_nblocks</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>

    <comment type="block">/* Truncate the FSM first if it exists */</comment>
    <expr_stmt><expr><name>fsm</name> <operator>=</operator> <call><name>smgrexists</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>FSM_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fsm</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FreeSpaceMapTruncateRel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Truncate the visibility map too if it exists. */</comment>
    <expr_stmt><expr><name>vm</name> <operator>=</operator> <call><name>smgrexists</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>VISIBILITYMAP_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vm</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>visibilitymap_truncate</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We WAL-log the truncation before actually truncating, which means
     * trouble if the truncation fails. If we then crash, the WAL replay
     * likely isn't going to succeed in the truncation either, and cause a
     * PANIC. It's tempting to put a critical section here, but that cure
     * would be worse than the disease. It would turn a usually harmless
     * failure to truncate, that might spell trouble at WAL replay, into a
     * certain PANIC.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Make an XLOG entry reporting the file truncation.
         */</comment>
        <decl_stmt><decl><type><name>XLogRecPtr</name></type>    <name>lsn</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>xl_smgr_truncate</name></type> <name>xlrec</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name>nblocks</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>rnode</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_node</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>SMGR_TRUNCATE_ALL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlrec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_SMGR_ID</name></expr></argument>,
                         <argument><expr><name>XLOG_SMGR_TRUNCATE</name> <operator>|</operator> <name>XLR_SPECIAL_REL_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Flush, because otherwise the truncation of the main relation might
         * hit the disk before the WAL record, and the truncation of the FSM
         * or visibility map. If we crashed during that window, we'd be left
         * with a truncated heap, but the FSM or visibility map would still
         * contain entries for the non-existent heap pages.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>fsm</name> <operator>||</operator> <name>vm</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Do the real work */</comment>
    <expr_stmt><expr><call><name>smgrtruncate</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_smgr</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *    smgrDoPendingDeletes() -- Take care of relation deletes at end of xact.
 *
 * This also runs when aborting a subxact; we want to clean up a failed
 * subxact immediately.
 *
 * Note: It's possible that we're being asked to remove a relation that has
 * no physical storage in any fork. In particular, it's possible that we're
 * cleaning up an old temporary relation for which RemovePgTempFiles has
 * already recovered the physical storage.
 */</comment>
<function><type><name>void</name></type>
<name>smgrDoPendingDeletes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>nestLevel</name> <init>= <expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nrels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>maxrels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMgrRelation</name> <modifier>*</modifier></type><name>srels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>&lt;</operator> <name>nestLevel</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* outer-level entries should not be processed yet */</comment>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* unlink list entry first, so we don't retry on failure */</comment>
            <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>pendingDeletes</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="block">/* do deletion if called for */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>isCommit</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>srel</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>srel</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>, <argument><expr><name><name>pending</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* allocate the initial array, or extend it, if needed */</comment>
                <if_stmt><if>if <condition>(<expr><name>maxrels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>maxrels</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>srels</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMgrRelation</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxrels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>maxrels</name> <operator>&lt;=</operator> <name>nrels</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>maxrels</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>srels</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>srels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMgrRelation</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxrels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>srels</name><index>[<expr><name>nrels</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>srel</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* must explicitly free the list entry */</comment>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* prev does not change */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>nrels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>smgrdounlinkall</name><argument_list>(<argument><expr><name>srels</name></expr></argument>, <argument><expr><name>nrels</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MLS_</name></cpp:ifdef>
			<comment type="block">/*
			 * clean up the rnode infomation in rel crypt hash table
			 */</comment>
			<expr_stmt><expr><call><name>remove_rel_crypt_hash_elem</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>srels</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>smgr_relcrypt</name><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>smgrclose</name><argument_list>(<argument><expr><name><name>srels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>srels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * smgrGetPendingDeletes() -- Get a list of non-temp relations to be deleted.
 *
 * The return value is the number of relations scheduled for termination.
 * *ptr is set to point to a freshly-palloc'd array of RelFileNodes.
 * If there are no relations to be deleted, *ptr is set to NULL.
 *
 * Only non-temporary relations are included in the returned list.  This is OK
 * because the list is used only in contexts where temporary relations don't
 * matter: we're either writing to the two-phase state file (and transactions
 * that have touched temp tables can't be prepared) or we're writing to xlog
 * (and all temporary files will be zapped if we restart anyway, so no need
 * for redo to do it also).
 *
 * Note that the list does not include anything scheduled for termination
 * by upper-level transactions.
 */</comment>
<function><type><name>int</name></type>
<name>smgrGetPendingDeletes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forCommit</name></decl></parameter>, <parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>nestLevel</name> <init>= <expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nrels</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>rptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nrels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>&gt;=</operator> <name>nestLevel</name> <operator>&amp;&amp;</operator> <name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>forCommit</name>
            <operator>&amp;&amp;</operator> <name><name>pending</name><operator>-&gt;</operator><name>backend</name></name> <operator>==</operator> <name>InvalidBackendId</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nrels</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>nrels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rptr</name> <operator>=</operator> <operator>(</operator><name>RelFileNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nrels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelFileNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>rptr</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>&gt;=</operator> <name>nestLevel</name> <operator>&amp;&amp;</operator> <name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>forCommit</name>
            <operator>&amp;&amp;</operator> <name><name>pending</name><operator>-&gt;</operator><name>backend</name></name> <operator>==</operator> <name>InvalidBackendId</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rptr</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>relnode</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rptr</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>nrels</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    PostPrepare_smgr -- Clean up after a successful PREPARE
 *
 * What we have to do here is throw away the in-memory state about pending
 * relation deletes.  It's all been recorded in the 2PC state file and
 * it's no longer smgr's job to worry about it.
 */</comment>
<function><type><name>void</name></type>
<name>PostPrepare_smgr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pendingDeletes</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <comment type="block">/* must explicitly free the list entry */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * AtSubCommit_smgr() --- Take care of subtransaction commit.
 *
 * Reassign all items in the pending-deletes list to the parent transaction.
 */</comment>
<function><type><name>void</name></type>
<name>AtSubCommit_smgr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>nestLevel</name> <init>= <expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PendingRelDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>&gt;=</operator> <name>nestLevel</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>nestLevel</name></name> <operator>=</operator> <name>nestLevel</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * AtSubAbort_smgr() --- Take care of subtransaction abort.
 *
 * Delete created relations and forget about deleted relations.
 * We can execute these operations immediately because we know this
 * subtransaction will not commit.
 */</comment>
<function><type><name>void</name></type>
<name>AtSubAbort_smgr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>smgrDoPendingDeletes</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>smgr_redo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>XLogRecPtr</name></type>    <name>lsn</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>EndRecPtr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Backup blocks are not used in smgr records */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecHasAnyBlockRefs</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_SMGR_CREATE</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xl_smgr_create</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_smgr_create</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>reln</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>reln</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>smgrcreate</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_SMGR_TRUNCATE</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xl_smgr_truncate</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_smgr_truncate</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>reln</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Relation</name></type>    <name>rel</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>reln</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Forcibly create relation if it doesn't exist (which suggests that
         * it was dropped somewhere later in the WAL sequence).  As in
         * XLogReadBufferForRedo, we prefer to recreate the rel and replay the
         * log as best we can until the drop is seen.
         */</comment>
        <expr_stmt><expr><call><name>smgrcreate</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Before we perform the truncation, update minimum recovery point to
         * cover this WAL record. Once the relation is truncated, there's no
         * going back. The buffer manager enforces the WAL-first rule for
         * normal updates to relation files, so that the minimum recovery
         * point is always updated before the corresponding change in the data
         * file is flushed to disk. We have to do the same manually here.
         *
         * Doing this before the truncation means that if the truncation fails
         * for some reason, you cannot start up the system even after restart,
         * until you fix the underlying situation so that the truncation will
         * succeed. Alternatively, we could update the minimum recovery point
         * after truncation, but that would leave a small window where the
         * WAL-first rule could be violated.
         */</comment>
        <expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SMGR_TRUNCATE_HEAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>smgrtruncate</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Also tell xlogutils.c about it */</comment>
            <expr_stmt><expr><call><name>XLogTruncateRelation</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Truncate FSM and VM too */</comment>
        <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>CreateFakeRelcacheEntry</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SMGR_TRUNCATE_FSM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>smgrexists</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>FSM_FORKNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>FreeSpaceMapTruncateRel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SMGR_TRUNCATE_VM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <call><name>smgrexists</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>VISIBILITYMAP_FORKNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>visibilitymap_truncate</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>FreeFakeRelcacheEntry</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
    <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_SMGR_DEALLOC</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xl_smgr_dealloc</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_smgr_dealloc</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>reln</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BlockNumber</name></type> <name>nblock</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>reln</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>smgrcreate</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nblock</name> <operator>=</operator> <call><name>smgrnblocks</name><argument_list>(<argument><expr><name>reln</name></expr></argument>,<argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>nblock</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name> <operator>*</operator> <name>PAGES_PER_EXTENTS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"blocks to dealloc belong to eid %d(%d/%d/%d) is not exist, "</literal>
                            <literal type="string">"because relation has only %d blocks"</literal></expr></argument>,
                        <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
                        <argument><expr><name>nblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//RequestCheckpoint(CHECKPOINT_IMMEDIATE | CHECKPOINT_FORCE | CHECKPOINT_WAIT);</comment>

        <if_stmt><if>if<condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SMGR_DEALLOC_REINIT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>xlog_reinit_extent_pages</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SMGR_DEALLOC_FREESTORAGE</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DISABLE_FALLOCATE</name></cpp:ifndef>
            <expr_stmt><expr><call><name>smgrdealloc</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name> <operator>*</operator> <name>PAGES_PER_EXTENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"database master dealloc storage space when vacuum sharding, "</literal>
                            <literal type="string">"but this standby does not support falloc syscall because of version of os or gcc."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>xlog_reinit_extent_pages</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>DropRelfileNodeExtentBuffers</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>smgrclose</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"smgr_redo: unknown op code %u"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
