<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/catalog/pgxc_key_values.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_key_values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/nodemgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/shardmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_shard_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>Oid</name></type> <name>IsKeyValuesDup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache</name><argument_list>(<argument><expr><name>SHARDKEYVALUE</name></expr></argument>,
                          <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition> 
    <block>{<block_content>
        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CreateKeyValues</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nValues</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keyvalues</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nodeGroup</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>coldGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>kvrel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>htup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>Natts_pgxc_key_value</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>Natts_pgxc_key_value</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NameData</name></type>    <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>     <name>relation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nValues</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>true</name> <operator>==</operator> <call><name>IsKeyValuesDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>keyvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument> , <argument><expr><literal type="string">"value:%s has been already created on db:%u, rel:%u"</literal></expr></argument>, <argument><expr><name><name>keyvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    
    <comment type="block">/* make and insert shard map record */</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Natts_pgxc_key_value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name>    <operator>=</operator>    <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name>    <operator>=</operator>    <operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>kvrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcKeyValueRelationId</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nValues</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>keyvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_key_valuew_db</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>            <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_key_values_rel</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>        <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_key_value_value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>        <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_key_value_group</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name>        <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>nodeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pgxc_key_value_cold_group</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name>    <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>coldGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>kvrel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>kvrel</name></expr></argument>, <argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>    

    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>kvrel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* tell other backend to refresh backend relcache of the rel */</comment>
    <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CacheInvalidateRelcache</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>,<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Check Key Value hot and cold group valid
 */</comment>
<function><type><name>void</name></type> <name>CheckKeyValueGroupValid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>hot</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>cold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create_table</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>      <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_key_value</name></type> <name>pgxc_key_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcKeyValueRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <while>while<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>pgxc_key_value</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_key_value</name><operator>)</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>cold</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>cold</name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>)</condition>
                <block>{<block_content>
                     <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cold group %u conflict exist table:%u key value:%s hot group %u"</literal></expr></argument>, <argument><expr><name>cold</name></expr></argument>, <argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>keyvalue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>create_table</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><name>cold</name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>)</condition>
                    <block>{<block_content>
                         <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cold group %u conflict exist key value cold group %u"</literal></expr></argument>, <argument><expr><name>cold</name></expr></argument>, <argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>    
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>        

        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>hot</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>hot</name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>)</condition>
                <block>{<block_content>
                     <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hot group %u conflict exist key value cold group %u"</literal></expr></argument>, <argument><expr><name>hot</name></expr></argument>, <argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>            
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check Key Value hot and cold group valid
 */</comment>
<function><type><name>void</name></type> <name>CheckPgxcGroupValid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablehot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>      <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_key_value</name></type> <name>pgxc_key_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>tablehot</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>rel</name>  <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcKeyValueRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name>  <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <while>while<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>pgxc_key_value</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_key_value</name><operator>)</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>tablehot</name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>)</condition>
            <block>{<block_content>
                 <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"table hot group %u conflict exist key value hot group %u"</literal></expr></argument>, <argument><expr><name>tablehot</name></expr></argument>, <argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>        
        
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GatherRelationKeyValueGroup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>hot</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>cold</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>coldgroup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>         <name>found</name>   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>         <name>exist</name>   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>hotNum</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>coldNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>          <name><name>hotGroup</name><index>[<expr><name>MAX_SHARDING_NODE_GROUP</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>          <name><name>coldGroup</name><index>[<expr><name>MAX_SHARDING_NODE_GROUP</name></expr>]</index></name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>     <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_key_value</name></type> <name>pgxc_key_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcKeyValueRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>pgxc_key_value</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_key_value</name><operator>)</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>relation</name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>reloid</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hotNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>hotGroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_SHARDING_NODE_GROUP</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hotGroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>hotNum</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coldNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>coldGroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_SHARDING_NODE_GROUP</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>coldGroup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pgxc_key_value</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>coldNum</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>,<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>exist</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>hot</name> <operator>=</operator> <name>hotNum</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>hot</name></expr>)</condition>
        <block>{<block_content>    
            <expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>hotNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><name>group</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>hotGroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>hotNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>cold</name> <operator>=</operator> <name>coldNum</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cold</name></expr>)</condition>
        <block>{<block_content>
            
            <expr_stmt><expr><operator>*</operator><name>coldgroup</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>coldNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><name>coldgroup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>coldGroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>coldNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>exist</name></expr>;</return>    
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GetRelationSecondGroup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>nGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>dup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>       <name>numGroup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>keyvalue</name></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_key_value</name></type> <name>pgxc_keyvalue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>         <name><name>groupvec</name><index>[<expr><name>MAX_SHARDING_NODE_GROUP</name></expr>]</index></name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>keyvalue</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>PgxcKeyValueRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name>Anum_pgxc_key_valuew_db</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name>Anum_pgxc_key_values_rel</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>keyvalue</name></expr></argument>,
                                <argument><expr><name>PgxcShardKeyGroupIndexID</name></expr></argument>,<argument><expr><name>true</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><literal type="number">2</literal></expr></argument>,
                                <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numGroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>pgxc_keyvalue</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_key_value</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* hot node group */</comment>
        <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numGroup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>groupvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pgxc_keyvalue</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>groupvec</name><index>[<expr><name>numGroup</name></expr>]</index></name> <operator>=</operator> <name><name>pgxc_keyvalue</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>numGroup</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* cold node group */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pgxc_keyvalue</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numGroup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>groupvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pgxc_keyvalue</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>groupvec</name><index>[<expr><name>numGroup</name></expr>]</index></name> <operator>=</operator> <name><name>pgxc_keyvalue</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>numGroup</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>keyvalue</name></expr></argument>,<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>numGroup</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>nGroup</name> <operator>=</operator> <name>numGroup</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>groups</name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>*</operator><name>groups</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>groupvec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>    
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>nGroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>BuildKeyValueCheckoverlapsStr</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>hotgroup</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>coldgroup</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>offset</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name>             <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>hotNumber</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>coldNumber</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>   <modifier>*</modifier></type><name>hotGroupMem</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>   <modifier>*</modifier></type><name>coldGroupMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>string</name>       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>nodename</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>hotgroup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>            
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_group_sharding_inited</name><argument_list>(<argument><expr><name>hotgroup</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"please initialize group:%u sharding map first"</literal></expr></argument>, <argument><expr><name>hotgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>hotNumber</name> <operator>=</operator> <call><name>get_pgxc_groupmembers</name><argument_list>(<argument><expr><name>hotgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hotGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>string</name>    <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><name>offset</name>    <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><literal type="string">"CHECK OVERLAPS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hotNumber</name></expr>;</condition> <incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>hotGroupMem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>hotNumber</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hotGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>coldgroup</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_group_sharding_inited</name><argument_list>(<argument><expr><name>coldgroup</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"please initialize group:%u sharding map first"</literal></expr></argument>, <argument><expr><name>coldgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <expr_stmt><expr><name>coldNumber</name> <operator>=</operator> <call><name>get_pgxc_groupmembers</name><argument_list>(<argument><expr><name>coldgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coldGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            <if_stmt><if>if <condition>(<expr><name>coldNumber</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coldNumber</name></expr>;</condition> <incr/>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>coldGroupMem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>coldNumber</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coldGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>                
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>BuildRelationCheckoverlapsStr</name><parameter_list>(<parameter><decl><type><name>DistributeBy</name> <modifier>*</modifier></type><name>distributeby</name></decl></parameter>,
                                       <parameter><decl><type><name>PGXCSubCluster</name> <modifier>*</modifier></type><name>subcluster</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>offset</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>hotNumber</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>coldNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>groupNum</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>     <init>= <expr><block>{<expr><name>InvalidOid</name></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="block">/* max 2 groups to distribute */</comment>
    <decl_stmt><decl><type><name>Oid</name>   <modifier>*</modifier></type><name>hotGroupMem</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name>   <modifier>*</modifier></type><name>coldGroupMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>string</name>       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>nodename</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>distributeby</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>DISTTYPE_SHARD</name> <operator>==</operator> <name><name>distributeby</name><operator>-&gt;</operator><name>disttype</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>groupNum</name> <operator>=</operator> <call><name>GetDistributeGroup</name><argument_list>(<argument><expr><name>subcluster</name></expr></argument>, <argument><expr><name><name>distributeby</name><operator>-&gt;</operator><name>disttype</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <if_stmt><if>if <condition>(<expr><name>groupNum</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_group_sharding_inited</name><argument_list>(<argument><expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"please initialize group:%u sharding map first"</literal></expr></argument>, <argument><expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>hotNumber</name> <operator>=</operator> <call><name>get_pgxc_groupmembers</name><argument_list>(<argument><expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hotGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>groupNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_group_sharding_inited</name><argument_list>(<argument><expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"please initialize group:%u sharding map first"</literal></expr></argument>, <argument><expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>coldNumber</name> <operator>=</operator> <call><name>get_pgxc_groupmembers</name><argument_list>(<argument><expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coldGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hotNumber</name> <operator>||</operator> <name>coldNumber</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>string</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><literal type="string">"CHECK OVERLAPS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hotNumber</name></expr>;</condition> <incr/>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>hotGroupMem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>hotNumber</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hotGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>coldNumber</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coldNumber</name></expr>;</condition> <incr/>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>get_pgxc_nodename</name><argument_list>(<argument><expr><name><name>coldGroupMem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
                        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>coldNumber</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>coldGroupMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>    

                <expr_stmt><expr><name>offset</name>  <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>string</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>                
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type> <name>GetKeyValuesGroup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>coldgroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type>         <name>group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pgxc_key_value</name></type> <name>keyvalue</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache</name><argument_list>(<argument><expr><name>SHARDKEYVALUE</name></expr></argument>,
                          <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition> 
    <block>{<block_content>
        <return>return <expr><name>InvalidOid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>keyvalue</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_key_value</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>group</name>    <operator>=</operator> <name><name>keyvalue</name><operator>-&gt;</operator><name>nodegroup</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>coldgroup</name> <operator>=</operator> <name><name>keyvalue</name><operator>-&gt;</operator><name>coldnodegroup</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsKeyValues</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>SearchSysCacheExists</name><argument_list>(<argument><expr><name>SHARDKEYVALUE</name></expr></argument>,
                                  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, 
                                  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>    
</block_content>}</block></function>

</unit>
