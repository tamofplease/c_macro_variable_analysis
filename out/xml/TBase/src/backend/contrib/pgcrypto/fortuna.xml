<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/contrib/pgcrypto/fortuna.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*
 * fortuna.c
 *        Fortuna-like PRNG.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/fortuna.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/pgcrypto/px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/pgcrypto/rijndael.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/pgcrypto/sha2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/pgcrypto/fortuna.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Why Fortuna-like: There does not seem to be any definitive reference
 * on Fortuna in the net.  Instead this implementation is based on
 * following references:
 *
 * http://en.wikipedia.org/wiki/Fortuna_(PRNG)
 *     - Wikipedia article
 * http://jlcooke.ca/random/
 *     - Jean-Luc Cooke Fortuna-based /dev/random driver for Linux.
 */</comment>

<comment type="block">/*
 * There is some confusion about whether and how to carry forward
 * the state of the pools.  Seems like original Fortuna does not
 * do it, resetting hash after each request.  I guess expecting
 * feeding to happen more often that requesting.   This is absolutely
 * unsuitable for pgcrypto, as nothing asynchronous happens here.
 *
 * J.L. Cooke fixed this by feeding previous hash to new re-initialized
 * hash context.
 *
 * Fortuna predecessor Yarrow requires ability to query intermediate
 * 'final result' from hash, without affecting it.
 *
 * This implementation uses the Yarrow method - asking intermediate
 * results, but continuing with old state.
 */</comment>


<comment type="block">/*
 * Algorithm parameters
 */</comment>

<comment type="block">/*
 * How many pools.
 *
 * Original Fortuna uses 32 pools, that means 32'th pool is
 * used not earlier than in 13th year.  This is a waste in
 * pgcrypto, as we have very low-frequancy seeding.  Here
 * is preferable to have all entropy usable in reasonable time.
 *
 * With 23 pools, 23th pool is used after 9 days which seems
 * more sane.
 *
 * In our case the minimal cycle time would be bit longer
 * than the system-randomness feeding frequency.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_POOLS</name></cpp:macro>        <cpp:value>23</cpp:value></cpp:define>

<comment type="block">/* in microseconds */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESEED_INTERVAL</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>    <comment type="block">/* 0.1 sec */</comment>

<comment type="block">/* for one big request, reseed after this many bytes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESEED_BYTES</name></cpp:macro>    <cpp:value>(1024*1024)</cpp:value></cpp:define>

<comment type="block">/*
 * Skip reseed if pool 0 has less than this many
 * bytes added since last reseed.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL0_FILL</name></cpp:macro>        <cpp:value>(256/8)</cpp:value></cpp:define>

<comment type="block">/*
 * Algorithm constants
 */</comment>

<comment type="block">/* Both cipher key size and hash result size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK</name></cpp:macro>            <cpp:value>32</cpp:value></cpp:define>

<comment type="block">/* cipher block size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPH_BLOCK</name></cpp:macro>        <cpp:value>16</cpp:value></cpp:define>

<comment type="block">/* for internal wrappers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD_CTX</name></cpp:macro>            <cpp:value>SHA256_CTX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPH_CTX</name></cpp:macro>        <cpp:value>rijndael_ctx</cpp:value></cpp:define>

<struct>struct <name>fortuna_state</name>
<block>{
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>counter</name><index>[<expr><name>CIPH_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>result</name><index>[<expr><name>CIPH_BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>key</name><index>[<expr><name>BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MD_CTX</name></type>        <name><name>pool</name><index>[<expr><name>NUM_POOLS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CIPH_CTX</name></type>    <name>ciph</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>reseed_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>last_reseed_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>pool0_bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>rnd_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>tricks_done</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>fortuna_state</name></name></type> <name>FState</name>;</typedef>


<comment type="block">/*
 * Use our own wrappers here.
 * - Need to get intermediate result from digest, without affecting it.
 * - Need re-set key on a cipher context.
 * - Algorithms are guaranteed to exist.
 * - No memory allocations.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ciph_init</name><parameter_list>(<parameter><decl><type><name>CIPH_CTX</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>rijndael_set_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ciph_encrypt</name><parameter_list>(<parameter><decl><type><name>CIPH_CTX</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>rijndael_encrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>md_init</name><parameter_list>(<parameter><decl><type><name>MD_CTX</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SHA256_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>md_update</name><parameter_list>(<parameter><decl><type><name>MD_CTX</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SHA256_Update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>md_result</name><parameter_list>(<parameter><decl><type><name>MD_CTX</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SHA256_CTX</name></type>    <name>tmp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA256_Final</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * initialize state
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_state</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_POOLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>md_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Endianess does not matter.
 * It just needs to change without repeating.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>inc_counter</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32</name>       <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name><name>st</name><operator>-&gt;</operator><name>counter</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is called 'cipher in counter mode'.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>encrypt_counter</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ciph_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>inc_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * The time between reseed must be at least RESEED_INTERVAL
 * microseconds.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>enough_time_passed</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>last_reseed_time</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* check how much time has passed */</comment>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>last</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>last</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">1000000</literal> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>last</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <name>RESEED_INTERVAL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>last</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <name>RESEED_INTERVAL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* reseed will happen, update last_reseed_time */</comment>
    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * generate new key from all the pools
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reseed</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MD_CTX</name></type>        <name>key_md</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>buf</name><index>[<expr><name>BLOCK</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* set pool as empty */</comment>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pool0_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Both #0 and #1 reseed would use only pool 0. Just skip #0 then.
     */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>reseed_count</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * The goal: use k-th pool only 1/(2^k) of the time.
     */</comment>
    <expr_stmt><expr><call><name>md_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>NUM_POOLS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>md_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>md_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* add old key into mix too */</comment>
    <expr_stmt><expr><call><name>md_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_md</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* now we have new key */</comment>
    <expr_stmt><expr><call><name>md_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_md</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* use new key */</comment>
    <expr_stmt><expr><call><name>ciph_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_md</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Pick a random pool.  This uses key bytes as random source.
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>get_rand_pool</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>rnd</name></decl>;</decl_stmt>

    <comment type="block">/*
     * This slightly prefers lower pools - that is OK.
     */</comment>
    <expr_stmt><expr><name>rnd</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>key</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>rnd_pos</name></name></expr>]</index></name> <operator>%</operator> <name>NUM_POOLS</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rnd_pos</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>rnd_pos</name></name> <operator>&gt;=</operator> <name>BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rnd_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>rnd</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * update pools
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_entropy</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>hash</name><index>[<expr><name>BLOCK</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MD_CTX</name></type>        <name>md</name></decl>;</decl_stmt>

    <comment type="block">/* hash given data */</comment>
    <expr_stmt><expr><call><name>md_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>md_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>md_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Make sure the pool 0 is initialized, then update randomly.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>reseed_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_rand_pool</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>md_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pool0_bytes</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Just take 2 next blocks as new key
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>rekey</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <name>CIPH_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ciph_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Hide public constants. (counter, pools &gt; 0)
 *
 * This can also be viewed as spreading the startup
 * entropy over all of the components.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>startup_tricks</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>buf</name><index>[<expr><name>BLOCK</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Use next block as counter. */</comment>
    <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now shuffle pools, excluding #0 */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_POOLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>CIPH_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>md_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Hide the key. */</comment>
    <expr_stmt><expr><call><name>rekey</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* This can be done only once. */</comment>
    <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>tricks_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extract_data</name><parameter_list>(<parameter><decl><type><name>FState</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>block_nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Should we reseed? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>pool0_bytes</name></name> <operator>&gt;=</operator> <name>POOL0_FILL</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>reseed_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>enough_time_passed</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>reseed</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Do some randomization on first call */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>tricks_done</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>startup_tricks</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* produce bytes */</comment>
        <expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* copy result */</comment>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>CIPH_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>CIPH_BLOCK</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

        <comment type="block">/* must not give out too many bytes with one key */</comment>
        <expr_stmt><expr><name>block_nr</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>block_nr</name> <operator>&gt;</operator> <operator>(</operator><name>RESEED_BYTES</name> <operator>/</operator> <name>CIPH_BLOCK</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>rekey</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>block_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Set new key for next request. */</comment>
    <expr_stmt><expr><call><name>rekey</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * public interface
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>FState</name></type> <name>main_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>init_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>fortuna_add_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_done</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>add_entropy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_state</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fortuna_get_bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_done</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>init_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>extract_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_state</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
