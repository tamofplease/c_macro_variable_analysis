<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/contrib/pgcrypto/openssl.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*
 * openssl.c
 *        Wrapper for OpenSSL library.
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/openssl.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/pgcrypto/px.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/blowfish.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/cast.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/des.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Max lengths we might want to handle.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEY</name></cpp:macro>        <cpp:value>(512/8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IV</name></cpp:macro>        <cpp:value>(128/8)</cpp:value></cpp:define>

<comment type="block">/*
 * Compatibility with OpenSSL 0.9.6
 *
 * It needs AES and newer DES and digest API.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00907000L</literal></expr></cpp:if>

<comment type="block">/*
 * Nothing needed for OpenSSL 0.9.7+
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/aes.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* old OPENSSL */</comment>

<comment type="block">/*
 * Emulate OpenSSL AES.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rijndael.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_ENCRYPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_DECRYPT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_KEY</name></cpp:macro>        <cpp:value>rijndael_ctx</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>AES_set_encrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kbits</name></decl></parameter>, <parameter><decl><type><name>AES_KEY</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>aes_set_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kbits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>AES_set_decrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kbits</name></decl></parameter>, <parameter><decl><type><name>AES_KEY</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>aes_set_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kbits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AES_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AES_KEY</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>aes_ecb_encrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>aes_ecb_decrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AES_cbc_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>AES_KEY</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>aes_cbc_encrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>aes_cbc_decrypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Emulate DES_* API
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_key_schedule</name></cpp:macro> <cpp:value>des_key_schedule</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_cblock</name></cpp:macro> <cpp:value>des_cblock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_set_key</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>ks</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>des_set_key((k), *(ks))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ecb_encrypt</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>des_ecb_encrypt((i), (o), *(k), (e))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ncbc_encrypt</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>iv</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>des_ncbc_encrypt((i), (o), (l), *(k), (iv), (e))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ecb3_encrypt</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>k1</name></type></parameter>, <parameter><type><name>k2</name></type></parameter>, <parameter><type><name>k3</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>des_ecb3_encrypt((des_cblock *)(i), (des_cblock *)(o), \
                *(k1), *(k2), *(k3), (e))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ede3_cbc_encrypt</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>k1</name></type></parameter>, <parameter><type><name>k2</name></type></parameter>, <parameter><type><name>k3</name></type></parameter>, <parameter><type><name>iv</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>des_ede3_cbc_encrypt((i), (o), \
                (l), *(k1), *(k2), *(k3), (iv), (e))</cpp:value></cpp:define>

<comment type="block">/*
 * Emulate newer digest API.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>EVP_MD_CTX_init</name><parameter_list>(<parameter><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>EVP_MD_CTX_cleanup</name><parameter_list>(<parameter><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>EVP_DigestInit_ex</name><parameter_list>(<parameter><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EVP_DigestInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>EVP_DigestFinal_ex</name><parameter_list>(<parameter><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EVP_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* old OpenSSL */</comment>

<comment type="block">/*
 * Provide SHA2 for older OpenSSL &lt; 0.9.8
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x00908000L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha2.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal-sha2.c"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_f</name>) <parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compat_find_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>init_f</name></type>        <name>init</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha224"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>init_sha224</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>init_sha256</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha384"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>init_sha384</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>init_sha512</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>PXE_NO_HASH</name></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>crypt_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PX_MD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>compat_find_digest</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(PXE_NO_HASH)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Hashes
 */</comment>

<comment type="block">/*
 * To make sure we don't leak OpenSSL handles on abort, we keep OSSLDigest
 * objects in a linked list, allocated in TopMemoryContext. We use the
 * ResourceOwner mechanism to free them on abort.
 */</comment>
<typedef>typedef <type><struct>struct <name>OSSLDigest</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>algo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ResourceOwner</name></type> <name>owner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>OSSLDigest</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>OSSLDigest</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>OSSLDigest</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSSLDigest</name> <modifier>*</modifier></type><name>open_digests</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>resowner_callback_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_openssldigest</name><parameter_list>(<parameter><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>open_digests</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close any open OpenSSL handles on abort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_free_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>next</name> <operator>=</operator> <name>open_digests</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>next</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>CurrentResourceOwner</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"pgcrypto digest reference leak: digest %p still referenced"</literal></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>free_openssldigest</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>digest_result_size</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>EVP_MD_CTX_size</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>digest_block_size</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>EVP_MD_CTX_block_size</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>free_openssldigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>px_openssl_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* PUBLIC functions */</comment>

<function><type><name>int</name></type>
<name>px_find_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PX_MD</name>       <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>px_openssl_initialized</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>px_openssl_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>resowner_callback_registered</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>digest_free_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>resowner_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>md</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>compat_find_digest</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Create an OSSLDigest object, an OpenSSL MD object, and a PX_MD object.
     * The order is crucial, to make sure we don't leak anything on
     * out-of-memory or other error.
     */</comment>
    <expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>digest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>open_digests</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>open_digests</name> <operator>=</operator> <name>digest</name></expr>;</expr_stmt>

    <comment type="block">/* The PX_MD object is allocated in the current memory context. */</comment>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>crypt_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>digest_result_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>digest_block_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>digest_reset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>digest_update</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>digest_finish</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>digest_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Ciphers
 *
 * The problem with OpenSSL is that the EVP* family
 * of functions does not allow enough flexibility
 * and forces some of the parameters (keylen,
 * padding) to SSL defaults.
 *
 * So need to manage ciphers ourselves.
 */</comment>

<struct>struct <name>ossl_cipher</name>
<block>{
    <function_decl><type><name>int</name></type>            (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>            (<modifier>*</modifier><name>encrypt</name>) <parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>            (<modifier>*</modifier><name>decrypt</name>) <parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>int</name></type>            <name>block_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>max_key_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>stream_cipher</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
    <union>union
    <block>{
        <struct>struct
        <block>{
            <decl_stmt><decl><type><name>BF_KEY</name></type>        <name>key</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>            <name>num</name></decl>;</decl_stmt>
        }</block>            <decl><name>bf</name></decl>;</struct>
        <struct>struct
        <block>{
            <decl_stmt><decl><type><name>DES_key_schedule</name></type> <name>key_schedule</name></decl>;</decl_stmt>
        }</block>            <decl><name>des</name></decl>;</struct>
        <struct>struct
        <block>{
            <decl_stmt><decl><type><name>DES_key_schedule</name></type> <name>k1</name></decl>,
                        <name>k2</name>,
                        <name>k3</name>;</decl_stmt>
        }</block>            <decl><name>des3</name></decl>;</struct>
        <decl_stmt><decl><type><name>CAST_KEY</name></type>    <name>cast_key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AES_KEY</name></type>        <name>aes_key</name></decl>;</decl_stmt>
    }</block>            <decl><name>u</name></decl>;</union>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>key</name><index>[<expr><name>MAX_KEY</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name><name>iv</name><index>[<expr><name>MAX_IV</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>klen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>init</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name> <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
}</block></struct></type> <name>ossldata</name>;</typedef>

<comment type="block">/* generic */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_block_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>ossldata</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_key_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>ossldata</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>max_key_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_iv_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>ivlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>ossldata</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ivlen</name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
    <return>return <expr><name>ivlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_ossl_free</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>ossldata</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>crypt_memset</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>od</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>crypt_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Blowfish */</comment>

<comment type="block">/*
 * Check if strong crypto is supported. Some openssl installations
 * support only short keys and unfortunately BF_set_key does not return any
 * error value. This function tests if is possible to use strong key.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_check_supported_key_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>key</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x69</literal></expr>,
        <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>,
        <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,
        <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
        <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
        <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>res</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x53</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>BF_KEY</name></type>        <name>bf_key</name></decl>;</decl_stmt>

    <comment type="block">/* encrypt with 448bits key and verify output */</comment>
    <expr_stmt><expr><call><name>BF_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bf_key</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BF_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bf_key</name></expr></argument>, <argument><expr><name>BF_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>                <comment type="block">/* Output does not match -&gt; strong cipher is
                                 * not supported */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>bf_is_strong</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Test if key len is supported. BF_set_key silently cut large keys and it
     * could be a problem when user transfer crypted data from one server to
     * another.
     */</comment>

    <if_stmt><if>if <condition>(<expr><name>bf_is_strong</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>bf_is_strong</name> <operator>=</operator> <call><name>bf_check_supported_key_len</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf_is_strong</name> <operator>&amp;&amp;</operator> <name>klen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Key len is supported. We can use it. */</comment>
    <expr_stmt><expr><call><name>BF_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>BF_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BF_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BF_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>BF_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_ecb_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>,
                <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BF_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>BF_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BF_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>BF_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BF_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>BF_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_cfb64_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BF_cfb64_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>BF_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_cfb64_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BF_cfb64_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>bf</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>BF_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* DES */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DES_cblock</name></type>    <name>xkey</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>klen</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>klen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DES_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des</name><operator>.</operator><name>key_schedule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                        <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des</name><operator>.</operator><name>key_schedule</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_ecb_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DES_ecb_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                        <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des</name><operator>.</operator><name>key_schedule</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DES_ncbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des</name><operator>.</operator><name>key_schedule</name></name></expr></argument>,
                     <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DES_ncbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des</name><operator>.</operator><name>key_schedule</name></name></expr></argument>,
                     <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* DES3 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DES_cblock</name></type>    <name>xkey1</name></decl>,
                <decl><type ref="prev"/><name>xkey2</name></decl>,
                <decl><type ref="prev"/><name>xkey3</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey1</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>klen</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>klen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey2</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>klen</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><operator>(</operator><name>klen</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey3</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>klen</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><operator>(</operator><name>klen</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>DES_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DES_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DES_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xkey3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xkey3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                      <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DES_ecb3_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k3</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_ecb_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                      <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <name>bs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DES_ecb3_encrypt</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bs</name><operator>)</operator></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                      <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DES_ede3_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k3</name></name></expr></argument>,
                         <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                      <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DES_ede3_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>des3</name><operator>.</operator><name>k3</name></name></expr></argument>,
                         <argument><expr><operator>(</operator><name>DES_cblock</name> <operator>*</operator><operator>)</operator> <name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* CAST5 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CAST_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cast_key</name></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>bs</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>data</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>data</name> <operator>+=</operator> <name>bs</name></expr><operator>,</operator> <expr><name>res</name> <operator>+=</operator> <name>bs</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CAST_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cast_key</name></name></expr></argument>, <argument><expr><name>CAST_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_ecb_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>bs</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>data</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>data</name> <operator>+=</operator> <name>bs</name></expr><operator>,</operator> <expr><name>res</name> <operator>+=</operator> <name>bs</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CAST_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cast_key</name></name></expr></argument>, <argument><expr><name>CAST_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CAST_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cast_key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>CAST_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CAST_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cast_key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>CAST_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* AES */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_key_init</name><parameter_list>(<parameter><decl><type><name>ossldata</name> <modifier>*</modifier></type><name>od</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Strong key support could be missing on some openssl installations. We
     * must check return value from set key function.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AES_ENCRYPT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AES_set_encrypt_key</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AES_set_decrypt_key</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_ecb_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>bs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ossl_aes_key_init</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><name>AES_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>data</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>data</name> <operator>+=</operator> <name>bs</name></expr><operator>,</operator> <expr><name>res</name> <operator>+=</operator> <name>bs</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AES_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>, <argument><expr><name>AES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_ecb_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type>    <name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>bs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ossl_aes_key_init</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><name>AES_DECRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>data</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>data</name> <operator>+=</operator> <name>bs</name></expr><operator>,</operator> <expr><name>res</name> <operator>+=</operator> <name>bs</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>AES_ecb_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>, <argument><expr><name>AES_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ossl_aes_key_init</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><name>AES_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>AES_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>AES_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
                     <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ossl_aes_key_init</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><name>AES_DECRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>AES_cbc_encrypt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>od</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aes_key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>AES_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * aliases
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PX_Alias</name></type> <name><name>ossl_aliases</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blowfish"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blowfish-cbc"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blowfish-ecb"</literal></expr>, <expr><literal type="string">"bf-ecb"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"blowfish-cfb"</literal></expr>, <expr><literal type="string">"bf-cfb"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"des"</literal></expr>, <expr><literal type="string">"des-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"3des"</literal></expr>, <expr><literal type="string">"des3-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"3des-ecb"</literal></expr>, <expr><literal type="string">"des3-ecb"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"3des-cbc"</literal></expr>, <expr><literal type="string">"des3-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cast5"</literal></expr>, <expr><literal type="string">"cast5-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rijndael"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rijndael-cbc"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"rijndael-ecb"</literal></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_cbc</name> <init>= <expr><block>{
    <expr><name>bf_init</name></expr>, <expr><name>bf_cbc_encrypt</name></expr>, <expr><name>bf_cbc_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_ecb</name> <init>= <expr><block>{
    <expr><name>bf_init</name></expr>, <expr><name>bf_ecb_encrypt</name></expr>, <expr><name>bf_ecb_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_cfb</name> <init>= <expr><block>{
    <expr><name>bf_init</name></expr>, <expr><name>bf_cfb64_encrypt</name></expr>, <expr><name>bf_cfb64_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des_ecb</name> <init>= <expr><block>{
    <expr><name>ossl_des_init</name></expr>, <expr><name>ossl_des_ecb_encrypt</name></expr>, <expr><name>ossl_des_ecb_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des_cbc</name> <init>= <expr><block>{
    <expr><name>ossl_des_init</name></expr>, <expr><name>ossl_des_cbc_encrypt</name></expr>, <expr><name>ossl_des_cbc_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des3_ecb</name> <init>= <expr><block>{
    <expr><name>ossl_des3_init</name></expr>, <expr><name>ossl_des3_ecb_encrypt</name></expr>, <expr><name>ossl_des3_ecb_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des3_cbc</name> <init>= <expr><block>{
    <expr><name>ossl_des3_init</name></expr>, <expr><name>ossl_des3_cbc_encrypt</name></expr>, <expr><name>ossl_des3_cbc_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_cast_ecb</name> <init>= <expr><block>{
    <expr><name>ossl_cast_init</name></expr>, <expr><name>ossl_cast_ecb_encrypt</name></expr>, <expr><name>ossl_cast_ecb_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_cast_cbc</name> <init>= <expr><block>{
    <expr><name>ossl_cast_init</name></expr>, <expr><name>ossl_cast_cbc_encrypt</name></expr>, <expr><name>ossl_cast_cbc_decrypt</name></expr>,
    <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_aes_ecb</name> <init>= <expr><block>{
    <expr><name>ossl_aes_init</name></expr>, <expr><name>ossl_aes_ecb_encrypt</name></expr>, <expr><name>ossl_aes_ecb_decrypt</name></expr>,
    <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_aes_cbc</name> <init>= <expr><block>{
    <expr><name>ossl_aes_init</name></expr>, <expr><name>ossl_aes_cbc_encrypt</name></expr>, <expr><name>ossl_aes_cbc_decrypt</name></expr>,
    <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Special handlers
 */</comment>
<struct>struct <name>ossl_cipher_lookup</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name> <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher_lookup</name></name></type> <name><name>ossl_cipher_types</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"bf-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_cbc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bf-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_ecb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"bf-cfb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_cfb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"des-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des_ecb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"des-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des_cbc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"des3-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des3_ecb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"des3-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des3_cbc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cast5-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_cast_ecb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cast5-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_cast_cbc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_aes_ecb</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"aes-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_aes_cbc</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* PUBLIC functions */</comment>

<function><type><name>int</name></type>
<name>px_find_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher_lookup</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ossldata</name>   <modifier>*</modifier></type><name>od</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>px_resolve_alias</name><argument_list>(<argument><expr><name>ossl_aliases</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ossl_cipher_types</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>PXE_NO_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>od</name> <operator>=</operator> <call><name>crypt_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>od</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>od</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>od</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>ciph</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>crypt_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>gen_ossl_block_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_size</name></name> <operator>=</operator> <name>gen_ossl_key_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>gen_ossl_iv_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>gen_ossl_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>init</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>encrypt</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>decrypt</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>openssl_random_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * OpenSSL random should re-feeded occasionally. From /dev/urandom
 * preferably.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_openssl_rand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>RAND_get_rand_method</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RAND_OPENSSL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>RAND_set_rand_method</name><argument_list>(<argument><expr><call><name>RAND_OpenSSL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>RAND_set_rand_method</name><argument_list>(<argument><expr><call><name>RAND_SSLeay</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>openssl_random_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>px_get_random_bytes</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>openssl_random_init</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>init_openssl_rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>RAND_bytes</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>PXE_OSSL_RAND_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>px_add_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * estimate 0 bits
     */</comment>
    <expr_stmt><expr><call><name>RAND_add</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
