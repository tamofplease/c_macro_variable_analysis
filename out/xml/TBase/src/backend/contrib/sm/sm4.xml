<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/contrib/sm/sm4.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*
 * SM4 Encryption alogrithm (SMS4 algorithm)
 * GM/T 0002-2012 Chinese National Standard ref:http://www.oscca.gov.cn/ 
 * thanks to Xyssl
 * thnaks and refers to http://hi.baidu.com/numax/blog/item/80addfefddfb93e4cf1b3e61.html
 * author:goldboar
 * email:goldboar@163.com
 * 2012-4-20
 */</comment>

<comment type="line">// Test vector 1</comment>
<comment type="line">// plain: 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10</comment>
<comment type="line">// key:   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10</comment>
<comment type="line">//        round key and temp computing result:</comment>
<comment type="line">//        rk[ 0] = f12186f9 X[ 0] = 27fad345</comment>
<comment type="line">//            rk[ 1] = 41662b61 X[ 1] = a18b4cb2</comment>
<comment type="line">//            rk[ 2] = 5a6ab19a X[ 2] = 11c1e22a</comment>
<comment type="line">//            rk[ 3] = 7ba92077 X[ 3] = cc13e2ee</comment>
<comment type="line">//            rk[ 4] = 367360f4 X[ 4] = f87c5bd5</comment>
<comment type="line">//            rk[ 5] = 776a0c61 X[ 5] = 33220757</comment>
<comment type="line">//            rk[ 6] = b6bb89b3 X[ 6] = 77f4c297</comment>
<comment type="line">//            rk[ 7] = 24763151 X[ 7] = 7a96f2eb</comment>
<comment type="line">//            rk[ 8] = a520307c X[ 8] = 27dac07f</comment>
<comment type="line">//            rk[ 9] = b7584dbd X[ 9] = 42dd0f19</comment>
<comment type="line">//            rk[10] = c30753ed X[10] = b8a5da02</comment>
<comment type="line">//            rk[11] = 7ee55b57 X[11] = 907127fa</comment>
<comment type="line">//            rk[12] = 6988608c X[12] = 8b952b83</comment>
<comment type="line">//            rk[13] = 30d895b7 X[13] = d42b7c59</comment>
<comment type="line">//            rk[14] = 44ba14af X[14] = 2ffc5831</comment>
<comment type="line">//            rk[15] = 104495a1 X[15] = f69e6888</comment>
<comment type="line">//            rk[16] = d120b428 X[16] = af2432c4</comment>
<comment type="line">//            rk[17] = 73b55fa3 X[17] = ed1ec85e</comment>
<comment type="line">//            rk[18] = cc874966 X[18] = 55a3ba22</comment>
<comment type="line">//            rk[19] = 92244439 X[19] = 124b18aa</comment>
<comment type="line">//            rk[20] = e89e641f X[20] = 6ae7725f</comment>
<comment type="line">//            rk[21] = 98ca015a X[21] = f4cba1f9</comment>
<comment type="line">//            rk[22] = c7159060 X[22] = 1dcdfa10</comment>
<comment type="line">//            rk[23] = 99e1fd2e X[23] = 2ff60603</comment>
<comment type="line">//            rk[24] = b79bd80c X[24] = eff24fdc</comment>
<comment type="line">//            rk[25] = 1d2115b0 X[25] = 6fe46b75</comment>
<comment type="line">//            rk[26] = 0e228aeb X[26] = 893450ad</comment>
<comment type="line">//            rk[27] = f1780c81 X[27] = 7b938f4c</comment>
<comment type="line">//            rk[28] = 428d3654 X[28] = 536e4246</comment>
<comment type="line">//            rk[29] = 62293496 X[29] = 86b3e94f</comment>
<comment type="line">//            rk[30] = 01cf72e5 X[30] = d206965e</comment>
<comment type="line">//            rk[31] = 9124a012 X[31] = 681edf34</comment>
<comment type="line">// cypher: 68 1e df 34 d2 06 96 5e 86 b3 e9 4f 53 6e 42 46</comment>
<comment type="line">//         </comment>
<comment type="line">// test vector 2</comment>
<comment type="line">// the same key and plain 1000000 times coumpting </comment>
<comment type="line">// plain:  01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10</comment>
<comment type="line">// key:    01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10</comment>
<comment type="line">// cypher: 59 52 98 c7 c6 fd 27 1f 04 02 f8 04 c3 3d 3f 66</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"contrib/sm/sm4.h"</cpp:file></cpp:include>

<comment type="line">//#include &lt;string.h&gt;</comment>
<comment type="line">//#include &lt;stdio.h&gt;</comment>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_ULONG_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ULONG_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                             \
<cpp:value>{                                                       \
    (n) = ( (unsigned long) (b)[(i)    ] &lt;&lt; 24 )        \
        | ( (unsigned long) (b)[(i) + 1] &lt;&lt; 16 )        \
        | ( (unsigned long) (b)[(i) + 2] &lt;&lt;  8 )        \
        | ( (unsigned long) (b)[(i) + 3]       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_ULONG_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_ULONG_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                             \
<cpp:value>{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *rotate shift left marco definition
 *
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>SHL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xFFFFFFFF) &lt;&lt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SHL((x),n) | ((x) &gt;&gt; (32 - n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ unsigned long t = a; a = b; b = t; t = 0; }</cpp:value></cpp:define>

<comment type="block">/*
 * Expanded SM4 S-boxes
 * Sbox table: 8bits input convert to 8 bits output
 */</comment>
 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>SboxTable</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= 
<expr><block>{
<expr><block>{<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0xfe</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xe1</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xc2</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0xfb</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,<expr><literal type="number">0x05</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0xbe</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xc3</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x99</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x9c</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xef</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x0b</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xed</literal></expr>,<expr><literal type="number">0xcf</literal></expr>,<expr><literal type="number">0xac</literal></expr>,<expr><literal type="number">0x62</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe4</literal></expr>,<expr><literal type="number">0xb3</literal></expr>,<expr><literal type="number">0x1c</literal></expr>,<expr><literal type="number">0xa9</literal></expr>,<expr><literal type="number">0xc9</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0xe8</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0xdf</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0xfa</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x8f</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0xa6</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xa7</literal></expr>,<expr><literal type="number">0xfc</literal></expr>,<expr><literal type="number">0xf3</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xe6</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0xa8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x6b</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0xda</literal></expr>,<expr><literal type="number">0x8b</literal></expr>,<expr><literal type="number">0xf8</literal></expr>,<expr><literal type="number">0xeb</literal></expr>,<expr><literal type="number">0x0f</literal></expr>,<expr><literal type="number">0x4b</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x9d</literal></expr>,<expr><literal type="number">0x35</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1e</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x5e</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0xd1</literal></expr>,<expr><literal type="number">0xa2</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x7c</literal></expr>,<expr><literal type="number">0x3b</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x87</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x9f</literal></expr>,<expr><literal type="number">0xd3</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x4c</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xe7</literal></expr>,<expr><literal type="number">0xa0</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0x9e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0x8a</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0xce</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xa1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0xae</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,<expr><literal type="number">0xa4</literal></expr>,<expr><literal type="number">0x9b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xad</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0xf5</literal></expr>,<expr><literal type="number">0x8c</literal></expr>,<expr><literal type="number">0xb1</literal></expr>,<expr><literal type="number">0xe3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x1d</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0xe2</literal></expr>,<expr><literal type="number">0x2e</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0xca</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0xab</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x4e</literal></expr>,<expr><literal type="number">0x6f</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xd5</literal></expr>,<expr><literal type="number">0xdb</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0xde</literal></expr>,<expr><literal type="number">0xfd</literal></expr>,<expr><literal type="number">0x8e</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x6d</literal></expr>,<expr><literal type="number">0x6c</literal></expr>,<expr><literal type="number">0x5b</literal></expr>,<expr><literal type="number">0x51</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x8d</literal></expr>,<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0xaf</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xbb</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,<expr><literal type="number">0xbc</literal></expr>,<expr><literal type="number">0x7f</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xd9</literal></expr>,<expr><literal type="number">0x5c</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x1f</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0xd8</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0xc1</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0xa5</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x7b</literal></expr>,<expr><literal type="number">0xbd</literal></expr>,<expr><literal type="number">0x2d</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xd0</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,<expr><literal type="number">0xe5</literal></expr>,<expr><literal type="number">0xb4</literal></expr>,<expr><literal type="number">0xb0</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x4a</literal></expr>,<expr><literal type="number">0x0c</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x7e</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,<expr><literal type="number">0xf1</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0x6e</literal></expr>,<expr><literal type="number">0xc6</literal></expr>,<expr><literal type="number">0x84</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0x7d</literal></expr>,<expr><literal type="number">0xec</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,<expr><literal type="number">0xdc</literal></expr>,<expr><literal type="number">0x4d</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0x5f</literal></expr>,<expr><literal type="number">0x3e</literal></expr>,<expr><literal type="number">0xd7</literal></expr>,<expr><literal type="number">0xcb</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x48</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* System parameter */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>FK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xa3b1bac6</literal></expr>,<expr><literal type="number">0x56aa3350</literal></expr>,<expr><literal type="number">0x677d9197</literal></expr>,<expr><literal type="number">0xb27022dc</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* fixed parameter */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>CK</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0x00070e15</literal></expr>,<expr><literal type="number">0x1c232a31</literal></expr>,<expr><literal type="number">0x383f464d</literal></expr>,<expr><literal type="number">0x545b6269</literal></expr>,
<expr><literal type="number">0x70777e85</literal></expr>,<expr><literal type="number">0x8c939aa1</literal></expr>,<expr><literal type="number">0xa8afb6bd</literal></expr>,<expr><literal type="number">0xc4cbd2d9</literal></expr>,
<expr><literal type="number">0xe0e7eef5</literal></expr>,<expr><literal type="number">0xfc030a11</literal></expr>,<expr><literal type="number">0x181f262d</literal></expr>,<expr><literal type="number">0x343b4249</literal></expr>,
<expr><literal type="number">0x50575e65</literal></expr>,<expr><literal type="number">0x6c737a81</literal></expr>,<expr><literal type="number">0x888f969d</literal></expr>,<expr><literal type="number">0xa4abb2b9</literal></expr>,
<expr><literal type="number">0xc0c7ced5</literal></expr>,<expr><literal type="number">0xdce3eaf1</literal></expr>,<expr><literal type="number">0xf8ff060d</literal></expr>,<expr><literal type="number">0x141b2229</literal></expr>,
<expr><literal type="number">0x30373e45</literal></expr>,<expr><literal type="number">0x4c535a61</literal></expr>,<expr><literal type="number">0x686f767d</literal></expr>,<expr><literal type="number">0x848b9299</literal></expr>,
<expr><literal type="number">0xa0a7aeb5</literal></expr>,<expr><literal type="number">0xbcc3cad1</literal></expr>,<expr><literal type="number">0xd8dfe6ed</literal></expr>,<expr><literal type="number">0xf4fb0209</literal></expr>,
<expr><literal type="number">0x10171e25</literal></expr>,<expr><literal type="number">0x2c333a41</literal></expr>,<expr><literal type="number">0x484f565d</literal></expr>,<expr><literal type="number">0x646b7279</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * private function:
 * look up in SboxTable and get the related value.
 * args:    [in] inch: 0x00~0xFF (8 bits unsigned value).
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>sm4Sbox</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>inch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pTable</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>SboxTable</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>retVal</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>pTable</name><index>[<expr><name>inch</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>retVal</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * private F(Lt) function:
 * "T algorithm" == "L algorithm" + "t algorithm".
 * args:    [in] a: a is a 32 bits unsigned value;
 * return: c: c is calculated with line algorithm "L" and nonline algorithm "t"
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>sm4Lt</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ka</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>PUT_ULONG_BE</name><argument_list>(<argument>ka</argument>,<argument>a</argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>GET_ULONG_BE</name><argument_list>(<argument>bb</argument>,<argument>b</argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name>c</name> <operator>=</operator><name>bb</name><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * private F function:
 * Calculating and getting encryption/decryption contents.
 * args:    [in] x0: original contents;
 * args:    [in] x1: original contents;
 * args:    [in] x2: original contents;
 * args:    [in] x3: original contents;
 * args:    [in] rk: encryption/decryption key;
 * return the contents of encryption/decryption contents.
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>sm4F</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>x0</name><operator>^</operator><call><name>sm4Lt</name><argument_list>(<argument><expr><name>x1</name><operator>^</operator><name>x2</name><operator>^</operator><name>x3</name><operator>^</operator><name>rk</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* private function:
 * Calculating round encryption key.
 * args:    [in] a: a is a 32 bits unsigned value;
 * return: sk[i]: i{0,1,2,3,...31}.
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>sm4CalciRK</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ka</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>PUT_ULONG_BE</name><argument_list>(<argument>ka</argument>,<argument>a</argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4Sbox</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>GET_ULONG_BE</name><argument_list>(<argument>bb</argument>,<argument>b</argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name>rk</name> <operator>=</operator> <name>bb</name><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>^</operator><operator>(</operator><call><name>ROTL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>rk</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sm4_setkey</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>SK</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>MK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>k</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GET_ULONG_BE</name><argument_list>( <argument><expr><name><name>MK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_ULONG_BE</name><argument_list>( <argument><expr><name><name>MK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_ULONG_BE</name><argument_list>( <argument><expr><name><name>MK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_ULONG_BE</name><argument_list>( <argument><expr><name><name>MK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>MK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>^</operator><name><name>FK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>MK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>^</operator><name><name>FK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>MK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>^</operator><name><name>FK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>MK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>^</operator><name><name>FK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><call><name>sm4CalciRK</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>^</operator><name><name>k</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>^</operator><name><name>k</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>^</operator><name><name>CK</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>SK</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>k</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

</block_content>}</block></function>

<comment type="block">/*
 * SM4 standard one round processing
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sm4_one_round</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>sk</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>ulbuf</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ulbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>GET_ULONG_BE</name><argument_list>( <argument>ulbuf[<literal type="number">0</literal>]</argument>, <argument>input</argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>
    <macro><name>GET_ULONG_BE</name><argument_list>( <argument>ulbuf[<literal type="number">1</literal>]</argument>, <argument>input</argument>, <argument><literal type="number">4</literal></argument> )</argument_list></macro>
    <macro><name>GET_ULONG_BE</name><argument_list>( <argument>ulbuf[<literal type="number">2</literal>]</argument>, <argument>input</argument>, <argument><literal type="number">8</literal></argument> )</argument_list></macro>
    <macro><name>GET_ULONG_BE</name><argument_list>( <argument>ulbuf[<literal type="number">3</literal>]</argument>, <argument>input</argument>, <argument><literal type="number">12</literal></argument> )</argument_list></macro>
    <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ulbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>sm4F</name><argument_list>(<argument><expr><name><name>ulbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ulbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ulbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ulbuf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// #ifdef _DEBUG</comment>
<comment type="line">//            printf("rk(%02d) = 0x%08x,  X(%02d) = 0x%08x \n",i,sk[i], i, ulbuf[i+4] );</comment>
<comment type="line">// #endif</comment>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>PUT_ULONG_BE</name><argument_list>(<argument><expr><name><name>ulbuf</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_ULONG_BE</name><argument_list>(<argument><expr><name><name>ulbuf</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_ULONG_BE</name><argument_list>(<argument><expr><name><name>ulbuf</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_ULONG_BE</name><argument_list>(<argument><expr><name><name>ulbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SM4 key schedule (128-bit, encryption)
 */</comment>
<function><type><name>void</name></type> <name>sm4_setkey_enc</name><parameter_list>( <parameter><decl><type><name>sm4_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SM4_ENCRYPT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sm4_setkey</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SM4 key schedule (128-bit, decryption)
 */</comment>
<function><type><name>void</name></type> <name>sm4_setkey_dec</name><parameter_list>( <parameter><decl><type><name>sm4_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SM4_ENCRYPT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sm4_setkey</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SWAP</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[ <expr><literal type="number">31</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * SM4-ECB block encryption/decryption
 */</comment>

<function><type><name>void</name></type> <name>sm4_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>sm4_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                   <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                   <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while<condition>( <expr><name>length</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sm4_one_round</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>length</name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>input</name> <operator>!=</operator> <name>output</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>length</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>output</name><operator>+</operator><name>i</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>input</name><operator>+</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SM4-CBC buffer encryption/decryption
 */</comment>
<function><type><name>void</name></type> <name>sm4_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>sm4_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>SM4_ENCRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>sm4_one_round</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else <comment type="block">/* SM4_DECRYPT */</comment>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sm4_one_round</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
