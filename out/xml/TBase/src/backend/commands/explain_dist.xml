<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/commands/explain_dist.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * explain_dist.c
 *    This code provides support for distributed explain analyze.
 *
 * Portions Copyright (c) 2020, Tencent TBase-C Group
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *        src/backend/commands/explain_dist.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/explain_dist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/hashjoin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tuplesort.h"</cpp:file></cpp:include>

<comment type="block">/* Read instrument field */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_READ_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                \
<cpp:value>do {                                             \
    instr-&gt;fldname = strtod(tmp_head, &amp;tmp_pos); \
    tmp_head = tmp_pos + 1;                      \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* Set max instrument */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSTR_MAX_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro>                          \
<cpp:value>do {                                                      \
    target-&gt;fldname = Max(src-&gt;fldname, target-&gt;fldname); \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* Tools for max/min */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_MIN_MAX</name><parameter_list>(<parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do {                               \
    if (min &gt; tmp)                 \
        min = tmp;                 \
    if (max &lt; tmp)                 \
        max = tmp;                 \
} while(0)</cpp:value></cpp:define>

<comment type="block">/* Serialize state */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<comment type="block">/* ids of plan nodes we've handled */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>printed_nodes</name></decl>;</decl_stmt>
	<comment type="block">/* send str buf */</comment>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>SerializeState</name>;</typedef>

<comment type="block">/*
 * InstrOut
 *
 * Serialize Instrumentation structure with the format
 * "nodetype-plan_node_id-node_oid{val,val,...,val}".
 *
 * NOTE: The function should be modified if the structure of Instrumentation
 * or its relevant members has been changed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InstrOut</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_node_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nodeTag for varify */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%hd-%d-%d{"</literal></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>, <argument><expr><name>current_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* bool */</comment>
	<comment type="block">/* running should be false after InstrEndLoop */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%hd,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>need_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%hd,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>need_bufusage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%hd,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* instr_time */</comment>
	<comment type="block">/* starttime and counter should be 0 after InstrEndLoop */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>starttime</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>counter</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* double */</comment>
	<comment type="block">/* firsttuple and tuplecount should be 0 after InstrEndLoop */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>firsttuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>tuplecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* BufferUsage */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* double */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.10f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>startup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.10f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>ntuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nfiltered1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.0f,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nfiltered2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* BufferUsage */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld}"</literal></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"InstrOut: plan_node_id %d, node %d, nloops %.0f"</literal></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>, <argument><expr><name>current_node_id</name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/*
 * WorkerInstrOut
 *
 * Serialize worker instrumentation with the format
 * "n|val,val,..,val|...|val,val,..,val|". n indicates the worker num,
 * and | separates each worker instrumentation.
 */</comment>
static void
WorkerInstrOut(StringInfo buf, WorkerInstrumentation *worker_instr)
{
	int n;
	
	if (worker_instr == NULL)
	{
		appendStringInfo(buf, "0|");
		return;
	}
	
	appendStringInfo(buf, "%d|", worker_instr-&gt;num_workers);
	for (n = 0; n &lt; worker_instr-&gt;num_workers; n++)
	{
		Instrumentation *instr = &amp;worker_instr-&gt;instrument[n];
		
		if (instr-&gt;nloops &lt;= 0)
			appendStringInfo(buf, "0,0,0,0|");
		else
			<comment type="block">/* send startup, total, ntuples, loops for now */</comment>
			appendStringInfo(buf, "%.10f,%.10f,%.0f,%.0f|",
			                 instr-&gt;startup, instr-&gt;total, instr-&gt;ntuples, instr-&gt;nloops);
	}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * SpecInstrOut
 *
 * Serialize specific information in planstate with the format
 * "1/0&lt;val,val,...,val&gt;", and 1/0 indicates if values are valid or not.
 *
 * NOTE: The function should be modified if the corresponding data structure
 * has been changed.
 * The function is VERY related to show_sort_info, show_hash_info.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecInstrOut</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>NodeTag</name></type> <name>plantag</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>plantag</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Gather</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d&gt;"</literal></expr></argument>,
			                 <argument><expr><operator>(</operator><operator>(</operator><name>GatherState</name> <operator>*</operator><operator>)</operator> <name>planstate</name><operator>)</operator><operator>-&gt;</operator><name>nworkers_launched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		
		<case>case <expr><name>T_GatherMerge</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d&gt;"</literal></expr></argument>,
			                 <argument><expr><operator>(</operator><operator>(</operator><name>GatherMergeState</name> <operator>*</operator><operator>)</operator> <name>planstate</name><operator>)</operator><operator>-&gt;</operator><name>nworkers_launched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Sort</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* according to RemoteSortState and show_sort_info */</comment>
			<decl_stmt><decl><type><name>SortState</name> <modifier>*</modifier></type><name>sortstate</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>SortState</name></expr></argument>, <argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><name><name>sortstate</name><operator>-&gt;</operator><name>sort_Done</name></name> <operator>&amp;&amp;</operator> <name><name>sortstate</name><operator>-&gt;</operator><name>tuplesortstate</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>Tuplesortstate</name> <operator>*</operator><operator>)</operator> <name><name>sortstate</name><operator>-&gt;</operator><name>tuplesortstate</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TuplesortInstrumentation</name></type> <name>stats</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>tuplesort_get_stats</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1&lt;%hd,%hd,%ld&gt;"</literal></expr></argument>,
				                 <argument><expr><name><name>stats</name><operator>.</operator><name>sortMethod</name></name></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>spaceType</name></name></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>spaceType</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1&lt;%hd,%hd,%ld&gt;"</literal></expr></argument>,
				                 <argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>sortMethod</name></name></expr></argument>,
				                 <argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>spaceType</name></name></expr></argument>,
				                 <argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><name><name>sortstate</name><operator>-&gt;</operator><name>shared_info</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d&gt;"</literal></expr></argument>, <argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>num_workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>sortstate</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>num_workers</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TuplesortInstrumentation</name> <modifier>*</modifier></type><name>w_stats</name></decl>;</decl_stmt>
					<expr_stmt><expr><name>w_stats</name> <operator>=</operator> <operator>&amp;</operator><name><name>sortstate</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>w_stats</name><operator>-&gt;</operator><name>sortMethod</name></name> <operator>==</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%hd,%hd,%ld&gt;"</literal></expr></argument>,
						                 <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>sortMethod</name></name></expr></argument>,
						                 <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>spaceType</name></name></expr></argument>, <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"send out parallel sort %d info: %d %d %ld"</literal></expr></argument>,
					     <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>,
					     <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>sortMethod</name></name></expr></argument>,
					     <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>spaceType</name></name></expr></argument>,
					     <argument><expr><name><name>w_stats</name><operator>-&gt;</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Hash</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* according to show_hash_info */</comment>
			<decl_stmt><decl><type><name>HashState</name> <modifier>*</modifier></type><name>hashstate</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>HashState</name></expr></argument>, <argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HashJoinTable</name></type> <name>hashtable</name> <init>= <expr><name><name>hashstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>int</name></type>     <name>nbuckets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>     <name>nbuckets_original</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>     <name>nbatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>     <name>nbatch_original</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Size</name></type>    <name>spacePeak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>    <name>valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>hashtable</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nbuckets</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>nbuckets</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nbuckets_original</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>nbuckets_original</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nbatch</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>nbatch</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nbatch_original</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>nbatch_original</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>spacePeak</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>spacePeak</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>hashstate</name><operator>-&gt;</operator><name>shared_info</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
				<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>hashstate</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>num_workers</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>HashInstrumentation</name> <modifier>*</modifier></type><name>w_stats</name> <init>= <expr><operator>&amp;</operator><name><name>hashstate</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>hinstrument</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<comment type="block">/* Find the first worker that built a hash table. same logic in show_hash_info */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>w_stats</name><operator>-&gt;</operator><name>nbatch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>nbuckets</name> <operator>=</operator> <name><name>w_stats</name><operator>-&gt;</operator><name>nbuckets</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nbuckets_original</name> <operator>=</operator> <name><name>w_stats</name><operator>-&gt;</operator><name>nbuckets_original</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nbatch</name> <operator>=</operator> <name><name>w_stats</name><operator>-&gt;</operator><name>nbatch</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nbatch_original</name> <operator>=</operator> <name><name>w_stats</name><operator>-&gt;</operator><name>nbatch_original</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>spacePeak</name> <operator>=</operator> <name><name>w_stats</name><operator>-&gt;</operator><name>space_peak</name></name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hashstate</name><operator>-&gt;</operator><name>hinstrument</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"send out hash %d peak %zu"</literal></expr></argument>, <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>,
				     <argument><expr><name>spacePeak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1&lt;%d,%d,%d,%d,%ld&gt;"</literal></expr></argument>,
				                 <argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><name>nbuckets_original</name></expr></argument>,
				                 <argument><expr><name>nbatch</name></expr></argument>, <argument><expr><name>nbatch_original</name></expr></argument>,
				                 <argument><expr><name>spacePeak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"0&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * InstrIn
 *
 * DeSerialize of one Instrumentation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InstrIn</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rinstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_head</name> <init>= <expr><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>str</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name> <init>= <expr><operator>&amp;</operator><name><name>rinstr</name><operator>-&gt;</operator><name>instr</name></name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	
	<comment type="block">/* verify nodetype and plan_node_id */</comment>
	<expr_stmt><expr><name><name>rinstr</name><operator>-&gt;</operator><name>nodeTag</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>tmp_head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp_head</name> <operator>=</operator> <name>tmp_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rinstr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>tmp_head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp_head</name> <operator>=</operator> <name>tmp_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rinstr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>node_id</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>tmp_head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp_head</name> <operator>=</operator> <name>tmp_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	
	<comment type="block">/* read values */</comment>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>need_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>need_bufusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>starttime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>starttime</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>firsttuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>tuplecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>startup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>nloops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>nfiltered1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>nfiltered2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"InstrIn: plan_node_id %d, node %d, nloops %.0f"</literal></expr></argument>, <argument><expr><name><name>rinstr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name></expr></argument>, <argument><expr><name><name>rinstr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>, <argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* tmp_head points to next instrument's nodetype or '\0' already */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>tmp_head</name> <operator>-</operator> <operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SpecInstrIn
 *
 * DeSerialize of specific instrument info of current node.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecInstrIn</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>instr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>tmp_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>tmp_head</name> <init>= <expr><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>str</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	
	<switch>switch<condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>nodeTag</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Gather</name></expr>:</case>
		<case>case <expr><name>T_GatherMerge</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>nworkers_launched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Sort</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* either stat or w_stat is valid */</comment>
			<decl_stmt><decl><type><name>bool</name></type> <name>isvalid</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>tmp_head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>tmp_head</name> <operator>=</operator> <name>tmp_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>isvalid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>sort_stat</name><operator>.</operator><name>spaceType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name>nworkers_launched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>instr</name><operator>-&gt;</operator><name>w_sort_stats</name></name> <operator>=</operator> <operator>(</operator><name>TuplesortInstrumentation</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>instr</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TuplesortInstrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>instr</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>w_sort_stats</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sortMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sortMethod</name> <operator>!=</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>w_sort_stats</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>w_sort_stats</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Hash</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>isvalid</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>tmp_head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>tmp_head</name> <operator>=</operator> <name>tmp_pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>isvalid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>hash_stat</name><operator>.</operator><name>nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>hash_stat</name><operator>.</operator><name>nbuckets_original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>hash_stat</name><operator>.</operator><name>nbatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>hash_stat</name><operator>.</operator><name>nbatch_original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INSTR_READ_FIELD</name><argument_list>(<argument><expr><name><name>hash_stat</name><operator>.</operator><name>space_peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>tmp_head</name> <operator>-</operator> <operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SerializeLocalInstr
 *
 * Serialize local instruments in the planstate tree for sending.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>SerializeLocalInstr</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>, <parameter><decl><type><name>SerializeState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We should handle InitPlan/SubPlan the same as in ExplainSubPlans.
	 * But we do not want another planstate_tree_walker,
	 * it is ok to use plan_node_id in place of plan_id.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>plan_node_id</name> <init>= <expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>plan_node_id</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>printed_nodes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>printed_nodes</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>printed_nodes</name></name></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<comment type="block">/* For CteScan producer, deal with its child directly */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name>CteScanState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>planstate</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>CteScanState</name> <operator>*</operator><operator>)</operator><name>planstate</name><operator>)</operator><operator>-&gt;</operator><name>cteplanstate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>instrument</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* clean up the instrumentation state as in ExplainNode */</comment>
		<expr_stmt><expr><call><name>InstrEndLoop</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>instrument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* re-send our received remote instr to upstream. */</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>nnode</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instrument</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>instrument</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>instr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>              <name>node_id</name> <init>= <expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>instrument</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nodeid</name></expr></init></decl>;</decl_stmt>
				
				<comment type="block">/* instrument valid only if node_oid set */</comment>
				<if_stmt><if>if <condition>(<expr><name>node_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>InstrOut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name>instrument</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SpecInstrOut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"can't send instr out plan_node_id %d not attached"</literal></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* send our own instr */</comment>
			<expr_stmt><expr><call><name>InstrOut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>instrument</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpecInstrOut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* should not be NULL */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SerializeLocalInstr: instrument is NULL, %d"</literal></expr></argument>,
		     <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>planstate_tree_walker</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name>SerializeLocalInstr</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SendLocalInstr
 *
 * Serialize local instrument of the given planstate and send it to upper node.
 */</comment>
<function><type><name>void</name></type>
<name>SendLocalInstr</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SerializeState</name></type> <name>ss</name></decl>;</decl_stmt>
	
	<comment type="block">/* Construct str with the same logic in ExplainNode */</comment>
	<expr_stmt><expr><name><name>ss</name><operator>.</operator><name>printed_nodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SerializeLocalInstr</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>ss</name><operator>.</operator><name>printed_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>combineSpecRemoteInstr</name><parameter_list>(<parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rtarget</name></decl></parameter>, <parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rsrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* specific instrument */</comment>
	<switch>switch <condition>(<expr><name><name>rsrc</name><operator>-&gt;</operator><name>nodeTag</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Gather</name></expr>:</case>
		<case>case <expr><name>T_GatherMerge</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Sort</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
			    <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* TODO: figure out which sortMethod is worse */</comment>
				<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name> <operator>==</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* same space type, just compare space used */</comment>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name> <operator>&gt;</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* invalid &gt; memory &gt; disk */</comment>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TuplesortInstrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rtarget</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name> <operator>==</operator> <name>SORT_TYPE_STILL_IN_PROGRESS</name> <operator>||</operator>
				    <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
				
				<comment type="block">/* same logic above */</comment>
				<comment type="block">/* TODO: figure out which sortMethod is worse */</comment>
				<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name> <operator>==</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* same space type, just compare space used */</comment>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name> <operator>&gt;</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* invalid &gt; memory &gt; disk */</comment>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name> <operator>=</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"combine parallel plan %d sort state %d %d %ld"</literal></expr></argument>,
				     <argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name></expr></argument>,
				     <argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name></expr></argument>,
				     <argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr></argument>,
				     <argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Hash</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets_original</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets_original</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets_original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch_original</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch_original</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch_original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>space_peak</name></name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>space_peak</name></name></expr></argument>, <argument><expr><name><name>rsrc</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>space_peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * combineRemoteInstr
 *
 * tool function to combine received instrumentation of all nodes,
 * currently it choose max value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>combineRemoteInstr</name><parameter_list>(<parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rtarget</name></decl></parameter>, <parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rsrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><operator>&amp;</operator><name><name>rtarget</name><operator>-&gt;</operator><name>instr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>rsrc</name><operator>-&gt;</operator><name>instr</name></name></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>node_id</name></name> <operator>==</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name> <operator>==</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rtarget</name><operator>-&gt;</operator><name>nodeTag</name></name> <operator>==</operator> <name><name>rsrc</name><operator>-&gt;</operator><name>nodeTag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* regular instrument */</comment>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>need_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>need_bufusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>starttime</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>starttime</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>counter</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>firsttuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>tuplecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>startup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>nloops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>nfiltered1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name>nfiltered2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_MAX_FIELD</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>combineSpecRemoteInstr</name><argument_list>(<argument><expr><name>rtarget</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * HandleRemoteInstr
 *
 * Handle remote instrument message and save it by plan_node_id.
 */</comment>
<function><type><name>void</name></type>
<name>HandleRemoteInstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg_body</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodeid</name></decl></parameter>, <parameter><decl><type><name>ResponseCombiner</name> <modifier>*</modifier></type><name>combiner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteInstr</name></type> <name>recv_instr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type>  <name>recv_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>cur_instr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>combiner</name><operator>-&gt;</operator><name>recv_instr_htbl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"combiner is not prepared for instrumentation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Handle remote instrument: nodeid %d"</literal></expr></argument>, <argument><expr><name>nodeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* must doing this under per query context */</comment>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>combiner</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>recv_str</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>recv_str</name></expr></argument>, <argument><expr><name>msg_body</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name><name>recv_str</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>recv_str</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recv_instr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>recv_instr</name><operator>.</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>recv_instr</name><operator>.</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>InstrIn</name><argument_list>(<argument><expr><name>recv_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recv_instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpecInstrIn</name><argument_list>(<argument><expr><name>recv_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recv_instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>recv_instr</name><operator>.</operator><name>key</name><operator>.</operator><name>node_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>recv_instr</name><operator>.</operator><name>key</name><operator>.</operator><name>node_id</name></name> <operator>=</operator> <name>nodeid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>cur_instr</name> <operator>=</operator> <operator>(</operator><name>RemoteInstr</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>combiner</name><operator>-&gt;</operator><name>recv_instr_htbl</name></name></expr></argument>,
		                                        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>recv_instr</name><operator>.</operator><name>key</name></name></expr></argument>,
		                                        <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>combineRemoteInstr</name><argument_list>(<argument><expr><name>cur_instr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recv_instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"remote instr hashtable enter plan_node_id %d node %d"</literal></expr></argument>,
			     <argument><expr><name><name>recv_instr</name><operator>.</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name></expr></argument>, <argument><expr><name><name>recv_instr</name><operator>.</operator><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_instr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recv_instr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>recv_instr</name><operator>.</operator><name>nodeTag</name></name> <operator>==</operator> <name>T_Sort</name> <operator>&amp;&amp;</operator> <name><name>recv_instr</name><operator>.</operator><name>nworkers_launched</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TuplesortInstrumentation</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>recv_instr</name><operator>.</operator><name>nworkers_launched</name></name></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><name><name>cur_instr</name><operator>-&gt;</operator><name>w_sort_stats</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur_instr</name><operator>-&gt;</operator><name>w_sort_stats</name></name></expr></argument>, <argument><expr><name><name>recv_instr</name><operator>.</operator><name>w_sort_stats</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * attachRemoteSpecialInstr
 *
 * Attach specific information in planstate.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>attachRemoteSpecificInstr</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>, <parameter><decl><type><name>RemoteInstr</name> <modifier>*</modifier></type><name>rinstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nodeTag</name> <init>= <expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nworkers</name> <init>= <expr><name><name>rinstr</name><operator>-&gt;</operator><name>nworkers_launched</name></name></expr></init></decl>;</decl_stmt>
	
	<switch>switch<condition>(<expr><name>nodeTag</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Gather</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>GatherState</name> <modifier>*</modifier></type><name>gs</name> <init>= <expr><operator>(</operator><name>GatherState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>gs</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>=</operator> <name>nworkers</name></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_GatherMerge</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>GatherMergeState</name> <modifier>*</modifier></type><name>gms</name> <init>= <expr><operator>(</operator><name>GatherMergeState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>gms</name><operator>-&gt;</operator><name>nworkers_launched</name></name> <operator>=</operator> <name>nworkers</name></expr>;</expr_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Sort</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SortState</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>SortState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>spaceType</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>instrument</name><operator>.</operator><name>spaceUsed</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>sort_stat</name><operator>.</operator><name>spaceUsed</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"attach sort nworkers %d"</literal></expr></argument>, <argument><expr><name>nworkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>nworkers</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>SharedSortInfo</name></expr></argument>, <argument><expr><name>sinstrument</name></expr></argument>)</argument_list></call>
					            <operator>+</operator> <name>nworkers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TuplesortInstrumentation</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>num_workers</name></name> <operator>=</operator> <name>nworkers</name></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nworkers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>w_sort_stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"attach parallel sort %d, info: %d %d %ld"</literal></expr></argument>,
					     <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>,
					     <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortMethod</name></expr></argument>,
					     <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceType</name></expr></argument>,
					     <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>sinstrument</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>spaceUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Hash</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HashState</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><name>HashState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IsParallelWorker</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>hinstrument</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>shared_info</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* copy into first instrument */</comment>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>shared_info</name><operator>-&gt;</operator><name>hinstrument</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HashInstrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"parallel worker attach hash state plan %d peak %zu"</literal></expr></argument>,
				     <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>hinstrument</name><operator>-&gt;</operator><name>space_peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HashJoinTableData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				
				<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>nbuckets</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>nbuckets_original</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbuckets_original</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>nbatch</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>nbatch_original</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>nbatch_original</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>spacePeak</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>hash_stat</name><operator>.</operator><name>space_peak</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * AttachRemoteInstr
 *
 * Attach instrument information in planstate from saved info in combiner.
 */</comment>
<function><type><name>bool</name></type>
<name>AttachRemoteInstr</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>, <parameter><decl><type><name>AttachRemoteInstrContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>plan_node_id</name> <init>= <expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>plan_node_id</name></name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>plan_node_id</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>printed_nodes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>printed_nodes</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>printed_nodes</name></name></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name>RemoteSubplanState</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>planstate</name><operator>-&gt;</operator><name>lefttree</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* subplan could be here, init it's child too */</comment>
		<expr_stmt><expr><name><name>planstate</name><operator>-&gt;</operator><name>lefttree</name></name> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>lefttree</name></name></expr></argument>,
		                                   <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
		                                   <argument><expr><name>EXEC_FLAG_EXPLAIN_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>instrument</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RemoteInstrKey</name></type>  <name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>            <name>found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RemoteInstr</name>    <modifier>*</modifier></type><name>rinstr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RemoteInstr</name></type>     <name>rinstr_final</name></decl>;</decl_stmt> <comment type="block">/* for specific instrument */</comment>
		<decl_stmt><decl><type><name>bool</name></type>            <name>spec_need_attach</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>       <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nnode</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>node_idx_List</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>plan_node_id</name></name> <operator>=</operator> <name>plan_node_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rinstr_final</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteInstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rinstr_final</name><operator>.</operator><name>sort_stat</name><operator>.</operator><name>sortMethod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rinstr_final</name><operator>.</operator><name>sort_stat</name><operator>.</operator><name>spaceType</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		
		<comment type="block">/* This is for non-parallel case. If parallel, we init dn_instrument in dsm. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DatanodeInstrumentation</name></expr></argument>, <argument><expr><name>instrument</name></expr></argument>)</argument_list></call> <operator>+</operator>
			            <call><name>mul_size</name><argument_list>(<argument><expr><name>nnode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteInstrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsParallelWorker</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>nnode</name></name> <operator>=</operator> <name>nnode</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>ctx-&gt;node_idx_List</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>node_id</name></name> <operator>=</operator> <call><name>get_pgxc_node_id</name><argument_list>(<argument><expr><call><name>get_nodeoid_from_nodeid</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PGXC_NODE_DATANODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"attach node %d, plan_node_id %d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>plan_node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rinstr</name> <operator>=</operator> <operator>(</operator><name>RemoteInstr</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>,
			                                     <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>,
			                                     <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rinstr</name><operator>-&gt;</operator><name>nodeTag</name></name> <operator>==</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rinstr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>plan_node_id</name></name> <operator>==</operator> <name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"instr attach plan_node_id %d node %d index %d"</literal></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>instrument</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nodeid</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>node_id</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>instrument</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>instr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rinstr</name><operator>-&gt;</operator><name>instr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Instrumentation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* TODO attach all nodes' remote specific instr */</comment>
				<expr_stmt><expr><name><name>rinstr_final</name><operator>.</operator><name>nodeTag</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>nodeTag</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>rinstr_final</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>rinstr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>combineSpecRemoteInstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rinstr_final</name></expr></argument>, <argument><expr><name>rinstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>spec_need_attach</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"failed to find remote instr of plan_node_id %d node %d"</literal></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block>
		<comment type="block">/* TODO attach all nodes' remote specific instr */</comment>
		<if_stmt><if>if <condition>(<expr><name>spec_need_attach</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>attachRemoteSpecificInstr</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rinstr_final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* should not be NULL */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"AttachRemoteInstr: instrument is NULL, tag %d id %d"</literal></expr></argument>,
		     <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>planstate_tree_walker</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name>AttachRemoteInstr</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ExplainCommonRemoteInstr
 *
 * Explain remote instruments for common info of current node.
 */</comment>
<function><type><name>void</name></type>
<name>ExplainCommonRemoteInstr</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>, <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>nnode</name> <init>= <expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>nnode</name></name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>RemoteInstrumentation</name> <modifier>*</modifier></type><name>rinstr</name> <init>= <expr><name><name>planstate</name><operator>-&gt;</operator><name>dn_instrument</name><operator>-&gt;</operator><name>instrument</name></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* for min/max display */</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>nloops_min</name></decl>, <decl><type ref="prev"/><name>nloops_max</name></decl>, <decl><type ref="prev"/><name>nloops</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>startup_sec_min</name></decl>, <decl><type ref="prev"/><name>startup_sec_max</name></decl>, <decl><type ref="prev"/><name>startup_sec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>total_sec_min</name></decl>, <decl><type ref="prev"/><name>total_sec_max</name></decl>, <decl><type ref="prev"/><name>total_sec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>rows_min</name></decl>, <decl><type ref="prev"/><name>rows_max</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>
	<comment type="block">/* for verbose */</comment>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>EXPLAIN_FORMAT_TEXT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* give min max a startup value */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name> <init>= <expr><operator>&amp;</operator><name><name>rinstr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instr</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nloops_min</name> <operator>=</operator> <name>nloops_max</name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>startup_sec_min</name> <operator>=</operator> <name>startup_sec_max</name> <operator>=</operator> <literal type="number">1000.0</literal> <operator>*</operator> <name><name>instr</name><operator>-&gt;</operator><name>startup</name></name> <operator>/</operator> <name>nloops_min</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>total_sec_min</name> <operator>=</operator> <name>total_sec_max</name> <operator>=</operator> <literal type="number">1000.0</literal> <operator>*</operator> <name><name>instr</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name>nloops_min</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rows_min</name> <operator>=</operator> <name>rows_max</name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>/</operator> <name>nloops_min</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nnode</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"DN (never executed)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instr</name> <init>= <expr><operator>&amp;</operator><name><name>rinstr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instr</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>              <name>node_id</name> <init>= <expr><name><name>rinstr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodeid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>dnname</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>node_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>dnname</name> <operator>=</operator> <call><name>get_pgxc_nodename_from_identifier</name><argument_list>(<argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nloops</name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>nloops</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>startup_sec</name> <operator>=</operator> <literal type="number">1000.0</literal> <operator>*</operator> <name><name>instr</name><operator>-&gt;</operator><name>startup</name></name> <operator>/</operator> <name>nloops</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_sec</name> <operator>=</operator> <literal type="number">1000.0</literal> <operator>*</operator> <name><name>instr</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name>nloops</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>instr</name><operator>-&gt;</operator><name>ntuples</name></name> <operator>/</operator> <name>nloops</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>SET_MIN_MAX</name><argument_list>(<argument><expr><name>nloops_min</name></expr></argument>, <argument><expr><name>nloops_max</name></expr></argument>, <argument><expr><name>nloops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_MIN_MAX</name><argument_list>(<argument><expr><name>startup_sec_min</name></expr></argument>, <argument><expr><name>startup_sec_max</name></expr></argument>, <argument><expr><name>startup_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_MIN_MAX</name><argument_list>(<argument><expr><name>total_sec_min</name></expr></argument>, <argument><expr><name>total_sec_max</name></expr></argument>, <argument><expr><name>total_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_MIN_MAX</name><argument_list>(<argument><expr><name>rows_min</name></expr></argument>, <argument><expr><name>rows_max</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="block">/* one line for each dn if verbose */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>EXPLAIN_FORMAT_TEXT</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>nloops</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"- %s (never executed)"</literal></expr></argument>, <argument><expr><name>dnname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
						                 <argument><expr><literal type="string">"- %s (actual time=%.3f..%.3f rows=%.0f loops=%.0f)"</literal></expr></argument>,
						                 <argument><expr><name>dnname</name></expr></argument>, <argument><expr><name>startup_sec</name></expr></argument>, <argument><expr><name>total_sec</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>nloops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
						                 <argument><expr><literal type="string">"- %s (actual rows=%.0f loops=%.0f)"</literal></expr></argument>,
						                 <argument><expr><name>dnname</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>nloops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Data Node"</literal></expr></argument>, <argument><expr><name>dnname</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Startup Time"</literal></expr></argument>, <argument><expr><name>startup_sec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Total Time"</literal></expr></argument>, <argument><expr><name>total_sec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Rows"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Loops"</literal></expr></argument>, <argument><expr><name>nloops</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>EXPLAIN_FORMAT_TEXT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>show_verbose</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>nloops_max</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>show_verbose</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"DN (never executed)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
				                 <argument><expr><literal type="string">"DN (actual startup time=%.3f..%.3f total time=%.3f..%.3f rows=%.0f..%.0f loops=%.0f..%.0f)"</literal></expr></argument>,
				                 <argument><expr><name>startup_sec_min</name></expr></argument>, <argument><expr><name>startup_sec_max</name></expr></argument>,
				                 <argument><expr><name>total_sec_min</name></expr></argument>, <argument><expr><name>total_sec_max</name></expr></argument>, <argument><expr><name>rows_min</name></expr></argument>, <argument><expr><name>rows_max</name></expr></argument>,
				                 <argument><expr><name>nloops_min</name></expr></argument>, <argument><expr><name>nloops_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
				                 <argument><expr><literal type="string">"DN (actual rows=%.0f..%.0f loops=%.0f..%.0f)"</literal></expr></argument>,
				                 <argument><expr><name>rows_min</name></expr></argument>, <argument><expr><name>rows_max</name></expr></argument>, <argument><expr><name>nloops_min</name></expr></argument>, <argument><expr><name>nloops_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>show_verbose</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Data Node"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Min Startup Time"</literal></expr></argument>, <argument><expr><name>startup_sec_min</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Max Startup Time"</literal></expr></argument>, <argument><expr><name>startup_sec_max</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Min Total Time"</literal></expr></argument>, <argument><expr><name>total_sec_min</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Max Total Time"</literal></expr></argument>, <argument><expr><name>total_sec_max</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Min Rows"</literal></expr></argument>, <argument><expr><name>rows_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Max Rows"</literal></expr></argument>, <argument><expr><name>rows_max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Min Loops"</literal></expr></argument>, <argument><expr><name>nloops_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExplainPropertyFloat</name><argument_list>(<argument><expr><literal type="string">"Actual Max Loops"</literal></expr></argument>, <argument><expr><name>nloops_max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
