<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/inet_net_pton.c"><comment type="block">/*
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1996,1999 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *      src/backend/utils/adt/inet_net_pton.c
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rcsid</name><index>[]</index></name> <init>= <expr><literal type="string">"Id: inet_net_pton.c,v 1.4.2.3 2004/03/17 00:40:11 marka Exp $"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include> <comment type="block">/* pgrminclude ignore */</comment>    <comment type="block">/* needed on some
                                                         * platforms */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>inet_net_pton_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>inet_cidr_pton_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>inet_net_pton_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>inet_cidr_pton_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * int
 * inet_net_pton(af, src, dst, size)
 *    convert network number from presentation to network format.
 *    accepts hex octets, hex strings, decimal octets, and /CIDR.
 *    "size" is in bytes and describes "dst".
 * return:
 *    number of bits, either imputed classfully or specified with /CIDR,
 *    or -1 if some failure occurred (check errno).  ENOENT means it was
 *    not a valid network specification.
 * author:
 *    Paul Vixie (ISC), June 1996
 *
 * Changes:
 *    I added the inet_cidr_pton function (also from Paul) and changed
 *    the names to reflect their current use.
 *
 */</comment>
<function><type><name>int</name></type>
<name>inet_net_pton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>af</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>PGSQL_AF_INET</name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>
                <expr><call><name>inet_net_pton_ipv4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> </then><else>:
                <expr><call><name>inet_cidr_pton_ipv4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        <case>case <expr><name>PGSQL_AF_INET6</name></expr>:</case>
            <return>return <expr><ternary><condition><expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>
                <expr><call><name>inet_net_pton_ipv6</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> </then><else>:
                <expr><call><name>inet_cidr_pton_ipv6</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * static int
 * inet_cidr_pton_ipv4(src, dst, size)
 *    convert IPv4 network number from presentation to network format.
 *    accepts hex octets, hex strings, decimal octets, and /CIDR.
 *    "size" is in bytes and describes "dst".
 * return:
 *    number of bits, either imputed classfully or specified with /CIDR,
 *    or -1 if some failure occurred (check errno).  ENOENT means it was
 *    not an IPv4 network specification.
 * note:
 *    network byte order assumed.  this means 192.5.5.240/28 has
 *    0b11110000 in its fourth octet.
 * author:
 *    Paul Vixie (ISC), June 1996
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_cidr_pton_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xdigits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>,
                <decl><type ref="prev"/><name>ch</name></decl>,
                <decl><type ref="prev"/><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
                <decl><type ref="prev"/><name>dirty</name></decl>,
                <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator>
        <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Hexadecimal: Eat nybble string. */</comment>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>                    <comment type="block">/* skip x or X. */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>xdigits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>xdigits</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dirty</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>dirty</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <name>tmp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition>
        <block>{<block_content>                        <comment type="block">/* Odd trailing nybble? */</comment>
            <if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Decimal: eat dotted digit string. */</comment>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <do>do
            <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>digits</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
                     <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
            <if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <name>tmp</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&gt;</operator> <name>odst</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* CIDR width specifier.  Nothing can follow it. */</comment>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>            <comment type="block">/* Skip over the /. */</comment>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>digits</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Firey death and destruction unless we prefetched EOS. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* If nothing was written to the destination, we found no address. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>odst</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* If no CIDR spec was given, infer width from net class. */</comment>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>odst</name> <operator>&gt;=</operator> <literal type="number">240</literal></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* Class E */</comment>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>odst</name> <operator>&gt;=</operator> <literal type="number">224</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* Class D */</comment>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>odst</name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* Class C */</comment>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>odst</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* Class B */</comment>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="block">/* Class A */</comment>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <comment type="block">/* If imputed mask is narrower than specified octets, widen. */</comment>
        <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * If there are no additional bits specified for a class D address
         * adjust bits to 4.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>odst</name> <operator>==</operator> <literal type="number">224</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Extend network to cover the actual mask. */</comment>
    <while>while <condition>(<expr><name>bits</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>(</operator><name>bits</name><operator>)</operator></expr>;</return>

<label><name>enoent</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>emsgsize</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * int
 * inet_net_pton(af, src, dst, *bits)
 *    convert network address from presentation to network format.
 *    accepts inet_pton()'s input for this "af" plus trailing "/CIDR".
 *    "dst" is assumed large enough for its "af".  "bits" is set to the
 *    /CIDR prefix length, which can have defaults (like /32 for IPv4).
 * return:
 *    -1 if an error occurred (inspect errno; ENOENT means bad format).
 *    0 if successful conversion occurred.
 * note:
 *    192.5.5.1/28 has a nonzero host part, which means it isn't a network
 *    as called for by inet_cidr_pton() but it can be a host address with
 *    an included netmask.
 * author:
 *    Paul Vixie (ISC), October 1998
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_net_pton_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>,
                <decl><type ref="prev"/><name>ch</name></decl>,
                <decl><type ref="prev"/><name>tmp</name></decl>,
                <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>size</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Get the mantissa. */</comment>
    <while>while <condition>(<expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>digits</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block> while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <name>tmp</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Get the prefix length if any. */</comment>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&gt;</operator> <name>odst</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* CIDR width specifier.  Nothing can follow it. */</comment>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>            <comment type="block">/* Skip over the /. */</comment>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>digits</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Firey death and destruction unless we prefetched EOS. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Prefix length can default to /32 only if all four octets spec'd. */</comment>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>-</operator> <name>odst</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If nothing was written to the destination, we found no address. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>odst</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* If prefix length overspecifies mantissa, life is bad. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Extend address to four octets. */</comment>
    <while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

    <return>return <expr><name>bits</name></expr>;</return>

<label><name>enoent</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>emsgsize</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getbits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pch</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* no leading zeros */</comment>
                <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>val</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>pch</name> <operator>-</operator> <name>digits</name><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* range */</comment>
                <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bitsp</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitsp</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_char</name>       <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int</name></type>        <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name>ch</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pch</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* no leading zeros */</comment>
                <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>val</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>pch</name> <operator>-</operator> <name>digits</name><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>        <comment type="block">/* range */</comment>
                <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>-</operator> <name>odst</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* too many octets? */</comment>
                <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><call><name>getbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bitsp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>-</operator> <name>odst</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>            <comment type="block">/* too many octets? */</comment>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_net_pton_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>inet_cidr_pton_ipv6</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_IN6ADDRSZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_INT16SZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_INADDRSZ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_cidr_pton_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xdigits_l</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>,
                <decl><type ref="prev"/><name><name>xdigits_u</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_char</name></type>        <name><name>tmp</name><index>[<expr><name>NS_IN6ADDRSZ</name></expr>]</index></name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>colonp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xdigits</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>curtok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>ch</name></decl>,
                <decl><type ref="prev"/><name>saw_xdigit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u_int</name></type>        <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>digits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>bits</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>NS_IN6ADDRSZ</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>tp</name> <operator>=</operator> <name>tmp</name><operator>)</operator></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>NS_IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>endp</name> <operator>=</operator> <name>tp</name> <operator>+</operator> <name>NS_IN6ADDRSZ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>colonp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <comment type="block">/* Leading :: requires some special handling. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>src</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>curtok</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>saw_xdigit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pch</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pch</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>xdigits</name> <operator>=</operator> <name>xdigits_l</name><operator>)</operator></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>xdigits</name> <operator>=</operator> <name>xdigits_u</name><operator>)</operator></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>val</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>pch</name> <operator>-</operator> <name>xdigits</name><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>digits</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>saw_xdigit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>curtok</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>saw_xdigit</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>colonp</name></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>colonp</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>+</operator> <name>NS_INT16SZ</name> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>saw_xdigit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>digits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>tp</name> <operator>+</operator> <name>NS_INADDRSZ</name><operator>)</operator> <operator>&lt;=</operator> <name>endp</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>getv4</name><argument_list>(<argument><expr><name>curtok</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>tp</name> <operator>+=</operator> <name>NS_INADDRSZ</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>saw_xdigit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>                <comment type="block">/* '\0' was seen by inet_pton4(). */</comment>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>getbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <goto>goto <name>enoent</name>;</goto>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>saw_xdigit</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>+</operator> <name>NS_INT16SZ</name> <operator>&gt;</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>tp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>endp</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>colonp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Since some memmove()'s erroneously fail to handle overlapping
         * regions, we'll do the shift by hand.
         */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>    <name>n</name> <init>= <expr><name>tp</name> <operator>-</operator> <name>colonp</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>endp</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>colonp</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>colonp</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>enoent</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Copy out the result.
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NS_IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>bits</name><operator>)</operator></expr>;</return>

<label><name>enoent</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<label><name>emsgsize</name>:</label>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
