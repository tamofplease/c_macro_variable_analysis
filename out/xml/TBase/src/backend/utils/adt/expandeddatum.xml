<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/expandeddatum.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * expandeddatum.c
 *      Support functions for "expanded" value representations.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/utils/adt/expandeddatum.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/expandeddatum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * DatumGetEOHP
 *
 * Given a Datum that is an expanded-object reference, extract the pointer.
 *
 * This is a bit tedious since the pointer may not be properly aligned;
 * compare VARATT_EXTERNAL_GET_POINTER().
 */</comment>
<function><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type>
<name>DatumGetEOHP</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>varattrib_1b_e</name> <modifier>*</modifier></type><name>datum</name> <init>= <expr><operator>(</operator><name>varattrib_1b_e</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>varatt_expanded</name></type> <name>ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARATT_IS_EXTERNAL_EXPANDED</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARATT_IS_EXPANDED_HEADER</name><argument_list>(<argument><expr><name><name>ptr</name><operator>.</operator><name>eohptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ptr</name><operator>.</operator><name>eohptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * EOH_init_header
 *
 * Initialize the common header of an expanded object.
 *
 * The main thing this encapsulates is initializing the TOAST pointers.
 */</comment>
<function><type><name>void</name></type>
<name>EOH_init_header</name><parameter_list>(<parameter><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>ExpandedObjectMethods</name> <modifier>*</modifier></type><name>methods</name></decl></parameter>,
                <parameter><decl><type><name>MemoryContext</name></type> <name>obj_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>varatt_expanded</name></type> <name>ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>eohptr</name><operator>-&gt;</operator><name>vl_len_</name></name> <operator>=</operator> <name>EOH_HEADER_MAGIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_methods</name></name> <operator>=</operator> <name>methods</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_context</name></name> <operator>=</operator> <name>obj_context</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ptr</name><operator>.</operator><name>eohptr</name></name> <operator>=</operator> <name>eohptr</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_VARTAG_EXTERNAL</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_rw_ptr</name></name></expr></argument>, <argument><expr><name>VARTAG_EXPANDED_RW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_rw_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SET_VARTAG_EXTERNAL</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_ro_ptr</name></name></expr></argument>, <argument><expr><name>VARTAG_EXPANDED_RO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_ro_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * EOH_get_flat_size
 * EOH_flatten_into
 *
 * Convenience functions for invoking the "methods" of an expanded object.
 */</comment>

<function><type><name>Size</name></type>
<name>EOH_get_flat_size</name><parameter_list>(<parameter><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call>(<modifier>*</modifier><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_methods</name><operator>-&gt;</operator><name>get_flat_size</name></name>) <argument_list>(<argument><expr><name>eohptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>EOH_flatten_into</name><parameter_list>(<parameter><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name></decl></parameter>,
                 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>allocated_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_methods</name><operator>-&gt;</operator><name>flatten_into</name></name>) <argument_list>(<argument><expr><name>eohptr</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>allocated_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * If the Datum represents a R/W expanded object, change it to R/O.
 * Otherwise return the original Datum.
 *
 * Caller must ensure that the datum is a non-null varlena value.  Typically
 * this is invoked via MakeExpandedObjectReadOnly(), which checks that.
 */</comment>
<function><type><name>Datum</name></type>
<name>MakeExpandedObjectReadOnlyInternal</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if not a read-write expanded-object pointer */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VARATT_IS_EXTERNAL_EXPANDED_RW</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>d</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Now safe to extract the object pointer */</comment>
    <expr_stmt><expr><name>eohptr</name> <operator>=</operator> <call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Return the built-in read-only pointer instead of given pointer */</comment>
    <return>return <expr><call><name>EOHPGetRODatum</name><argument_list>(<argument><expr><name>eohptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Transfer ownership of an expanded object to a new parent memory context.
 * The object must be referenced by a R/W pointer, and what we return is
 * always its "standard" R/W pointer, which is certain to have the same
 * lifespan as the object itself.  (The passed-in pointer might not, and
 * in any case wouldn't provide a unique identifier if it's not that one.)
 */</comment>
<function><type><name>Datum</name></type>
<name>TransferExpandedObject</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>new_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name> <init>= <expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Assert caller gave a R/W pointer */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARATT_IS_EXTERNAL_EXPANDED_RW</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Transfer ownership */</comment>
    <expr_stmt><expr><call><name>MemoryContextSetParent</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_context</name></name></expr></argument>, <argument><expr><name>new_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Return the object's standard read-write pointer */</comment>
    <return>return <expr><call><name>EOHPGetRWDatum</name><argument_list>(<argument><expr><name>eohptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Delete an expanded object (must be referenced by a R/W pointer).
 */</comment>
<function><type><name>void</name></type>
<name>DeleteExpandedObject</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eohptr</name> <init>= <expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Assert caller gave a R/W pointer */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARATT_IS_EXTERNAL_EXPANDED_RW</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Kill it */</comment>
    <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>eohptr</name><operator>-&gt;</operator><name>eoh_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
