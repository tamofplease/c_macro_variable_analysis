<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/geo_spgist.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * geo_spgist.c
 *      SP-GiST implementation of 4-dimensional quad tree over boxes
 *
 * This module provides SP-GiST implementation for boxes using quad tree
 * analogy in 4-dimensional space.  SP-GiST doesn't allow indexing of
 * overlapping objects.  We are making 2D objects never-overlapping in
 * 4D space.  This technique has some benefits compared to traditional
 * R-Tree which is implemented as GiST.  The performance tests reveal
 * that this technique especially beneficial with too much overlapping
 * objects, so called "spaghetti data".
 *
 * Unlike the original quad tree, we are splitting the tree into 16
 * quadrants in 4D space.  It is easier to imagine it as splitting space
 * two times into 4:
 *
 *                |       |
 *                |       |
 *                | -----+-----
 *                |       |
 *                |       |
 * -------------+-------------
 *                |
 *                |
 *                |
 *                |
 *                |
 *
 * We are using box datatype as the prefix, but we are treating them
 * as points in 4-dimensional space, because 2D boxes are not enough
 * to represent the quadrant boundaries in 4D space.  They however are
 * sufficient to point out the additional boundaries of the next
 * quadrant.
 *
 * We are using traversal values provided by SP-GiST to calculate and
 * to store the bounds of the quadrants, while traversing into the tree.
 * Traversal value has all the boundaries in the 4D space, and is is
 * capable of transferring the required boundaries to the following
 * traversal values.  In conclusion, three things are necessary
 * to calculate the next traversal value:
 *
 *    (1) the traversal value of the parent
 *    (2) the quadrant of the current node
 *    (3) the prefix of the current node
 *
 * If we visualize them on our simplified drawing (see the drawing above);
 * transferred boundaries of (1) would be the outer axis, relevant part
 * of (2) would be the up right part of the other axis, and (3) would be
 * the inner axis.
 *
 * For example, consider the case of overlapping.  When recursion
 * descends deeper and deeper down the tree, all quadrants in
 * the current node will be checked for overlapping.  The boundaries
 * will be re-calculated for all quadrants.  Overlap check answers
 * the question: can any box from this quadrant overlap with the given
 * box?  If yes, then this quadrant will be walked.  If no, then this
 * quadrant will be skipped.
 *
 * This method provides restrictions for minimum and maximum values of
 * every dimension of every corner of the box on every level of the tree
 * except the root.  For the root node, we are setting the boundaries
 * that we don't yet have as infinity.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *            src/backend/utils/adt/geo_spgist.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Comparator for qsort
 *
 * We don't need to use the floating point macros in here, because this
 * is going only going to be used in a place to effect the performance
 * of the index, not the correctness.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareDoubles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type>        <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>double</name></type>        <name>low</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>high</name></decl>;</decl_stmt>
}</block></struct></type> <name>Range</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>Range</name></type>        <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Range</name></type>        <name>right</name></decl>;</decl_stmt>
}</block></struct></type> <name>RangeBox</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>RangeBox</name></type>    <name>range_box_x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RangeBox</name></type>    <name>range_box_y</name></decl>;</decl_stmt>
}</block></struct></type> <name>RectBox</name>;</typedef>

<comment type="block">/*
 * Calculate the quadrant
 *
 * The quadrant is 8 bit unsigned integer with 4 least bits in use.
 * This function accepts BOXes as input.  They are not casted to
 * RangeBoxes, yet.  All 4 bits are set by comparing a corner of the box.
 * This makes 16 quadrants in total.
 */</comment>
<function><type><specifier>static</specifier> <name>uint8</name></type>
<name>getQuadrant</name><parameter_list>(<parameter><decl><type><name>BOX</name> <modifier>*</modifier></type><name>centroid</name></decl></parameter>, <parameter><decl><type><name>BOX</name> <modifier>*</modifier></type><name>inBox</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>quadrant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inBox</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>centroid</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>quadrant</name> <operator>|=</operator> <literal type="number">0x8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inBox</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>centroid</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>quadrant</name> <operator>|=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inBox</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>centroid</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>quadrant</name> <operator>|=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inBox</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>centroid</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>quadrant</name> <operator>|=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>quadrant</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get RangeBox using BOX
 *
 * We are turning the BOX to our structures to emphasize their function
 * of representing points in 4D space.  It also is more convenient to
 * access the values with this structure.
 */</comment>
<function><type><specifier>static</specifier> <name>RangeBox</name> <modifier>*</modifier></type>
<name>getRangeBox</name><parameter_list>(<parameter><decl><type><name>BOX</name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RangeBox</name>   <modifier>*</modifier></type><name>range_box</name> <init>= <expr><operator>(</operator><name>RangeBox</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeBox</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

    <return>return <expr><name>range_box</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the traversal value
 *
 * In the beginning, we don't have any restrictions.  We have to
 * initialize the struct to cover the whole 4D space.
 */</comment>
<function><type><specifier>static</specifier> <name>RectBox</name> <modifier>*</modifier></type>
<name>initRectBox</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RectBox</name>    <modifier>*</modifier></type><name>rect_box</name> <init>= <expr><operator>(</operator><name>RectBox</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RectBox</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>infinity</name> <init>= <expr><call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>left</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>-</operator><name>infinity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>left</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>right</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>-</operator><name>infinity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>right</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>left</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>-</operator><name>infinity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>left</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>right</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>-</operator><name>infinity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>right</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>

    <return>return <expr><name>rect_box</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Calculate the next traversal value
 *
 * All centroids are bounded by RectBox, but SP-GiST only keeps
 * boxes.  When we are traversing the tree, we must calculate RectBox,
 * using centroid and quadrant.
 */</comment>
<function><type><specifier>static</specifier> <name>RectBox</name> <modifier>*</modifier></type>
<name>nextRectBox</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>centroid</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>quadrant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RectBox</name>    <modifier>*</modifier></type><name>next_rect_box</name> <init>= <expr><operator>(</operator><name>RectBox</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RectBox</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name>rect_box</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RectBox</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>quadrant</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>left</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>left</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>quadrant</name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>right</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_x</name><operator>.</operator><name>right</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>quadrant</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>left</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>left</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>quadrant</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>right</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>next_rect_box</name><operator>-&gt;</operator><name>range_box_y</name><operator>.</operator><name>right</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>centroid</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>next_rect_box</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box overlap with this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overlap2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box overlap with this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overlap4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>overlap2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>overlap2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box contain this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contain2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box contain this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contain4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>contain2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>contain2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box be contained by this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contained2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box be contained by this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>contained4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>contained2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>contained2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box to be lower than this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lower2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPlt</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPlt</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box not extend to the right side of the query? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overLower2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPle</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>low</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box to be higher than this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>higher2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPgt</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPgt</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>high</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any range from range_box not extend to the left side of the query? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overHigher2D</name><parameter_list>(<parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>range_box</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>FPge</name><argument_list>(<argument><expr><name><name>range_box</name><operator>-&gt;</operator><name>right</name><operator>.</operator><name>high</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>low</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box be left of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>left4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>lower2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box does not extend the right of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overLeft4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>overLower2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box be right of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>right4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>higher2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box does not extend the left of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overRight4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>overHigher2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box be below of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>below4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>lower2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box does not extend above this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overBelow4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>overLower2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box be above of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>above4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>higher2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Can any rectangle from rect_box does not extend below of this argument? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>overAbove4D</name><parameter_list>(<parameter><decl><type><name>RectBox</name> <modifier>*</modifier></type><name>rect_box</name></decl></parameter>, <parameter><decl><type><name>RangeBox</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>overHigher2D</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rect_box</name><operator>-&gt;</operator><name>range_box_y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SP-GiST config function
 */</comment>
<function><type><name>Datum</name></type>
<name>spg_box_quad_config</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>spgConfigOut</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>(</operator><name>spgConfigOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>prefixType</name></name> <operator>=</operator> <name>BOXOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>labelType</name></name> <operator>=</operator> <name>VOIDOID</name></expr>;</expr_stmt>    <comment type="block">/* We don't need node labels. */</comment>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>canReturnData</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>longValuesOK</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SP-GiST choose function
 */</comment>
<function><type><name>Datum</name></type>
<name>spg_box_quad_choose</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>spgChooseIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgChooseIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgChooseOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgChooseOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOX</name>           <modifier>*</modifier></type><name>centroid</name> <init>= <expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr></init></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>resultType</name></name> <operator>=</operator> <name>spgMatchNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>restDatum</name></name> <operator>=</operator> <call><name>BoxPGetDatum</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* nodeN will be set by core, when allTheSame. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>nodeN</name></name> <operator>=</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SP-GiST pick-split function
 *
 * It splits a list of boxes into quadrants by choosing a central 4D
 * point as the median of the coordinates of the boxes.
 */</comment>
<function><type><name>Datum</name></type>
<name>spg_box_quad_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>spgPickSplitIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgPickSplitIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgPickSplitOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgPickSplitOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOX</name>           <modifier>*</modifier></type><name>centroid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>median</name></decl>,
                <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name>       <modifier>*</modifier></type><name>lowXs</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name>       <modifier>*</modifier></type><name>highXs</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name>       <modifier>*</modifier></type><name>lowYs</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name>       <modifier>*</modifier></type><name>highYs</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Calculate median of all 4D coordinates */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BOX</name>           <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>lowXs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>highXs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lowYs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>highYs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>lowXs</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareDoubles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>highXs</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareDoubles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>lowYs</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareDoubles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>highYs</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareDoubles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>median</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BOX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>lowXs</name><index>[<expr><name>median</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>highXs</name><index>[<expr><name>median</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>lowYs</name><index>[<expr><name>median</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>highYs</name><index>[<expr><name>median</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Fill the output */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>hasPrefix</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>prefixDatum</name></name> <operator>=</operator> <call><name>BoxPGetDatum</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeLabels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>        <comment type="block">/* We don't need node labels. */</comment>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Assign ranges to corresponding nodes according to quadrants relative to
     * the "centroid" range
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BOX</name>           <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8</name></type>        <name>quadrant</name> <init>= <expr><call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BoxPGetDatum</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>quadrant</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SP-GiST inner consistent function
 */</comment>
<function><type><name>Datum</name></type>
<name>spg_box_quad_inner_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>spgInnerConsistentIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgInnerConsistentOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RectBox</name>    <modifier>*</modifier></type><name>rect_box</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>quadrant</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RangeBox</name>   <modifier>*</modifier></type><name>centroid</name></decl>,
              <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>queries</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Report that all nodes should be visited */</comment>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * We are saving the traversal value or initialize it an unbounded one, if
     * we have just begun to walk the tree.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>traversalValue</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rect_box</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>traversalValue</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>rect_box</name> <operator>=</operator> <call><name>initRectBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * We are casting the prefix and queries to RangeBoxes for ease of the
     * following operations.
     */</comment>
    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>getRangeBox</name><argument_list>(<argument><expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>queries</name> <operator>=</operator> <operator>(</operator><name>RangeBox</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RangeBox</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getRangeBox</name><argument_list>(<argument><expr><call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* Allocate enough memory for nodes */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>traversalValues</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We switch memory context, because we want to allocate memory for new
     * traversal values (next_rect_box) and pass these pieces of memory to
     * further call of this function.
     */</comment>
    <expr_stmt><expr><name>old_ctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>traversalMemoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>quadrant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>quadrant</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr>;</condition> <incr><expr><name>quadrant</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RectBox</name>    <modifier>*</modifier></type><name>next_rect_box</name> <init>= <expr><call><name>nextRectBox</name><argument_list>(<argument><expr><name>rect_box</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>flag</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>RTOverlapStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>overlap4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTContainsStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>contain4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
                <case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>contained4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>left4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTOverLeftStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>overLeft4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>right4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTOverRightStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>overRight4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>above4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTOverAboveStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>overAbove4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>below4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <case>case <expr><name>RTOverBelowStrategyNumber</name></expr>:</case>
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>overBelow4D</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>, <argument><expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>

            <comment type="block">/* If any check is failed, we have found our answer. */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>traversalValues</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name></expr>]</index></name> <operator>=</operator> <name>next_rect_box</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name></expr>]</index></name> <operator>=</operator> <name>quadrant</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * If this node is not selected, we don't need to keep the next
             * traversal value in the memory context.
             */</comment>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>next_rect_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Switch back */</comment>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SP-GiST inner consistent function
 */</comment>
<function><type><name>Datum</name></type>
<name>spg_box_quad_leaf_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>spgLeafConsistentIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgLeafConsistentIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgLeafConsistentOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgLeafConsistentOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>leaf</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>leafDatum</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>flag</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* All tests are exact. */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>recheck</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/* leafDatum is what it is... */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafValue</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>leafDatum</name></name></expr>;</expr_stmt>

    <comment type="block">/* Perform the required comparison(s) */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>query</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>RTOverlapStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_overlap</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTContainsStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_contain</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_contained</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_same</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_left</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTOverLeftStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_overleft</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_right</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTOverRightStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_overright</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_above</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTOverAboveStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_overabove</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_below</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>RTOverBelowStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_overbelow</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>,
                                                        <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <comment type="block">/* If any check is failed, we have found our answer. */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
