<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/windowfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * windowfuncs.c
 *      Standard window functions defined in SQL spec.
 *
 * Portions Copyright (c) 2000-2017, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *      src/backend/utils/adt/windowfuncs.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windowapi.h"</cpp:file></cpp:include>

<comment type="block">/*
 * ranking process information
 */</comment>
<typedef>typedef <type><struct>struct <name>rank_context</name>
<block>{
    <decl_stmt><decl><type><name>int64</name></type>        <name>rank</name></decl>;</decl_stmt>            <comment type="block">/* current rank */</comment>
}</block></struct></type> <name>rank_context</name>;</typedef>

<comment type="block">/*
 * ntile process information
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int32</name></type>        <name>ntile</name></decl>;</decl_stmt>            <comment type="block">/* current result */</comment>
    <decl_stmt><decl><type><name>int64</name></type>        <name>rows_per_bucket</name></decl>;</decl_stmt>    <comment type="block">/* row number of current bucket */</comment>
    <decl_stmt><decl><type><name>int64</name></type>        <name>boundary</name></decl>;</decl_stmt>        <comment type="block">/* how many rows should be in the bucket */</comment>
    <decl_stmt><decl><type><name>int64</name></type>        <name>remainder</name></decl>;</decl_stmt>        <comment type="block">/* (total rows) % (bucket num) */</comment>
}</block></struct></type> <name>ntile_context</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>rank_up</name><parameter_list>(<parameter><decl><type><name>WindowObject</name></type> <name>winobj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>leadlag_common</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>forward</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withoffset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withdefault</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * utility routine for *_rank functions.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>rank_up</name><parameter_list>(<parameter><decl><type><name>WindowObject</name></type> <name>winobj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>        <name>up</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>        <comment type="block">/* should rank increase? */</comment>
    <decl_stmt><decl><type><name>int64</name></type>        <name>curpos</name> <init>= <expr><call><name>WinGetCurrentPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rank_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>rank_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rank_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* first call: rank of first row is always 1 */</comment>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>curpos</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>curpos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* do current and prior tuples match by ORDER BY clause? */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WinRowsArePeers</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><name>curpos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curpos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>up</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* We can advance the mark, but only *after* access to prior row */</comment>
    <expr_stmt><expr><call><name>WinSetMarkPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>up</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * row_number
 * just increment up from 1 until current partition finishes.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_row_number</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type>        <name>curpos</name> <init>= <expr><call><name>WinGetCurrentPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>WinSetMarkPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>curpos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * rank
 * Rank changes when key columns change.
 * The new rank number is the current row number.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_rank</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rank_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>up</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>rank_up</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>rank_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rank_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>=</operator> <call><name>WinGetCurrentPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * dense_rank
 * Rank increases by 1 when key columns change.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_dense_rank</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rank_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>up</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>rank_up</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>rank_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rank_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * percent_rank
 * return fraction between 0 and 1 inclusive,
 * which is described as (RK - 1) / (NR - 1), where RK is the current row's
 * rank and NR is the total number of rows, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_percent_rank</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rank_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>up</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type>        <name>totalrows</name> <init>= <expr><call><name>WinGetPartitionRowCount</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalrows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>rank_up</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>rank_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rank_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>=</operator> <call><name>WinGetCurrentPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* return zero if there's only one row, per spec */</comment>
    <if_stmt><if>if <condition>(<expr><name>totalrows</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><operator>(</operator><name>float8</name><operator>)</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>float8</name><operator>)</operator> <operator>(</operator><name>totalrows</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cume_dist
 * return fraction between 0 and 1 inclusive,
 * which is described as NP / NR, where NP is the number of rows preceding or
 * peers to the current row, and NR is the total number of rows, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_cume_dist</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rank_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>up</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type>        <name>totalrows</name> <init>= <expr><call><name>WinGetPartitionRowCount</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalrows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>rank_up</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>rank_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rank_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>up</name> <operator>||</operator> <name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * The current row is not peer to prior row or is just the first, so
         * count up the number of rows that are peer to the current.
         */</comment>
        <decl_stmt><decl><type><name>int64</name></type>        <name>row</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>=</operator> <call><name>WinGetCurrentPosition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="block">/*
         * start from current + 1
         */</comment>
        <for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>rank</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>totalrows</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WinRowsArePeers</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rank</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_FLOAT8</name><argument_list>(<argument><expr><operator>(</operator><name>float8</name><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>rank</name></name> <operator>/</operator> <operator>(</operator><name>float8</name><operator>)</operator> <name>totalrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ntile
 * compute an exact numeric value with scale 0 (zero),
 * ranging from 1 (one) to n, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_ntile</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ntile_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>ntile_context</name> <operator>*</operator><operator>)</operator>
        <call><name>WinGetPartitionLocalMemory</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ntile_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>ntile</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* first call */</comment>
        <decl_stmt><decl><type><name>int64</name></type>        <name>total</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>        <name>nbuckets</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>total</name> <operator>=</operator> <call><name>WinGetPartitionRowCount</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nbuckets</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>WinGetFuncArgCurrent</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * per spec: If NT is the null value, then the result is the null
         * value.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * per spec: If NT is less than or equal to 0 (zero), then an
         * exception condition is raised.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>nbuckets</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ARGUMENT_FOR_NTILE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"argument of ntile must be greater than zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ntile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rows_per_bucket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name> <operator>=</operator> <name>total</name> <operator>/</operator> <name>nbuckets</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * If the total number is not divisible, add 1 row to leading
             * buckets.
             */</comment>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>remainder</name></name> <operator>=</operator> <name>total</name> <operator>%</operator> <name>nbuckets</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>remainder</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rows_per_bucket</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name> <operator>&lt;</operator> <name><name>context</name><operator>-&gt;</operator><name>rows_per_bucket</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* ntile up */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>remainder</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>ntile</name></name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>remainder</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>remainder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>boundary</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ntile</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>rows_per_bucket</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>ntile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * leadlag_common
 * common operation of lead() and lag()
 * For lead() forward is true, whereas for lag() it is false.
 * withoffset indicates we have an offset second argument.
 * withdefault indicates we have a default third argument.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>leadlag_common</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>forward</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withoffset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withdefault</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>const_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isout</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>withoffset</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>WinGetFuncArgCurrent</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>const_offset</name> <operator>=</operator> <call><name>get_fn_expr_arg_stable</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>const_offset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinGetFuncArgInPartition</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                      <argument><expr><operator>(</operator><ternary><condition><expr><name>forward</name></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><operator>-</operator><name>offset</name></expr></else></ternary><operator>)</operator></expr></argument>,
                                      <argument><expr><name>WINDOW_SEEK_CURRENT</name></expr></argument>,
                                      <argument><expr><name>const_offset</name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>isout</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * target row is out of the partition; supply default value if
         * provided.  otherwise it'll stay NULL
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>withdefault</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinGetFuncArgCurrent</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * lag
 * returns the value of VE evaluated on a row that is 1
 * row before the current row within a partition,
 * per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lag</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lag_with_offset
 * returns the value of VE evaluated on a row that is OFFSET
 * rows before the current row within a partition,
 * per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lag_with_offset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lag_with_offset_and_default
 * same as lag_with_offset but accepts default value
 * as its third argument.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lag_with_offset_and_default</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lead
 * returns the value of VE evaluated on a row that is 1
 * row after the current row within a partition,
 * per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lead</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lead_with_offset
 * returns the value of VE evaluated on a row that is OFFSET
 * number of rows after the current row within a partition,
 * per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lead_with_offset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lead_with_offset_and_default
 * same as lead_with_offset but accepts default value
 * as its third argument.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_lead_with_offset_and_default</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>leadlag_common</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * first_value
 * return the value of VE evaluated on the first row of the
 * window frame, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_first_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinGetFuncArgInFrame</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WINDOW_SEEK_HEAD</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * last_value
 * return the value of VE evaluated on the last row of the
 * window frame, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_last_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinGetFuncArgInFrame</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WINDOW_SEEK_TAIL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * nth_value
 * return the value of VE evaluated on the n-th row from the first
 * row of the window frame, per spec.
 */</comment>
<function><type><name>Datum</name></type>
<name>window_nth_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WindowObject</name></type> <name>winobj</name> <init>= <expr><call><name>PG_WINDOW_OBJECT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>const_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>nth</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>WinGetFuncArgCurrent</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>const_offset</name> <operator>=</operator> <call><name>get_fn_expr_arg_stable</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ARGUMENT_FOR_NTH_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"argument of nth_value must be greater than zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WinGetFuncArgInFrame</name><argument_list>(<argument><expr><name>winobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><name>nth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>WINDOW_SEEK_HEAD</name></expr></argument>, <argument><expr><name>const_offset</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
