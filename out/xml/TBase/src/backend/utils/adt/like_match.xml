<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/like_match.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * like_match.c
 *      LIKE pattern matching internal code.
 *
 * This file is included by like.c four times, to provide matching code for
 * (1) single-byte encodings, (2) UTF8, (3) other multi-byte encodings,
 * and (4) case insensitive matches in single-byte encodings.
 * (UTF8 is a special case because we can use a much more efficient version
 * of NextChar than can be used for general multi-byte encodings.)
 *
 * Before the inclusion, we need to define the following macros:
 *
 * NextChar
 * MatchText - to name of function wanted
 * do_like_escape - name of function if wanted - needs CHAREQ and CopyAdvChar
 * MATCH_LOWER - define for case (4) to specify case folding for 1-byte chars
 *
 * Copyright (c) 1996-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *    src/backend/utils/adt/like_match.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 *    Originally written by Rich $alz, mirror!rs, Wed Nov 26 19:03:17 EST 1986.
 *    Rich $alz is now &lt;rsalz@bbn.com&gt;.
 *    Special thanks to Lars Mathiesen &lt;thorinn@diku.dk&gt; for the LABORT code.
 *
 *    This code was shamelessly stolen from the "pql" code by myself and
 *    slightly modified :)
 *
 *    All references to the word "star" were replaced by "percent"
 *    All references to the word "wild" were replaced by "like"
 *
 *    All the nice shell RE matching stuff was replaced by just "_" and "%"
 *
 *    As I don't have a copy of the SQL standard handy I wasn't sure whether
 *    to leave in the '\' escape character handling.
 *
 *    Keith Parks. &lt;keith@mtcc.demon.co.uk&gt;
 *
 *    SQL lets you specify the escape character by saying
 *    LIKE &lt;pattern&gt; ESCAPE &lt;escape character&gt;. We are a small operation
 *    so we force you to use '\'. - ay 7/95
 *
 *    Now we have the like_escape() function that converts patterns with
 *    any specified escape character (or none at all) to the internal
 *    default escape character, which is still '\'. - tgl 9/2000
 *
 * The code is rewritten to avoid requiring null-terminated strings,
 * which in turn allows us to leave out some memcpy() operations.
 * This code should be faster and take less memory, but no promises...
 * - thomas 2000-08-06
 */</comment>


<comment type="block">/*--------------------
 *    Match text and pattern, return LIKE_TRUE, LIKE_FALSE, or LIKE_ABORT.
 *
 *    LIKE_TRUE: they match
 *    LIKE_FALSE: they don't match
 *    LIKE_ABORT: not only don't they match, but the text is too short.
 *
 * If LIKE_ABORT is returned, then no suffix of the text can match the
 * pattern either, so an upper-level % scan can stop scanning now.
 *--------------------
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATCH_LOWER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETCHAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MATCH_LOWER(t)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETCHAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>MatchText</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plen</name></decl></parameter>,
          <parameter><decl><type><name>pg_locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>locale_is_c</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <comment type="block">/* Fast path for match-everything pattern */</comment>
    <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>LIKE_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Since this function recurses, it could be driven to stack overflow */</comment>
    <expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * In this loop, we advance by char when matching wildcards (and thus on
     * recursive entry to this function we are properly char-synced). On other
     * occasions it is safe to advance by byte, as the text and pattern will
     * be in lockstep. This allows us to perform all comparisons between the
     * text and pattern on a byte by byte basis, even for multi-byte
     * encodings.
     */</comment>
    <while>while <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Next pattern byte must match literally, whatever it is */</comment>
            <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* ... and there had better be one, per SQL standard */</comment>
            <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ESCAPE_SEQUENCE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"LIKE pattern must not end with escape character"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>LIKE_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type>        <name>firstpat</name></decl>;</decl_stmt>

            <comment type="block">/*
             * % processing is essentially a search for a text position at
             * which the remainder of the text matches the remainder of the
             * pattern, using a recursive call to check each potential match.
             *
             * If there are wildcards immediately following the %, we can skip
             * over them first, using the idea that any sequence of N _'s and
             * one or more %'s is equivalent to N _'s and one % (ie, it will
             * match any sequence of at least N text characters).  In this way
             * we will always run the recursive search loop using a pattern
             * fragment that begins with a literal character-to-match, thereby
             * not recursing more than we have to.
             */</comment>
            <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* If not enough text left to match the pattern, ABORT */</comment>
                    <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><name>LIKE_ABORT</name></expr>;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></else></if_stmt>        <comment type="block">/* Reached a non-wildcard pattern char */</comment>
            </block_content>}</block></while>

            <comment type="block">/*
             * If we're at end of pattern, match: we have a trailing % which
             * matches any remaining text string.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>LIKE_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Otherwise, scan for a text position at which we can match the
             * rest of the pattern.  The first remaining pattern char is known
             * to be a regular or escaped literal character, so we can compare
             * the first pattern byte to each text byte to avoid recursing
             * more than we have to.  This fact also guarantees that we don't
             * have to consider a match to the zero-length substring at the
             * end of the text.
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ESCAPE_SEQUENCE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"LIKE pattern must not end with escape character"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>firstpat</name> <operator>=</operator> <call><name>GETCHAR</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>firstpat</name> <operator>=</operator> <call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <while>while <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>firstpat</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type>            <name>matched</name> <init>= <expr><call><name>MatchText</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
                                                    <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>locale_is_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>matched</name> <operator>!=</operator> <name>LIKE_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><name>matched</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* TRUE or ABORT */</comment>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="block">/*
             * End of text with no match, so no point in trying later places
             * to start matching this pattern.
             */</comment>
            <return>return <expr><name>LIKE_ABORT</name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* _ matches any single character, and we know there is one */</comment>
            <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GETCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* non-wildcard pattern char fails to match text char */</comment>
            <return>return <expr><name>LIKE_FALSE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Pattern and text match, so advance.
         *
         * It is safe to use NextByte instead of NextChar here, even for
         * multi-byte character sets, because we are not following immediately
         * after a wildcard character. If we are in the middle of a multibyte
         * character, we must already have matched at least one byte of the
         * character from both text and pattern; so we cannot get out-of-sync
         * on character boundaries.  And we know that no backend-legal
         * encoding allows ASCII characters such as '%' to appear as non-first
         * bytes of characters, so we won't mistakenly detect a new wildcard.
         */</comment>
        <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>LIKE_FALSE</name></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* end of pattern, but not of text */</comment>

    <comment type="block">/*
     * End of text, but perhaps not of pattern.  Match iff the remaining
     * pattern can match a zero-length string, ie, it's zero or more %'s.
     */</comment>
    <while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>NextByte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>LIKE_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * End of text with no match, so no point in trying later places to start
     * matching this pattern.
     */</comment>
    <return>return <expr><name>LIKE_ABORT</name></expr>;</return>
</block_content>}</block></function>                                <comment type="block">/* MatchText() */</comment>

<comment type="block">/*
 * like_escape() --- given a pattern and an ESCAPE string,
 * convert the pattern to use Postgres' standard backslash escape convention.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>do_like_escape</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type>
<name>do_like_escape</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>esc</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>p</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>plen</name></decl>,
                <decl><type ref="prev"/><name>elen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>afterescape</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elen</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Worst-case pattern growth is 2x --- unlikely, but it's hardly worth
     * trying to calculate the size more accurately than that.
     */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>plen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * No escape character is wanted.  Double any backslashes in the
         * pattern to make them act like ordinary characters.
         */</comment>
        <while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>CopyAdvChar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * The specified escape must be only a single character.
         */</comment>
        <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>elen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ESCAPE_SEQUENCE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid escape string"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Escape string must be empty or one character."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If specified escape is '\', just copy the pattern as-is.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Otherwise, convert occurrences of the specified escape character to
         * '\', and double occurrences of '\' --- unless they immediately
         * follow an escape character!
         */</comment>
        <expr_stmt><expr><name>afterescape</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>CHAREQ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>afterescape</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>afterescape</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>afterescape</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>NextChar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>afterescape</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>CopyAdvChar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>afterescape</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* do_like_escape */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHAREQ</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHAREQ</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NextChar</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CopyAdvChar</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MatchText</name></cpp:undef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>do_like_escape</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>do_like_escape</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GETCHAR</name></cpp:undef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATCH_LOWER</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MATCH_LOWER</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
