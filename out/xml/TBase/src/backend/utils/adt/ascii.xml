<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/adt/ascii.c"><comment type="block">/*-----------------------------------------------------------------------
 * ascii.c
 *     The PostgreSQL routine for string to ascii conversion.
 *
 *     Portions Copyright (c) 1999-2017, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *      src/backend/utils/adt/ascii.c
 *
 *-----------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pg_to_ascii</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_end</name></decl></parameter>,
            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type><name>encode_to_ascii</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------
 * to_ascii
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_to_ascii</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ascii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>range</name></decl>;</decl_stmt>

    <comment type="block">/*
     * relevant start for an encoding
     */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_128</name></cpp:macro>    <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_160</name></cpp:macro>    <cpp:value>160</cpp:value></cpp:define>

    <if_stmt><if>if <condition>(<expr><name>enc</name> <operator>==</operator> <name>PG_LATIN1</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * ISO-8859-1 &lt;range: 160 -- 255&gt;
         */</comment>
        <expr_stmt><expr><name>ascii</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"  cL Y  \"Ca  -R     'u .,      ?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>range</name> <operator>=</operator> <name>RANGE_160</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>enc</name> <operator>==</operator> <name>PG_LATIN2</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * ISO-8859-2 &lt;range: 160 -- 255&gt;
         */</comment>
        <expr_stmt><expr><name>ascii</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">" A L LS \"SSTZ-ZZ a,l'ls ,sstz\"zzRAAAALCCCEEEEIIDDNNOOOOxRUUUUYTBraaaalccceeeeiiddnnoooo/ruuuuyt."</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>range</name> <operator>=</operator> <name>RANGE_160</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>enc</name> <operator>==</operator> <name>PG_LATIN9</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * ISO-8859-15 &lt;range: 160 -- 255&gt;
         */</comment>
        <expr_stmt><expr><name>ascii</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"  cL YS sCa  -R     Zu .z   EeY?AAAAAAACEEEEIIII NOOOOOxOUUUUYTBaaaaaaaceeeeiiii nooooo/ouuuuyty"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>range</name> <operator>=</operator> <name>RANGE_160</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>enc</name> <operator>==</operator> <name>PG_WIN1250</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Window CP1250 &lt;range: 128 -- 255&gt;
         */</comment>
        <expr_stmt><expr><name>ascii</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"  ' \"    %S&lt;STZZ `'\"\".--  s&gt;stzz   L A  \"CS  -RZ  ,l'u .,as L\"lzRAAAALCCCEEEEIIDDNNOOOOxRUUUUYTBraaaalccceeeeiiddnnoooo/ruuuuyt "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>range</name> <operator>=</operator> <name>RANGE_128</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"encoding conversion from %s to ASCII not supported"</literal></expr></argument>,
                        <argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>                    <comment type="block">/* keep compiler quiet */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Encode
     */</comment>
    <for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>x</name> <operator>&lt;</operator> <name>range</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>        <comment type="block">/* bogus 128 to 'range' */</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>ascii</name><index>[<expr><operator>*</operator><name>x</name> <operator>-</operator> <name>range</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ----------
 * encode text
 *
 * The text datum is overwritten in-place, therefore this coding method
 * cannot support conversions that change the string length!
 * ----------
 */</comment>
<function><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type>
<name>encode_to_ascii</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pg_to_ascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,    <comment type="block">/* src */</comment>
                <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name><operator>)</operator> <operator>+</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,    <comment type="block">/* src end */</comment>
                <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,    <comment type="block">/* dest */</comment>
                <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block">/* encoding */</comment>

    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------
 * convert to ASCII - enc is set as 'name' arg.
 * ----------
 */</comment>
<function><type><name>Datum</name></type>
<name>to_ascii_encname</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>PG_GETARG_TEXT_P_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>encname</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>enc</name> <init>= <expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>encname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>enc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s is not a valid encoding name"</literal></expr></argument>, <argument><expr><name>encname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>encode_to_ascii</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------
 * convert to ASCII - enc is set as int4
 * ----------
 */</comment>
<function><type><name>Datum</name></type>
<name>to_ascii_enc</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>PG_GETARG_TEXT_P_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>enc</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%d is not a valid encoding code"</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>encode_to_ascii</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------
 * convert to ASCII - current enc is DatabaseEncoding
 * ----------
 */</comment>
<function><type><name>Datum</name></type>
<name>to_ascii_default</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>PG_GETARG_TEXT_P_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>enc</name> <init>= <expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>encode_to_ascii</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------
 * Copy a string in an arbitrary backend-safe encoding, converting it to a
 * valid ASCII string by replacing non-ASCII bytes with '?'.  Otherwise the
 * behavior is identical to strlcpy(), except that we don't bother with a
 * return value.
 *
 * This must not trigger ereport(ERROR), as it is called in postmaster.
 * ----------
 */</comment>
<function><type><name>void</name></type>
<name>ascii_safe_strlcpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>destsiz</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>destsiz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>            <comment type="block">/* corner case: no room for trailing nul */</comment>
        <return>return;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><operator>--</operator><name>destsiz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* use unsigned char here to avoid compiler warning */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <comment type="block">/* Keep printable ASCII characters */</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">32</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if>
        <comment type="block">/* White-space is also OK */</comment>
        <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if>
        <comment type="block">/* Everything else is replaced with '?' */</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
