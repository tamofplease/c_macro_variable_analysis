<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/misc/rls.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * rls.c
 *          RLS-related utility functions.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *          src/backend/utils/misc/rls.c
 *
 *-------------------------------------------------------------------------
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>


<comment type="block">/*
 * check_enable_rls
 *
 * Determine, based on the relation, row_security setting, and current role,
 * if RLS is applicable to this query.  RLS_NONE_ENV indicates that, while
 * RLS is not to be added for this query, a change in the environment may change
 * that.  RLS_NONE means that RLS is not on the relation at all and therefore
 * we don't need to worry about it.  RLS_ENABLED means RLS should be implemented
 * for the table and the plan cache needs to be invalidated if the environment
 * changes.
 *
 * Handle checking as another role via checkAsUser (for views, etc).  Pass
 * InvalidOid to check the current user.
 *
 * If noError is set to 'true' then we just return RLS_ENABLED instead of doing
 * an ereport() if the user has attempted to bypass RLS and they are not
 * allowed to.  This allows users to check if RLS is enabled without having to
 * deal with the actual error case (eg: error cases which are trying to decide
 * if the user should get data from the relation back as part of the error).
 */</comment>
<function><type><name>int</name></type>
<name>check_enable_rls</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>checkAsUser</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>user_id</name> <init>= <expr><ternary><condition><expr><name>checkAsUser</name></expr> ?</condition><then> <expr><name>checkAsUser</name></expr> </then><else>: <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_class</name></type> <name>classform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>relrowsecurity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>relforcerowsecurity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>amowner</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do for built-in relations */</comment>
    <if_stmt><if>if <condition>(<expr><name>relid</name> <operator>&lt;</operator> <operator>(</operator><name>Oid</name><operator>)</operator> <name>FirstNormalObjectId</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RLS_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Fetch relation's relrowsecurity and relforcerowsecurity flags */</comment>
    <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RLS_NONE</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>classform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>relrowsecurity</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>relrowsecurity</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>relforcerowsecurity</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>relforcerowsecurity</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Nothing to do if the relation does not have RLS */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>relrowsecurity</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RLS_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * BYPASSRLS users always bypass RLS.  Note that superusers are always
     * considered to have BYPASSRLS.
     *
     * Return RLS_NONE_ENV to indicate that this decision depends on the
     * environment (in this case, the user_id).
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>has_bypassrls_privilege</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>RLS_NONE_ENV</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Table owners generally bypass RLS, except if the table has been set (by
     * an owner) to FORCE ROW SECURITY, and this is not a referential
     * integrity check.
     *
     * Return RLS_NONE_ENV to indicate that this decision depends on the
     * environment (in this case, the user_id).
     */</comment>
    <expr_stmt><expr><name>amowner</name> <operator>=</operator> <call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>amowner</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * If FORCE ROW LEVEL SECURITY has been set on the relation then we
         * should return RLS_ENABLED to indicate that RLS should be applied.
         * If not, or if we are in an InNoForceRLSOperation context, we return
         * RLS_NONE_ENV.
         *
         * InNoForceRLSOperation indicates that we should not apply RLS even
         * if the table has FORCE RLS set - IF the current user is the owner.
         * This is specifically to ensure that referential integrity checks
         * are able to still run correctly.
         *
         * This is intentionally only done after we have checked that the user
         * is the table owner, which should always be the case for referential
         * integrity checks.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>relforcerowsecurity</name> <operator>||</operator> <call><name>InNoForceRLSOperation</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>RLS_NONE_ENV</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * We should apply RLS.  However, the user may turn off the row_security
     * GUC to get a forced error instead.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>row_security</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"query would be affected by row-level security policy for table \"%s\""</literal></expr></argument>,
                        <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <ternary><condition><expr><name>amowner</name></expr> ?</condition><then> <expr><call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To disable the policy for the table's owner, use ALTER TABLE NO FORCE ROW LEVEL SECURITY."</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* RLS should be fully enabled for this relation. */</comment>
    <return>return <expr><name>RLS_ENABLED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * row_security_active
 *
 * check_enable_rls wrapped as a SQL callable function except
 * RLS_NONE_ENV and RLS_NONE are the same for this purpose.
 */</comment>
<function><type><name>Datum</name></type>
<name>row_security_active</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* By OID */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>tableoid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>rls_status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rls_status</name> <operator>=</operator> <call><name>check_enable_rls</name><argument_list>(<argument><expr><name>tableoid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>rls_status</name> <operator>==</operator> <name>RLS_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>row_security_active_name</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* By qualified name */</comment>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>tablename</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RangeVar</name>   <modifier>*</modifier></type><name>tablerel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>tableoid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>rls_status</name></decl>;</decl_stmt>

    <comment type="block">/* Look up table name.  Can't lock it - we might not have privileges. */</comment>
    <expr_stmt><expr><name>tablerel</name> <operator>=</operator> <call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><call><name>textToQualifiedNameList</name><argument_list>(<argument><expr><name>tablename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tableoid</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>tablerel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rls_status</name> <operator>=</operator> <call><name>check_enable_rls</name><argument_list>(<argument><expr><name>tableoid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>rls_status</name> <operator>==</operator> <name>RLS_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
